
ece198.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800cca8  0800cca8  0001cca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1ec  0800d1ec  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1ec  0800d1ec  0001d1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1f4  0800d1f4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1f4  0800d1f4  0001d1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1f8  0800d1f8  0001d1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800d1fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ad0  20000208  0800d400  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004cd8  0800d400  00024cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197e2  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000385f  00000000  00000000  00039a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  0003d278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a0  00000000  00000000  0003e988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4ab  00000000  00000000  0003ff28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001946b  00000000  00000000  0005a3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5d25  00000000  00000000  0007383e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119563  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007708  00000000  00000000  001195b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cc90 	.word	0x0800cc90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	0800cc90 	.word	0x0800cc90

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9f5 	b.w	80010a4 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9aa 	b.w	80010a4 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	4604      	mov	r4, r0
 8000ddc:	468e      	mov	lr, r1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d14d      	bne.n	8000e7e <__udivmoddi4+0xaa>
 8000de2:	428a      	cmp	r2, r1
 8000de4:	4694      	mov	ip, r2
 8000de6:	d969      	bls.n	8000ebc <__udivmoddi4+0xe8>
 8000de8:	fab2 f282 	clz	r2, r2
 8000dec:	b152      	cbz	r2, 8000e04 <__udivmoddi4+0x30>
 8000dee:	fa01 f302 	lsl.w	r3, r1, r2
 8000df2:	f1c2 0120 	rsb	r1, r2, #32
 8000df6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000e02:	4094      	lsls	r4, r2
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	0c21      	lsrs	r1, r4, #16
 8000e0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e0e:	fa1f f78c 	uxth.w	r7, ip
 8000e12:	fb08 e316 	mls	r3, r8, r6, lr
 8000e16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1a:	fb06 f107 	mul.w	r1, r6, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x64>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2a:	f080 811f 	bcs.w	800106c <__udivmoddi4+0x298>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 811c 	bls.w	800106c <__udivmoddi4+0x298>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb00 f707 	mul.w	r7, r0, r7
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	d90a      	bls.n	8000e66 <__udivmoddi4+0x92>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	f080 810a 	bcs.w	8001070 <__udivmoddi4+0x29c>
 8000e5c:	42a7      	cmp	r7, r4
 8000e5e:	f240 8107 	bls.w	8001070 <__udivmoddi4+0x29c>
 8000e62:	4464      	add	r4, ip
 8000e64:	3802      	subs	r0, #2
 8000e66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6a:	1be4      	subs	r4, r4, r7
 8000e6c:	2600      	movs	r6, #0
 8000e6e:	b11d      	cbz	r5, 8000e78 <__udivmoddi4+0xa4>
 8000e70:	40d4      	lsrs	r4, r2
 8000e72:	2300      	movs	r3, #0
 8000e74:	e9c5 4300 	strd	r4, r3, [r5]
 8000e78:	4631      	mov	r1, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d909      	bls.n	8000e96 <__udivmoddi4+0xc2>
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	f000 80ef 	beq.w	8001066 <__udivmoddi4+0x292>
 8000e88:	2600      	movs	r6, #0
 8000e8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8e:	4630      	mov	r0, r6
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	fab3 f683 	clz	r6, r3
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d14a      	bne.n	8000f34 <__udivmoddi4+0x160>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0xd4>
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	f200 80f9 	bhi.w	800109a <__udivmoddi4+0x2c6>
 8000ea8:	1a84      	subs	r4, r0, r2
 8000eaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	469e      	mov	lr, r3
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d0e0      	beq.n	8000e78 <__udivmoddi4+0xa4>
 8000eb6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eba:	e7dd      	b.n	8000e78 <__udivmoddi4+0xa4>
 8000ebc:	b902      	cbnz	r2, 8000ec0 <__udivmoddi4+0xec>
 8000ebe:	deff      	udf	#255	; 0xff
 8000ec0:	fab2 f282 	clz	r2, r2
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	f040 8092 	bne.w	8000fee <__udivmoddi4+0x21a>
 8000eca:	eba1 010c 	sub.w	r1, r1, ip
 8000ece:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	2601      	movs	r6, #1
 8000ed8:	0c20      	lsrs	r0, r4, #16
 8000eda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ede:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee6:	fb0e f003 	mul.w	r0, lr, r3
 8000eea:	4288      	cmp	r0, r1
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x12c>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x12a>
 8000ef8:	4288      	cmp	r0, r1
 8000efa:	f200 80cb 	bhi.w	8001094 <__udivmoddi4+0x2c0>
 8000efe:	4643      	mov	r3, r8
 8000f00:	1a09      	subs	r1, r1, r0
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1110 	mls	r1, r7, r0, r1
 8000f0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f10:	fb0e fe00 	mul.w	lr, lr, r0
 8000f14:	45a6      	cmp	lr, r4
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x156>
 8000f18:	eb1c 0404 	adds.w	r4, ip, r4
 8000f1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f20:	d202      	bcs.n	8000f28 <__udivmoddi4+0x154>
 8000f22:	45a6      	cmp	lr, r4
 8000f24:	f200 80bb 	bhi.w	800109e <__udivmoddi4+0x2ca>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	eba4 040e 	sub.w	r4, r4, lr
 8000f2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f32:	e79c      	b.n	8000e6e <__udivmoddi4+0x9a>
 8000f34:	f1c6 0720 	rsb	r7, r6, #32
 8000f38:	40b3      	lsls	r3, r6
 8000f3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f42:	fa20 f407 	lsr.w	r4, r0, r7
 8000f46:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	40f9      	lsrs	r1, r7
 8000f4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f52:	fa00 f306 	lsl.w	r3, r0, r6
 8000f56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5a:	0c20      	lsrs	r0, r4, #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fb09 1118 	mls	r1, r9, r8, r1
 8000f64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f68:	fb08 f00e 	mul.w	r0, r8, lr
 8000f6c:	4288      	cmp	r0, r1
 8000f6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f72:	d90b      	bls.n	8000f8c <__udivmoddi4+0x1b8>
 8000f74:	eb1c 0101 	adds.w	r1, ip, r1
 8000f78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f7c:	f080 8088 	bcs.w	8001090 <__udivmoddi4+0x2bc>
 8000f80:	4288      	cmp	r0, r1
 8000f82:	f240 8085 	bls.w	8001090 <__udivmoddi4+0x2bc>
 8000f86:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1a09      	subs	r1, r1, r0
 8000f8e:	b2a4      	uxth	r4, r4
 8000f90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f94:	fb09 1110 	mls	r1, r9, r0, r1
 8000f98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa0:	458e      	cmp	lr, r1
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x1e2>
 8000fa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fac:	d26c      	bcs.n	8001088 <__udivmoddi4+0x2b4>
 8000fae:	458e      	cmp	lr, r1
 8000fb0:	d96a      	bls.n	8001088 <__udivmoddi4+0x2b4>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	4461      	add	r1, ip
 8000fb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fba:	fba0 9402 	umull	r9, r4, r0, r2
 8000fbe:	eba1 010e 	sub.w	r1, r1, lr
 8000fc2:	42a1      	cmp	r1, r4
 8000fc4:	46c8      	mov	r8, r9
 8000fc6:	46a6      	mov	lr, r4
 8000fc8:	d356      	bcc.n	8001078 <__udivmoddi4+0x2a4>
 8000fca:	d053      	beq.n	8001074 <__udivmoddi4+0x2a0>
 8000fcc:	b15d      	cbz	r5, 8000fe6 <__udivmoddi4+0x212>
 8000fce:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fda:	fa22 f306 	lsr.w	r3, r2, r6
 8000fde:	40f1      	lsrs	r1, r6
 8000fe0:	431f      	orrs	r7, r3
 8000fe2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fe6:	2600      	movs	r6, #0
 8000fe8:	4631      	mov	r1, r6
 8000fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fee:	f1c2 0320 	rsb	r3, r2, #32
 8000ff2:	40d8      	lsrs	r0, r3
 8000ff4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff8:	fa21 f303 	lsr.w	r3, r1, r3
 8000ffc:	4091      	lsls	r1, r2
 8000ffe:	4301      	orrs	r1, r0
 8001000:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001004:	fa1f fe8c 	uxth.w	lr, ip
 8001008:	fbb3 f0f7 	udiv	r0, r3, r7
 800100c:	fb07 3610 	mls	r6, r7, r0, r3
 8001010:	0c0b      	lsrs	r3, r1, #16
 8001012:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001016:	fb00 f60e 	mul.w	r6, r0, lr
 800101a:	429e      	cmp	r6, r3
 800101c:	fa04 f402 	lsl.w	r4, r4, r2
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x260>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f100 38ff 	add.w	r8, r0, #4294967295
 800102a:	d22f      	bcs.n	800108c <__udivmoddi4+0x2b8>
 800102c:	429e      	cmp	r6, r3
 800102e:	d92d      	bls.n	800108c <__udivmoddi4+0x2b8>
 8001030:	3802      	subs	r0, #2
 8001032:	4463      	add	r3, ip
 8001034:	1b9b      	subs	r3, r3, r6
 8001036:	b289      	uxth	r1, r1
 8001038:	fbb3 f6f7 	udiv	r6, r3, r7
 800103c:	fb07 3316 	mls	r3, r7, r6, r3
 8001040:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001044:	fb06 f30e 	mul.w	r3, r6, lr
 8001048:	428b      	cmp	r3, r1
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x28a>
 800104c:	eb1c 0101 	adds.w	r1, ip, r1
 8001050:	f106 38ff 	add.w	r8, r6, #4294967295
 8001054:	d216      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001056:	428b      	cmp	r3, r1
 8001058:	d914      	bls.n	8001084 <__udivmoddi4+0x2b0>
 800105a:	3e02      	subs	r6, #2
 800105c:	4461      	add	r1, ip
 800105e:	1ac9      	subs	r1, r1, r3
 8001060:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001064:	e738      	b.n	8000ed8 <__udivmoddi4+0x104>
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e705      	b.n	8000e78 <__udivmoddi4+0xa4>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e3      	b.n	8000e38 <__udivmoddi4+0x64>
 8001070:	4618      	mov	r0, r3
 8001072:	e6f8      	b.n	8000e66 <__udivmoddi4+0x92>
 8001074:	454b      	cmp	r3, r9
 8001076:	d2a9      	bcs.n	8000fcc <__udivmoddi4+0x1f8>
 8001078:	ebb9 0802 	subs.w	r8, r9, r2
 800107c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001080:	3801      	subs	r0, #1
 8001082:	e7a3      	b.n	8000fcc <__udivmoddi4+0x1f8>
 8001084:	4646      	mov	r6, r8
 8001086:	e7ea      	b.n	800105e <__udivmoddi4+0x28a>
 8001088:	4620      	mov	r0, r4
 800108a:	e794      	b.n	8000fb6 <__udivmoddi4+0x1e2>
 800108c:	4640      	mov	r0, r8
 800108e:	e7d1      	b.n	8001034 <__udivmoddi4+0x260>
 8001090:	46d0      	mov	r8, sl
 8001092:	e77b      	b.n	8000f8c <__udivmoddi4+0x1b8>
 8001094:	3b02      	subs	r3, #2
 8001096:	4461      	add	r1, ip
 8001098:	e732      	b.n	8000f00 <__udivmoddi4+0x12c>
 800109a:	4630      	mov	r0, r6
 800109c:	e709      	b.n	8000eb2 <__udivmoddi4+0xde>
 800109e:	4464      	add	r4, ip
 80010a0:	3802      	subs	r0, #2
 80010a2:	e742      	b.n	8000f2a <__udivmoddi4+0x156>

080010a4 <__aeabi_idiv0>:
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2319      	movs	r3, #25
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	463b      	mov	r3, r7
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2301      	movs	r3, #1
 80010be:	2288      	movs	r2, #136	; 0x88
 80010c0:	21ec      	movs	r1, #236	; 0xec
 80010c2:	4857      	ldr	r0, [pc, #348]	; (8001220 <TrimRead+0x178>)
 80010c4:	f002 fe62 	bl	8003d8c <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010c8:	463b      	mov	r3, r7
 80010ca:	3319      	adds	r3, #25
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	9202      	str	r2, [sp, #8]
 80010d2:	2207      	movs	r2, #7
 80010d4:	9201      	str	r2, [sp, #4]
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	22e1      	movs	r2, #225	; 0xe1
 80010dc:	21ec      	movs	r1, #236	; 0xec
 80010de:	4850      	ldr	r0, [pc, #320]	; (8001220 <TrimRead+0x178>)
 80010e0:	f002 fe54 	bl	8003d8c <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	783b      	ldrb	r3, [r7, #0]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <TrimRead+0x17c>)
 80010f6:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b48      	ldr	r3, [pc, #288]	; (8001228 <TrimRead+0x180>)
 8001108:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800110a:	797b      	ldrb	r3, [r7, #5]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	b21b      	sxth	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b21a      	sxth	r2, r3
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <TrimRead+0x184>)
 800111a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	797b      	ldrb	r3, [r7, #5]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21b      	sxth	r3, r3
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b40      	ldr	r3, [pc, #256]	; (8001230 <TrimRead+0x188>)
 800112e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001130:	7a7b      	ldrb	r3, [r7, #9]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21a      	sxth	r2, r3
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <TrimRead+0x18c>)
 8001140:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001142:	7afb      	ldrb	r3, [r7, #11]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	7abb      	ldrb	r3, [r7, #10]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b39      	ldr	r3, [pc, #228]	; (8001238 <TrimRead+0x190>)
 8001152:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001154:	7b7b      	ldrb	r3, [r7, #13]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	7b3b      	ldrb	r3, [r7, #12]
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <TrimRead+0x194>)
 8001164:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b21a      	sxth	r2, r3
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b32      	ldr	r3, [pc, #200]	; (8001240 <TrimRead+0x198>)
 8001176:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001178:	7c7b      	ldrb	r3, [r7, #17]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b21a      	sxth	r2, r3
 800117e:	7c3b      	ldrb	r3, [r7, #16]
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21a      	sxth	r2, r3
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <TrimRead+0x19c>)
 8001188:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 800118a:	7cfb      	ldrb	r3, [r7, #19]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21a      	sxth	r2, r3
 8001190:	7cbb      	ldrb	r3, [r7, #18]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21a      	sxth	r2, r3
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <TrimRead+0x1a0>)
 800119a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 800119c:	7d7b      	ldrb	r3, [r7, #21]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7d3b      	ldrb	r3, [r7, #20]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <TrimRead+0x1a4>)
 80011ac:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	7dbb      	ldrb	r3, [r7, #22]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <TrimRead+0x1a8>)
 80011be:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011c0:	7e3b      	ldrb	r3, [r7, #24]
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <TrimRead+0x1ac>)
 80011c6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011c8:	7ebb      	ldrb	r3, [r7, #26]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	7e7b      	ldrb	r3, [r7, #25]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <TrimRead+0x1b0>)
 80011d8:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80011da:	7efb      	ldrb	r3, [r7, #27]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <TrimRead+0x1b4>)
 80011e0:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80011e2:	7f3b      	ldrb	r3, [r7, #28]
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	7f7b      	ldrb	r3, [r7, #29]
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <TrimRead+0x1b8>)
 80011f8:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80011fa:	7fbb      	ldrb	r3, [r7, #30]
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	b21a      	sxth	r2, r3
 8001200:	7f7b      	ldrb	r3, [r7, #29]
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	b2db      	uxtb	r3, r3
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <TrimRead+0x1bc>)
 800120e:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001210:	7ffb      	ldrb	r3, [r7, #31]
 8001212:	b21a      	sxth	r2, r3
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <TrimRead+0x1c0>)
 8001216:	801a      	strh	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200002a4 	.word	0x200002a4
 8001224:	20000234 	.word	0x20000234
 8001228:	2000023c 	.word	0x2000023c
 800122c:	2000023e 	.word	0x2000023e
 8001230:	20000236 	.word	0x20000236
 8001234:	20000240 	.word	0x20000240
 8001238:	20000242 	.word	0x20000242
 800123c:	20000244 	.word	0x20000244
 8001240:	20000246 	.word	0x20000246
 8001244:	20000248 	.word	0x20000248
 8001248:	2000024a 	.word	0x2000024a
 800124c:	2000024c 	.word	0x2000024c
 8001250:	2000024e 	.word	0x2000024e
 8001254:	20000238 	.word	0x20000238
 8001258:	20000250 	.word	0x20000250
 800125c:	2000023a 	.word	0x2000023a
 8001260:	20000252 	.word	0x20000252
 8001264:	20000254 	.word	0x20000254
 8001268:	20000256 	.word	0x20000256

0800126c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af04      	add	r7, sp, #16
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	4611      	mov	r1, r2
 8001278:	461a      	mov	r2, r3
 800127a:	4623      	mov	r3, r4
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	4603      	mov	r3, r0
 8001280:	71bb      	strb	r3, [r7, #6]
 8001282:	460b      	mov	r3, r1
 8001284:	717b      	strb	r3, [r7, #5]
 8001286:	4613      	mov	r3, r2
 8001288:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 800128a:	f7ff ff0d 	bl	80010a8 <TrimRead>


	uint8_t datatowrite = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001296:	23b6      	movs	r3, #182	; 0xb6
 8001298:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 030f 	add.w	r3, r7, #15
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	22e0      	movs	r2, #224	; 0xe0
 80012ae:	21ec      	movs	r1, #236	; 0xec
 80012b0:	4858      	ldr	r0, [pc, #352]	; (8001414 <BME280_Config+0x1a8>)
 80012b2:	f002 fc71 	bl	8003b98 <HAL_I2C_Mem_Write>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <BME280_Config+0x56>
	{
		return -1;
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	e0a3      	b.n	800140a <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80012c2:	2064      	movs	r0, #100	; 0x64
 80012c4:	f001 fb88 	bl	80029d8 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80012c8:	797b      	ldrb	r3, [r7, #5]
 80012ca:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d0:	9302      	str	r3, [sp, #8]
 80012d2:	2301      	movs	r3, #1
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	f107 030f 	add.w	r3, r7, #15
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2301      	movs	r3, #1
 80012de:	22f2      	movs	r2, #242	; 0xf2
 80012e0:	21ec      	movs	r1, #236	; 0xec
 80012e2:	484c      	ldr	r0, [pc, #304]	; (8001414 <BME280_Config+0x1a8>)
 80012e4:	f002 fc58 	bl	8003b98 <HAL_I2C_Mem_Write>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <BME280_Config+0x88>
	{
		return -1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e08a      	b.n	800140a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012f4:	2064      	movs	r0, #100	; 0x64
 80012f6:	f001 fb6f 	bl	80029d8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	f107 030e 	add.w	r3, r7, #14
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	22f2      	movs	r2, #242	; 0xf2
 800130e:	21ec      	movs	r1, #236	; 0xec
 8001310:	4840      	ldr	r0, [pc, #256]	; (8001414 <BME280_Config+0x1a8>)
 8001312:	f002 fd3b 	bl	8003d8c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001316:	7bba      	ldrb	r2, [r7, #14]
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	429a      	cmp	r2, r3
 800131c:	d002      	beq.n	8001324 <BME280_Config+0xb8>
	{
		return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e072      	b.n	800140a <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001324:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001328:	015b      	lsls	r3, r3, #5
 800132a:	b25a      	sxtb	r2, r3
 800132c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	b25b      	sxtb	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b25b      	sxtb	r3, r3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800133c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f107 030f 	add.w	r3, r7, #15
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	22f5      	movs	r2, #245	; 0xf5
 8001350:	21ec      	movs	r1, #236	; 0xec
 8001352:	4830      	ldr	r0, [pc, #192]	; (8001414 <BME280_Config+0x1a8>)
 8001354:	f002 fc20 	bl	8003b98 <HAL_I2C_Mem_Write>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d002      	beq.n	8001364 <BME280_Config+0xf8>
	{
		return -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e052      	b.n	800140a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001364:	2064      	movs	r0, #100	; 0x64
 8001366:	f001 fb37 	bl	80029d8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	2301      	movs	r3, #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	f107 030e 	add.w	r3, r7, #14
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	22f5      	movs	r2, #245	; 0xf5
 800137e:	21ec      	movs	r1, #236	; 0xec
 8001380:	4824      	ldr	r0, [pc, #144]	; (8001414 <BME280_Config+0x1a8>)
 8001382:	f002 fd03 	bl	8003d8c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001386:	7bba      	ldrb	r2, [r7, #14]
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	429a      	cmp	r2, r3
 800138c:	d002      	beq.n	8001394 <BME280_Config+0x128>
	{
		return -1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	e03a      	b.n	800140a <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	015b      	lsls	r3, r3, #5
 8001398:	b25a      	sxtb	r2, r3
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b25a      	sxtb	r2, r3
 80013a4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	2301      	movs	r3, #1
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	f107 030f 	add.w	r3, r7, #15
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2301      	movs	r3, #1
 80013c2:	22f4      	movs	r2, #244	; 0xf4
 80013c4:	21ec      	movs	r1, #236	; 0xec
 80013c6:	4813      	ldr	r0, [pc, #76]	; (8001414 <BME280_Config+0x1a8>)
 80013c8:	f002 fbe6 	bl	8003b98 <HAL_I2C_Mem_Write>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <BME280_Config+0x16c>
	{
		return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e018      	b.n	800140a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013d8:	2064      	movs	r0, #100	; 0x64
 80013da:	f001 fafd 	bl	80029d8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2301      	movs	r3, #1
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	f107 030e 	add.w	r3, r7, #14
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	22f4      	movs	r2, #244	; 0xf4
 80013f2:	21ec      	movs	r1, #236	; 0xec
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <BME280_Config+0x1a8>)
 80013f6:	f002 fcc9 	bl	8003d8c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013fa:	7bba      	ldrb	r2, [r7, #14]
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d002      	beq.n	8001408 <BME280_Config+0x19c>
	{
		return -1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e000      	b.n	800140a <BME280_Config+0x19e>
	}

	return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	bf00      	nop
 8001414:	200002a4 	.word	0x200002a4

08001418 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	2301      	movs	r3, #1
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <BMEReadRaw+0x8c>)
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2301      	movs	r3, #1
 800142e:	22d0      	movs	r2, #208	; 0xd0
 8001430:	21ec      	movs	r1, #236	; 0xec
 8001432:	481d      	ldr	r0, [pc, #116]	; (80014a8 <BMEReadRaw+0x90>)
 8001434:	f002 fcaa 	bl	8003d8c <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <BMEReadRaw+0x8c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b60      	cmp	r3, #96	; 0x60
 800143e:	d12a      	bne.n	8001496 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	2308      	movs	r3, #8
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	463b      	mov	r3, r7
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	22f7      	movs	r2, #247	; 0xf7
 8001452:	21ec      	movs	r1, #236	; 0xec
 8001454:	4814      	ldr	r0, [pc, #80]	; (80014a8 <BMEReadRaw+0x90>)
 8001456:	f002 fc99 	bl	8003d8c <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800145a:	783b      	ldrb	r3, [r7, #0]
 800145c:	031a      	lsls	r2, r3, #12
 800145e:	787b      	ldrb	r3, [r7, #1]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4313      	orrs	r3, r2
 8001464:	78ba      	ldrb	r2, [r7, #2]
 8001466:	0912      	lsrs	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	4313      	orrs	r3, r2
 800146c:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <BMEReadRaw+0x94>)
 800146e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	031a      	lsls	r2, r3, #12
 8001474:	793b      	ldrb	r3, [r7, #4]
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	4313      	orrs	r3, r2
 800147a:	797a      	ldrb	r2, [r7, #5]
 800147c:	0912      	lsrs	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	4313      	orrs	r3, r2
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <BMEReadRaw+0x98>)
 8001484:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	4313      	orrs	r3, r2
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <BMEReadRaw+0x9c>)
 8001490:	6013      	str	r3, [r2, #0]

		return 0;
 8001492:	2300      	movs	r3, #0
 8001494:	e001      	b.n	800149a <BMEReadRaw+0x82>
	}

	else return -1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000224 	.word	0x20000224
 80014a8:	200002a4 	.word	0x200002a4
 80014ac:	2000022c 	.word	0x2000022c
 80014b0:	20000228 	.word	0x20000228
 80014b4:	20000230 	.word	0x20000230

080014b8 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	10da      	asrs	r2, r3, #3
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <BME280_compensate_T_int32+0x74>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	4a18      	ldr	r2, [pc, #96]	; (8001530 <BME280_compensate_T_int32+0x78>)
 80014ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	12db      	asrs	r3, r3, #11
 80014d8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	111b      	asrs	r3, r3, #4
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <BME280_compensate_T_int32+0x74>)
 80014e0:	8812      	ldrh	r2, [r2, #0]
 80014e2:	1a9b      	subs	r3, r3, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	1112      	asrs	r2, r2, #4
 80014e8:	4910      	ldr	r1, [pc, #64]	; (800152c <BME280_compensate_T_int32+0x74>)
 80014ea:	8809      	ldrh	r1, [r1, #0]
 80014ec:	1a52      	subs	r2, r2, r1
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	131b      	asrs	r3, r3, #12
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <BME280_compensate_T_int32+0x7c>)
 80014f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	139b      	asrs	r3, r3, #14
 8001500:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4413      	add	r3, r2
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <BME280_compensate_T_int32+0x80>)
 800150a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <BME280_compensate_T_int32+0x80>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	3380      	adds	r3, #128	; 0x80
 8001518:	121b      	asrs	r3, r3, #8
 800151a:	60fb      	str	r3, [r7, #12]
	return T;
 800151c:	68fb      	ldr	r3, [r7, #12]
}
 800151e:	4618      	mov	r0, r3
 8001520:	371c      	adds	r7, #28
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000234 	.word	0x20000234
 8001530:	2000023c 	.word	0x2000023c
 8001534:	2000023e 	.word	0x2000023e
 8001538:	20000258 	.word	0x20000258

0800153c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800153c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001540:	b0ca      	sub	sp, #296	; 0x128
 8001542:	af00      	add	r7, sp, #0
 8001544:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001548:	4baf      	ldr	r3, [pc, #700]	; (8001808 <BME280_compensate_P_int64+0x2cc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	17da      	asrs	r2, r3, #31
 800154e:	461c      	mov	r4, r3
 8001550:	4615      	mov	r5, r2
 8001552:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001556:	f145 3bff 	adc.w	fp, r5, #4294967295
 800155a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800155e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001562:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001566:	fb03 f102 	mul.w	r1, r3, r2
 800156a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800156e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	18ca      	adds	r2, r1, r3
 8001578:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800157c:	fba3 8903 	umull	r8, r9, r3, r3
 8001580:	eb02 0309 	add.w	r3, r2, r9
 8001584:	4699      	mov	r9, r3
 8001586:	4ba1      	ldr	r3, [pc, #644]	; (800180c <BME280_compensate_P_int64+0x2d0>)
 8001588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158c:	b21b      	sxth	r3, r3
 800158e:	17da      	asrs	r2, r3, #31
 8001590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001594:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001598:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800159c:	4603      	mov	r3, r0
 800159e:	fb03 f209 	mul.w	r2, r3, r9
 80015a2:	460b      	mov	r3, r1
 80015a4:	fb08 f303 	mul.w	r3, r8, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	4602      	mov	r2, r0
 80015ac:	fba8 1202 	umull	r1, r2, r8, r2
 80015b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015b4:	460a      	mov	r2, r1
 80015b6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015be:	4413      	add	r3, r2
 80015c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015c4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015c8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015cc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015d0:	4b8f      	ldr	r3, [pc, #572]	; (8001810 <BME280_compensate_P_int64+0x2d4>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	17da      	asrs	r2, r3, #31
 80015da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015de:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80015e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015e6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80015ea:	462a      	mov	r2, r5
 80015ec:	fb02 f203 	mul.w	r2, r2, r3
 80015f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015f4:	4621      	mov	r1, r4
 80015f6:	fb01 f303 	mul.w	r3, r1, r3
 80015fa:	441a      	add	r2, r3
 80015fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001600:	4621      	mov	r1, r4
 8001602:	fba3 1301 	umull	r1, r3, r3, r1
 8001606:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800160a:	460b      	mov	r3, r1
 800160c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001614:	18d3      	adds	r3, r2, r3
 8001616:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800161a:	f04f 0000 	mov.w	r0, #0
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001626:	462b      	mov	r3, r5
 8001628:	0459      	lsls	r1, r3, #17
 800162a:	4623      	mov	r3, r4
 800162c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001630:	4623      	mov	r3, r4
 8001632:	0458      	lsls	r0, r3, #17
 8001634:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001638:	1814      	adds	r4, r2, r0
 800163a:	643c      	str	r4, [r7, #64]	; 0x40
 800163c:	414b      	adcs	r3, r1
 800163e:	647b      	str	r3, [r7, #68]	; 0x44
 8001640:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001644:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001648:	4b72      	ldr	r3, [pc, #456]	; (8001814 <BME280_compensate_P_int64+0x2d8>)
 800164a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164e:	b21b      	sxth	r3, r3
 8001650:	17da      	asrs	r2, r3, #31
 8001652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001656:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800165a:	f04f 0000 	mov.w	r0, #0
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001666:	00d9      	lsls	r1, r3, #3
 8001668:	2000      	movs	r0, #0
 800166a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800166e:	1814      	adds	r4, r2, r0
 8001670:	63bc      	str	r4, [r7, #56]	; 0x38
 8001672:	414b      	adcs	r3, r1
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001676:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800167a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800167e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001682:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001686:	fb03 f102 	mul.w	r1, r3, r2
 800168a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800168e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	18ca      	adds	r2, r1, r3
 8001698:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800169c:	fba3 1303 	umull	r1, r3, r3, r3
 80016a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016a4:	460b      	mov	r3, r1
 80016a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80016aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016ae:	18d3      	adds	r3, r2, r3
 80016b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016b4:	4b58      	ldr	r3, [pc, #352]	; (8001818 <BME280_compensate_P_int64+0x2dc>)
 80016b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	17da      	asrs	r2, r3, #31
 80016be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016c6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016ca:	462b      	mov	r3, r5
 80016cc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016d0:	4642      	mov	r2, r8
 80016d2:	fb02 f203 	mul.w	r2, r2, r3
 80016d6:	464b      	mov	r3, r9
 80016d8:	4621      	mov	r1, r4
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4413      	add	r3, r2
 80016e0:	4622      	mov	r2, r4
 80016e2:	4641      	mov	r1, r8
 80016e4:	fba2 1201 	umull	r1, r2, r2, r1
 80016e8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80016ec:	460a      	mov	r2, r1
 80016ee:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80016f2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80016f6:	4413      	add	r3, r2
 80016f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016fc:	f04f 0000 	mov.w	r0, #0
 8001700:	f04f 0100 	mov.w	r1, #0
 8001704:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001708:	4623      	mov	r3, r4
 800170a:	0a18      	lsrs	r0, r3, #8
 800170c:	462b      	mov	r3, r5
 800170e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001712:	462b      	mov	r3, r5
 8001714:	1219      	asrs	r1, r3, #8
 8001716:	4b41      	ldr	r3, [pc, #260]	; (800181c <BME280_compensate_P_int64+0x2e0>)
 8001718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171c:	b21b      	sxth	r3, r3
 800171e:	17da      	asrs	r2, r3, #31
 8001720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001724:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001728:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800172c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001730:	464a      	mov	r2, r9
 8001732:	fb02 f203 	mul.w	r2, r2, r3
 8001736:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800173a:	4644      	mov	r4, r8
 800173c:	fb04 f303 	mul.w	r3, r4, r3
 8001740:	441a      	add	r2, r3
 8001742:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001746:	4644      	mov	r4, r8
 8001748:	fba3 4304 	umull	r4, r3, r3, r4
 800174c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001750:	4623      	mov	r3, r4
 8001752:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001756:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800175a:	18d3      	adds	r3, r2, r3
 800175c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800176c:	464c      	mov	r4, r9
 800176e:	0323      	lsls	r3, r4, #12
 8001770:	4644      	mov	r4, r8
 8001772:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001776:	4644      	mov	r4, r8
 8001778:	0322      	lsls	r2, r4, #12
 800177a:	1884      	adds	r4, r0, r2
 800177c:	633c      	str	r4, [r7, #48]	; 0x30
 800177e:	eb41 0303 	adc.w	r3, r1, r3
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
 8001784:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001788:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800178c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001790:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001794:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001798:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <BME280_compensate_P_int64+0x2e4>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	2200      	movs	r2, #0
 80017a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017ac:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017b0:	462b      	mov	r3, r5
 80017b2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017b6:	4642      	mov	r2, r8
 80017b8:	fb02 f203 	mul.w	r2, r2, r3
 80017bc:	464b      	mov	r3, r9
 80017be:	4621      	mov	r1, r4
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	4622      	mov	r2, r4
 80017c8:	4641      	mov	r1, r8
 80017ca:	fba2 1201 	umull	r1, r2, r2, r1
 80017ce:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017d2:	460a      	mov	r2, r1
 80017d4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017d8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017dc:	4413      	add	r3, r2
 80017de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80017ee:	4629      	mov	r1, r5
 80017f0:	104a      	asrs	r2, r1, #1
 80017f2:	4629      	mov	r1, r5
 80017f4:	17cb      	asrs	r3, r1, #31
 80017f6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80017fa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017fe:	4313      	orrs	r3, r2
 8001800:	d110      	bne.n	8001824 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001802:	2300      	movs	r3, #0
 8001804:	e154      	b.n	8001ab0 <BME280_compensate_P_int64+0x574>
 8001806:	bf00      	nop
 8001808:	20000258 	.word	0x20000258
 800180c:	20000248 	.word	0x20000248
 8001810:	20000246 	.word	0x20000246
 8001814:	20000244 	.word	0x20000244
 8001818:	20000242 	.word	0x20000242
 800181c:	20000240 	.word	0x20000240
 8001820:	20000236 	.word	0x20000236
	}
	p = 1048576-adc_P;
 8001824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001828:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800182c:	17da      	asrs	r2, r3, #31
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001830:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001832:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001836:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800183a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800183e:	105b      	asrs	r3, r3, #1
 8001840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001844:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001848:	07db      	lsls	r3, r3, #31
 800184a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800184e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001852:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001856:	4621      	mov	r1, r4
 8001858:	1a89      	subs	r1, r1, r2
 800185a:	67b9      	str	r1, [r7, #120]	; 0x78
 800185c:	4629      	mov	r1, r5
 800185e:	eb61 0303 	sbc.w	r3, r1, r3
 8001862:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001864:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001868:	4622      	mov	r2, r4
 800186a:	462b      	mov	r3, r5
 800186c:	1891      	adds	r1, r2, r2
 800186e:	6239      	str	r1, [r7, #32]
 8001870:	415b      	adcs	r3, r3
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
 8001874:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001878:	4621      	mov	r1, r4
 800187a:	1851      	adds	r1, r2, r1
 800187c:	61b9      	str	r1, [r7, #24]
 800187e:	4629      	mov	r1, r5
 8001880:	414b      	adcs	r3, r1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001890:	4649      	mov	r1, r9
 8001892:	018b      	lsls	r3, r1, #6
 8001894:	4641      	mov	r1, r8
 8001896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800189a:	4641      	mov	r1, r8
 800189c:	018a      	lsls	r2, r1, #6
 800189e:	4641      	mov	r1, r8
 80018a0:	1889      	adds	r1, r1, r2
 80018a2:	6139      	str	r1, [r7, #16]
 80018a4:	4649      	mov	r1, r9
 80018a6:	eb43 0101 	adc.w	r1, r3, r1
 80018aa:	6179      	str	r1, [r7, #20]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018b8:	4649      	mov	r1, r9
 80018ba:	008b      	lsls	r3, r1, #2
 80018bc:	4641      	mov	r1, r8
 80018be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018c2:	4641      	mov	r1, r8
 80018c4:	008a      	lsls	r2, r1, #2
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	4622      	mov	r2, r4
 80018ce:	189b      	adds	r3, r3, r2
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	460b      	mov	r3, r1
 80018d4:	462a      	mov	r2, r5
 80018d6:	eb42 0303 	adc.w	r3, r2, r3
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018e8:	4649      	mov	r1, r9
 80018ea:	008b      	lsls	r3, r1, #2
 80018ec:	4641      	mov	r1, r8
 80018ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018f2:	4641      	mov	r1, r8
 80018f4:	008a      	lsls	r2, r1, #2
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	4603      	mov	r3, r0
 80018fc:	4622      	mov	r2, r4
 80018fe:	189b      	adds	r3, r3, r2
 8001900:	673b      	str	r3, [r7, #112]	; 0x70
 8001902:	462b      	mov	r3, r5
 8001904:	460a      	mov	r2, r1
 8001906:	eb42 0303 	adc.w	r3, r2, r3
 800190a:	677b      	str	r3, [r7, #116]	; 0x74
 800190c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001910:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001914:	f7ff f9c0 	bl	8000c98 <__aeabi_ldivmod>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001920:	4b66      	ldr	r3, [pc, #408]	; (8001abc <BME280_compensate_P_int64+0x580>)
 8001922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001926:	b21b      	sxth	r3, r3
 8001928:	17da      	asrs	r2, r3, #31
 800192a:	66bb      	str	r3, [r7, #104]	; 0x68
 800192c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800192e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001932:	f04f 0000 	mov.w	r0, #0
 8001936:	f04f 0100 	mov.w	r1, #0
 800193a:	0b50      	lsrs	r0, r2, #13
 800193c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001940:	1359      	asrs	r1, r3, #13
 8001942:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001946:	462b      	mov	r3, r5
 8001948:	fb00 f203 	mul.w	r2, r0, r3
 800194c:	4623      	mov	r3, r4
 800194e:	fb03 f301 	mul.w	r3, r3, r1
 8001952:	4413      	add	r3, r2
 8001954:	4622      	mov	r2, r4
 8001956:	fba2 1200 	umull	r1, r2, r2, r0
 800195a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800195e:	460a      	mov	r2, r1
 8001960:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001964:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001968:	4413      	add	r3, r2
 800196a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800196e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001972:	f04f 0000 	mov.w	r0, #0
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	0b50      	lsrs	r0, r2, #13
 800197c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001980:	1359      	asrs	r1, r3, #13
 8001982:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001986:	462b      	mov	r3, r5
 8001988:	fb00 f203 	mul.w	r2, r0, r3
 800198c:	4623      	mov	r3, r4
 800198e:	fb03 f301 	mul.w	r3, r3, r1
 8001992:	4413      	add	r3, r2
 8001994:	4622      	mov	r2, r4
 8001996:	fba2 1200 	umull	r1, r2, r2, r0
 800199a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800199e:	460a      	mov	r2, r1
 80019a0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80019a4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019a8:	4413      	add	r3, r2
 80019aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019ba:	4621      	mov	r1, r4
 80019bc:	0e4a      	lsrs	r2, r1, #25
 80019be:	4629      	mov	r1, r5
 80019c0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019c4:	4629      	mov	r1, r5
 80019c6:	164b      	asrs	r3, r1, #25
 80019c8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019cc:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <BME280_compensate_P_int64+0x584>)
 80019ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	17da      	asrs	r2, r3, #31
 80019d6:	663b      	str	r3, [r7, #96]	; 0x60
 80019d8:	667a      	str	r2, [r7, #100]	; 0x64
 80019da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019de:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019e2:	462a      	mov	r2, r5
 80019e4:	fb02 f203 	mul.w	r2, r2, r3
 80019e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019ec:	4621      	mov	r1, r4
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80019f8:	4621      	mov	r1, r4
 80019fa:	fba2 1201 	umull	r1, r2, r2, r1
 80019fe:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a02:	460a      	mov	r2, r1
 8001a04:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a08:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a1e:	4621      	mov	r1, r4
 8001a20:	0cca      	lsrs	r2, r1, #19
 8001a22:	4629      	mov	r1, r5
 8001a24:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a28:	4629      	mov	r1, r5
 8001a2a:	14cb      	asrs	r3, r1, #19
 8001a2c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a30:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a34:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a38:	1884      	adds	r4, r0, r2
 8001a3a:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a3c:	eb41 0303 	adc.w	r3, r1, r3
 8001a40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a42:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a46:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	1889      	adds	r1, r1, r2
 8001a4e:	6539      	str	r1, [r7, #80]	; 0x50
 8001a50:	4629      	mov	r1, r5
 8001a52:	eb43 0101 	adc.w	r1, r3, r1
 8001a56:	6579      	str	r1, [r7, #84]	; 0x54
 8001a58:	f04f 0000 	mov.w	r0, #0
 8001a5c:	f04f 0100 	mov.w	r1, #0
 8001a60:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a64:	4623      	mov	r3, r4
 8001a66:	0a18      	lsrs	r0, r3, #8
 8001a68:	462b      	mov	r3, r5
 8001a6a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a6e:	462b      	mov	r3, r5
 8001a70:	1219      	asrs	r1, r3, #8
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <BME280_compensate_P_int64+0x588>)
 8001a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	17da      	asrs	r2, r3, #31
 8001a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a7e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001a8c:	464c      	mov	r4, r9
 8001a8e:	0123      	lsls	r3, r4, #4
 8001a90:	4644      	mov	r4, r8
 8001a92:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a96:	4644      	mov	r4, r8
 8001a98:	0122      	lsls	r2, r4, #4
 8001a9a:	1884      	adds	r4, r0, r2
 8001a9c:	603c      	str	r4, [r7, #0]
 8001a9e:	eb41 0303 	adc.w	r3, r1, r3
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001aa8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001aac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001abc:	2000024e 	.word	0x2000024e
 8001ac0:	2000024c 	.word	0x2000024c
 8001ac4:	2000024a 	.word	0x2000024a

08001ac8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <bme280_compensate_H_int32+0xbc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001ad8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	039a      	lsls	r2, r3, #14
 8001ade:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <bme280_compensate_H_int32+0xc0>)
 8001ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae4:	051b      	lsls	r3, r3, #20
 8001ae6:	1ad2      	subs	r2, r2, r3
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <bme280_compensate_H_int32+0xc4>)
 8001aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aee:	4619      	mov	r1, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001af8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001afc:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001afe:	4a24      	ldr	r2, [pc, #144]	; (8001b90 <bme280_compensate_H_int32+0xc8>)
 8001b00:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b04:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b0c:	1292      	asrs	r2, r2, #10
 8001b0e:	4921      	ldr	r1, [pc, #132]	; (8001b94 <bme280_compensate_H_int32+0xcc>)
 8001b10:	8809      	ldrh	r1, [r1, #0]
 8001b12:	4608      	mov	r0, r1
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	fb00 f101 	mul.w	r1, r0, r1
 8001b1a:	12c9      	asrs	r1, r1, #11
 8001b1c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b20:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b24:	1292      	asrs	r2, r2, #10
 8001b26:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b2a:	491b      	ldr	r1, [pc, #108]	; (8001b98 <bme280_compensate_H_int32+0xd0>)
 8001b2c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b30:	fb01 f202 	mul.w	r2, r1, r2
 8001b34:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b38:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	13db      	asrs	r3, r3, #15
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	13d2      	asrs	r2, r2, #15
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001b4e:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <bme280_compensate_H_int32+0xd4>)
 8001b50:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001b56:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b64:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b6c:	bfa8      	it	ge
 8001b6e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b72:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	131b      	asrs	r3, r3, #12
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	20000258 	.word	0x20000258
 8001b88:	20000252 	.word	0x20000252
 8001b8c:	20000254 	.word	0x20000254
 8001b90:	20000256 	.word	0x20000256
 8001b94:	2000023a 	.word	0x2000023a
 8001b98:	20000250 	.word	0x20000250
 8001b9c:	20000238 	.word	0x20000238

08001ba0 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001ba4:	f7ff fc38 	bl	8001418 <BMEReadRaw>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d163      	bne.n	8001c76 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001bae:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <BME280_Measure+0xf4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bb6:	d104      	bne.n	8001bc2 <BME280_Measure+0x22>
 8001bb8:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <BME280_Measure+0xf8>)
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e016      	b.n	8001bf0 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001bc2:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <BME280_Measure+0xf4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fc76 	bl	80014b8 <BME280_compensate_T_int32>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fcb0 	bl	8000534 <__aeabi_i2d>
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <BME280_Measure+0xfc>)
 8001bda:	f7fe fe3f 	bl	800085c <__aeabi_ddiv>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7ff f807 	bl	8000bf8 <__aeabi_d2f>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4a2a      	ldr	r2, [pc, #168]	; (8001c98 <BME280_Measure+0xf8>)
 8001bee:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <BME280_Measure+0x100>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bf8:	d104      	bne.n	8001c04 <BME280_Measure+0x64>
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <BME280_Measure+0x104>)
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	e016      	b.n	8001c32 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001c04:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <BME280_Measure+0x100>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fc97 	bl	800153c <BME280_compensate_P_int64>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc7f 	bl	8000514 <__aeabi_ui2d>
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <BME280_Measure+0x108>)
 8001c1c:	f7fe fe1e 	bl	800085c <__aeabi_ddiv>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7fe ffe6 	bl	8000bf8 <__aeabi_d2f>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <BME280_Measure+0x104>)
 8001c30:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <BME280_Measure+0x10c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c3a:	d104      	bne.n	8001c46 <BME280_Measure+0xa6>
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <BME280_Measure+0x110>)
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001c44:	e023      	b.n	8001c8e <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <BME280_Measure+0x10c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff3c 	bl	8001ac8 <bme280_compensate_H_int32>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc5e 	bl	8000514 <__aeabi_ui2d>
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <BME280_Measure+0x114>)
 8001c5e:	f7fe fdfd 	bl	800085c <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ffc5 	bl	8000bf8 <__aeabi_d2f>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <BME280_Measure+0x110>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	e00b      	b.n	8001c8e <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <BME280_Measure+0x110>)
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <BME280_Measure+0x110>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <BME280_Measure+0x104>)
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <BME280_Measure+0x104>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <BME280_Measure+0xf8>)
 8001c8c:	6013      	str	r3, [r2, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000228 	.word	0x20000228
 8001c98:	200002fc 	.word	0x200002fc
 8001c9c:	40590000 	.word	0x40590000
 8001ca0:	2000022c 	.word	0x2000022c
 8001ca4:	20000300 	.word	0x20000300
 8001ca8:	40700000 	.word	0x40700000
 8001cac:	20000230 	.word	0x20000230
 8001cb0:	20000304 	.word	0x20000304
 8001cb4:	40900000 	.word	0x40900000

08001cb8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f023 030f 	bic.w	r3, r3, #15
 8001cc8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	f043 030c 	orr.w	r3, r3, #12
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001ce4:	7bbb      	ldrb	r3, [r7, #14]
 8001ce6:	f043 030c 	orr.w	r3, r3, #12
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001cee:	7bbb      	ldrb	r3, [r7, #14]
 8001cf0:	f043 0308 	orr.w	r3, r3, #8
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cf8:	f107 0208 	add.w	r2, r7, #8
 8001cfc:	2364      	movs	r3, #100	; 0x64
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2304      	movs	r3, #4
 8001d02:	214e      	movs	r1, #78	; 0x4e
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <lcd_send_cmd+0x5c>)
 8001d06:	f001 fe49 	bl	800399c <HAL_I2C_Master_Transmit>
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200002a4 	.word	0x200002a4

08001d18 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f023 030f 	bic.w	r3, r3, #15
 8001d28:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	f043 030d 	orr.w	r3, r3, #13
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	f043 0309 	orr.w	r3, r3, #9
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001d44:	7bbb      	ldrb	r3, [r7, #14]
 8001d46:	f043 030d 	orr.w	r3, r3, #13
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001d4e:	7bbb      	ldrb	r3, [r7, #14]
 8001d50:	f043 0309 	orr.w	r3, r3, #9
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d58:	f107 0208 	add.w	r2, r7, #8
 8001d5c:	2364      	movs	r3, #100	; 0x64
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2304      	movs	r3, #4
 8001d62:	214e      	movs	r1, #78	; 0x4e
 8001d64:	4803      	ldr	r0, [pc, #12]	; (8001d74 <lcd_send_data+0x5c>)
 8001d66:	f001 fe19 	bl	800399c <HAL_I2C_Master_Transmit>
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200002a4 	.word	0x200002a4

08001d78 <lcd_clear>:

void lcd_clear (void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	lcd_send_cmd (LCD_CLEARDISPLAY);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff ff9b 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(2);
 8001d82:	2002      	movs	r0, #2
 8001d84:	f000 fe28 	bl	80029d8 <HAL_Delay>
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <lcd_init>:

void lcd_init (void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001d90:	2032      	movs	r0, #50	; 0x32
 8001d92:	f000 fe21 	bl	80029d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001d96:	2030      	movs	r0, #48	; 0x30
 8001d98:	f7ff ff8e 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001d9c:	2005      	movs	r0, #5
 8001d9e:	f000 fe1b 	bl	80029d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001da2:	2030      	movs	r0, #48	; 0x30
 8001da4:	f7ff ff88 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001da8:	2001      	movs	r0, #1
 8001daa:	f000 fe15 	bl	80029d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001dae:	2030      	movs	r0, #48	; 0x30
 8001db0:	f7ff ff82 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(10);
 8001db4:	200a      	movs	r0, #10
 8001db6:	f000 fe0f 	bl	80029d8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001dba:	2020      	movs	r0, #32
 8001dbc:	f7ff ff7c 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(10);
 8001dc0:	200a      	movs	r0, #10
 8001dc2:	f000 fe09 	bl	80029d8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001dc6:	2028      	movs	r0, #40	; 0x28
 8001dc8:	f7ff ff76 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(1);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f000 fe03 	bl	80029d8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001dd2:	2008      	movs	r0, #8
 8001dd4:	f7ff ff70 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(1);
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f000 fdfd 	bl	80029d8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001dde:	2001      	movs	r0, #1
 8001de0:	f7ff ff6a 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(1);
 8001de4:	2001      	movs	r0, #1
 8001de6:	f000 fdf7 	bl	80029d8 <HAL_Delay>
	HAL_Delay(1);
 8001dea:	2001      	movs	r0, #1
 8001dec:	f000 fdf4 	bl	80029d8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001df0:	2006      	movs	r0, #6
 8001df2:	f7ff ff61 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(1);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f000 fdee 	bl	80029d8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001dfc:	200c      	movs	r0, #12
 8001dfe:	f7ff ff5b 	bl	8001cb8 <lcd_send_cmd>
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001e0e:	e006      	b.n	8001e1e <lcd_send_string+0x18>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff7d 	bl	8001d18 <lcd_send_data>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f4      	bne.n	8001e10 <lcd_send_string+0xa>
}
 8001e26:	bf00      	nop
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <lcd_home>:

void lcd_home(){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	lcd_send_cmd (LCD_RETURNHOME);
 8001e34:	2002      	movs	r0, #2
 8001e36:	f7ff ff3f 	bl	8001cb8 <lcd_send_cmd>
	//HAL_Delay(2);
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <lcd_create_char>:
}
void lcd_no_autoscroll(){
    _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
    lcd_send_cmd(LCD_ENTRYMODESET | _displaymode);
}
void lcd_create_char(uint8_t location, uint8_t charmap[]){
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	6039      	str	r1, [r7, #0]
 8001e48:	71fb      	strb	r3, [r7, #7]
    location &= 0x7; // we only have 8 locations 0-7
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(LCD_SETCGRAMADDR | (location << 3));
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e5c:	b25b      	sxtb	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff29 	bl	8001cb8 <lcd_send_cmd>
    for (uint8_t i = 0; i != 8; i++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	e009      	b.n	8001e80 <lcd_create_char+0x42>
    	lcd_send_data(charmap[i]);
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff4f 	bl	8001d18 <lcd_send_data>
    for (uint8_t i = 0; i != 8; i++)
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d1f2      	bne.n	8001e6c <lcd_create_char+0x2e>
}
 8001e86:	bf00      	nop
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <lcd_set_cursor>:
void lcd_set_cursor(uint8_t col, uint8_t row){
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	460a      	mov	r2, r1
 8001e9a:	71fb      	strb	r3, [r7, #7]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	71bb      	strb	r3, [r7, #6]
    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <lcd_set_cursor+0x54>)
 8001ea2:	f107 0408 	add.w	r4, r7, #8
 8001ea6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ea8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (row > 4)
 8001eac:	79bb      	ldrb	r3, [r7, #6]
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d901      	bls.n	8001eb6 <lcd_set_cursor+0x26>
        row = 4 - 1; // we count rows starting w/0
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	71bb      	strb	r3, [r7, #6]
    lcd_send_cmd(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001eb6:	79bb      	ldrb	r3, [r7, #6]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	3318      	adds	r3, #24
 8001ebc:	443b      	add	r3, r7
 8001ebe:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	b25b      	sxtb	r3, r3
 8001ecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ed0:	b25b      	sxtb	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff feef 	bl	8001cb8 <lcd_send_cmd>
}
 8001eda:	bf00      	nop
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd90      	pop	{r4, r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	0800cca8 	.word	0x0800cca8

08001ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eee:	f000 fd31 	bl	8002954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ef2:	f000 f83d 	bl	8001f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef6:	f000 f925 	bl	8002144 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001efa:	f000 f8a3 	bl	8002044 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001efe:	f000 f8f3 	bl	80020e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize the BME280 sensor
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001f02:	2304      	movs	r3, #4
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	2300      	movs	r3, #0
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2105      	movs	r1, #5
 8001f10:	2002      	movs	r0, #2
 8001f12:	f7ff f9ab 	bl	800126c <BME280_Config>
  // Initialize the LCD display
  lcd_init();
 8001f16:	f7ff ff39 	bl	8001d8c <lcd_init>
  lcd_clear();
 8001f1a:	f7ff ff2d 	bl	8001d78 <lcd_clear>
  // Load custom characters into memory
  lcd_create_char(0,thermometer);
 8001f1e:	490e      	ldr	r1, [pc, #56]	; (8001f58 <main+0x70>)
 8001f20:	2000      	movs	r0, #0
 8001f22:	f7ff ff8c 	bl	8001e3e <lcd_create_char>
  lcd_create_char(1,droplet);
 8001f26:	490d      	ldr	r1, [pc, #52]	; (8001f5c <main+0x74>)
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7ff ff88 	bl	8001e3e <lcd_create_char>
  lcd_create_char(2,wifi);
 8001f2e:	490c      	ldr	r1, [pc, #48]	; (8001f60 <main+0x78>)
 8001f30:	2002      	movs	r0, #2
 8001f32:	f7ff ff84 	bl	8001e3e <lcd_create_char>
  lcd_home();
 8001f36:	f7ff ff7b 	bl	8001e30 <lcd_home>
  Print_LCD();
 8001f3a:	f000 f971 	bl	8002220 <Print_LCD>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f3e:	f003 fcb7 	bl	80058b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001f42:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <main+0x7c>)
 8001f44:	2100      	movs	r1, #0
 8001f46:	4808      	ldr	r0, [pc, #32]	; (8001f68 <main+0x80>)
 8001f48:	f003 fcfc 	bl	8005944 <osThreadNew>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <main+0x84>)
 8001f50:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001f52:	f003 fcd1 	bl	80058f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f56:	e7fe      	b.n	8001f56 <main+0x6e>
 8001f58:	2000000c 	.word	0x2000000c
 8001f5c:	20000004 	.word	0x20000004
 8001f60:	20000014 	.word	0x20000014
 8001f64:	0800cd0c 	.word	0x0800cd0c
 8001f68:	08002335 	.word	0x08002335
 8001f6c:	200002f8 	.word	0x200002f8

08001f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b094      	sub	sp, #80	; 0x50
 8001f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f76:	f107 0320 	add.w	r3, r7, #32
 8001f7a:	2230      	movs	r2, #48	; 0x30
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f006 fa1c 	bl	80083bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	4b28      	ldr	r3, [pc, #160]	; (800203c <SystemClock_Config+0xcc>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	4a27      	ldr	r2, [pc, #156]	; (800203c <SystemClock_Config+0xcc>)
 8001f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <SystemClock_Config+0xcc>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	4b22      	ldr	r3, [pc, #136]	; (8002040 <SystemClock_Config+0xd0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fbc:	4a20      	ldr	r2, [pc, #128]	; (8002040 <SystemClock_Config+0xd0>)
 8001fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <SystemClock_Config+0xd0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001fe8:	2354      	movs	r3, #84	; 0x54
 8001fea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fec:	2302      	movs	r3, #2
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff4:	f107 0320 	add.w	r3, r7, #32
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f002 fccb 	bl	8004994 <HAL_RCC_OscConfig>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002004:	f000 fa54 	bl	80024b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002008:	230f      	movs	r3, #15
 800200a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800200c:	2302      	movs	r3, #2
 800200e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002018:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800201e:	f107 030c 	add.w	r3, r7, #12
 8002022:	2102      	movs	r1, #2
 8002024:	4618      	mov	r0, r3
 8002026:	f002 ff2d 	bl	8004e84 <HAL_RCC_ClockConfig>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002030:	f000 fa3e 	bl	80024b0 <Error_Handler>
  }
}
 8002034:	bf00      	nop
 8002036:	3750      	adds	r7, #80	; 0x50
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800
 8002040:	40007000 	.word	0x40007000

08002044 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800204a:	463b      	mov	r3, r7
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002056:	4b21      	ldr	r3, [pc, #132]	; (80020dc <MX_ADC1_Init+0x98>)
 8002058:	4a21      	ldr	r2, [pc, #132]	; (80020e0 <MX_ADC1_Init+0x9c>)
 800205a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800205c:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <MX_ADC1_Init+0x98>)
 800205e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002062:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002064:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <MX_ADC1_Init+0x98>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <MX_ADC1_Init+0x98>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002070:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <MX_ADC1_Init+0x98>)
 8002072:	2200      	movs	r2, #0
 8002074:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <MX_ADC1_Init+0x98>)
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800207e:	4b17      	ldr	r3, [pc, #92]	; (80020dc <MX_ADC1_Init+0x98>)
 8002080:	2200      	movs	r2, #0
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002084:	4b15      	ldr	r3, [pc, #84]	; (80020dc <MX_ADC1_Init+0x98>)
 8002086:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <MX_ADC1_Init+0xa0>)
 8002088:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <MX_ADC1_Init+0x98>)
 800208c:	2200      	movs	r2, #0
 800208e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <MX_ADC1_Init+0x98>)
 8002092:	2201      	movs	r2, #1
 8002094:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <MX_ADC1_Init+0x98>)
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800209e:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <MX_ADC1_Init+0x98>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020a4:	480d      	ldr	r0, [pc, #52]	; (80020dc <MX_ADC1_Init+0x98>)
 80020a6:	f000 fcbb 	bl	8002a20 <HAL_ADC_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020b0:	f000 f9fe 	bl	80024b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80020b4:	230a      	movs	r3, #10
 80020b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020c0:	463b      	mov	r3, r7
 80020c2:	4619      	mov	r1, r3
 80020c4:	4805      	ldr	r0, [pc, #20]	; (80020dc <MX_ADC1_Init+0x98>)
 80020c6:	f000 fe6f 	bl	8002da8 <HAL_ADC_ConfigChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020d0:	f000 f9ee 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000025c 	.word	0x2000025c
 80020e0:	40012000 	.word	0x40012000
 80020e4:	0f000001 	.word	0x0f000001

080020e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <MX_I2C1_Init+0x50>)
 80020ee:	4a13      	ldr	r2, [pc, #76]	; (800213c <MX_I2C1_Init+0x54>)
 80020f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <MX_I2C1_Init+0x50>)
 80020f4:	4a12      	ldr	r2, [pc, #72]	; (8002140 <MX_I2C1_Init+0x58>)
 80020f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020f8:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <MX_I2C1_Init+0x50>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <MX_I2C1_Init+0x50>)
 8002100:	2200      	movs	r2, #0
 8002102:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <MX_I2C1_Init+0x50>)
 8002106:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800210a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <MX_I2C1_Init+0x50>)
 800210e:	2200      	movs	r2, #0
 8002110:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <MX_I2C1_Init+0x50>)
 8002114:	2200      	movs	r2, #0
 8002116:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002118:	4b07      	ldr	r3, [pc, #28]	; (8002138 <MX_I2C1_Init+0x50>)
 800211a:	2200      	movs	r2, #0
 800211c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <MX_I2C1_Init+0x50>)
 8002120:	2200      	movs	r2, #0
 8002122:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002124:	4804      	ldr	r0, [pc, #16]	; (8002138 <MX_I2C1_Init+0x50>)
 8002126:	f001 faf5 	bl	8003714 <HAL_I2C_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002130:	f000 f9be 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	200002a4 	.word	0x200002a4
 800213c:	40005400 	.word	0x40005400
 8002140:	000186a0 	.word	0x000186a0

08002144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
 8002158:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <MX_GPIO_Init+0xd0>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a2c      	ldr	r2, [pc, #176]	; (8002214 <MX_GPIO_Init+0xd0>)
 8002164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <MX_GPIO_Init+0xd0>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b26      	ldr	r3, [pc, #152]	; (8002214 <MX_GPIO_Init+0xd0>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a25      	ldr	r2, [pc, #148]	; (8002214 <MX_GPIO_Init+0xd0>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <MX_GPIO_Init+0xd0>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <MX_GPIO_Init+0xd0>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a1e      	ldr	r2, [pc, #120]	; (8002214 <MX_GPIO_Init+0xd0>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <MX_GPIO_Init+0xd0>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <MX_GPIO_Init+0xd0>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a17      	ldr	r2, [pc, #92]	; (8002214 <MX_GPIO_Init+0xd0>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <MX_GPIO_Init+0xd0>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d0:	4811      	ldr	r0, [pc, #68]	; (8002218 <MX_GPIO_Init+0xd4>)
 80021d2:	f001 fa85 	bl	80036e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80021d6:	2302      	movs	r3, #2
 80021d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	4619      	mov	r1, r3
 80021e8:	480c      	ldr	r0, [pc, #48]	; (800221c <MX_GPIO_Init+0xd8>)
 80021ea:	f001 f8dd 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80021ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f4:	2301      	movs	r3, #1
 80021f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	4619      	mov	r1, r3
 8002206:	4804      	ldr	r0, [pc, #16]	; (8002218 <MX_GPIO_Init+0xd4>)
 8002208:	f001 f8ce 	bl	80033a8 <HAL_GPIO_Init>

}
 800220c:	bf00      	nop
 800220e:	3728      	adds	r7, #40	; 0x28
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40023800 	.word	0x40023800
 8002218:	40020000 	.word	0x40020000
 800221c:	40020400 	.word	0x40020400

08002220 <Print_LCD>:

/* USER CODE BEGIN 4 */
void Print_LCD(){
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
	lcd_clear();
 8002224:	f7ff fda8 	bl	8001d78 <lcd_clear>
	lcd_set_cursor(0, 0);
 8002228:	2100      	movs	r1, #0
 800222a:	2000      	movs	r0, #0
 800222c:	f7ff fe30 	bl	8001e90 <lcd_set_cursor>
	lcd_send_string("Rel. soil ");
 8002230:	4833      	ldr	r0, [pc, #204]	; (8002300 <Print_LCD+0xe0>)
 8002232:	f7ff fde8 	bl	8001e06 <lcd_send_string>
	lcd_send_data(1);
 8002236:	2001      	movs	r0, #1
 8002238:	f7ff fd6e 	bl	8001d18 <lcd_send_data>
	sprintf(text,"%.2f",SoilMoisture);
 800223c:	4b31      	ldr	r3, [pc, #196]	; (8002304 <Print_LCD+0xe4>)
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	4931      	ldr	r1, [pc, #196]	; (8002308 <Print_LCD+0xe8>)
 8002244:	4831      	ldr	r0, [pc, #196]	; (800230c <Print_LCD+0xec>)
 8002246:	f006 ff41 	bl	80090cc <siprintf>
	lcd_send_string(text);
 800224a:	4830      	ldr	r0, [pc, #192]	; (800230c <Print_LCD+0xec>)
 800224c:	f7ff fddb 	bl	8001e06 <lcd_send_string>
	lcd_send_string("%");
 8002250:	482f      	ldr	r0, [pc, #188]	; (8002310 <Print_LCD+0xf0>)
 8002252:	f7ff fdd8 	bl	8001e06 <lcd_send_string>
	lcd_set_cursor(0, 1);
 8002256:	2101      	movs	r1, #1
 8002258:	2000      	movs	r0, #0
 800225a:	f7ff fe19 	bl	8001e90 <lcd_set_cursor>
	lcd_send_data(0);
 800225e:	2000      	movs	r0, #0
 8002260:	f7ff fd5a 	bl	8001d18 <lcd_send_data>
	sprintf(text,"%.2f",Temperature);
 8002264:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <Print_LCD+0xf4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe f975 	bl	8000558 <__aeabi_f2d>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4925      	ldr	r1, [pc, #148]	; (8002308 <Print_LCD+0xe8>)
 8002274:	4825      	ldr	r0, [pc, #148]	; (800230c <Print_LCD+0xec>)
 8002276:	f006 ff29 	bl	80090cc <siprintf>
	lcd_send_string(text);
 800227a:	4824      	ldr	r0, [pc, #144]	; (800230c <Print_LCD+0xec>)
 800227c:	f7ff fdc3 	bl	8001e06 <lcd_send_string>
	lcd_send_data(0b11011111);
 8002280:	20df      	movs	r0, #223	; 0xdf
 8002282:	f7ff fd49 	bl	8001d18 <lcd_send_data>
	lcd_send_string("C");
 8002286:	4824      	ldr	r0, [pc, #144]	; (8002318 <Print_LCD+0xf8>)
 8002288:	f7ff fdbd 	bl	8001e06 <lcd_send_string>
	lcd_set_cursor(0, 2);
 800228c:	2102      	movs	r1, #2
 800228e:	2000      	movs	r0, #0
 8002290:	f7ff fdfe 	bl	8001e90 <lcd_set_cursor>
	lcd_send_data(1);
 8002294:	2001      	movs	r0, #1
 8002296:	f7ff fd3f 	bl	8001d18 <lcd_send_data>
	sprintf(text,"%.2f",Humidity);
 800229a:	4b20      	ldr	r3, [pc, #128]	; (800231c <Print_LCD+0xfc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe f95a 	bl	8000558 <__aeabi_f2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4917      	ldr	r1, [pc, #92]	; (8002308 <Print_LCD+0xe8>)
 80022aa:	4818      	ldr	r0, [pc, #96]	; (800230c <Print_LCD+0xec>)
 80022ac:	f006 ff0e 	bl	80090cc <siprintf>
	lcd_send_string(text);
 80022b0:	4816      	ldr	r0, [pc, #88]	; (800230c <Print_LCD+0xec>)
 80022b2:	f7ff fda8 	bl	8001e06 <lcd_send_string>
	lcd_send_string("%");
 80022b6:	4816      	ldr	r0, [pc, #88]	; (8002310 <Print_LCD+0xf0>)
 80022b8:	f7ff fda5 	bl	8001e06 <lcd_send_string>
	lcd_set_cursor(0, 3);
 80022bc:	2103      	movs	r1, #3
 80022be:	2000      	movs	r0, #0
 80022c0:	f7ff fde6 	bl	8001e90 <lcd_set_cursor>
	lcd_send_string("Pres:");
 80022c4:	4816      	ldr	r0, [pc, #88]	; (8002320 <Print_LCD+0x100>)
 80022c6:	f7ff fd9e 	bl	8001e06 <lcd_send_string>
	sprintf(text,"%4.1f",Pressure/100);
 80022ca:	4b16      	ldr	r3, [pc, #88]	; (8002324 <Print_LCD+0x104>)
 80022cc:	edd3 7a00 	vldr	s15, [r3]
 80022d0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002328 <Print_LCD+0x108>
 80022d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022d8:	ee16 0a90 	vmov	r0, s13
 80022dc:	f7fe f93c 	bl	8000558 <__aeabi_f2d>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4911      	ldr	r1, [pc, #68]	; (800232c <Print_LCD+0x10c>)
 80022e6:	4809      	ldr	r0, [pc, #36]	; (800230c <Print_LCD+0xec>)
 80022e8:	f006 fef0 	bl	80090cc <siprintf>
	lcd_send_string(text);
 80022ec:	4807      	ldr	r0, [pc, #28]	; (800230c <Print_LCD+0xec>)
 80022ee:	f7ff fd8a 	bl	8001e06 <lcd_send_string>
	lcd_send_string("hPa");
 80022f2:	480f      	ldr	r0, [pc, #60]	; (8002330 <Print_LCD+0x110>)
 80022f4:	f7ff fd87 	bl	8001e06 <lcd_send_string>
	lcd_home();
 80022f8:	f7ff fd9a 	bl	8001e30 <lcd_home>
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	0800ccc4 	.word	0x0800ccc4
 8002304:	20000308 	.word	0x20000308
 8002308:	0800ccd0 	.word	0x0800ccd0
 800230c:	20000310 	.word	0x20000310
 8002310:	0800ccd8 	.word	0x0800ccd8
 8002314:	200002fc 	.word	0x200002fc
 8002318:	0800ccdc 	.word	0x0800ccdc
 800231c:	20000304 	.word	0x20000304
 8002320:	0800cce0 	.word	0x0800cce0
 8002324:	20000300 	.word	0x20000300
 8002328:	42c80000 	.word	0x42c80000
 800232c:	0800cce8 	.word	0x0800cce8
 8002330:	0800ccf0 	.word	0x0800ccf0

08002334 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002334:	b5b0      	push	{r4, r5, r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  // Update current time
	  current_time=HAL_GetTick();
 800233c:	f000 fb40 	bl	80029c0 <HAL_GetTick>
 8002340:	4603      	mov	r3, r0
 8002342:	4a45      	ldr	r2, [pc, #276]	; (8002458 <StartDefaultTask+0x124>)
 8002344:	6013      	str	r3, [r2, #0]
	  // Update the button readings
	  btn=HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_1);
 8002346:	2102      	movs	r1, #2
 8002348:	4844      	ldr	r0, [pc, #272]	; (800245c <StartDefaultTask+0x128>)
 800234a:	f001 f9b1 	bl	80036b0 <HAL_GPIO_ReadPin>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	4b43      	ldr	r3, [pc, #268]	; (8002460 <StartDefaultTask+0x12c>)
 8002354:	701a      	strb	r2, [r3, #0]
	  if((btn != old_btn) && (btn!=0)){
 8002356:	4b42      	ldr	r3, [pc, #264]	; (8002460 <StartDefaultTask+0x12c>)
 8002358:	781a      	ldrb	r2, [r3, #0]
 800235a:	4b42      	ldr	r3, [pc, #264]	; (8002464 <StartDefaultTask+0x130>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d00e      	beq.n	8002380 <StartDefaultTask+0x4c>
 8002362:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <StartDefaultTask+0x12c>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <StartDefaultTask+0x4c>
		  if(state==0){
 800236a:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <StartDefaultTask+0x134>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <StartDefaultTask+0x46>
			  state=1;
 8002372:	4b3d      	ldr	r3, [pc, #244]	; (8002468 <StartDefaultTask+0x134>)
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
 8002378:	e002      	b.n	8002380 <StartDefaultTask+0x4c>
		  }else{
			  state=0;
 800237a:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <StartDefaultTask+0x134>)
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  old_btn=btn;
 8002380:	4b37      	ldr	r3, [pc, #220]	; (8002460 <StartDefaultTask+0x12c>)
 8002382:	781a      	ldrb	r2, [r3, #0]
 8002384:	4b37      	ldr	r3, [pc, #220]	; (8002464 <StartDefaultTask+0x130>)
 8002386:	701a      	strb	r2, [r3, #0]
	  // Update sensor readings every 500ms if the reading is enabled
	  if ((current_time-event_sensor>500)&&state){
 8002388:	4b33      	ldr	r3, [pc, #204]	; (8002458 <StartDefaultTask+0x124>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b37      	ldr	r3, [pc, #220]	; (800246c <StartDefaultTask+0x138>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002396:	d93f      	bls.n	8002418 <StartDefaultTask+0xe4>
 8002398:	4b33      	ldr	r3, [pc, #204]	; (8002468 <StartDefaultTask+0x134>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d03b      	beq.n	8002418 <StartDefaultTask+0xe4>

		  BME280_Measure();
 80023a0:	f7ff fbfe 	bl	8001ba0 <BME280_Measure>
		  HAL_ADC_Start(&hadc1);
 80023a4:	4832      	ldr	r0, [pc, #200]	; (8002470 <StartDefaultTask+0x13c>)
 80023a6:	f000 fb7f 	bl	8002aa8 <HAL_ADC_Start>
		  if(HAL_ADC_PollForConversion(&hadc1,12)==HAL_OK){
 80023aa:	210c      	movs	r1, #12
 80023ac:	4830      	ldr	r0, [pc, #192]	; (8002470 <StartDefaultTask+0x13c>)
 80023ae:	f000 fc62 	bl	8002c76 <HAL_ADC_PollForConversion>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d127      	bne.n	8002408 <StartDefaultTask+0xd4>
			  //SoilMoisture = HAL_ADC_GetValue(&hadc1);
			  SoilMoisture=((moisture_air-HAL_ADC_GetValue(&hadc1)) * 100.0 / (moisture_air-moisture_water));
 80023b8:	4b2e      	ldr	r3, [pc, #184]	; (8002474 <StartDefaultTask+0x140>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	461c      	mov	r4, r3
 80023be:	482c      	ldr	r0, [pc, #176]	; (8002470 <StartDefaultTask+0x13c>)
 80023c0:	f000 fce4 	bl	8002d8c <HAL_ADC_GetValue>
 80023c4:	4603      	mov	r3, r0
 80023c6:	1ae3      	subs	r3, r4, r3
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f8a3 	bl	8000514 <__aeabi_ui2d>
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	4b29      	ldr	r3, [pc, #164]	; (8002478 <StartDefaultTask+0x144>)
 80023d4:	f7fe f918 	bl	8000608 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4614      	mov	r4, r2
 80023de:	461d      	mov	r5, r3
 80023e0:	4b24      	ldr	r3, [pc, #144]	; (8002474 <StartDefaultTask+0x140>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b25      	ldr	r3, [pc, #148]	; (800247c <StartDefaultTask+0x148>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f8a1 	bl	8000534 <__aeabi_i2d>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4620      	mov	r0, r4
 80023f8:	4629      	mov	r1, r5
 80023fa:	f7fe fa2f 	bl	800085c <__aeabi_ddiv>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	491f      	ldr	r1, [pc, #124]	; (8002480 <StartDefaultTask+0x14c>)
 8002404:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  HAL_ADC_Stop(&hadc1);
 8002408:	4819      	ldr	r0, [pc, #100]	; (8002470 <StartDefaultTask+0x13c>)
 800240a:	f000 fc01 	bl	8002c10 <HAL_ADC_Stop>

		  event_sensor=HAL_GetTick();
 800240e:	f000 fad7 	bl	80029c0 <HAL_GetTick>
 8002412:	4603      	mov	r3, r0
 8002414:	4a15      	ldr	r2, [pc, #84]	; (800246c <StartDefaultTask+0x138>)
 8002416:	6013      	str	r3, [r2, #0]
	  }

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, !state);
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <StartDefaultTask+0x134>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	f44f 7180 	mov.w	r1, #256	; 0x100
 800242c:	4815      	ldr	r0, [pc, #84]	; (8002484 <StartDefaultTask+0x150>)
 800242e:	f001 f957 	bl	80036e0 <HAL_GPIO_WritePin>

	  // Update the display every 1000 ms
	  if (current_time-event_lcd>1000){
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <StartDefaultTask+0x124>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	4b14      	ldr	r3, [pc, #80]	; (8002488 <StartDefaultTask+0x154>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002440:	d906      	bls.n	8002450 <StartDefaultTask+0x11c>
		  Print_LCD();
 8002442:	f7ff feed 	bl	8002220 <Print_LCD>
		  event_lcd=HAL_GetTick();
 8002446:	f000 fabb 	bl	80029c0 <HAL_GetTick>
 800244a:	4603      	mov	r3, r0
 800244c:	4a0e      	ldr	r2, [pc, #56]	; (8002488 <StartDefaultTask+0x154>)
 800244e:	6013      	str	r3, [r2, #0]
	  }

    osDelay(1);
 8002450:	2001      	movs	r0, #1
 8002452:	f003 fb09 	bl	8005a68 <osDelay>
	  current_time=HAL_GetTick();
 8002456:	e771      	b.n	800233c <StartDefaultTask+0x8>
 8002458:	20000320 	.word	0x20000320
 800245c:	40020400 	.word	0x40020400
 8002460:	20000324 	.word	0x20000324
 8002464:	20000325 	.word	0x20000325
 8002468:	20000000 	.word	0x20000000
 800246c:	2000031c 	.word	0x2000031c
 8002470:	2000025c 	.word	0x2000025c
 8002474:	2000001e 	.word	0x2000001e
 8002478:	40590000 	.word	0x40590000
 800247c:	2000001c 	.word	0x2000001c
 8002480:	20000308 	.word	0x20000308
 8002484:	40020000 	.word	0x40020000
 8002488:	20000318 	.word	0x20000318

0800248c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a04      	ldr	r2, [pc, #16]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d101      	bne.n	80024a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800249e:	f000 fa7b 	bl	8002998 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40014000 	.word	0x40014000

080024b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024b4:	b672      	cpsid	i
}
 80024b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <Error_Handler+0x8>
	...

080024bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_MspInit+0x54>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	4a11      	ldr	r2, [pc, #68]	; (8002510 <HAL_MspInit+0x54>)
 80024cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d0:	6453      	str	r3, [r2, #68]	; 0x44
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_MspInit+0x54>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_MspInit+0x54>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <HAL_MspInit+0x54>)
 80024e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ec:	6413      	str	r3, [r2, #64]	; 0x40
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <HAL_MspInit+0x54>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	210f      	movs	r1, #15
 80024fe:	f06f 0001 	mvn.w	r0, #1
 8002502:	f000 ff27 	bl	8003354 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800

08002514 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a17      	ldr	r2, [pc, #92]	; (8002590 <HAL_ADC_MspInit+0x7c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d127      	bne.n	8002586 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	4b16      	ldr	r3, [pc, #88]	; (8002594 <HAL_ADC_MspInit+0x80>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	4a15      	ldr	r2, [pc, #84]	; (8002594 <HAL_ADC_MspInit+0x80>)
 8002540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002544:	6453      	str	r3, [r2, #68]	; 0x44
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_ADC_MspInit+0x80>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_ADC_MspInit+0x80>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a0e      	ldr	r2, [pc, #56]	; (8002594 <HAL_ADC_MspInit+0x80>)
 800255c:	f043 0304 	orr.w	r3, r3, #4
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_ADC_MspInit+0x80>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = SOIL_MOIST_Pin;
 800256e:	2301      	movs	r3, #1
 8002570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002572:	2303      	movs	r3, #3
 8002574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOIL_MOIST_GPIO_Port, &GPIO_InitStruct);
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4619      	mov	r1, r3
 8002580:	4805      	ldr	r0, [pc, #20]	; (8002598 <HAL_ADC_MspInit+0x84>)
 8002582:	f000 ff11 	bl	80033a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002586:	bf00      	nop
 8002588:	3728      	adds	r7, #40	; 0x28
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40012000 	.word	0x40012000
 8002594:	40023800 	.word	0x40023800
 8002598:	40020800 	.word	0x40020800

0800259c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a19      	ldr	r2, [pc, #100]	; (8002620 <HAL_I2C_MspInit+0x84>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d12c      	bne.n	8002618 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	4b18      	ldr	r3, [pc, #96]	; (8002624 <HAL_I2C_MspInit+0x88>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4a17      	ldr	r2, [pc, #92]	; (8002624 <HAL_I2C_MspInit+0x88>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	6313      	str	r3, [r2, #48]	; 0x30
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <HAL_I2C_MspInit+0x88>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e0:	2312      	movs	r3, #18
 80025e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025e4:	2301      	movs	r3, #1
 80025e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e8:	2303      	movs	r3, #3
 80025ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025ec:	2304      	movs	r3, #4
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4619      	mov	r1, r3
 80025f6:	480c      	ldr	r0, [pc, #48]	; (8002628 <HAL_I2C_MspInit+0x8c>)
 80025f8:	f000 fed6 	bl	80033a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <HAL_I2C_MspInit+0x88>)
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	4a07      	ldr	r2, [pc, #28]	; (8002624 <HAL_I2C_MspInit+0x88>)
 8002606:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800260a:	6413      	str	r3, [r2, #64]	; 0x40
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_I2C_MspInit+0x88>)
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002618:	bf00      	nop
 800261a:	3728      	adds	r7, #40	; 0x28
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40005400 	.word	0x40005400
 8002624:	40023800 	.word	0x40023800
 8002628:	40020400 	.word	0x40020400

0800262c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	; 0x30
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 800263c:	2300      	movs	r3, #0
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	4b2e      	ldr	r3, [pc, #184]	; (80026fc <HAL_InitTick+0xd0>)
 8002642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002644:	4a2d      	ldr	r2, [pc, #180]	; (80026fc <HAL_InitTick+0xd0>)
 8002646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264a:	6453      	str	r3, [r2, #68]	; 0x44
 800264c:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <HAL_InitTick+0xd0>)
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002658:	f107 020c 	add.w	r2, r7, #12
 800265c:	f107 0310 	add.w	r3, r7, #16
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f002 fe2e 	bl	80052c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002668:	f002 fe18 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 800266c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	4a23      	ldr	r2, [pc, #140]	; (8002700 <HAL_InitTick+0xd4>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	0c9b      	lsrs	r3, r3, #18
 8002678:	3b01      	subs	r3, #1
 800267a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 800267c:	4b21      	ldr	r3, [pc, #132]	; (8002704 <HAL_InitTick+0xd8>)
 800267e:	4a22      	ldr	r2, [pc, #136]	; (8002708 <HAL_InitTick+0xdc>)
 8002680:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_InitTick+0xd8>)
 8002684:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002688:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800268a:	4a1e      	ldr	r2, [pc, #120]	; (8002704 <HAL_InitTick+0xd8>)
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8002690:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <HAL_InitTick+0xd8>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002696:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <HAL_InitTick+0xd8>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269c:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_InitTick+0xd8>)
 800269e:	2200      	movs	r2, #0
 80026a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80026a2:	4818      	ldr	r0, [pc, #96]	; (8002704 <HAL_InitTick+0xd8>)
 80026a4:	f002 fe40 	bl	8005328 <HAL_TIM_Base_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80026ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d11b      	bne.n	80026ee <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 80026b6:	4813      	ldr	r0, [pc, #76]	; (8002704 <HAL_InitTick+0xd8>)
 80026b8:	f002 fe90 	bl	80053dc <HAL_TIM_Base_Start_IT>
 80026bc:	4603      	mov	r3, r0
 80026be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80026c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d111      	bne.n	80026ee <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80026ca:	2018      	movs	r0, #24
 80026cc:	f000 fe5e 	bl	800338c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b0f      	cmp	r3, #15
 80026d4:	d808      	bhi.n	80026e8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80026d6:	2200      	movs	r2, #0
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	2018      	movs	r0, #24
 80026dc:	f000 fe3a 	bl	8003354 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026e0:	4a0a      	ldr	r2, [pc, #40]	; (800270c <HAL_InitTick+0xe0>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e002      	b.n	80026ee <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80026ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3730      	adds	r7, #48	; 0x30
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	431bde83 	.word	0x431bde83
 8002704:	20000328 	.word	0x20000328
 8002708:	40014000 	.word	0x40014000
 800270c:	20000024 	.word	0x20000024

08002710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <NMI_Handler+0x4>

08002716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800271a:	e7fe      	b.n	800271a <HardFault_Handler+0x4>

0800271c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002720:	e7fe      	b.n	8002720 <MemManage_Handler+0x4>

08002722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002726:	e7fe      	b.n	8002726 <BusFault_Handler+0x4>

08002728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800272c:	e7fe      	b.n	800272c <UsageFault_Handler+0x4>

0800272e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800272e:	b480      	push	{r7}
 8002730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002740:	4802      	ldr	r0, [pc, #8]	; (800274c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002742:	f002 fead 	bl	80054a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000328 	.word	0x20000328

08002750 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
	return 1;
 8002754:	2301      	movs	r3, #1
}
 8002756:	4618      	mov	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <_kill>:

int _kill(int pid, int sig)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800276a:	f005 fdef 	bl	800834c <__errno>
 800276e:	4603      	mov	r3, r0
 8002770:	2216      	movs	r2, #22
 8002772:	601a      	str	r2, [r3, #0]
	return -1;
 8002774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <_exit>:

void _exit (int status)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002788:	f04f 31ff 	mov.w	r1, #4294967295
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ffe7 	bl	8002760 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002792:	e7fe      	b.n	8002792 <_exit+0x12>

08002794 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	e00a      	b.n	80027bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027a6:	f3af 8000 	nop.w
 80027aa:	4601      	mov	r1, r0
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	60ba      	str	r2, [r7, #8]
 80027b2:	b2ca      	uxtb	r2, r1
 80027b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	3301      	adds	r3, #1
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	dbf0      	blt.n	80027a6 <_read+0x12>
	}

return len;
 80027c4:	687b      	ldr	r3, [r7, #4]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b086      	sub	sp, #24
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	e009      	b.n	80027f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	60ba      	str	r2, [r7, #8]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	dbf1      	blt.n	80027e0 <_write+0x12>
	}
	return len;
 80027fc:	687b      	ldr	r3, [r7, #4]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <_close>:

int _close(int file)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
	return -1;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800282e:	605a      	str	r2, [r3, #4]
	return 0;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <_isatty>:

int _isatty(int file)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
	return 1;
 8002846:	2301      	movs	r3, #1
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
	return 0;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002878:	4a14      	ldr	r2, [pc, #80]	; (80028cc <_sbrk+0x5c>)
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <_sbrk+0x60>)
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <_sbrk+0x64>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <_sbrk+0x64>)
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <_sbrk+0x68>)
 8002890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <_sbrk+0x64>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	429a      	cmp	r2, r3
 800289e:	d207      	bcs.n	80028b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028a0:	f005 fd54 	bl	800834c <__errno>
 80028a4:	4603      	mov	r3, r0
 80028a6:	220c      	movs	r2, #12
 80028a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028aa:	f04f 33ff 	mov.w	r3, #4294967295
 80028ae:	e009      	b.n	80028c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <_sbrk+0x64>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <_sbrk+0x64>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <_sbrk+0x64>)
 80028c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028c2:	68fb      	ldr	r3, [r7, #12]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20018000 	.word	0x20018000
 80028d0:	00000400 	.word	0x00000400
 80028d4:	20000370 	.word	0x20000370
 80028d8:	20004cd8 	.word	0x20004cd8

080028dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <SystemInit+0x20>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	4a05      	ldr	r2, [pc, #20]	; (80028fc <SystemInit+0x20>)
 80028e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8002900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002938 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002904:	480d      	ldr	r0, [pc, #52]	; (800293c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002906:	490e      	ldr	r1, [pc, #56]	; (8002940 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002908:	4a0e      	ldr	r2, [pc, #56]	; (8002944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800290a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800290c:	e002      	b.n	8002914 <LoopCopyDataInit>

0800290e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800290e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002912:	3304      	adds	r3, #4

08002914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002918:	d3f9      	bcc.n	800290e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291a:	4a0b      	ldr	r2, [pc, #44]	; (8002948 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800291c:	4c0b      	ldr	r4, [pc, #44]	; (800294c <LoopFillZerobss+0x26>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002920:	e001      	b.n	8002926 <LoopFillZerobss>

08002922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002924:	3204      	adds	r2, #4

08002926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002928:	d3fb      	bcc.n	8002922 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800292a:	f7ff ffd7 	bl	80028dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800292e:	f005 fd13 	bl	8008358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002932:	f7ff fad9 	bl	8001ee8 <main>
  bx  lr    
 8002936:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002938:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800293c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002940:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002944:	0800d1fc 	.word	0x0800d1fc
  ldr r2, =_sbss
 8002948:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800294c:	20004cd8 	.word	0x20004cd8

08002950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002950:	e7fe      	b.n	8002950 <ADC_IRQHandler>
	...

08002954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002958:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_Init+0x40>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0d      	ldr	r2, [pc, #52]	; (8002994 <HAL_Init+0x40>)
 800295e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_Init+0x40>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <HAL_Init+0x40>)
 800296a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800296e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_Init+0x40>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a07      	ldr	r2, [pc, #28]	; (8002994 <HAL_Init+0x40>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297c:	2003      	movs	r0, #3
 800297e:	f000 fcde 	bl	800333e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002982:	200f      	movs	r0, #15
 8002984:	f7ff fe52 	bl	800262c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002988:	f7ff fd98 	bl	80024bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023c00 	.word	0x40023c00

08002998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_IncTick+0x20>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_IncTick+0x24>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <HAL_IncTick+0x24>)
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000028 	.word	0x20000028
 80029bc:	20000374 	.word	0x20000374

080029c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return uwTick;
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <HAL_GetTick+0x14>)
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000374 	.word	0x20000374

080029d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e0:	f7ff ffee 	bl	80029c0 <HAL_GetTick>
 80029e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d005      	beq.n	80029fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <HAL_Delay+0x44>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4413      	add	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029fe:	bf00      	nop
 8002a00:	f7ff ffde 	bl	80029c0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d8f7      	bhi.n	8002a00 <HAL_Delay+0x28>
  {
  }
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000028 	.word	0x20000028

08002a20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e033      	b.n	8002a9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff fd68 	bl	8002514 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d118      	bne.n	8002a90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a66:	f023 0302 	bic.w	r3, r3, #2
 8002a6a:	f043 0202 	orr.w	r2, r3, #2
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 faba 	bl	8002fec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f023 0303 	bic.w	r3, r3, #3
 8002a86:	f043 0201 	orr.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8002a8e:	e001      	b.n	8002a94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_Start+0x1a>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e097      	b.n	8002bf2 <HAL_ADC_Start+0x14a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d018      	beq.n	8002b0a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae8:	4b45      	ldr	r3, [pc, #276]	; (8002c00 <HAL_ADC_Start+0x158>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a45      	ldr	r2, [pc, #276]	; (8002c04 <HAL_ADC_Start+0x15c>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0c9a      	lsrs	r2, r3, #18
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002afc:	e002      	b.n	8002b04 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f9      	bne.n	8002afe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d15f      	bne.n	8002bd8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b56:	d106      	bne.n	8002b66 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5c:	f023 0206 	bic.w	r2, r3, #6
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44
 8002b64:	e002      	b.n	8002b6c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b74:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_ADC_Start+0x160>)
 8002b76:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b80:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10f      	bne.n	8002bae <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d129      	bne.n	8002bf0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	e020      	b.n	8002bf0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a16      	ldr	r2, [pc, #88]	; (8002c0c <HAL_ADC_Start+0x164>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d11b      	bne.n	8002bf0 <HAL_ADC_Start+0x148>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d114      	bne.n	8002bf0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	e00b      	b.n	8002bf0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f043 0210 	orr.w	r2, r3, #16
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	f043 0201 	orr.w	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000020 	.word	0x20000020
 8002c04:	431bde83 	.word	0x431bde83
 8002c08:	40012300 	.word	0x40012300
 8002c0c:	40012000 	.word	0x40012000

08002c10 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_ADC_Stop+0x16>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e021      	b.n	8002c6a <HAL_ADC_Stop+0x5a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	f043 0201 	orr.w	r2, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c92:	d113      	bne.n	8002cbc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca2:	d10b      	bne.n	8002cbc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e063      	b.n	8002d84 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002cbc:	f7ff fe80 	bl	80029c0 <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cc2:	e021      	b.n	8002d08 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cca:	d01d      	beq.n	8002d08 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_ADC_PollForConversion+0x6c>
 8002cd2:	f7ff fe75 	bl	80029c0 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d212      	bcs.n	8002d08 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d00b      	beq.n	8002d08 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f043 0204 	orr.w	r2, r3, #4
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e03d      	b.n	8002d84 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d1d6      	bne.n	8002cc4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f06f 0212 	mvn.w	r2, #18
 8002d1e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d123      	bne.n	8002d82 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d11f      	bne.n	8002d82 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d006      	beq.n	8002d5e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d111      	bne.n	8002d82 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1c>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e105      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x228>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b09      	cmp	r3, #9
 8002dd2:	d925      	bls.n	8002e20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68d9      	ldr	r1, [r3, #12]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	3b1e      	subs	r3, #30
 8002dea:	2207      	movs	r2, #7
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43da      	mvns	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	400a      	ands	r2, r1
 8002df8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68d9      	ldr	r1, [r3, #12]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4403      	add	r3, r0
 8002e12:	3b1e      	subs	r3, #30
 8002e14:	409a      	lsls	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	e022      	b.n	8002e66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6919      	ldr	r1, [r3, #16]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	2207      	movs	r2, #7
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	400a      	ands	r2, r1
 8002e42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6919      	ldr	r1, [r3, #16]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	4618      	mov	r0, r3
 8002e56:	4603      	mov	r3, r0
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4403      	add	r3, r0
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d824      	bhi.n	8002eb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3b05      	subs	r3, #5
 8002e80:	221f      	movs	r2, #31
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43da      	mvns	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3b05      	subs	r3, #5
 8002eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002eb6:	e04c      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d824      	bhi.n	8002f0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	3b23      	subs	r3, #35	; 0x23
 8002ed2:	221f      	movs	r2, #31
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43da      	mvns	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	400a      	ands	r2, r1
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	3b23      	subs	r3, #35	; 0x23
 8002efc:	fa00 f203 	lsl.w	r2, r0, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
 8002f08:	e023      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	3b41      	subs	r3, #65	; 0x41
 8002f1c:	221f      	movs	r2, #31
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	400a      	ands	r2, r1
 8002f2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	3b41      	subs	r3, #65	; 0x41
 8002f46:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <HAL_ADC_ConfigChannel+0x234>)
 8002f54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a21      	ldr	r2, [pc, #132]	; (8002fe0 <HAL_ADC_ConfigChannel+0x238>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d109      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x1cc>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b12      	cmp	r3, #18
 8002f66:	d105      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <HAL_ADC_ConfigChannel+0x238>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d123      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x21e>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d003      	beq.n	8002f8e <HAL_ADC_ConfigChannel+0x1e6>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b11      	cmp	r3, #17
 8002f8c:	d11b      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	d111      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <HAL_ADC_ConfigChannel+0x23c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <HAL_ADC_ConfigChannel+0x240>)
 8002fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fac:	0c9a      	lsrs	r2, r3, #18
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fb8:	e002      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f9      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	40012300 	.word	0x40012300
 8002fe0:	40012000 	.word	0x40012000
 8002fe4:	20000020 	.word	0x20000020
 8002fe8:	431bde83 	.word	0x431bde83

08002fec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ff4:	4b79      	ldr	r3, [pc, #484]	; (80031dc <ADC_Init+0x1f0>)
 8002ff6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	431a      	orrs	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	021a      	lsls	r2, r3, #8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6899      	ldr	r1, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	4a58      	ldr	r2, [pc, #352]	; (80031e0 <ADC_Init+0x1f4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d022      	beq.n	80030ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003092:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6899      	ldr	r1, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6899      	ldr	r1, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	e00f      	b.n	80030ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0202 	bic.w	r2, r2, #2
 80030f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6899      	ldr	r1, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	7e1b      	ldrb	r3, [r3, #24]
 8003104:	005a      	lsls	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01b      	beq.n	8003150 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003126:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003136:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	3b01      	subs	r3, #1
 8003144:	035a      	lsls	r2, r3, #13
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	e007      	b.n	8003160 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800315e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800316e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	3b01      	subs	r3, #1
 800317c:	051a      	lsls	r2, r3, #20
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031a2:	025a      	lsls	r2, r3, #9
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6899      	ldr	r1, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	029a      	lsls	r2, r3, #10
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40012300 	.word	0x40012300
 80031e0:	0f000001 	.word	0x0f000001

080031e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003200:	4013      	ands	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800320c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003216:	4a04      	ldr	r2, [pc, #16]	; (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	60d3      	str	r3, [r2, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <__NVIC_GetPriorityGrouping+0x18>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f003 0307 	and.w	r3, r3, #7
}
 800323a:	4618      	mov	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	2b00      	cmp	r3, #0
 8003258:	db0b      	blt.n	8003272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	f003 021f 	and.w	r2, r3, #31
 8003260:	4907      	ldr	r1, [pc, #28]	; (8003280 <__NVIC_EnableIRQ+0x38>)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2001      	movs	r0, #1
 800326a:	fa00 f202 	lsl.w	r2, r0, r2
 800326e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000e100 	.word	0xe000e100

08003284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	6039      	str	r1, [r7, #0]
 800328e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003294:	2b00      	cmp	r3, #0
 8003296:	db0a      	blt.n	80032ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	b2da      	uxtb	r2, r3
 800329c:	490c      	ldr	r1, [pc, #48]	; (80032d0 <__NVIC_SetPriority+0x4c>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	0112      	lsls	r2, r2, #4
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	440b      	add	r3, r1
 80032a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032ac:	e00a      	b.n	80032c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4908      	ldr	r1, [pc, #32]	; (80032d4 <__NVIC_SetPriority+0x50>)
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	3b04      	subs	r3, #4
 80032bc:	0112      	lsls	r2, r2, #4
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	440b      	add	r3, r1
 80032c2:	761a      	strb	r2, [r3, #24]
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000e100 	.word	0xe000e100
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	; 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f1c3 0307 	rsb	r3, r3, #7
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	bf28      	it	cs
 80032f6:	2304      	movcs	r3, #4
 80032f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d902      	bls.n	8003308 <NVIC_EncodePriority+0x30>
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3b03      	subs	r3, #3
 8003306:	e000      	b.n	800330a <NVIC_EncodePriority+0x32>
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800330c:	f04f 32ff 	mov.w	r2, #4294967295
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	401a      	ands	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003320:	f04f 31ff 	mov.w	r1, #4294967295
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	43d9      	mvns	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003330:	4313      	orrs	r3, r2
         );
}
 8003332:	4618      	mov	r0, r3
 8003334:	3724      	adds	r7, #36	; 0x24
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ff4c 	bl	80031e4 <__NVIC_SetPriorityGrouping>
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003366:	f7ff ff61 	bl	800322c <__NVIC_GetPriorityGrouping>
 800336a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	6978      	ldr	r0, [r7, #20]
 8003372:	f7ff ffb1 	bl	80032d8 <NVIC_EncodePriority>
 8003376:	4602      	mov	r2, r0
 8003378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337c:	4611      	mov	r1, r2
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff ff80 	bl	8003284 <__NVIC_SetPriority>
}
 8003384:	bf00      	nop
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff ff54 	bl	8003248 <__NVIC_EnableIRQ>
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	e159      	b.n	8003678 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033c4:	2201      	movs	r2, #1
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	429a      	cmp	r2, r3
 80033de:	f040 8148 	bne.w	8003672 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d005      	beq.n	80033fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d130      	bne.n	800345c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	2203      	movs	r2, #3
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003430:	2201      	movs	r2, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 0201 	and.w	r2, r3, #1
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	2b03      	cmp	r3, #3
 8003466:	d017      	beq.n	8003498 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	2203      	movs	r2, #3
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d123      	bne.n	80034ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	08da      	lsrs	r2, r3, #3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3208      	adds	r2, #8
 80034ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	220f      	movs	r2, #15
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	08da      	lsrs	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3208      	adds	r2, #8
 80034e6:	69b9      	ldr	r1, [r7, #24]
 80034e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	2203      	movs	r2, #3
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0203 	and.w	r2, r3, #3
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80a2 	beq.w	8003672 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	4b57      	ldr	r3, [pc, #348]	; (8003690 <HAL_GPIO_Init+0x2e8>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	4a56      	ldr	r2, [pc, #344]	; (8003690 <HAL_GPIO_Init+0x2e8>)
 8003538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800353c:	6453      	str	r3, [r2, #68]	; 0x44
 800353e:	4b54      	ldr	r3, [pc, #336]	; (8003690 <HAL_GPIO_Init+0x2e8>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800354a:	4a52      	ldr	r2, [pc, #328]	; (8003694 <HAL_GPIO_Init+0x2ec>)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	3302      	adds	r3, #2
 8003552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	220f      	movs	r2, #15
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4013      	ands	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a49      	ldr	r2, [pc, #292]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d019      	beq.n	80035aa <HAL_GPIO_Init+0x202>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a48      	ldr	r2, [pc, #288]	; (800369c <HAL_GPIO_Init+0x2f4>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_GPIO_Init+0x1fe>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a47      	ldr	r2, [pc, #284]	; (80036a0 <HAL_GPIO_Init+0x2f8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00d      	beq.n	80035a2 <HAL_GPIO_Init+0x1fa>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a46      	ldr	r2, [pc, #280]	; (80036a4 <HAL_GPIO_Init+0x2fc>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d007      	beq.n	800359e <HAL_GPIO_Init+0x1f6>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a45      	ldr	r2, [pc, #276]	; (80036a8 <HAL_GPIO_Init+0x300>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_GPIO_Init+0x1f2>
 8003596:	2304      	movs	r3, #4
 8003598:	e008      	b.n	80035ac <HAL_GPIO_Init+0x204>
 800359a:	2307      	movs	r3, #7
 800359c:	e006      	b.n	80035ac <HAL_GPIO_Init+0x204>
 800359e:	2303      	movs	r3, #3
 80035a0:	e004      	b.n	80035ac <HAL_GPIO_Init+0x204>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e002      	b.n	80035ac <HAL_GPIO_Init+0x204>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_GPIO_Init+0x204>
 80035aa:	2300      	movs	r3, #0
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	f002 0203 	and.w	r2, r2, #3
 80035b2:	0092      	lsls	r2, r2, #2
 80035b4:	4093      	lsls	r3, r2
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035bc:	4935      	ldr	r1, [pc, #212]	; (8003694 <HAL_GPIO_Init+0x2ec>)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	089b      	lsrs	r3, r3, #2
 80035c2:	3302      	adds	r3, #2
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ca:	4b38      	ldr	r3, [pc, #224]	; (80036ac <HAL_GPIO_Init+0x304>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	43db      	mvns	r3, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4013      	ands	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ee:	4a2f      	ldr	r2, [pc, #188]	; (80036ac <HAL_GPIO_Init+0x304>)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035f4:	4b2d      	ldr	r3, [pc, #180]	; (80036ac <HAL_GPIO_Init+0x304>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003618:	4a24      	ldr	r2, [pc, #144]	; (80036ac <HAL_GPIO_Init+0x304>)
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800361e:	4b23      	ldr	r3, [pc, #140]	; (80036ac <HAL_GPIO_Init+0x304>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003642:	4a1a      	ldr	r2, [pc, #104]	; (80036ac <HAL_GPIO_Init+0x304>)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003648:	4b18      	ldr	r3, [pc, #96]	; (80036ac <HAL_GPIO_Init+0x304>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800366c:	4a0f      	ldr	r2, [pc, #60]	; (80036ac <HAL_GPIO_Init+0x304>)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3301      	adds	r3, #1
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	2b0f      	cmp	r3, #15
 800367c:	f67f aea2 	bls.w	80033c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	3724      	adds	r7, #36	; 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	40013800 	.word	0x40013800
 8003698:	40020000 	.word	0x40020000
 800369c:	40020400 	.word	0x40020400
 80036a0:	40020800 	.word	0x40020800
 80036a4:	40020c00 	.word	0x40020c00
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40013c00 	.word	0x40013c00

080036b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	887b      	ldrh	r3, [r7, #2]
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
 80036cc:	e001      	b.n	80036d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ce:	2300      	movs	r3, #0
 80036d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
 80036ec:	4613      	mov	r3, r2
 80036ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036f0:	787b      	ldrb	r3, [r7, #1]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036f6:	887a      	ldrh	r2, [r7, #2]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036fc:	e003      	b.n	8003706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036fe:	887b      	ldrh	r3, [r7, #2]
 8003700:	041a      	lsls	r2, r3, #16
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	619a      	str	r2, [r3, #24]
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e12b      	b.n	800397e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fe ff2e 	bl	800259c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2224      	movs	r2, #36	; 0x24
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0201 	bic.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003766:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003776:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003778:	f001 fd7c 	bl	8005274 <HAL_RCC_GetPCLK1Freq>
 800377c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	4a81      	ldr	r2, [pc, #516]	; (8003988 <HAL_I2C_Init+0x274>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d807      	bhi.n	8003798 <HAL_I2C_Init+0x84>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4a80      	ldr	r2, [pc, #512]	; (800398c <HAL_I2C_Init+0x278>)
 800378c:	4293      	cmp	r3, r2
 800378e:	bf94      	ite	ls
 8003790:	2301      	movls	r3, #1
 8003792:	2300      	movhi	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e006      	b.n	80037a6 <HAL_I2C_Init+0x92>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4a7d      	ldr	r2, [pc, #500]	; (8003990 <HAL_I2C_Init+0x27c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	bf94      	ite	ls
 80037a0:	2301      	movls	r3, #1
 80037a2:	2300      	movhi	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e0e7      	b.n	800397e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4a78      	ldr	r2, [pc, #480]	; (8003994 <HAL_I2C_Init+0x280>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	0c9b      	lsrs	r3, r3, #18
 80037b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	4a6a      	ldr	r2, [pc, #424]	; (8003988 <HAL_I2C_Init+0x274>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d802      	bhi.n	80037e8 <HAL_I2C_Init+0xd4>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	3301      	adds	r3, #1
 80037e6:	e009      	b.n	80037fc <HAL_I2C_Init+0xe8>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037ee:	fb02 f303 	mul.w	r3, r2, r3
 80037f2:	4a69      	ldr	r2, [pc, #420]	; (8003998 <HAL_I2C_Init+0x284>)
 80037f4:	fba2 2303 	umull	r2, r3, r2, r3
 80037f8:	099b      	lsrs	r3, r3, #6
 80037fa:	3301      	adds	r3, #1
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	430b      	orrs	r3, r1
 8003802:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800380e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	495c      	ldr	r1, [pc, #368]	; (8003988 <HAL_I2C_Init+0x274>)
 8003818:	428b      	cmp	r3, r1
 800381a:	d819      	bhi.n	8003850 <HAL_I2C_Init+0x13c>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1e59      	subs	r1, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	fbb1 f3f3 	udiv	r3, r1, r3
 800382a:	1c59      	adds	r1, r3, #1
 800382c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003830:	400b      	ands	r3, r1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_I2C_Init+0x138>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1e59      	subs	r1, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	fbb1 f3f3 	udiv	r3, r1, r3
 8003844:	3301      	adds	r3, #1
 8003846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384a:	e051      	b.n	80038f0 <HAL_I2C_Init+0x1dc>
 800384c:	2304      	movs	r3, #4
 800384e:	e04f      	b.n	80038f0 <HAL_I2C_Init+0x1dc>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d111      	bne.n	800387c <HAL_I2C_Init+0x168>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	1e58      	subs	r0, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6859      	ldr	r1, [r3, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	440b      	add	r3, r1
 8003866:	fbb0 f3f3 	udiv	r3, r0, r3
 800386a:	3301      	adds	r3, #1
 800386c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003870:	2b00      	cmp	r3, #0
 8003872:	bf0c      	ite	eq
 8003874:	2301      	moveq	r3, #1
 8003876:	2300      	movne	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	e012      	b.n	80038a2 <HAL_I2C_Init+0x18e>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e58      	subs	r0, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	0099      	lsls	r1, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003892:	3301      	adds	r3, #1
 8003894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003898:	2b00      	cmp	r3, #0
 800389a:	bf0c      	ite	eq
 800389c:	2301      	moveq	r3, #1
 800389e:	2300      	movne	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_I2C_Init+0x196>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e022      	b.n	80038f0 <HAL_I2C_Init+0x1dc>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10e      	bne.n	80038d0 <HAL_I2C_Init+0x1bc>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1e58      	subs	r0, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6859      	ldr	r1, [r3, #4]
 80038ba:	460b      	mov	r3, r1
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	440b      	add	r3, r1
 80038c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c4:	3301      	adds	r3, #1
 80038c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ce:	e00f      	b.n	80038f0 <HAL_I2C_Init+0x1dc>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1e58      	subs	r0, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	0099      	lsls	r1, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e6:	3301      	adds	r3, #1
 80038e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	6809      	ldr	r1, [r1, #0]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69da      	ldr	r2, [r3, #28]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800391e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6911      	ldr	r1, [r2, #16]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68d2      	ldr	r2, [r2, #12]
 800392a:	4311      	orrs	r1, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	430b      	orrs	r3, r1
 8003932:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	000186a0 	.word	0x000186a0
 800398c:	001e847f 	.word	0x001e847f
 8003990:	003d08ff 	.word	0x003d08ff
 8003994:	431bde83 	.word	0x431bde83
 8003998:	10624dd3 	.word	0x10624dd3

0800399c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	461a      	mov	r2, r3
 80039a8:	460b      	mov	r3, r1
 80039aa:	817b      	strh	r3, [r7, #10]
 80039ac:	4613      	mov	r3, r2
 80039ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039b0:	f7ff f806 	bl	80029c0 <HAL_GetTick>
 80039b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b20      	cmp	r3, #32
 80039c0:	f040 80e0 	bne.w	8003b84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	2319      	movs	r3, #25
 80039ca:	2201      	movs	r2, #1
 80039cc:	4970      	ldr	r1, [pc, #448]	; (8003b90 <HAL_I2C_Master_Transmit+0x1f4>)
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fe02 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039da:	2302      	movs	r3, #2
 80039dc:	e0d3      	b.n	8003b86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_I2C_Master_Transmit+0x50>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e0cc      	b.n	8003b86 <HAL_I2C_Master_Transmit+0x1ea>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d007      	beq.n	8003a12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0201 	orr.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2221      	movs	r2, #33	; 0x21
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2210      	movs	r2, #16
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	893a      	ldrh	r2, [r7, #8]
 8003a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4a50      	ldr	r2, [pc, #320]	; (8003b94 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a54:	8979      	ldrh	r1, [r7, #10]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	6a3a      	ldr	r2, [r7, #32]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fbbc 	bl	80041d8 <I2C_MasterRequestWrite>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e08d      	b.n	8003b86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a80:	e066      	b.n	8003b50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	6a39      	ldr	r1, [r7, #32]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fe7c 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00d      	beq.n	8003aae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d107      	bne.n	8003aaa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e06b      	b.n	8003b86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	781a      	ldrb	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d11b      	bne.n	8003b24 <HAL_I2C_Master_Transmit+0x188>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d017      	beq.n	8003b24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	781a      	ldrb	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	6a39      	ldr	r1, [r7, #32]
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fe6c 	bl	8004806 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00d      	beq.n	8003b50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d107      	bne.n	8003b4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e01a      	b.n	8003b86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d194      	bne.n	8003a82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e000      	b.n	8003b86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
  }
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	00100002 	.word	0x00100002
 8003b94:	ffff0000 	.word	0xffff0000

08003b98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	817b      	strh	r3, [r7, #10]
 8003baa:	460b      	mov	r3, r1
 8003bac:	813b      	strh	r3, [r7, #8]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bb2:	f7fe ff05 	bl	80029c0 <HAL_GetTick>
 8003bb6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	f040 80d9 	bne.w	8003d78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	2319      	movs	r3, #25
 8003bcc:	2201      	movs	r2, #1
 8003bce:	496d      	ldr	r1, [pc, #436]	; (8003d84 <HAL_I2C_Mem_Write+0x1ec>)
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fd01 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e0cc      	b.n	8003d7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_I2C_Mem_Write+0x56>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e0c5      	b.n	8003d7a <HAL_I2C_Mem_Write+0x1e2>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d007      	beq.n	8003c14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2221      	movs	r2, #33	; 0x21
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2240      	movs	r2, #64	; 0x40
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a3a      	ldr	r2, [r7, #32]
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4a4d      	ldr	r2, [pc, #308]	; (8003d88 <HAL_I2C_Mem_Write+0x1f0>)
 8003c54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c56:	88f8      	ldrh	r0, [r7, #6]
 8003c58:	893a      	ldrh	r2, [r7, #8]
 8003c5a:	8979      	ldrh	r1, [r7, #10]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	4603      	mov	r3, r0
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fb38 	bl	80042dc <I2C_RequestMemoryWrite>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d052      	beq.n	8003d18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e081      	b.n	8003d7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fd82 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00d      	beq.n	8003ca2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d107      	bne.n	8003c9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e06b      	b.n	8003d7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	781a      	ldrb	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d11b      	bne.n	8003d18 <HAL_I2C_Mem_Write+0x180>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d017      	beq.n	8003d18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	781a      	ldrb	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1aa      	bne.n	8003c76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fd6e 	bl	8004806 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00d      	beq.n	8003d4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d107      	bne.n	8003d48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e016      	b.n	8003d7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	e000      	b.n	8003d7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
  }
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	00100002 	.word	0x00100002
 8003d88:	ffff0000 	.word	0xffff0000

08003d8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08c      	sub	sp, #48	; 0x30
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	4608      	mov	r0, r1
 8003d96:	4611      	mov	r1, r2
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	817b      	strh	r3, [r7, #10]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	813b      	strh	r3, [r7, #8]
 8003da2:	4613      	mov	r3, r2
 8003da4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003da6:	f7fe fe0b 	bl	80029c0 <HAL_GetTick>
 8003daa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	f040 8208 	bne.w	80041ca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	2319      	movs	r3, #25
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	497b      	ldr	r1, [pc, #492]	; (8003fb0 <HAL_I2C_Mem_Read+0x224>)
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fc07 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e1fb      	b.n	80041cc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_I2C_Mem_Read+0x56>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e1f4      	b.n	80041cc <HAL_I2C_Mem_Read+0x440>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d007      	beq.n	8003e08 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2222      	movs	r2, #34	; 0x22
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2240      	movs	r2, #64	; 0x40
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4a5b      	ldr	r2, [pc, #364]	; (8003fb4 <HAL_I2C_Mem_Read+0x228>)
 8003e48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e4a:	88f8      	ldrh	r0, [r7, #6]
 8003e4c:	893a      	ldrh	r2, [r7, #8]
 8003e4e:	8979      	ldrh	r1, [r7, #10]
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	9301      	str	r3, [sp, #4]
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	4603      	mov	r3, r0
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fad4 	bl	8004408 <I2C_RequestMemoryRead>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e1b0      	b.n	80041cc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d113      	bne.n	8003e9a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e72:	2300      	movs	r3, #0
 8003e74:	623b      	str	r3, [r7, #32]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	623b      	str	r3, [r7, #32]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	623b      	str	r3, [r7, #32]
 8003e86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	e184      	b.n	80041a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d11b      	bne.n	8003eda <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	e164      	b.n	80041a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d11b      	bne.n	8003f1a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f02:	2300      	movs	r3, #0
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	e144      	b.n	80041a4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f30:	e138      	b.n	80041a4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	f200 80f1 	bhi.w	800411e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d123      	bne.n	8003f8c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 fc9d 	bl	8004888 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e139      	b.n	80041cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f8a:	e10b      	b.n	80041a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d14e      	bne.n	8004032 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	4906      	ldr	r1, [pc, #24]	; (8003fb8 <HAL_I2C_Mem_Read+0x22c>)
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fb1a 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e10e      	b.n	80041cc <HAL_I2C_Mem_Read+0x440>
 8003fae:	bf00      	nop
 8003fb0:	00100002 	.word	0x00100002
 8003fb4:	ffff0000 	.word	0xffff0000
 8003fb8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	b2d2      	uxtb	r2, r2
 800400a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004030:	e0b8      	b.n	80041a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	2200      	movs	r2, #0
 800403a:	4966      	ldr	r1, [pc, #408]	; (80041d4 <HAL_I2C_Mem_Read+0x448>)
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 facb 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0bf      	b.n	80041cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004094:	2200      	movs	r2, #0
 8004096:	494f      	ldr	r1, [pc, #316]	; (80041d4 <HAL_I2C_Mem_Read+0x448>)
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fa9d 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e091      	b.n	80041cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800411c:	e042      	b.n	80041a4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004120:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 fbb0 	bl	8004888 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e04c      	b.n	80041cc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b04      	cmp	r3, #4
 8004170:	d118      	bne.n	80041a4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f47f aec2 	bne.w	8003f32 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e000      	b.n	80041cc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
  }
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3728      	adds	r7, #40	; 0x28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	00010004 	.word	0x00010004

080041d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	607a      	str	r2, [r7, #4]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	460b      	mov	r3, r1
 80041e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d006      	beq.n	8004202 <I2C_MasterRequestWrite+0x2a>
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d003      	beq.n	8004202 <I2C_MasterRequestWrite+0x2a>
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004200:	d108      	bne.n	8004214 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	e00b      	b.n	800422c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	2b12      	cmp	r3, #18
 800421a:	d107      	bne.n	800422c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800422a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f9cd 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00d      	beq.n	8004260 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004252:	d103      	bne.n	800425c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800425a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e035      	b.n	80042cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004268:	d108      	bne.n	800427c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800426a:	897b      	ldrh	r3, [r7, #10]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004278:	611a      	str	r2, [r3, #16]
 800427a:	e01b      	b.n	80042b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800427c:	897b      	ldrh	r3, [r7, #10]
 800427e:	11db      	asrs	r3, r3, #7
 8004280:	b2db      	uxtb	r3, r3
 8004282:	f003 0306 	and.w	r3, r3, #6
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f063 030f 	orn	r3, r3, #15
 800428c:	b2da      	uxtb	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	490e      	ldr	r1, [pc, #56]	; (80042d4 <I2C_MasterRequestWrite+0xfc>)
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f9f3 	bl	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e010      	b.n	80042cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042aa:	897b      	ldrh	r3, [r7, #10]
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	4907      	ldr	r1, [pc, #28]	; (80042d8 <I2C_MasterRequestWrite+0x100>)
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f9e3 	bl	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	00010008 	.word	0x00010008
 80042d8:	00010002 	.word	0x00010002

080042dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	4608      	mov	r0, r1
 80042e6:	4611      	mov	r1, r2
 80042e8:	461a      	mov	r2, r3
 80042ea:	4603      	mov	r3, r0
 80042ec:	817b      	strh	r3, [r7, #10]
 80042ee:	460b      	mov	r3, r1
 80042f0:	813b      	strh	r3, [r7, #8]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004304:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	2200      	movs	r2, #0
 800430e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f960 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00d      	beq.n	800433a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432c:	d103      	bne.n	8004336 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004334:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e05f      	b.n	80043fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800433a:	897b      	ldrh	r3, [r7, #10]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004348:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	6a3a      	ldr	r2, [r7, #32]
 800434e:	492d      	ldr	r1, [pc, #180]	; (8004404 <I2C_RequestMemoryWrite+0x128>)
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f998 	bl	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e04c      	b.n	80043fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004378:	6a39      	ldr	r1, [r7, #32]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fa02 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2b04      	cmp	r3, #4
 800438c:	d107      	bne.n	800439e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e02b      	b.n	80043fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043a2:	88fb      	ldrh	r3, [r7, #6]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043a8:	893b      	ldrh	r3, [r7, #8]
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	611a      	str	r2, [r3, #16]
 80043b2:	e021      	b.n	80043f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043b4:	893b      	ldrh	r3, [r7, #8]
 80043b6:	0a1b      	lsrs	r3, r3, #8
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c4:	6a39      	ldr	r1, [r7, #32]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f9dc 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00d      	beq.n	80043ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d107      	bne.n	80043ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e005      	b.n	80043fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043ee:	893b      	ldrh	r3, [r7, #8]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	00010002 	.word	0x00010002

08004408 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	4608      	mov	r0, r1
 8004412:	4611      	mov	r1, r2
 8004414:	461a      	mov	r2, r3
 8004416:	4603      	mov	r3, r0
 8004418:	817b      	strh	r3, [r7, #10]
 800441a:	460b      	mov	r3, r1
 800441c:	813b      	strh	r3, [r7, #8]
 800441e:	4613      	mov	r3, r2
 8004420:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004430:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004440:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	2200      	movs	r2, #0
 800444a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f8c2 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00d      	beq.n	8004476 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004468:	d103      	bne.n	8004472 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e0aa      	b.n	80045cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004476:	897b      	ldrh	r3, [r7, #10]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004484:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	6a3a      	ldr	r2, [r7, #32]
 800448a:	4952      	ldr	r1, [pc, #328]	; (80045d4 <I2C_RequestMemoryRead+0x1cc>)
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f8fa 	bl	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e097      	b.n	80045cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b4:	6a39      	ldr	r1, [r7, #32]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f964 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00d      	beq.n	80044de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d107      	bne.n	80044da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e076      	b.n	80045cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d105      	bne.n	80044f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044e4:	893b      	ldrh	r3, [r7, #8]
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	611a      	str	r2, [r3, #16]
 80044ee:	e021      	b.n	8004534 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044f0:	893b      	ldrh	r3, [r7, #8]
 80044f2:	0a1b      	lsrs	r3, r3, #8
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004500:	6a39      	ldr	r1, [r7, #32]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f93e 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	2b04      	cmp	r3, #4
 8004514:	d107      	bne.n	8004526 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004524:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e050      	b.n	80045cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800452a:	893b      	ldrh	r3, [r7, #8]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004536:	6a39      	ldr	r1, [r7, #32]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f923 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00d      	beq.n	8004560 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	2b04      	cmp	r3, #4
 800454a:	d107      	bne.n	800455c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e035      	b.n	80045cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800456e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	2200      	movs	r2, #0
 8004578:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f82b 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00d      	beq.n	80045a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004596:	d103      	bne.n	80045a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800459e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e013      	b.n	80045cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045a4:	897b      	ldrh	r3, [r7, #10]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	6a3a      	ldr	r2, [r7, #32]
 80045b8:	4906      	ldr	r1, [pc, #24]	; (80045d4 <I2C_RequestMemoryRead+0x1cc>)
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f863 	bl	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	00010002 	.word	0x00010002

080045d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045e8:	e025      	b.n	8004636 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d021      	beq.n	8004636 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f2:	f7fe f9e5 	bl	80029c0 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d302      	bcc.n	8004608 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d116      	bne.n	8004636 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e023      	b.n	800467e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	0c1b      	lsrs	r3, r3, #16
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d10d      	bne.n	800465c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	43da      	mvns	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4013      	ands	r3, r2
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	bf0c      	ite	eq
 8004652:	2301      	moveq	r3, #1
 8004654:	2300      	movne	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	e00c      	b.n	8004676 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	43da      	mvns	r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4013      	ands	r3, r2
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	bf0c      	ite	eq
 800466e:	2301      	moveq	r3, #1
 8004670:	2300      	movne	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	429a      	cmp	r2, r3
 800467a:	d0b6      	beq.n	80045ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	607a      	str	r2, [r7, #4]
 8004692:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004694:	e051      	b.n	800473a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a4:	d123      	bne.n	80046ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f043 0204 	orr.w	r2, r3, #4
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e046      	b.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f4:	d021      	beq.n	800473a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f6:	f7fe f963 	bl	80029c0 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	429a      	cmp	r2, r3
 8004704:	d302      	bcc.n	800470c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d116      	bne.n	800473a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f043 0220 	orr.w	r2, r3, #32
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e020      	b.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	0c1b      	lsrs	r3, r3, #16
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d10c      	bne.n	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	43da      	mvns	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4013      	ands	r3, r2
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	bf14      	ite	ne
 8004756:	2301      	movne	r3, #1
 8004758:	2300      	moveq	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	e00b      	b.n	8004776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	43da      	mvns	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4013      	ands	r3, r2
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d18d      	bne.n	8004696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004790:	e02d      	b.n	80047ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 f8ce 	bl	8004934 <I2C_IsAcknowledgeFailed>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e02d      	b.n	80047fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a8:	d021      	beq.n	80047ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047aa:	f7fe f909 	bl	80029c0 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d302      	bcc.n	80047c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d116      	bne.n	80047ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f043 0220 	orr.w	r2, r3, #32
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e007      	b.n	80047fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f8:	2b80      	cmp	r3, #128	; 0x80
 80047fa:	d1ca      	bne.n	8004792 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004812:	e02d      	b.n	8004870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f88d 	bl	8004934 <I2C_IsAcknowledgeFailed>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e02d      	b.n	8004880 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482a:	d021      	beq.n	8004870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482c:	f7fe f8c8 	bl	80029c0 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	429a      	cmp	r2, r3
 800483a:	d302      	bcc.n	8004842 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d116      	bne.n	8004870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	f043 0220 	orr.w	r2, r3, #32
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e007      	b.n	8004880 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b04      	cmp	r3, #4
 800487c:	d1ca      	bne.n	8004814 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004894:	e042      	b.n	800491c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d119      	bne.n	80048d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0210 	mvn.w	r2, #16
 80048ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e029      	b.n	800492c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d8:	f7fe f872 	bl	80029c0 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d302      	bcc.n	80048ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d116      	bne.n	800491c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	f043 0220 	orr.w	r2, r3, #32
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e007      	b.n	800492c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	d1b5      	bne.n	8004896 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494a:	d11b      	bne.n	8004984 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004954:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	f043 0204 	orr.w	r2, r3, #4
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
	...

08004994 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e267      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d075      	beq.n	8004a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049b2:	4b88      	ldr	r3, [pc, #544]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d00c      	beq.n	80049d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049be:	4b85      	ldr	r3, [pc, #532]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d112      	bne.n	80049f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ca:	4b82      	ldr	r3, [pc, #520]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d6:	d10b      	bne.n	80049f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d8:	4b7e      	ldr	r3, [pc, #504]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d05b      	beq.n	8004a9c <HAL_RCC_OscConfig+0x108>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d157      	bne.n	8004a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e242      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f8:	d106      	bne.n	8004a08 <HAL_RCC_OscConfig+0x74>
 80049fa:	4b76      	ldr	r3, [pc, #472]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a75      	ldr	r2, [pc, #468]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	e01d      	b.n	8004a44 <HAL_RCC_OscConfig+0xb0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a10:	d10c      	bne.n	8004a2c <HAL_RCC_OscConfig+0x98>
 8004a12:	4b70      	ldr	r3, [pc, #448]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a6f      	ldr	r2, [pc, #444]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	4b6d      	ldr	r3, [pc, #436]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a6c      	ldr	r2, [pc, #432]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	e00b      	b.n	8004a44 <HAL_RCC_OscConfig+0xb0>
 8004a2c:	4b69      	ldr	r3, [pc, #420]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a68      	ldr	r2, [pc, #416]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	4b66      	ldr	r3, [pc, #408]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a65      	ldr	r2, [pc, #404]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d013      	beq.n	8004a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fd ffb8 	bl	80029c0 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a54:	f7fd ffb4 	bl	80029c0 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b64      	cmp	r3, #100	; 0x64
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e207      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a66:	4b5b      	ldr	r3, [pc, #364]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f0      	beq.n	8004a54 <HAL_RCC_OscConfig+0xc0>
 8004a72:	e014      	b.n	8004a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a74:	f7fd ffa4 	bl	80029c0 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a7c:	f7fd ffa0 	bl	80029c0 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b64      	cmp	r3, #100	; 0x64
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e1f3      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a8e:	4b51      	ldr	r3, [pc, #324]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f0      	bne.n	8004a7c <HAL_RCC_OscConfig+0xe8>
 8004a9a:	e000      	b.n	8004a9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d063      	beq.n	8004b72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aaa:	4b4a      	ldr	r3, [pc, #296]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00b      	beq.n	8004ace <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ab6:	4b47      	ldr	r3, [pc, #284]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d11c      	bne.n	8004afc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ac2:	4b44      	ldr	r3, [pc, #272]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d116      	bne.n	8004afc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ace:	4b41      	ldr	r3, [pc, #260]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x152>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d001      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e1c7      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae6:	4b3b      	ldr	r3, [pc, #236]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4937      	ldr	r1, [pc, #220]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004afa:	e03a      	b.n	8004b72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d020      	beq.n	8004b46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b04:	4b34      	ldr	r3, [pc, #208]	; (8004bd8 <HAL_RCC_OscConfig+0x244>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0a:	f7fd ff59 	bl	80029c0 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b12:	f7fd ff55 	bl	80029c0 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e1a8      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b24:	4b2b      	ldr	r3, [pc, #172]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b30:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	4925      	ldr	r1, [pc, #148]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	600b      	str	r3, [r1, #0]
 8004b44:	e015      	b.n	8004b72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b46:	4b24      	ldr	r3, [pc, #144]	; (8004bd8 <HAL_RCC_OscConfig+0x244>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7fd ff38 	bl	80029c0 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b54:	f7fd ff34 	bl	80029c0 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e187      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b66:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d036      	beq.n	8004bec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d016      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b86:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <HAL_RCC_OscConfig+0x248>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8c:	f7fd ff18 	bl	80029c0 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b94:	f7fd ff14 	bl	80029c0 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e167      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0x200>
 8004bb2:	e01b      	b.n	8004bec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bb4:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <HAL_RCC_OscConfig+0x248>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bba:	f7fd ff01 	bl	80029c0 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc0:	e00e      	b.n	8004be0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bc2:	f7fd fefd 	bl	80029c0 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d907      	bls.n	8004be0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e150      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	42470000 	.word	0x42470000
 8004bdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be0:	4b88      	ldr	r3, [pc, #544]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1ea      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 8097 	beq.w	8004d28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfe:	4b81      	ldr	r3, [pc, #516]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10f      	bne.n	8004c2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60bb      	str	r3, [r7, #8]
 8004c0e:	4b7d      	ldr	r3, [pc, #500]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	4a7c      	ldr	r2, [pc, #496]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c18:	6413      	str	r3, [r2, #64]	; 0x40
 8004c1a:	4b7a      	ldr	r3, [pc, #488]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c22:	60bb      	str	r3, [r7, #8]
 8004c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c26:	2301      	movs	r3, #1
 8004c28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c2a:	4b77      	ldr	r3, [pc, #476]	; (8004e08 <HAL_RCC_OscConfig+0x474>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d118      	bne.n	8004c68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c36:	4b74      	ldr	r3, [pc, #464]	; (8004e08 <HAL_RCC_OscConfig+0x474>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a73      	ldr	r2, [pc, #460]	; (8004e08 <HAL_RCC_OscConfig+0x474>)
 8004c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c42:	f7fd febd 	bl	80029c0 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c4a:	f7fd feb9 	bl	80029c0 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e10c      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5c:	4b6a      	ldr	r3, [pc, #424]	; (8004e08 <HAL_RCC_OscConfig+0x474>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d106      	bne.n	8004c7e <HAL_RCC_OscConfig+0x2ea>
 8004c70:	4b64      	ldr	r3, [pc, #400]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c74:	4a63      	ldr	r2, [pc, #396]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7c:	e01c      	b.n	8004cb8 <HAL_RCC_OscConfig+0x324>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b05      	cmp	r3, #5
 8004c84:	d10c      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x30c>
 8004c86:	4b5f      	ldr	r3, [pc, #380]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8a:	4a5e      	ldr	r2, [pc, #376]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c8c:	f043 0304 	orr.w	r3, r3, #4
 8004c90:	6713      	str	r3, [r2, #112]	; 0x70
 8004c92:	4b5c      	ldr	r3, [pc, #368]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	4a5b      	ldr	r2, [pc, #364]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c9e:	e00b      	b.n	8004cb8 <HAL_RCC_OscConfig+0x324>
 8004ca0:	4b58      	ldr	r3, [pc, #352]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	4a57      	ldr	r2, [pc, #348]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004ca6:	f023 0301 	bic.w	r3, r3, #1
 8004caa:	6713      	str	r3, [r2, #112]	; 0x70
 8004cac:	4b55      	ldr	r3, [pc, #340]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	4a54      	ldr	r2, [pc, #336]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004cb2:	f023 0304 	bic.w	r3, r3, #4
 8004cb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d015      	beq.n	8004cec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc0:	f7fd fe7e 	bl	80029c0 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc6:	e00a      	b.n	8004cde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cc8:	f7fd fe7a 	bl	80029c0 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e0cb      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cde:	4b49      	ldr	r3, [pc, #292]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0ee      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x334>
 8004cea:	e014      	b.n	8004d16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cec:	f7fd fe68 	bl	80029c0 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cf2:	e00a      	b.n	8004d0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf4:	f7fd fe64 	bl	80029c0 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e0b5      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d0a:	4b3e      	ldr	r3, [pc, #248]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1ee      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d16:	7dfb      	ldrb	r3, [r7, #23]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d105      	bne.n	8004d28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d1c:	4b39      	ldr	r3, [pc, #228]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	4a38      	ldr	r2, [pc, #224]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 80a1 	beq.w	8004e74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d32:	4b34      	ldr	r3, [pc, #208]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	d05c      	beq.n	8004df8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d141      	bne.n	8004dca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d46:	4b31      	ldr	r3, [pc, #196]	; (8004e0c <HAL_RCC_OscConfig+0x478>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4c:	f7fd fe38 	bl	80029c0 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d54:	f7fd fe34 	bl	80029c0 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e087      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d66:	4b27      	ldr	r3, [pc, #156]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69da      	ldr	r2, [r3, #28]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	019b      	lsls	r3, r3, #6
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	041b      	lsls	r3, r3, #16
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	061b      	lsls	r3, r3, #24
 8004d96:	491b      	ldr	r1, [pc, #108]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d9c:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <HAL_RCC_OscConfig+0x478>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da2:	f7fd fe0d 	bl	80029c0 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004daa:	f7fd fe09 	bl	80029c0 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e05c      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dbc:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCC_OscConfig+0x416>
 8004dc8:	e054      	b.n	8004e74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dca:	4b10      	ldr	r3, [pc, #64]	; (8004e0c <HAL_RCC_OscConfig+0x478>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd0:	f7fd fdf6 	bl	80029c0 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd8:	f7fd fdf2 	bl	80029c0 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e045      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dea:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x444>
 8004df6:	e03d      	b.n	8004e74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d107      	bne.n	8004e10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e038      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
 8004e04:	40023800 	.word	0x40023800
 8004e08:	40007000 	.word	0x40007000
 8004e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e10:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <HAL_RCC_OscConfig+0x4ec>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d028      	beq.n	8004e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d121      	bne.n	8004e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d11a      	bne.n	8004e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e40:	4013      	ands	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d111      	bne.n	8004e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	085b      	lsrs	r3, r3, #1
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d107      	bne.n	8004e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d001      	beq.n	8004e74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40023800 	.word	0x40023800

08004e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0cc      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e98:	4b68      	ldr	r3, [pc, #416]	; (800503c <HAL_RCC_ClockConfig+0x1b8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d90c      	bls.n	8004ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea6:	4b65      	ldr	r3, [pc, #404]	; (800503c <HAL_RCC_ClockConfig+0x1b8>)
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eae:	4b63      	ldr	r3, [pc, #396]	; (800503c <HAL_RCC_ClockConfig+0x1b8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0b8      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d020      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ed8:	4b59      	ldr	r3, [pc, #356]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	4a58      	ldr	r2, [pc, #352]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ef0:	4b53      	ldr	r3, [pc, #332]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4a52      	ldr	r2, [pc, #328]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004efc:	4b50      	ldr	r3, [pc, #320]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	494d      	ldr	r1, [pc, #308]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d044      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f22:	4b47      	ldr	r3, [pc, #284]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d119      	bne.n	8004f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e07f      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d003      	beq.n	8004f42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d107      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f42:	4b3f      	ldr	r3, [pc, #252]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d109      	bne.n	8004f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e06f      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f52:	4b3b      	ldr	r3, [pc, #236]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e067      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f62:	4b37      	ldr	r3, [pc, #220]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f023 0203 	bic.w	r2, r3, #3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	4934      	ldr	r1, [pc, #208]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f74:	f7fd fd24 	bl	80029c0 <HAL_GetTick>
 8004f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f7a:	e00a      	b.n	8004f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f7c:	f7fd fd20 	bl	80029c0 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e04f      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f92:	4b2b      	ldr	r3, [pc, #172]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 020c 	and.w	r2, r3, #12
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d1eb      	bne.n	8004f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa4:	4b25      	ldr	r3, [pc, #148]	; (800503c <HAL_RCC_ClockConfig+0x1b8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d20c      	bcs.n	8004fcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb2:	4b22      	ldr	r3, [pc, #136]	; (800503c <HAL_RCC_ClockConfig+0x1b8>)
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fba:	4b20      	ldr	r3, [pc, #128]	; (800503c <HAL_RCC_ClockConfig+0x1b8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d001      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e032      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d008      	beq.n	8004fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4916      	ldr	r1, [pc, #88]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ff6:	4b12      	ldr	r3, [pc, #72]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	490e      	ldr	r1, [pc, #56]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	4313      	orrs	r3, r2
 8005008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800500a:	f000 f821 	bl	8005050 <HAL_RCC_GetSysClockFreq>
 800500e:	4602      	mov	r2, r0
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	490a      	ldr	r1, [pc, #40]	; (8005044 <HAL_RCC_ClockConfig+0x1c0>)
 800501c:	5ccb      	ldrb	r3, [r1, r3]
 800501e:	fa22 f303 	lsr.w	r3, r2, r3
 8005022:	4a09      	ldr	r2, [pc, #36]	; (8005048 <HAL_RCC_ClockConfig+0x1c4>)
 8005024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <HAL_RCC_ClockConfig+0x1c8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f7fd fafe 	bl	800262c <HAL_InitTick>

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40023c00 	.word	0x40023c00
 8005040:	40023800 	.word	0x40023800
 8005044:	0800cd30 	.word	0x0800cd30
 8005048:	20000020 	.word	0x20000020
 800504c:	20000024 	.word	0x20000024

08005050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005054:	b094      	sub	sp, #80	; 0x50
 8005056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	647b      	str	r3, [r7, #68]	; 0x44
 800505c:	2300      	movs	r3, #0
 800505e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005060:	2300      	movs	r3, #0
 8005062:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005068:	4b79      	ldr	r3, [pc, #484]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 030c 	and.w	r3, r3, #12
 8005070:	2b08      	cmp	r3, #8
 8005072:	d00d      	beq.n	8005090 <HAL_RCC_GetSysClockFreq+0x40>
 8005074:	2b08      	cmp	r3, #8
 8005076:	f200 80e1 	bhi.w	800523c <HAL_RCC_GetSysClockFreq+0x1ec>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <HAL_RCC_GetSysClockFreq+0x34>
 800507e:	2b04      	cmp	r3, #4
 8005080:	d003      	beq.n	800508a <HAL_RCC_GetSysClockFreq+0x3a>
 8005082:	e0db      	b.n	800523c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005084:	4b73      	ldr	r3, [pc, #460]	; (8005254 <HAL_RCC_GetSysClockFreq+0x204>)
 8005086:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005088:	e0db      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800508a:	4b73      	ldr	r3, [pc, #460]	; (8005258 <HAL_RCC_GetSysClockFreq+0x208>)
 800508c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800508e:	e0d8      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005090:	4b6f      	ldr	r3, [pc, #444]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005098:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800509a:	4b6d      	ldr	r3, [pc, #436]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d063      	beq.n	800516e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a6:	4b6a      	ldr	r3, [pc, #424]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	099b      	lsrs	r3, r3, #6
 80050ac:	2200      	movs	r2, #0
 80050ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80050b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b8:	633b      	str	r3, [r7, #48]	; 0x30
 80050ba:	2300      	movs	r3, #0
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
 80050be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050c2:	4622      	mov	r2, r4
 80050c4:	462b      	mov	r3, r5
 80050c6:	f04f 0000 	mov.w	r0, #0
 80050ca:	f04f 0100 	mov.w	r1, #0
 80050ce:	0159      	lsls	r1, r3, #5
 80050d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d4:	0150      	lsls	r0, r2, #5
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	4621      	mov	r1, r4
 80050dc:	1a51      	subs	r1, r2, r1
 80050de:	6139      	str	r1, [r7, #16]
 80050e0:	4629      	mov	r1, r5
 80050e2:	eb63 0301 	sbc.w	r3, r3, r1
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050f4:	4659      	mov	r1, fp
 80050f6:	018b      	lsls	r3, r1, #6
 80050f8:	4651      	mov	r1, sl
 80050fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050fe:	4651      	mov	r1, sl
 8005100:	018a      	lsls	r2, r1, #6
 8005102:	4651      	mov	r1, sl
 8005104:	ebb2 0801 	subs.w	r8, r2, r1
 8005108:	4659      	mov	r1, fp
 800510a:	eb63 0901 	sbc.w	r9, r3, r1
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800511a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800511e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005122:	4690      	mov	r8, r2
 8005124:	4699      	mov	r9, r3
 8005126:	4623      	mov	r3, r4
 8005128:	eb18 0303 	adds.w	r3, r8, r3
 800512c:	60bb      	str	r3, [r7, #8]
 800512e:	462b      	mov	r3, r5
 8005130:	eb49 0303 	adc.w	r3, r9, r3
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005142:	4629      	mov	r1, r5
 8005144:	024b      	lsls	r3, r1, #9
 8005146:	4621      	mov	r1, r4
 8005148:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800514c:	4621      	mov	r1, r4
 800514e:	024a      	lsls	r2, r1, #9
 8005150:	4610      	mov	r0, r2
 8005152:	4619      	mov	r1, r3
 8005154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005156:	2200      	movs	r2, #0
 8005158:	62bb      	str	r3, [r7, #40]	; 0x28
 800515a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800515c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005160:	f7fb fdea 	bl	8000d38 <__aeabi_uldivmod>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4613      	mov	r3, r2
 800516a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800516c:	e058      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800516e:	4b38      	ldr	r3, [pc, #224]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	099b      	lsrs	r3, r3, #6
 8005174:	2200      	movs	r2, #0
 8005176:	4618      	mov	r0, r3
 8005178:	4611      	mov	r1, r2
 800517a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800517e:	623b      	str	r3, [r7, #32]
 8005180:	2300      	movs	r3, #0
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
 8005184:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005188:	4642      	mov	r2, r8
 800518a:	464b      	mov	r3, r9
 800518c:	f04f 0000 	mov.w	r0, #0
 8005190:	f04f 0100 	mov.w	r1, #0
 8005194:	0159      	lsls	r1, r3, #5
 8005196:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800519a:	0150      	lsls	r0, r2, #5
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4641      	mov	r1, r8
 80051a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80051a6:	4649      	mov	r1, r9
 80051a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051c0:	ebb2 040a 	subs.w	r4, r2, sl
 80051c4:	eb63 050b 	sbc.w	r5, r3, fp
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	00eb      	lsls	r3, r5, #3
 80051d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051d6:	00e2      	lsls	r2, r4, #3
 80051d8:	4614      	mov	r4, r2
 80051da:	461d      	mov	r5, r3
 80051dc:	4643      	mov	r3, r8
 80051de:	18e3      	adds	r3, r4, r3
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	464b      	mov	r3, r9
 80051e4:	eb45 0303 	adc.w	r3, r5, r3
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051f6:	4629      	mov	r1, r5
 80051f8:	028b      	lsls	r3, r1, #10
 80051fa:	4621      	mov	r1, r4
 80051fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005200:	4621      	mov	r1, r4
 8005202:	028a      	lsls	r2, r1, #10
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800520a:	2200      	movs	r2, #0
 800520c:	61bb      	str	r3, [r7, #24]
 800520e:	61fa      	str	r2, [r7, #28]
 8005210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005214:	f7fb fd90 	bl	8000d38 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4613      	mov	r3, r2
 800521e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	0c1b      	lsrs	r3, r3, #16
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	3301      	adds	r3, #1
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005234:	fbb2 f3f3 	udiv	r3, r2, r3
 8005238:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800523a:	e002      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_RCC_GetSysClockFreq+0x204>)
 800523e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005244:	4618      	mov	r0, r3
 8005246:	3750      	adds	r7, #80	; 0x50
 8005248:	46bd      	mov	sp, r7
 800524a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800
 8005254:	00f42400 	.word	0x00f42400
 8005258:	007a1200 	.word	0x007a1200

0800525c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005260:	4b03      	ldr	r3, [pc, #12]	; (8005270 <HAL_RCC_GetHCLKFreq+0x14>)
 8005262:	681b      	ldr	r3, [r3, #0]
}
 8005264:	4618      	mov	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000020 	.word	0x20000020

08005274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005278:	f7ff fff0 	bl	800525c <HAL_RCC_GetHCLKFreq>
 800527c:	4602      	mov	r2, r0
 800527e:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	0a9b      	lsrs	r3, r3, #10
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	4903      	ldr	r1, [pc, #12]	; (8005298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800528a:	5ccb      	ldrb	r3, [r1, r3]
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40023800 	.word	0x40023800
 8005298:	0800cd40 	.word	0x0800cd40

0800529c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052a0:	f7ff ffdc 	bl	800525c <HAL_RCC_GetHCLKFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	0b5b      	lsrs	r3, r3, #13
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4903      	ldr	r1, [pc, #12]	; (80052c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40023800 	.word	0x40023800
 80052c0:	0800cd40 	.word	0x0800cd40

080052c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	220f      	movs	r2, #15
 80052d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052d4:	4b12      	ldr	r3, [pc, #72]	; (8005320 <HAL_RCC_GetClockConfig+0x5c>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 0203 	and.w	r2, r3, #3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052e0:	4b0f      	ldr	r3, [pc, #60]	; (8005320 <HAL_RCC_GetClockConfig+0x5c>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052ec:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <HAL_RCC_GetClockConfig+0x5c>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80052f8:	4b09      	ldr	r3, [pc, #36]	; (8005320 <HAL_RCC_GetClockConfig+0x5c>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	08db      	lsrs	r3, r3, #3
 80052fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005306:	4b07      	ldr	r3, [pc, #28]	; (8005324 <HAL_RCC_GetClockConfig+0x60>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0207 	and.w	r2, r3, #7
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	601a      	str	r2, [r3, #0]
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40023800 	.word	0x40023800
 8005324:	40023c00 	.word	0x40023c00

08005328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e041      	b.n	80053be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f839 	bl	80053c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3304      	adds	r3, #4
 8005364:	4619      	mov	r1, r3
 8005366:	4610      	mov	r0, r2
 8005368:	f000 f9ca 	bl	8005700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d001      	beq.n	80053f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e044      	b.n	800547e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1e      	ldr	r2, [pc, #120]	; (800548c <HAL_TIM_Base_Start_IT+0xb0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d018      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0x6c>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541e:	d013      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0x6c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1a      	ldr	r2, [pc, #104]	; (8005490 <HAL_TIM_Base_Start_IT+0xb4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00e      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0x6c>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a19      	ldr	r2, [pc, #100]	; (8005494 <HAL_TIM_Base_Start_IT+0xb8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d009      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0x6c>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a17      	ldr	r2, [pc, #92]	; (8005498 <HAL_TIM_Base_Start_IT+0xbc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0x6c>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a16      	ldr	r2, [pc, #88]	; (800549c <HAL_TIM_Base_Start_IT+0xc0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d111      	bne.n	800546c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b06      	cmp	r3, #6
 8005458:	d010      	beq.n	800547c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0201 	orr.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546a:	e007      	b.n	800547c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40010000 	.word	0x40010000
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800
 8005498:	40000c00 	.word	0x40000c00
 800549c:	40014000 	.word	0x40014000

080054a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d122      	bne.n	80054fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d11b      	bne.n	80054fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0202 	mvn.w	r2, #2
 80054cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f8ee 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 80054e8:	e005      	b.n	80054f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f8e0 	bl	80056b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f8f1 	bl	80056d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b04      	cmp	r3, #4
 8005508:	d122      	bne.n	8005550 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b04      	cmp	r3, #4
 8005516:	d11b      	bne.n	8005550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0204 	mvn.w	r2, #4
 8005520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2202      	movs	r2, #2
 8005526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f8c4 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 800553c:	e005      	b.n	800554a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f8b6 	bl	80056b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f8c7 	bl	80056d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b08      	cmp	r3, #8
 800555c:	d122      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b08      	cmp	r3, #8
 800556a:	d11b      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0208 	mvn.w	r2, #8
 8005574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2204      	movs	r2, #4
 800557a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f89a 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 8005590:	e005      	b.n	800559e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f88c 	bl	80056b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f89d 	bl	80056d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b10      	cmp	r3, #16
 80055b0:	d122      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b10      	cmp	r3, #16
 80055be:	d11b      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0210 	mvn.w	r2, #16
 80055c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2208      	movs	r2, #8
 80055ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f870 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f862 	bl	80056b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f873 	bl	80056d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b01      	cmp	r3, #1
 8005604:	d10e      	bne.n	8005624 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b01      	cmp	r3, #1
 8005612:	d107      	bne.n	8005624 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0201 	mvn.w	r2, #1
 800561c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fc ff34 	bl	800248c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562e:	2b80      	cmp	r3, #128	; 0x80
 8005630:	d10e      	bne.n	8005650 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563c:	2b80      	cmp	r3, #128	; 0x80
 800563e:	d107      	bne.n	8005650 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f8e2 	bl	8005814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565a:	2b40      	cmp	r3, #64	; 0x40
 800565c:	d10e      	bne.n	800567c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b40      	cmp	r3, #64	; 0x40
 800566a:	d107      	bne.n	800567c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f838 	bl	80056ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b20      	cmp	r3, #32
 8005688:	d10e      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b20      	cmp	r3, #32
 8005696:	d107      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0220 	mvn.w	r2, #32
 80056a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f8ac 	bl	8005800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a34      	ldr	r2, [pc, #208]	; (80057e4 <TIM_Base_SetConfig+0xe4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00f      	beq.n	8005738 <TIM_Base_SetConfig+0x38>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571e:	d00b      	beq.n	8005738 <TIM_Base_SetConfig+0x38>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a31      	ldr	r2, [pc, #196]	; (80057e8 <TIM_Base_SetConfig+0xe8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d007      	beq.n	8005738 <TIM_Base_SetConfig+0x38>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a30      	ldr	r2, [pc, #192]	; (80057ec <TIM_Base_SetConfig+0xec>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_Base_SetConfig+0x38>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a2f      	ldr	r2, [pc, #188]	; (80057f0 <TIM_Base_SetConfig+0xf0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d108      	bne.n	800574a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a25      	ldr	r2, [pc, #148]	; (80057e4 <TIM_Base_SetConfig+0xe4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d01b      	beq.n	800578a <TIM_Base_SetConfig+0x8a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005758:	d017      	beq.n	800578a <TIM_Base_SetConfig+0x8a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a22      	ldr	r2, [pc, #136]	; (80057e8 <TIM_Base_SetConfig+0xe8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <TIM_Base_SetConfig+0x8a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a21      	ldr	r2, [pc, #132]	; (80057ec <TIM_Base_SetConfig+0xec>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00f      	beq.n	800578a <TIM_Base_SetConfig+0x8a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a20      	ldr	r2, [pc, #128]	; (80057f0 <TIM_Base_SetConfig+0xf0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00b      	beq.n	800578a <TIM_Base_SetConfig+0x8a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1f      	ldr	r2, [pc, #124]	; (80057f4 <TIM_Base_SetConfig+0xf4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d007      	beq.n	800578a <TIM_Base_SetConfig+0x8a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a1e      	ldr	r2, [pc, #120]	; (80057f8 <TIM_Base_SetConfig+0xf8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d003      	beq.n	800578a <TIM_Base_SetConfig+0x8a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a1d      	ldr	r2, [pc, #116]	; (80057fc <TIM_Base_SetConfig+0xfc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d108      	bne.n	800579c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a08      	ldr	r2, [pc, #32]	; (80057e4 <TIM_Base_SetConfig+0xe4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d103      	bne.n	80057d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	615a      	str	r2, [r3, #20]
}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40010000 	.word	0x40010000
 80057e8:	40000400 	.word	0x40000400
 80057ec:	40000800 	.word	0x40000800
 80057f0:	40000c00 	.word	0x40000c00
 80057f4:	40014000 	.word	0x40014000
 80057f8:	40014400 	.word	0x40014400
 80057fc:	40014800 	.word	0x40014800

08005800 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <__NVIC_SetPriority>:
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	6039      	str	r1, [r7, #0]
 8005832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005838:	2b00      	cmp	r3, #0
 800583a:	db0a      	blt.n	8005852 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	b2da      	uxtb	r2, r3
 8005840:	490c      	ldr	r1, [pc, #48]	; (8005874 <__NVIC_SetPriority+0x4c>)
 8005842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005846:	0112      	lsls	r2, r2, #4
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	440b      	add	r3, r1
 800584c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005850:	e00a      	b.n	8005868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	b2da      	uxtb	r2, r3
 8005856:	4908      	ldr	r1, [pc, #32]	; (8005878 <__NVIC_SetPriority+0x50>)
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	3b04      	subs	r3, #4
 8005860:	0112      	lsls	r2, r2, #4
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	440b      	add	r3, r1
 8005866:	761a      	strb	r2, [r3, #24]
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	e000e100 	.word	0xe000e100
 8005878:	e000ed00 	.word	0xe000ed00

0800587c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005880:	4b05      	ldr	r3, [pc, #20]	; (8005898 <SysTick_Handler+0x1c>)
 8005882:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005884:	f001 fcfe 	bl	8007284 <xTaskGetSchedulerState>
 8005888:	4603      	mov	r3, r0
 800588a:	2b01      	cmp	r3, #1
 800588c:	d001      	beq.n	8005892 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800588e:	f002 fae3 	bl	8007e58 <xPortSysTickHandler>
  }
}
 8005892:	bf00      	nop
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	e000e010 	.word	0xe000e010

0800589c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80058a0:	2100      	movs	r1, #0
 80058a2:	f06f 0004 	mvn.w	r0, #4
 80058a6:	f7ff ffbf 	bl	8005828 <__NVIC_SetPriority>
#endif
}
 80058aa:	bf00      	nop
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058b6:	f3ef 8305 	mrs	r3, IPSR
 80058ba:	603b      	str	r3, [r7, #0]
  return(result);
 80058bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80058c2:	f06f 0305 	mvn.w	r3, #5
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	e00c      	b.n	80058e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80058ca:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <osKernelInitialize+0x44>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d105      	bne.n	80058de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80058d2:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <osKernelInitialize+0x44>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058d8:	2300      	movs	r3, #0
 80058da:	607b      	str	r3, [r7, #4]
 80058dc:	e002      	b.n	80058e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80058de:	f04f 33ff 	mov.w	r3, #4294967295
 80058e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058e4:	687b      	ldr	r3, [r7, #4]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	20000378 	.word	0x20000378

080058f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058fe:	f3ef 8305 	mrs	r3, IPSR
 8005902:	603b      	str	r3, [r7, #0]
  return(result);
 8005904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <osKernelStart+0x1a>
    stat = osErrorISR;
 800590a:	f06f 0305 	mvn.w	r3, #5
 800590e:	607b      	str	r3, [r7, #4]
 8005910:	e010      	b.n	8005934 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005912:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <osKernelStart+0x48>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d109      	bne.n	800592e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800591a:	f7ff ffbf 	bl	800589c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800591e:	4b08      	ldr	r3, [pc, #32]	; (8005940 <osKernelStart+0x48>)
 8005920:	2202      	movs	r2, #2
 8005922:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005924:	f001 f866 	bl	80069f4 <vTaskStartScheduler>
      stat = osOK;
 8005928:	2300      	movs	r3, #0
 800592a:	607b      	str	r3, [r7, #4]
 800592c:	e002      	b.n	8005934 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800592e:	f04f 33ff 	mov.w	r3, #4294967295
 8005932:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005934:	687b      	ldr	r3, [r7, #4]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000378 	.word	0x20000378

08005944 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005944:	b580      	push	{r7, lr}
 8005946:	b08e      	sub	sp, #56	; 0x38
 8005948:	af04      	add	r7, sp, #16
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005950:	2300      	movs	r3, #0
 8005952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005954:	f3ef 8305 	mrs	r3, IPSR
 8005958:	617b      	str	r3, [r7, #20]
  return(result);
 800595a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800595c:	2b00      	cmp	r3, #0
 800595e:	d17e      	bne.n	8005a5e <osThreadNew+0x11a>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d07b      	beq.n	8005a5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005966:	2380      	movs	r3, #128	; 0x80
 8005968:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800596a:	2318      	movs	r3, #24
 800596c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005972:	f04f 33ff 	mov.w	r3, #4294967295
 8005976:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d045      	beq.n	8005a0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <osThreadNew+0x48>
        name = attr->name;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d008      	beq.n	80059b2 <osThreadNew+0x6e>
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	2b38      	cmp	r3, #56	; 0x38
 80059a4:	d805      	bhi.n	80059b2 <osThreadNew+0x6e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <osThreadNew+0x72>
        return (NULL);
 80059b2:	2300      	movs	r3, #0
 80059b4:	e054      	b.n	8005a60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	089b      	lsrs	r3, r3, #2
 80059c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00e      	beq.n	80059ec <osThreadNew+0xa8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	2b5b      	cmp	r3, #91	; 0x5b
 80059d4:	d90a      	bls.n	80059ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d006      	beq.n	80059ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <osThreadNew+0xa8>
        mem = 1;
 80059e6:	2301      	movs	r3, #1
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	e010      	b.n	8005a0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10c      	bne.n	8005a0e <osThreadNew+0xca>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d108      	bne.n	8005a0e <osThreadNew+0xca>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d104      	bne.n	8005a0e <osThreadNew+0xca>
          mem = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	61bb      	str	r3, [r7, #24]
 8005a08:	e001      	b.n	8005a0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d110      	bne.n	8005a36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a1c:	9202      	str	r2, [sp, #8]
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	6a3a      	ldr	r2, [r7, #32]
 8005a28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 fe0c 	bl	8006648 <xTaskCreateStatic>
 8005a30:	4603      	mov	r3, r0
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	e013      	b.n	8005a5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d110      	bne.n	8005a5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	f107 0310 	add.w	r3, r7, #16
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 fe57 	bl	8006702 <xTaskCreate>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d001      	beq.n	8005a5e <osThreadNew+0x11a>
            hTask = NULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a5e:	693b      	ldr	r3, [r7, #16]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3728      	adds	r7, #40	; 0x28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a70:	f3ef 8305 	mrs	r3, IPSR
 8005a74:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <osDelay+0x1c>
    stat = osErrorISR;
 8005a7c:	f06f 0305 	mvn.w	r3, #5
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	e007      	b.n	8005a94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 ff7c 	bl	800698c <vTaskDelay>
    }
  }

  return (stat);
 8005a94:	68fb      	ldr	r3, [r7, #12]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4a07      	ldr	r2, [pc, #28]	; (8005acc <vApplicationGetIdleTaskMemory+0x2c>)
 8005ab0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4a06      	ldr	r2, [pc, #24]	; (8005ad0 <vApplicationGetIdleTaskMemory+0x30>)
 8005ab6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2280      	movs	r2, #128	; 0x80
 8005abc:	601a      	str	r2, [r3, #0]
}
 8005abe:	bf00      	nop
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	2000037c 	.word	0x2000037c
 8005ad0:	200003d8 	.word	0x200003d8

08005ad4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4a07      	ldr	r2, [pc, #28]	; (8005b00 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ae4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	4a06      	ldr	r2, [pc, #24]	; (8005b04 <vApplicationGetTimerTaskMemory+0x30>)
 8005aea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005af2:	601a      	str	r2, [r3, #0]
}
 8005af4:	bf00      	nop
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	200005d8 	.word	0x200005d8
 8005b04:	20000634 	.word	0x20000634

08005b08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f103 0208 	add.w	r2, r3, #8
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f103 0208 	add.w	r2, r3, #8
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f103 0208 	add.w	r2, r3, #8
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b62:	b480      	push	{r7}
 8005b64:	b085      	sub	sp, #20
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	601a      	str	r2, [r3, #0]
}
 8005b9e:	bf00      	nop
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005baa:	b480      	push	{r7}
 8005bac:	b085      	sub	sp, #20
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d103      	bne.n	8005bca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	e00c      	b.n	8005be4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3308      	adds	r3, #8
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	e002      	b.n	8005bd8 <vListInsert+0x2e>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d2f6      	bcs.n	8005bd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	601a      	str	r2, [r3, #0]
}
 8005c10:	bf00      	nop
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6892      	ldr	r2, [r2, #8]
 8005c32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6852      	ldr	r2, [r2, #4]
 8005c3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d103      	bne.n	8005c50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	1e5a      	subs	r2, r3, #1
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c9a:	f002 f84b 	bl	8007d34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca6:	68f9      	ldr	r1, [r7, #12]
 8005ca8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005caa:	fb01 f303 	mul.w	r3, r1, r3
 8005cae:	441a      	add	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	68f9      	ldr	r1, [r7, #12]
 8005cce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cd0:	fb01 f303 	mul.w	r3, r1, r3
 8005cd4:	441a      	add	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	22ff      	movs	r2, #255	; 0xff
 8005cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	22ff      	movs	r2, #255	; 0xff
 8005ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d114      	bne.n	8005d1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01a      	beq.n	8005d2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	3310      	adds	r3, #16
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f001 f903 	bl	8006f08 <xTaskRemoveFromEventList>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d012      	beq.n	8005d2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d08:	4b0c      	ldr	r3, [pc, #48]	; (8005d3c <xQueueGenericReset+0xcc>)
 8005d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	e009      	b.n	8005d2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3310      	adds	r3, #16
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff fef2 	bl	8005b08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3324      	adds	r3, #36	; 0x24
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff feed 	bl	8005b08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d2e:	f002 f831 	bl	8007d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d32:	2301      	movs	r3, #1
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	e000ed04 	.word	0xe000ed04

08005d40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08e      	sub	sp, #56	; 0x38
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d66:	bf00      	nop
 8005d68:	e7fe      	b.n	8005d68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d82:	bf00      	nop
 8005d84:	e7fe      	b.n	8005d84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <xQueueGenericCreateStatic+0x52>
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <xQueueGenericCreateStatic+0x56>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <xQueueGenericCreateStatic+0x58>
 8005d96:	2300      	movs	r3, #0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	623b      	str	r3, [r7, #32]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d102      	bne.n	8005dbe <xQueueGenericCreateStatic+0x7e>
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <xQueueGenericCreateStatic+0x82>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <xQueueGenericCreateStatic+0x84>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	61fb      	str	r3, [r7, #28]
}
 8005dda:	bf00      	nop
 8005ddc:	e7fe      	b.n	8005ddc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005dde:	2350      	movs	r3, #80	; 0x50
 8005de0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b50      	cmp	r3, #80	; 0x50
 8005de6:	d00a      	beq.n	8005dfe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	61bb      	str	r3, [r7, #24]
}
 8005dfa:	bf00      	nop
 8005dfc:	e7fe      	b.n	8005dfc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005dfe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00d      	beq.n	8005e26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	68b9      	ldr	r1, [r7, #8]
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 f805 	bl	8005e30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3730      	adds	r7, #48	; 0x30
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d103      	bne.n	8005e4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e002      	b.n	8005e52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e5e:	2101      	movs	r1, #1
 8005e60:	69b8      	ldr	r0, [r7, #24]
 8005e62:	f7ff ff05 	bl	8005c70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	78fa      	ldrb	r2, [r7, #3]
 8005e6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08e      	sub	sp, #56	; 0x38
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e86:	2300      	movs	r3, #0
 8005e88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <xQueueGenericSend+0x32>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ea6:	bf00      	nop
 8005ea8:	e7fe      	b.n	8005ea8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d103      	bne.n	8005eb8 <xQueueGenericSend+0x40>
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <xQueueGenericSend+0x44>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <xQueueGenericSend+0x46>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <xQueueGenericSend+0x60>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ed4:	bf00      	nop
 8005ed6:	e7fe      	b.n	8005ed6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d103      	bne.n	8005ee6 <xQueueGenericSend+0x6e>
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <xQueueGenericSend+0x72>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <xQueueGenericSend+0x74>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <xQueueGenericSend+0x8e>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	623b      	str	r3, [r7, #32]
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f06:	f001 f9bd 	bl	8007284 <xTaskGetSchedulerState>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d102      	bne.n	8005f16 <xQueueGenericSend+0x9e>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <xQueueGenericSend+0xa2>
 8005f16:	2301      	movs	r3, #1
 8005f18:	e000      	b.n	8005f1c <xQueueGenericSend+0xa4>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <xQueueGenericSend+0xbe>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	61fb      	str	r3, [r7, #28]
}
 8005f32:	bf00      	nop
 8005f34:	e7fe      	b.n	8005f34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f36:	f001 fefd 	bl	8007d34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d302      	bcc.n	8005f4c <xQueueGenericSend+0xd4>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d129      	bne.n	8005fa0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	68b9      	ldr	r1, [r7, #8]
 8005f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f52:	f000 fa0b 	bl	800636c <prvCopyDataToQueue>
 8005f56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d010      	beq.n	8005f82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	3324      	adds	r3, #36	; 0x24
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 ffcf 	bl	8006f08 <xTaskRemoveFromEventList>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d013      	beq.n	8005f98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f70:	4b3f      	ldr	r3, [pc, #252]	; (8006070 <xQueueGenericSend+0x1f8>)
 8005f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	e00a      	b.n	8005f98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d007      	beq.n	8005f98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f88:	4b39      	ldr	r3, [pc, #228]	; (8006070 <xQueueGenericSend+0x1f8>)
 8005f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f98:	f001 fefc 	bl	8007d94 <vPortExitCritical>
				return pdPASS;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e063      	b.n	8006068 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d103      	bne.n	8005fae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fa6:	f001 fef5 	bl	8007d94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	e05c      	b.n	8006068 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d106      	bne.n	8005fc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fb4:	f107 0314 	add.w	r3, r7, #20
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 f809 	bl	8006fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fc2:	f001 fee7 	bl	8007d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fc6:	f000 fd7b 	bl	8006ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fca:	f001 feb3 	bl	8007d34 <vPortEnterCritical>
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fd4:	b25b      	sxtb	r3, r3
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fda:	d103      	bne.n	8005fe4 <xQueueGenericSend+0x16c>
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fea:	b25b      	sxtb	r3, r3
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d103      	bne.n	8005ffa <xQueueGenericSend+0x182>
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ffa:	f001 fecb 	bl	8007d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ffe:	1d3a      	adds	r2, r7, #4
 8006000:	f107 0314 	add.w	r3, r7, #20
 8006004:	4611      	mov	r1, r2
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fff8 	bl	8006ffc <xTaskCheckForTimeOut>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d124      	bne.n	800605c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006014:	f000 faa2 	bl	800655c <prvIsQueueFull>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d018      	beq.n	8006050 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	3310      	adds	r3, #16
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f000 ff1e 	bl	8006e68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800602c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800602e:	f000 fa2d 	bl	800648c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006032:	f000 fd53 	bl	8006adc <xTaskResumeAll>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	f47f af7c 	bne.w	8005f36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800603e:	4b0c      	ldr	r3, [pc, #48]	; (8006070 <xQueueGenericSend+0x1f8>)
 8006040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	e772      	b.n	8005f36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006052:	f000 fa1b 	bl	800648c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006056:	f000 fd41 	bl	8006adc <xTaskResumeAll>
 800605a:	e76c      	b.n	8005f36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800605c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800605e:	f000 fa15 	bl	800648c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006062:	f000 fd3b 	bl	8006adc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006066:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006068:	4618      	mov	r0, r3
 800606a:	3738      	adds	r7, #56	; 0x38
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	e000ed04 	.word	0xe000ed04

08006074 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b090      	sub	sp, #64	; 0x40
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10a      	bne.n	80060a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800609e:	bf00      	nop
 80060a0:	e7fe      	b.n	80060a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d103      	bne.n	80060b0 <xQueueGenericSendFromISR+0x3c>
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <xQueueGenericSendFromISR+0x40>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <xQueueGenericSendFromISR+0x42>
 80060b4:	2300      	movs	r3, #0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10a      	bne.n	80060d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060cc:	bf00      	nop
 80060ce:	e7fe      	b.n	80060ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d103      	bne.n	80060de <xQueueGenericSendFromISR+0x6a>
 80060d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <xQueueGenericSendFromISR+0x6e>
 80060de:	2301      	movs	r3, #1
 80060e0:	e000      	b.n	80060e4 <xQueueGenericSendFromISR+0x70>
 80060e2:	2300      	movs	r3, #0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	623b      	str	r3, [r7, #32]
}
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060fe:	f001 fefb 	bl	8007ef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006102:	f3ef 8211 	mrs	r2, BASEPRI
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	61fa      	str	r2, [r7, #28]
 8006118:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800611a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800611c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800611e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006126:	429a      	cmp	r2, r3
 8006128:	d302      	bcc.n	8006130 <xQueueGenericSendFromISR+0xbc>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d12f      	bne.n	8006190 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800613a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006146:	f000 f911 	bl	800636c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800614a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800614e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006152:	d112      	bne.n	800617a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	2b00      	cmp	r3, #0
 800615a:	d016      	beq.n	800618a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	3324      	adds	r3, #36	; 0x24
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fed1 	bl	8006f08 <xTaskRemoveFromEventList>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00e      	beq.n	800618a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	e007      	b.n	800618a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800617a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800617e:	3301      	adds	r3, #1
 8006180:	b2db      	uxtb	r3, r3
 8006182:	b25a      	sxtb	r2, r3
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800618a:	2301      	movs	r3, #1
 800618c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800618e:	e001      	b.n	8006194 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006190:	2300      	movs	r3, #0
 8006192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006196:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800619e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3740      	adds	r7, #64	; 0x40
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08c      	sub	sp, #48	; 0x30
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10a      	bne.n	80061dc <xQueueReceive+0x30>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	623b      	str	r3, [r7, #32]
}
 80061d8:	bf00      	nop
 80061da:	e7fe      	b.n	80061da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d103      	bne.n	80061ea <xQueueReceive+0x3e>
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <xQueueReceive+0x42>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e000      	b.n	80061f0 <xQueueReceive+0x44>
 80061ee:	2300      	movs	r3, #0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10a      	bne.n	800620a <xQueueReceive+0x5e>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	61fb      	str	r3, [r7, #28]
}
 8006206:	bf00      	nop
 8006208:	e7fe      	b.n	8006208 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800620a:	f001 f83b 	bl	8007284 <xTaskGetSchedulerState>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <xQueueReceive+0x6e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <xQueueReceive+0x72>
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <xQueueReceive+0x74>
 800621e:	2300      	movs	r3, #0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10a      	bne.n	800623a <xQueueReceive+0x8e>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	61bb      	str	r3, [r7, #24]
}
 8006236:	bf00      	nop
 8006238:	e7fe      	b.n	8006238 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800623a:	f001 fd7b 	bl	8007d34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01f      	beq.n	800628a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800624a:	68b9      	ldr	r1, [r7, #8]
 800624c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800624e:	f000 f8f7 	bl	8006440 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	1e5a      	subs	r2, r3, #1
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00f      	beq.n	8006282 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	3310      	adds	r3, #16
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fe4e 	bl	8006f08 <xTaskRemoveFromEventList>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d007      	beq.n	8006282 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006272:	4b3d      	ldr	r3, [pc, #244]	; (8006368 <xQueueReceive+0x1bc>)
 8006274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006282:	f001 fd87 	bl	8007d94 <vPortExitCritical>
				return pdPASS;
 8006286:	2301      	movs	r3, #1
 8006288:	e069      	b.n	800635e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d103      	bne.n	8006298 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006290:	f001 fd80 	bl	8007d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006294:	2300      	movs	r3, #0
 8006296:	e062      	b.n	800635e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800629e:	f107 0310 	add.w	r3, r7, #16
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fe94 	bl	8006fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062a8:	2301      	movs	r3, #1
 80062aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062ac:	f001 fd72 	bl	8007d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062b0:	f000 fc06 	bl	8006ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062b4:	f001 fd3e 	bl	8007d34 <vPortEnterCritical>
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062be:	b25b      	sxtb	r3, r3
 80062c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c4:	d103      	bne.n	80062ce <xQueueReceive+0x122>
 80062c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062d4:	b25b      	sxtb	r3, r3
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062da:	d103      	bne.n	80062e4 <xQueueReceive+0x138>
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062e4:	f001 fd56 	bl	8007d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062e8:	1d3a      	adds	r2, r7, #4
 80062ea:	f107 0310 	add.w	r3, r7, #16
 80062ee:	4611      	mov	r1, r2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fe83 	bl	8006ffc <xTaskCheckForTimeOut>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d123      	bne.n	8006344 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062fe:	f000 f917 	bl	8006530 <prvIsQueueEmpty>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d017      	beq.n	8006338 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	3324      	adds	r3, #36	; 0x24
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fda9 	bl	8006e68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006318:	f000 f8b8 	bl	800648c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800631c:	f000 fbde 	bl	8006adc <xTaskResumeAll>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d189      	bne.n	800623a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006326:	4b10      	ldr	r3, [pc, #64]	; (8006368 <xQueueReceive+0x1bc>)
 8006328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	e780      	b.n	800623a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800633a:	f000 f8a7 	bl	800648c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800633e:	f000 fbcd 	bl	8006adc <xTaskResumeAll>
 8006342:	e77a      	b.n	800623a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006346:	f000 f8a1 	bl	800648c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800634a:	f000 fbc7 	bl	8006adc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800634e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006350:	f000 f8ee 	bl	8006530 <prvIsQueueEmpty>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	f43f af6f 	beq.w	800623a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800635c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800635e:	4618      	mov	r0, r3
 8006360:	3730      	adds	r7, #48	; 0x30
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006378:	2300      	movs	r3, #0
 800637a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10d      	bne.n	80063a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d14d      	bne.n	800642e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	4618      	mov	r0, r3
 8006398:	f000 ff92 	bl	80072c0 <xTaskPriorityDisinherit>
 800639c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	609a      	str	r2, [r3, #8]
 80063a4:	e043      	b.n	800642e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d119      	bne.n	80063e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6858      	ldr	r0, [r3, #4]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	461a      	mov	r2, r3
 80063b6:	68b9      	ldr	r1, [r7, #8]
 80063b8:	f001 fff2 	bl	80083a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c4:	441a      	add	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d32b      	bcc.n	800642e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	605a      	str	r2, [r3, #4]
 80063de:	e026      	b.n	800642e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	68d8      	ldr	r0, [r3, #12]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e8:	461a      	mov	r2, r3
 80063ea:	68b9      	ldr	r1, [r7, #8]
 80063ec:	f001 ffd8 	bl	80083a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	425b      	negs	r3, r3
 80063fa:	441a      	add	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d207      	bcs.n	800641c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	425b      	negs	r3, r3
 8006416:	441a      	add	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d105      	bne.n	800642e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	3b01      	subs	r3, #1
 800642c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006436:	697b      	ldr	r3, [r7, #20]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	d018      	beq.n	8006484 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	441a      	add	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	429a      	cmp	r2, r3
 800646a:	d303      	bcc.n	8006474 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68d9      	ldr	r1, [r3, #12]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	461a      	mov	r2, r3
 800647e:	6838      	ldr	r0, [r7, #0]
 8006480:	f001 ff8e 	bl	80083a0 <memcpy>
	}
}
 8006484:	bf00      	nop
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006494:	f001 fc4e 	bl	8007d34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800649e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064a0:	e011      	b.n	80064c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d012      	beq.n	80064d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3324      	adds	r3, #36	; 0x24
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fd2a 	bl	8006f08 <xTaskRemoveFromEventList>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064ba:	f000 fe01 	bl	80070c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	dce9      	bgt.n	80064a2 <prvUnlockQueue+0x16>
 80064ce:	e000      	b.n	80064d2 <prvUnlockQueue+0x46>
					break;
 80064d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	22ff      	movs	r2, #255	; 0xff
 80064d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80064da:	f001 fc5b 	bl	8007d94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064de:	f001 fc29 	bl	8007d34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064ea:	e011      	b.n	8006510 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d012      	beq.n	800651a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3310      	adds	r3, #16
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 fd05 	bl	8006f08 <xTaskRemoveFromEventList>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006504:	f000 fddc 	bl	80070c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	3b01      	subs	r3, #1
 800650c:	b2db      	uxtb	r3, r3
 800650e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006514:	2b00      	cmp	r3, #0
 8006516:	dce9      	bgt.n	80064ec <prvUnlockQueue+0x60>
 8006518:	e000      	b.n	800651c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800651a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	22ff      	movs	r2, #255	; 0xff
 8006520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006524:	f001 fc36 	bl	8007d94 <vPortExitCritical>
}
 8006528:	bf00      	nop
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006538:	f001 fbfc 	bl	8007d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	2b00      	cmp	r3, #0
 8006542:	d102      	bne.n	800654a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006544:	2301      	movs	r3, #1
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	e001      	b.n	800654e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800654e:	f001 fc21 	bl	8007d94 <vPortExitCritical>

	return xReturn;
 8006552:	68fb      	ldr	r3, [r7, #12]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006564:	f001 fbe6 	bl	8007d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006570:	429a      	cmp	r2, r3
 8006572:	d102      	bne.n	800657a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006574:	2301      	movs	r3, #1
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	e001      	b.n	800657e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800657e:	f001 fc09 	bl	8007d94 <vPortExitCritical>

	return xReturn;
 8006582:	68fb      	ldr	r3, [r7, #12]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	e014      	b.n	80065c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800659c:	4a0f      	ldr	r2, [pc, #60]	; (80065dc <vQueueAddToRegistry+0x50>)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10b      	bne.n	80065c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80065a8:	490c      	ldr	r1, [pc, #48]	; (80065dc <vQueueAddToRegistry+0x50>)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065b2:	4a0a      	ldr	r2, [pc, #40]	; (80065dc <vQueueAddToRegistry+0x50>)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	4413      	add	r3, r2
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065be:	e006      	b.n	80065ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b07      	cmp	r3, #7
 80065ca:	d9e7      	bls.n	800659c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065cc:	bf00      	nop
 80065ce:	bf00      	nop
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	20000a34 	.word	0x20000a34

080065e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065f0:	f001 fba0 	bl	8007d34 <vPortEnterCritical>
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065fa:	b25b      	sxtb	r3, r3
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d103      	bne.n	800660a <vQueueWaitForMessageRestricted+0x2a>
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006610:	b25b      	sxtb	r3, r3
 8006612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006616:	d103      	bne.n	8006620 <vQueueWaitForMessageRestricted+0x40>
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006620:	f001 fbb8 	bl	8007d94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006628:	2b00      	cmp	r3, #0
 800662a:	d106      	bne.n	800663a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	3324      	adds	r3, #36	; 0x24
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	4618      	mov	r0, r3
 8006636:	f000 fc3b 	bl	8006eb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800663a:	6978      	ldr	r0, [r7, #20]
 800663c:	f7ff ff26 	bl	800648c <prvUnlockQueue>
	}
 8006640:	bf00      	nop
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08e      	sub	sp, #56	; 0x38
 800664c:	af04      	add	r7, sp, #16
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10a      	bne.n	8006672 <xTaskCreateStatic+0x2a>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	623b      	str	r3, [r7, #32]
}
 800666e:	bf00      	nop
 8006670:	e7fe      	b.n	8006670 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10a      	bne.n	800668e <xTaskCreateStatic+0x46>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	61fb      	str	r3, [r7, #28]
}
 800668a:	bf00      	nop
 800668c:	e7fe      	b.n	800668c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800668e:	235c      	movs	r3, #92	; 0x5c
 8006690:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	2b5c      	cmp	r3, #92	; 0x5c
 8006696:	d00a      	beq.n	80066ae <xTaskCreateStatic+0x66>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	61bb      	str	r3, [r7, #24]
}
 80066aa:	bf00      	nop
 80066ac:	e7fe      	b.n	80066ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d01e      	beq.n	80066f4 <xTaskCreateStatic+0xac>
 80066b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d01b      	beq.n	80066f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	2202      	movs	r2, #2
 80066ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066ce:	2300      	movs	r3, #0
 80066d0:	9303      	str	r3, [sp, #12]
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	9302      	str	r3, [sp, #8]
 80066d6:	f107 0314 	add.w	r3, r7, #20
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	68b9      	ldr	r1, [r7, #8]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 f850 	bl	800678c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066ee:	f000 f8dd 	bl	80068ac <prvAddNewTaskToReadyList>
 80066f2:	e001      	b.n	80066f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066f8:	697b      	ldr	r3, [r7, #20]
	}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3728      	adds	r7, #40	; 0x28
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006702:	b580      	push	{r7, lr}
 8006704:	b08c      	sub	sp, #48	; 0x30
 8006706:	af04      	add	r7, sp, #16
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	603b      	str	r3, [r7, #0]
 800670e:	4613      	mov	r3, r2
 8006710:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4618      	mov	r0, r3
 8006718:	f001 fc2e 	bl	8007f78 <pvPortMalloc>
 800671c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00e      	beq.n	8006742 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006724:	205c      	movs	r0, #92	; 0x5c
 8006726:	f001 fc27 	bl	8007f78 <pvPortMalloc>
 800672a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	631a      	str	r2, [r3, #48]	; 0x30
 8006738:	e005      	b.n	8006746 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800673a:	6978      	ldr	r0, [r7, #20]
 800673c:	f001 fce8 	bl	8008110 <vPortFree>
 8006740:	e001      	b.n	8006746 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006742:	2300      	movs	r3, #0
 8006744:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d017      	beq.n	800677c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006754:	88fa      	ldrh	r2, [r7, #6]
 8006756:	2300      	movs	r3, #0
 8006758:	9303      	str	r3, [sp, #12]
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	9302      	str	r3, [sp, #8]
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	9301      	str	r3, [sp, #4]
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 f80e 	bl	800678c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006770:	69f8      	ldr	r0, [r7, #28]
 8006772:	f000 f89b 	bl	80068ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006776:	2301      	movs	r3, #1
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	e002      	b.n	8006782 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800677c:	f04f 33ff 	mov.w	r3, #4294967295
 8006780:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006782:	69bb      	ldr	r3, [r7, #24]
	}
 8006784:	4618      	mov	r0, r3
 8006786:	3720      	adds	r7, #32
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	461a      	mov	r2, r3
 80067a4:	21a5      	movs	r1, #165	; 0xa5
 80067a6:	f001 fe09 	bl	80083bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067b4:	3b01      	subs	r3, #1
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	f023 0307 	bic.w	r3, r3, #7
 80067c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	617b      	str	r3, [r7, #20]
}
 80067e0:	bf00      	nop
 80067e2:	e7fe      	b.n	80067e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d01f      	beq.n	800682a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067ea:	2300      	movs	r3, #0
 80067ec:	61fb      	str	r3, [r7, #28]
 80067ee:	e012      	b.n	8006816 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	4413      	add	r3, r2
 80067f6:	7819      	ldrb	r1, [r3, #0]
 80067f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	3334      	adds	r3, #52	; 0x34
 8006800:	460a      	mov	r2, r1
 8006802:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	4413      	add	r3, r2
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d006      	beq.n	800681e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	3301      	adds	r3, #1
 8006814:	61fb      	str	r3, [r7, #28]
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	2b0f      	cmp	r3, #15
 800681a:	d9e9      	bls.n	80067f0 <prvInitialiseNewTask+0x64>
 800681c:	e000      	b.n	8006820 <prvInitialiseNewTask+0x94>
			{
				break;
 800681e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006828:	e003      	b.n	8006832 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	2b37      	cmp	r3, #55	; 0x37
 8006836:	d901      	bls.n	800683c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006838:	2337      	movs	r3, #55	; 0x37
 800683a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006840:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006846:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684a:	2200      	movs	r2, #0
 800684c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	3304      	adds	r3, #4
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff f978 	bl	8005b48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685a:	3318      	adds	r3, #24
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff f973 	bl	8005b48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006866:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006876:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	2200      	movs	r2, #0
 800687c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	68f9      	ldr	r1, [r7, #12]
 800688a:	69b8      	ldr	r0, [r7, #24]
 800688c:	f001 f928 	bl	8007ae0 <pxPortInitialiseStack>
 8006890:	4602      	mov	r2, r0
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068a2:	bf00      	nop
 80068a4:	3720      	adds	r7, #32
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068b4:	f001 fa3e 	bl	8007d34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068b8:	4b2d      	ldr	r3, [pc, #180]	; (8006970 <prvAddNewTaskToReadyList+0xc4>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3301      	adds	r3, #1
 80068be:	4a2c      	ldr	r2, [pc, #176]	; (8006970 <prvAddNewTaskToReadyList+0xc4>)
 80068c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068c2:	4b2c      	ldr	r3, [pc, #176]	; (8006974 <prvAddNewTaskToReadyList+0xc8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d109      	bne.n	80068de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068ca:	4a2a      	ldr	r2, [pc, #168]	; (8006974 <prvAddNewTaskToReadyList+0xc8>)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068d0:	4b27      	ldr	r3, [pc, #156]	; (8006970 <prvAddNewTaskToReadyList+0xc4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d110      	bne.n	80068fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068d8:	f000 fc16 	bl	8007108 <prvInitialiseTaskLists>
 80068dc:	e00d      	b.n	80068fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068de:	4b26      	ldr	r3, [pc, #152]	; (8006978 <prvAddNewTaskToReadyList+0xcc>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d109      	bne.n	80068fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068e6:	4b23      	ldr	r3, [pc, #140]	; (8006974 <prvAddNewTaskToReadyList+0xc8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d802      	bhi.n	80068fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068f4:	4a1f      	ldr	r2, [pc, #124]	; (8006974 <prvAddNewTaskToReadyList+0xc8>)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068fa:	4b20      	ldr	r3, [pc, #128]	; (800697c <prvAddNewTaskToReadyList+0xd0>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3301      	adds	r3, #1
 8006900:	4a1e      	ldr	r2, [pc, #120]	; (800697c <prvAddNewTaskToReadyList+0xd0>)
 8006902:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006904:	4b1d      	ldr	r3, [pc, #116]	; (800697c <prvAddNewTaskToReadyList+0xd0>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006910:	4b1b      	ldr	r3, [pc, #108]	; (8006980 <prvAddNewTaskToReadyList+0xd4>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	d903      	bls.n	8006920 <prvAddNewTaskToReadyList+0x74>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691c:	4a18      	ldr	r2, [pc, #96]	; (8006980 <prvAddNewTaskToReadyList+0xd4>)
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4a15      	ldr	r2, [pc, #84]	; (8006984 <prvAddNewTaskToReadyList+0xd8>)
 800692e:	441a      	add	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3304      	adds	r3, #4
 8006934:	4619      	mov	r1, r3
 8006936:	4610      	mov	r0, r2
 8006938:	f7ff f913 	bl	8005b62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800693c:	f001 fa2a 	bl	8007d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006940:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <prvAddNewTaskToReadyList+0xcc>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00e      	beq.n	8006966 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <prvAddNewTaskToReadyList+0xc8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	429a      	cmp	r2, r3
 8006954:	d207      	bcs.n	8006966 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006956:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <prvAddNewTaskToReadyList+0xdc>)
 8006958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20000f48 	.word	0x20000f48
 8006974:	20000a74 	.word	0x20000a74
 8006978:	20000f54 	.word	0x20000f54
 800697c:	20000f64 	.word	0x20000f64
 8006980:	20000f50 	.word	0x20000f50
 8006984:	20000a78 	.word	0x20000a78
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d017      	beq.n	80069ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800699e:	4b13      	ldr	r3, [pc, #76]	; (80069ec <vTaskDelay+0x60>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <vTaskDelay+0x30>
	__asm volatile
 80069a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	60bb      	str	r3, [r7, #8]
}
 80069b8:	bf00      	nop
 80069ba:	e7fe      	b.n	80069ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069bc:	f000 f880 	bl	8006ac0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069c0:	2100      	movs	r1, #0
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fcea 	bl	800739c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069c8:	f000 f888 	bl	8006adc <xTaskResumeAll>
 80069cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d107      	bne.n	80069e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80069d4:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <vTaskDelay+0x64>)
 80069d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069e4:	bf00      	nop
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	20000f70 	.word	0x20000f70
 80069f0:	e000ed04 	.word	0xe000ed04

080069f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	; 0x28
 80069f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a02:	463a      	mov	r2, r7
 8006a04:	1d39      	adds	r1, r7, #4
 8006a06:	f107 0308 	add.w	r3, r7, #8
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff f848 	bl	8005aa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	9202      	str	r2, [sp, #8]
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	460a      	mov	r2, r1
 8006a22:	4921      	ldr	r1, [pc, #132]	; (8006aa8 <vTaskStartScheduler+0xb4>)
 8006a24:	4821      	ldr	r0, [pc, #132]	; (8006aac <vTaskStartScheduler+0xb8>)
 8006a26:	f7ff fe0f 	bl	8006648 <xTaskCreateStatic>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	4a20      	ldr	r2, [pc, #128]	; (8006ab0 <vTaskStartScheduler+0xbc>)
 8006a2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a30:	4b1f      	ldr	r3, [pc, #124]	; (8006ab0 <vTaskStartScheduler+0xbc>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	e001      	b.n	8006a42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d102      	bne.n	8006a4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a48:	f000 fcfc 	bl	8007444 <xTimerCreateTimerTask>
 8006a4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d116      	bne.n	8006a82 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	613b      	str	r3, [r7, #16]
}
 8006a66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a68:	4b12      	ldr	r3, [pc, #72]	; (8006ab4 <vTaskStartScheduler+0xc0>)
 8006a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a70:	4b11      	ldr	r3, [pc, #68]	; (8006ab8 <vTaskStartScheduler+0xc4>)
 8006a72:	2201      	movs	r2, #1
 8006a74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a76:	4b11      	ldr	r3, [pc, #68]	; (8006abc <vTaskStartScheduler+0xc8>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a7c:	f001 f8b8 	bl	8007bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a80:	e00e      	b.n	8006aa0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a88:	d10a      	bne.n	8006aa0 <vTaskStartScheduler+0xac>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	60fb      	str	r3, [r7, #12]
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <vTaskStartScheduler+0xaa>
}
 8006aa0:	bf00      	nop
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	0800ccf4 	.word	0x0800ccf4
 8006aac:	080070d9 	.word	0x080070d9
 8006ab0:	20000f6c 	.word	0x20000f6c
 8006ab4:	20000f68 	.word	0x20000f68
 8006ab8:	20000f54 	.word	0x20000f54
 8006abc:	20000f4c 	.word	0x20000f4c

08006ac0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ac4:	4b04      	ldr	r3, [pc, #16]	; (8006ad8 <vTaskSuspendAll+0x18>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	4a03      	ldr	r2, [pc, #12]	; (8006ad8 <vTaskSuspendAll+0x18>)
 8006acc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ace:	bf00      	nop
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	20000f70 	.word	0x20000f70

08006adc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006aea:	4b42      	ldr	r3, [pc, #264]	; (8006bf4 <xTaskResumeAll+0x118>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <xTaskResumeAll+0x2c>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	603b      	str	r3, [r7, #0]
}
 8006b04:	bf00      	nop
 8006b06:	e7fe      	b.n	8006b06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b08:	f001 f914 	bl	8007d34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b0c:	4b39      	ldr	r3, [pc, #228]	; (8006bf4 <xTaskResumeAll+0x118>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	4a38      	ldr	r2, [pc, #224]	; (8006bf4 <xTaskResumeAll+0x118>)
 8006b14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b16:	4b37      	ldr	r3, [pc, #220]	; (8006bf4 <xTaskResumeAll+0x118>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d162      	bne.n	8006be4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b1e:	4b36      	ldr	r3, [pc, #216]	; (8006bf8 <xTaskResumeAll+0x11c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d05e      	beq.n	8006be4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b26:	e02f      	b.n	8006b88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b28:	4b34      	ldr	r3, [pc, #208]	; (8006bfc <xTaskResumeAll+0x120>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3318      	adds	r3, #24
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff f871 	bl	8005c1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7ff f86c 	bl	8005c1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b48:	4b2d      	ldr	r3, [pc, #180]	; (8006c00 <xTaskResumeAll+0x124>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d903      	bls.n	8006b58 <xTaskResumeAll+0x7c>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b54:	4a2a      	ldr	r2, [pc, #168]	; (8006c00 <xTaskResumeAll+0x124>)
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4a27      	ldr	r2, [pc, #156]	; (8006c04 <xTaskResumeAll+0x128>)
 8006b66:	441a      	add	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f7fe fff7 	bl	8005b62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b78:	4b23      	ldr	r3, [pc, #140]	; (8006c08 <xTaskResumeAll+0x12c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d302      	bcc.n	8006b88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006b82:	4b22      	ldr	r3, [pc, #136]	; (8006c0c <xTaskResumeAll+0x130>)
 8006b84:	2201      	movs	r2, #1
 8006b86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b88:	4b1c      	ldr	r3, [pc, #112]	; (8006bfc <xTaskResumeAll+0x120>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1cb      	bne.n	8006b28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b96:	f000 fb55 	bl	8007244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b9a:	4b1d      	ldr	r3, [pc, #116]	; (8006c10 <xTaskResumeAll+0x134>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d010      	beq.n	8006bc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ba6:	f000 f847 	bl	8006c38 <xTaskIncrementTick>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006bb0:	4b16      	ldr	r3, [pc, #88]	; (8006c0c <xTaskResumeAll+0x130>)
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1f1      	bne.n	8006ba6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006bc2:	4b13      	ldr	r3, [pc, #76]	; (8006c10 <xTaskResumeAll+0x134>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006bc8:	4b10      	ldr	r3, [pc, #64]	; (8006c0c <xTaskResumeAll+0x130>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d009      	beq.n	8006be4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bd4:	4b0f      	ldr	r3, [pc, #60]	; (8006c14 <xTaskResumeAll+0x138>)
 8006bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006be4:	f001 f8d6 	bl	8007d94 <vPortExitCritical>

	return xAlreadyYielded;
 8006be8:	68bb      	ldr	r3, [r7, #8]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000f70 	.word	0x20000f70
 8006bf8:	20000f48 	.word	0x20000f48
 8006bfc:	20000f08 	.word	0x20000f08
 8006c00:	20000f50 	.word	0x20000f50
 8006c04:	20000a78 	.word	0x20000a78
 8006c08:	20000a74 	.word	0x20000a74
 8006c0c:	20000f5c 	.word	0x20000f5c
 8006c10:	20000f58 	.word	0x20000f58
 8006c14:	e000ed04 	.word	0xe000ed04

08006c18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c1e:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <xTaskGetTickCount+0x1c>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c24:	687b      	ldr	r3, [r7, #4]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	20000f4c 	.word	0x20000f4c

08006c38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c42:	4b4f      	ldr	r3, [pc, #316]	; (8006d80 <xTaskIncrementTick+0x148>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f040 808f 	bne.w	8006d6a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c4c:	4b4d      	ldr	r3, [pc, #308]	; (8006d84 <xTaskIncrementTick+0x14c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3301      	adds	r3, #1
 8006c52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c54:	4a4b      	ldr	r2, [pc, #300]	; (8006d84 <xTaskIncrementTick+0x14c>)
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d120      	bne.n	8006ca2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c60:	4b49      	ldr	r3, [pc, #292]	; (8006d88 <xTaskIncrementTick+0x150>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00a      	beq.n	8006c80 <xTaskIncrementTick+0x48>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	603b      	str	r3, [r7, #0]
}
 8006c7c:	bf00      	nop
 8006c7e:	e7fe      	b.n	8006c7e <xTaskIncrementTick+0x46>
 8006c80:	4b41      	ldr	r3, [pc, #260]	; (8006d88 <xTaskIncrementTick+0x150>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	4b41      	ldr	r3, [pc, #260]	; (8006d8c <xTaskIncrementTick+0x154>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a3f      	ldr	r2, [pc, #252]	; (8006d88 <xTaskIncrementTick+0x150>)
 8006c8c:	6013      	str	r3, [r2, #0]
 8006c8e:	4a3f      	ldr	r2, [pc, #252]	; (8006d8c <xTaskIncrementTick+0x154>)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	4b3e      	ldr	r3, [pc, #248]	; (8006d90 <xTaskIncrementTick+0x158>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	4a3d      	ldr	r2, [pc, #244]	; (8006d90 <xTaskIncrementTick+0x158>)
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	f000 fad1 	bl	8007244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ca2:	4b3c      	ldr	r3, [pc, #240]	; (8006d94 <xTaskIncrementTick+0x15c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d349      	bcc.n	8006d40 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cac:	4b36      	ldr	r3, [pc, #216]	; (8006d88 <xTaskIncrementTick+0x150>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d104      	bne.n	8006cc0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cb6:	4b37      	ldr	r3, [pc, #220]	; (8006d94 <xTaskIncrementTick+0x15c>)
 8006cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cbc:	601a      	str	r2, [r3, #0]
					break;
 8006cbe:	e03f      	b.n	8006d40 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cc0:	4b31      	ldr	r3, [pc, #196]	; (8006d88 <xTaskIncrementTick+0x150>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d203      	bcs.n	8006ce0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006cd8:	4a2e      	ldr	r2, [pc, #184]	; (8006d94 <xTaskIncrementTick+0x15c>)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006cde:	e02f      	b.n	8006d40 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fe ff99 	bl	8005c1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	3318      	adds	r3, #24
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fe ff90 	bl	8005c1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d00:	4b25      	ldr	r3, [pc, #148]	; (8006d98 <xTaskIncrementTick+0x160>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d903      	bls.n	8006d10 <xTaskIncrementTick+0xd8>
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	4a22      	ldr	r2, [pc, #136]	; (8006d98 <xTaskIncrementTick+0x160>)
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4a1f      	ldr	r2, [pc, #124]	; (8006d9c <xTaskIncrementTick+0x164>)
 8006d1e:	441a      	add	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	3304      	adds	r3, #4
 8006d24:	4619      	mov	r1, r3
 8006d26:	4610      	mov	r0, r2
 8006d28:	f7fe ff1b 	bl	8005b62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d30:	4b1b      	ldr	r3, [pc, #108]	; (8006da0 <xTaskIncrementTick+0x168>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d3b8      	bcc.n	8006cac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d3e:	e7b5      	b.n	8006cac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d40:	4b17      	ldr	r3, [pc, #92]	; (8006da0 <xTaskIncrementTick+0x168>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d46:	4915      	ldr	r1, [pc, #84]	; (8006d9c <xTaskIncrementTick+0x164>)
 8006d48:	4613      	mov	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	440b      	add	r3, r1
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d901      	bls.n	8006d5c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d5c:	4b11      	ldr	r3, [pc, #68]	; (8006da4 <xTaskIncrementTick+0x16c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d007      	beq.n	8006d74 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006d64:	2301      	movs	r3, #1
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	e004      	b.n	8006d74 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d6a:	4b0f      	ldr	r3, [pc, #60]	; (8006da8 <xTaskIncrementTick+0x170>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	4a0d      	ldr	r2, [pc, #52]	; (8006da8 <xTaskIncrementTick+0x170>)
 8006d72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d74:	697b      	ldr	r3, [r7, #20]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20000f70 	.word	0x20000f70
 8006d84:	20000f4c 	.word	0x20000f4c
 8006d88:	20000f00 	.word	0x20000f00
 8006d8c:	20000f04 	.word	0x20000f04
 8006d90:	20000f60 	.word	0x20000f60
 8006d94:	20000f68 	.word	0x20000f68
 8006d98:	20000f50 	.word	0x20000f50
 8006d9c:	20000a78 	.word	0x20000a78
 8006da0:	20000a74 	.word	0x20000a74
 8006da4:	20000f5c 	.word	0x20000f5c
 8006da8:	20000f58 	.word	0x20000f58

08006dac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006db2:	4b28      	ldr	r3, [pc, #160]	; (8006e54 <vTaskSwitchContext+0xa8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006dba:	4b27      	ldr	r3, [pc, #156]	; (8006e58 <vTaskSwitchContext+0xac>)
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006dc0:	e041      	b.n	8006e46 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006dc2:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <vTaskSwitchContext+0xac>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc8:	4b24      	ldr	r3, [pc, #144]	; (8006e5c <vTaskSwitchContext+0xb0>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	e010      	b.n	8006df2 <vTaskSwitchContext+0x46>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10a      	bne.n	8006dec <vTaskSwitchContext+0x40>
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	607b      	str	r3, [r7, #4]
}
 8006de8:	bf00      	nop
 8006dea:	e7fe      	b.n	8006dea <vTaskSwitchContext+0x3e>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	491b      	ldr	r1, [pc, #108]	; (8006e60 <vTaskSwitchContext+0xb4>)
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	440b      	add	r3, r1
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0e4      	beq.n	8006dd0 <vTaskSwitchContext+0x24>
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4a13      	ldr	r2, [pc, #76]	; (8006e60 <vTaskSwitchContext+0xb4>)
 8006e12:	4413      	add	r3, r2
 8006e14:	60bb      	str	r3, [r7, #8]
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	605a      	str	r2, [r3, #4]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	3308      	adds	r3, #8
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d104      	bne.n	8006e36 <vTaskSwitchContext+0x8a>
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	605a      	str	r2, [r3, #4]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	4a09      	ldr	r2, [pc, #36]	; (8006e64 <vTaskSwitchContext+0xb8>)
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	4a06      	ldr	r2, [pc, #24]	; (8006e5c <vTaskSwitchContext+0xb0>)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6013      	str	r3, [r2, #0]
}
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	20000f70 	.word	0x20000f70
 8006e58:	20000f5c 	.word	0x20000f5c
 8006e5c:	20000f50 	.word	0x20000f50
 8006e60:	20000a78 	.word	0x20000a78
 8006e64:	20000a74 	.word	0x20000a74

08006e68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10a      	bne.n	8006e8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	60fb      	str	r3, [r7, #12]
}
 8006e8a:	bf00      	nop
 8006e8c:	e7fe      	b.n	8006e8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e8e:	4b07      	ldr	r3, [pc, #28]	; (8006eac <vTaskPlaceOnEventList+0x44>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3318      	adds	r3, #24
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fe fe87 	bl	8005baa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	6838      	ldr	r0, [r7, #0]
 8006ea0:	f000 fa7c 	bl	800739c <prvAddCurrentTaskToDelayedList>
}
 8006ea4:	bf00      	nop
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	20000a74 	.word	0x20000a74

08006eb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10a      	bne.n	8006ed8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	617b      	str	r3, [r7, #20]
}
 8006ed4:	bf00      	nop
 8006ed6:	e7fe      	b.n	8006ed6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ed8:	4b0a      	ldr	r3, [pc, #40]	; (8006f04 <vTaskPlaceOnEventListRestricted+0x54>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3318      	adds	r3, #24
 8006ede:	4619      	mov	r1, r3
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7fe fe3e 	bl	8005b62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006eec:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	68b8      	ldr	r0, [r7, #8]
 8006ef6:	f000 fa51 	bl	800739c <prvAddCurrentTaskToDelayedList>
	}
 8006efa:	bf00      	nop
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000a74 	.word	0x20000a74

08006f08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	60fb      	str	r3, [r7, #12]
}
 8006f30:	bf00      	nop
 8006f32:	e7fe      	b.n	8006f32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	3318      	adds	r3, #24
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fe fe6f 	bl	8005c1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f3e:	4b1e      	ldr	r3, [pc, #120]	; (8006fb8 <xTaskRemoveFromEventList+0xb0>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d11d      	bne.n	8006f82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe fe66 	bl	8005c1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	4b19      	ldr	r3, [pc, #100]	; (8006fbc <xTaskRemoveFromEventList+0xb4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d903      	bls.n	8006f64 <xTaskRemoveFromEventList+0x5c>
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f60:	4a16      	ldr	r2, [pc, #88]	; (8006fbc <xTaskRemoveFromEventList+0xb4>)
 8006f62:	6013      	str	r3, [r2, #0]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f68:	4613      	mov	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4a13      	ldr	r2, [pc, #76]	; (8006fc0 <xTaskRemoveFromEventList+0xb8>)
 8006f72:	441a      	add	r2, r3
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	f7fe fdf1 	bl	8005b62 <vListInsertEnd>
 8006f80:	e005      	b.n	8006f8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	3318      	adds	r3, #24
 8006f86:	4619      	mov	r1, r3
 8006f88:	480e      	ldr	r0, [pc, #56]	; (8006fc4 <xTaskRemoveFromEventList+0xbc>)
 8006f8a:	f7fe fdea 	bl	8005b62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f92:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <xTaskRemoveFromEventList+0xc0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d905      	bls.n	8006fa8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fa0:	4b0a      	ldr	r3, [pc, #40]	; (8006fcc <xTaskRemoveFromEventList+0xc4>)
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	e001      	b.n	8006fac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fac:	697b      	ldr	r3, [r7, #20]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000f70 	.word	0x20000f70
 8006fbc:	20000f50 	.word	0x20000f50
 8006fc0:	20000a78 	.word	0x20000a78
 8006fc4:	20000f08 	.word	0x20000f08
 8006fc8:	20000a74 	.word	0x20000a74
 8006fcc:	20000f5c 	.word	0x20000f5c

08006fd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fd8:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <vTaskInternalSetTimeOutState+0x24>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006fe0:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <vTaskInternalSetTimeOutState+0x28>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	605a      	str	r2, [r3, #4]
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	20000f60 	.word	0x20000f60
 8006ff8:	20000f4c 	.word	0x20000f4c

08006ffc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b088      	sub	sp, #32
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10a      	bne.n	8007022 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	613b      	str	r3, [r7, #16]
}
 800701e:	bf00      	nop
 8007020:	e7fe      	b.n	8007020 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10a      	bne.n	800703e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	60fb      	str	r3, [r7, #12]
}
 800703a:	bf00      	nop
 800703c:	e7fe      	b.n	800703c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800703e:	f000 fe79 	bl	8007d34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007042:	4b1d      	ldr	r3, [pc, #116]	; (80070b8 <xTaskCheckForTimeOut+0xbc>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705a:	d102      	bne.n	8007062 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800705c:	2300      	movs	r3, #0
 800705e:	61fb      	str	r3, [r7, #28]
 8007060:	e023      	b.n	80070aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	4b15      	ldr	r3, [pc, #84]	; (80070bc <xTaskCheckForTimeOut+0xc0>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	d007      	beq.n	800707e <xTaskCheckForTimeOut+0x82>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	429a      	cmp	r2, r3
 8007076:	d302      	bcc.n	800707e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007078:	2301      	movs	r3, #1
 800707a:	61fb      	str	r3, [r7, #28]
 800707c:	e015      	b.n	80070aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	429a      	cmp	r2, r3
 8007086:	d20b      	bcs.n	80070a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	1ad2      	subs	r2, r2, r3
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7ff ff9b 	bl	8006fd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800709a:	2300      	movs	r3, #0
 800709c:	61fb      	str	r3, [r7, #28]
 800709e:	e004      	b.n	80070aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070a6:	2301      	movs	r3, #1
 80070a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070aa:	f000 fe73 	bl	8007d94 <vPortExitCritical>

	return xReturn;
 80070ae:	69fb      	ldr	r3, [r7, #28]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3720      	adds	r7, #32
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	20000f4c 	.word	0x20000f4c
 80070bc:	20000f60 	.word	0x20000f60

080070c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070c0:	b480      	push	{r7}
 80070c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070c4:	4b03      	ldr	r3, [pc, #12]	; (80070d4 <vTaskMissedYield+0x14>)
 80070c6:	2201      	movs	r2, #1
 80070c8:	601a      	str	r2, [r3, #0]
}
 80070ca:	bf00      	nop
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	20000f5c 	.word	0x20000f5c

080070d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070e0:	f000 f852 	bl	8007188 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070e4:	4b06      	ldr	r3, [pc, #24]	; (8007100 <prvIdleTask+0x28>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d9f9      	bls.n	80070e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80070ec:	4b05      	ldr	r3, [pc, #20]	; (8007104 <prvIdleTask+0x2c>)
 80070ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80070fc:	e7f0      	b.n	80070e0 <prvIdleTask+0x8>
 80070fe:	bf00      	nop
 8007100:	20000a78 	.word	0x20000a78
 8007104:	e000ed04 	.word	0xe000ed04

08007108 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800710e:	2300      	movs	r3, #0
 8007110:	607b      	str	r3, [r7, #4]
 8007112:	e00c      	b.n	800712e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	4613      	mov	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4a12      	ldr	r2, [pc, #72]	; (8007168 <prvInitialiseTaskLists+0x60>)
 8007120:	4413      	add	r3, r2
 8007122:	4618      	mov	r0, r3
 8007124:	f7fe fcf0 	bl	8005b08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3301      	adds	r3, #1
 800712c:	607b      	str	r3, [r7, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b37      	cmp	r3, #55	; 0x37
 8007132:	d9ef      	bls.n	8007114 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007134:	480d      	ldr	r0, [pc, #52]	; (800716c <prvInitialiseTaskLists+0x64>)
 8007136:	f7fe fce7 	bl	8005b08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800713a:	480d      	ldr	r0, [pc, #52]	; (8007170 <prvInitialiseTaskLists+0x68>)
 800713c:	f7fe fce4 	bl	8005b08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007140:	480c      	ldr	r0, [pc, #48]	; (8007174 <prvInitialiseTaskLists+0x6c>)
 8007142:	f7fe fce1 	bl	8005b08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007146:	480c      	ldr	r0, [pc, #48]	; (8007178 <prvInitialiseTaskLists+0x70>)
 8007148:	f7fe fcde 	bl	8005b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800714c:	480b      	ldr	r0, [pc, #44]	; (800717c <prvInitialiseTaskLists+0x74>)
 800714e:	f7fe fcdb 	bl	8005b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007152:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <prvInitialiseTaskLists+0x78>)
 8007154:	4a05      	ldr	r2, [pc, #20]	; (800716c <prvInitialiseTaskLists+0x64>)
 8007156:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007158:	4b0a      	ldr	r3, [pc, #40]	; (8007184 <prvInitialiseTaskLists+0x7c>)
 800715a:	4a05      	ldr	r2, [pc, #20]	; (8007170 <prvInitialiseTaskLists+0x68>)
 800715c:	601a      	str	r2, [r3, #0]
}
 800715e:	bf00      	nop
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	20000a78 	.word	0x20000a78
 800716c:	20000ed8 	.word	0x20000ed8
 8007170:	20000eec 	.word	0x20000eec
 8007174:	20000f08 	.word	0x20000f08
 8007178:	20000f1c 	.word	0x20000f1c
 800717c:	20000f34 	.word	0x20000f34
 8007180:	20000f00 	.word	0x20000f00
 8007184:	20000f04 	.word	0x20000f04

08007188 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800718e:	e019      	b.n	80071c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007190:	f000 fdd0 	bl	8007d34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007194:	4b10      	ldr	r3, [pc, #64]	; (80071d8 <prvCheckTasksWaitingTermination+0x50>)
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3304      	adds	r3, #4
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fe fd3b 	bl	8005c1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071a6:	4b0d      	ldr	r3, [pc, #52]	; (80071dc <prvCheckTasksWaitingTermination+0x54>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	4a0b      	ldr	r2, [pc, #44]	; (80071dc <prvCheckTasksWaitingTermination+0x54>)
 80071ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071b0:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <prvCheckTasksWaitingTermination+0x58>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3b01      	subs	r3, #1
 80071b6:	4a0a      	ldr	r2, [pc, #40]	; (80071e0 <prvCheckTasksWaitingTermination+0x58>)
 80071b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071ba:	f000 fdeb 	bl	8007d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f810 	bl	80071e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071c4:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <prvCheckTasksWaitingTermination+0x58>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1e1      	bne.n	8007190 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071cc:	bf00      	nop
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000f1c 	.word	0x20000f1c
 80071dc:	20000f48 	.word	0x20000f48
 80071e0:	20000f30 	.word	0x20000f30

080071e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d108      	bne.n	8007208 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 ff88 	bl	8008110 <vPortFree>
				vPortFree( pxTCB );
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 ff85 	bl	8008110 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007206:	e018      	b.n	800723a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800720e:	2b01      	cmp	r3, #1
 8007210:	d103      	bne.n	800721a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 ff7c 	bl	8008110 <vPortFree>
	}
 8007218:	e00f      	b.n	800723a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007220:	2b02      	cmp	r3, #2
 8007222:	d00a      	beq.n	800723a <prvDeleteTCB+0x56>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	60fb      	str	r3, [r7, #12]
}
 8007236:	bf00      	nop
 8007238:	e7fe      	b.n	8007238 <prvDeleteTCB+0x54>
	}
 800723a:	bf00      	nop
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800724a:	4b0c      	ldr	r3, [pc, #48]	; (800727c <prvResetNextTaskUnblockTime+0x38>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d104      	bne.n	800725e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007254:	4b0a      	ldr	r3, [pc, #40]	; (8007280 <prvResetNextTaskUnblockTime+0x3c>)
 8007256:	f04f 32ff 	mov.w	r2, #4294967295
 800725a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800725c:	e008      	b.n	8007270 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800725e:	4b07      	ldr	r3, [pc, #28]	; (800727c <prvResetNextTaskUnblockTime+0x38>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	4a04      	ldr	r2, [pc, #16]	; (8007280 <prvResetNextTaskUnblockTime+0x3c>)
 800726e:	6013      	str	r3, [r2, #0]
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	20000f00 	.word	0x20000f00
 8007280:	20000f68 	.word	0x20000f68

08007284 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800728a:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <xTaskGetSchedulerState+0x34>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d102      	bne.n	8007298 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007292:	2301      	movs	r3, #1
 8007294:	607b      	str	r3, [r7, #4]
 8007296:	e008      	b.n	80072aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007298:	4b08      	ldr	r3, [pc, #32]	; (80072bc <xTaskGetSchedulerState+0x38>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d102      	bne.n	80072a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072a0:	2302      	movs	r3, #2
 80072a2:	607b      	str	r3, [r7, #4]
 80072a4:	e001      	b.n	80072aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072a6:	2300      	movs	r3, #0
 80072a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072aa:	687b      	ldr	r3, [r7, #4]
	}
 80072ac:	4618      	mov	r0, r3
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	20000f54 	.word	0x20000f54
 80072bc:	20000f70 	.word	0x20000f70

080072c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80072cc:	2300      	movs	r3, #0
 80072ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d056      	beq.n	8007384 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80072d6:	4b2e      	ldr	r3, [pc, #184]	; (8007390 <xTaskPriorityDisinherit+0xd0>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d00a      	beq.n	80072f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	60fb      	str	r3, [r7, #12]
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10a      	bne.n	8007314 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	60bb      	str	r3, [r7, #8]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007318:	1e5a      	subs	r2, r3, #1
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007326:	429a      	cmp	r2, r3
 8007328:	d02c      	beq.n	8007384 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800732e:	2b00      	cmp	r3, #0
 8007330:	d128      	bne.n	8007384 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	3304      	adds	r3, #4
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe fc70 	bl	8005c1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007348:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007354:	4b0f      	ldr	r3, [pc, #60]	; (8007394 <xTaskPriorityDisinherit+0xd4>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	429a      	cmp	r2, r3
 800735a:	d903      	bls.n	8007364 <xTaskPriorityDisinherit+0xa4>
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	4a0c      	ldr	r2, [pc, #48]	; (8007394 <xTaskPriorityDisinherit+0xd4>)
 8007362:	6013      	str	r3, [r2, #0]
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007368:	4613      	mov	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4a09      	ldr	r2, [pc, #36]	; (8007398 <xTaskPriorityDisinherit+0xd8>)
 8007372:	441a      	add	r2, r3
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	3304      	adds	r3, #4
 8007378:	4619      	mov	r1, r3
 800737a:	4610      	mov	r0, r2
 800737c:	f7fe fbf1 	bl	8005b62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007380:	2301      	movs	r3, #1
 8007382:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007384:	697b      	ldr	r3, [r7, #20]
	}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20000a74 	.word	0x20000a74
 8007394:	20000f50 	.word	0x20000f50
 8007398:	20000a78 	.word	0x20000a78

0800739c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073a6:	4b21      	ldr	r3, [pc, #132]	; (800742c <prvAddCurrentTaskToDelayedList+0x90>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ac:	4b20      	ldr	r3, [pc, #128]	; (8007430 <prvAddCurrentTaskToDelayedList+0x94>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3304      	adds	r3, #4
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fe fc32 	bl	8005c1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073be:	d10a      	bne.n	80073d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d007      	beq.n	80073d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073c6:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <prvAddCurrentTaskToDelayedList+0x94>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3304      	adds	r3, #4
 80073cc:	4619      	mov	r1, r3
 80073ce:	4819      	ldr	r0, [pc, #100]	; (8007434 <prvAddCurrentTaskToDelayedList+0x98>)
 80073d0:	f7fe fbc7 	bl	8005b62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073d4:	e026      	b.n	8007424 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4413      	add	r3, r2
 80073dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073de:	4b14      	ldr	r3, [pc, #80]	; (8007430 <prvAddCurrentTaskToDelayedList+0x94>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d209      	bcs.n	8007402 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073ee:	4b12      	ldr	r3, [pc, #72]	; (8007438 <prvAddCurrentTaskToDelayedList+0x9c>)
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	4b0f      	ldr	r3, [pc, #60]	; (8007430 <prvAddCurrentTaskToDelayedList+0x94>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3304      	adds	r3, #4
 80073f8:	4619      	mov	r1, r3
 80073fa:	4610      	mov	r0, r2
 80073fc:	f7fe fbd5 	bl	8005baa <vListInsert>
}
 8007400:	e010      	b.n	8007424 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007402:	4b0e      	ldr	r3, [pc, #56]	; (800743c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	4b0a      	ldr	r3, [pc, #40]	; (8007430 <prvAddCurrentTaskToDelayedList+0x94>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3304      	adds	r3, #4
 800740c:	4619      	mov	r1, r3
 800740e:	4610      	mov	r0, r2
 8007410:	f7fe fbcb 	bl	8005baa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007414:	4b0a      	ldr	r3, [pc, #40]	; (8007440 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	429a      	cmp	r2, r3
 800741c:	d202      	bcs.n	8007424 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800741e:	4a08      	ldr	r2, [pc, #32]	; (8007440 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	6013      	str	r3, [r2, #0]
}
 8007424:	bf00      	nop
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	20000f4c 	.word	0x20000f4c
 8007430:	20000a74 	.word	0x20000a74
 8007434:	20000f34 	.word	0x20000f34
 8007438:	20000f04 	.word	0x20000f04
 800743c:	20000f00 	.word	0x20000f00
 8007440:	20000f68 	.word	0x20000f68

08007444 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08a      	sub	sp, #40	; 0x28
 8007448:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800744a:	2300      	movs	r3, #0
 800744c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800744e:	f000 fb07 	bl	8007a60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007452:	4b1c      	ldr	r3, [pc, #112]	; (80074c4 <xTimerCreateTimerTask+0x80>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d021      	beq.n	800749e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800745e:	2300      	movs	r3, #0
 8007460:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007462:	1d3a      	adds	r2, r7, #4
 8007464:	f107 0108 	add.w	r1, r7, #8
 8007468:	f107 030c 	add.w	r3, r7, #12
 800746c:	4618      	mov	r0, r3
 800746e:	f7fe fb31 	bl	8005ad4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	9202      	str	r2, [sp, #8]
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	2302      	movs	r3, #2
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	2300      	movs	r3, #0
 8007482:	460a      	mov	r2, r1
 8007484:	4910      	ldr	r1, [pc, #64]	; (80074c8 <xTimerCreateTimerTask+0x84>)
 8007486:	4811      	ldr	r0, [pc, #68]	; (80074cc <xTimerCreateTimerTask+0x88>)
 8007488:	f7ff f8de 	bl	8006648 <xTaskCreateStatic>
 800748c:	4603      	mov	r3, r0
 800748e:	4a10      	ldr	r2, [pc, #64]	; (80074d0 <xTimerCreateTimerTask+0x8c>)
 8007490:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007492:	4b0f      	ldr	r3, [pc, #60]	; (80074d0 <xTimerCreateTimerTask+0x8c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800749a:	2301      	movs	r3, #1
 800749c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10a      	bne.n	80074ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80074a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	613b      	str	r3, [r7, #16]
}
 80074b6:	bf00      	nop
 80074b8:	e7fe      	b.n	80074b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80074ba:	697b      	ldr	r3, [r7, #20]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	20000fa4 	.word	0x20000fa4
 80074c8:	0800ccfc 	.word	0x0800ccfc
 80074cc:	08007609 	.word	0x08007609
 80074d0:	20000fa8 	.word	0x20000fa8

080074d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b08a      	sub	sp, #40	; 0x28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10a      	bne.n	8007502 <xTimerGenericCommand+0x2e>
	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	623b      	str	r3, [r7, #32]
}
 80074fe:	bf00      	nop
 8007500:	e7fe      	b.n	8007500 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007502:	4b1a      	ldr	r3, [pc, #104]	; (800756c <xTimerGenericCommand+0x98>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d02a      	beq.n	8007560 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2b05      	cmp	r3, #5
 800751a:	dc18      	bgt.n	800754e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800751c:	f7ff feb2 	bl	8007284 <xTaskGetSchedulerState>
 8007520:	4603      	mov	r3, r0
 8007522:	2b02      	cmp	r3, #2
 8007524:	d109      	bne.n	800753a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007526:	4b11      	ldr	r3, [pc, #68]	; (800756c <xTimerGenericCommand+0x98>)
 8007528:	6818      	ldr	r0, [r3, #0]
 800752a:	f107 0110 	add.w	r1, r7, #16
 800752e:	2300      	movs	r3, #0
 8007530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007532:	f7fe fca1 	bl	8005e78 <xQueueGenericSend>
 8007536:	6278      	str	r0, [r7, #36]	; 0x24
 8007538:	e012      	b.n	8007560 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800753a:	4b0c      	ldr	r3, [pc, #48]	; (800756c <xTimerGenericCommand+0x98>)
 800753c:	6818      	ldr	r0, [r3, #0]
 800753e:	f107 0110 	add.w	r1, r7, #16
 8007542:	2300      	movs	r3, #0
 8007544:	2200      	movs	r2, #0
 8007546:	f7fe fc97 	bl	8005e78 <xQueueGenericSend>
 800754a:	6278      	str	r0, [r7, #36]	; 0x24
 800754c:	e008      	b.n	8007560 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800754e:	4b07      	ldr	r3, [pc, #28]	; (800756c <xTimerGenericCommand+0x98>)
 8007550:	6818      	ldr	r0, [r3, #0]
 8007552:	f107 0110 	add.w	r1, r7, #16
 8007556:	2300      	movs	r3, #0
 8007558:	683a      	ldr	r2, [r7, #0]
 800755a:	f7fe fd8b 	bl	8006074 <xQueueGenericSendFromISR>
 800755e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007562:	4618      	mov	r0, r3
 8007564:	3728      	adds	r7, #40	; 0x28
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20000fa4 	.word	0x20000fa4

08007570 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b088      	sub	sp, #32
 8007574:	af02      	add	r7, sp, #8
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800757a:	4b22      	ldr	r3, [pc, #136]	; (8007604 <prvProcessExpiredTimer+0x94>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	3304      	adds	r3, #4
 8007588:	4618      	mov	r0, r3
 800758a:	f7fe fb47 	bl	8005c1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b00      	cmp	r3, #0
 800759a:	d022      	beq.n	80075e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	699a      	ldr	r2, [r3, #24]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	18d1      	adds	r1, r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	6978      	ldr	r0, [r7, #20]
 80075aa:	f000 f8d1 	bl	8007750 <prvInsertTimerInActiveList>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01f      	beq.n	80075f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075b4:	2300      	movs	r3, #0
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	2300      	movs	r3, #0
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	2100      	movs	r1, #0
 80075be:	6978      	ldr	r0, [r7, #20]
 80075c0:	f7ff ff88 	bl	80074d4 <xTimerGenericCommand>
 80075c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d113      	bne.n	80075f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	60fb      	str	r3, [r7, #12]
}
 80075de:	bf00      	nop
 80075e0:	e7fe      	b.n	80075e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075e8:	f023 0301 	bic.w	r3, r3, #1
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	6978      	ldr	r0, [r7, #20]
 80075fa:	4798      	blx	r3
}
 80075fc:	bf00      	nop
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	20000f9c 	.word	0x20000f9c

08007608 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007610:	f107 0308 	add.w	r3, r7, #8
 8007614:	4618      	mov	r0, r3
 8007616:	f000 f857 	bl	80076c8 <prvGetNextExpireTime>
 800761a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	4619      	mov	r1, r3
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 f803 	bl	800762c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007626:	f000 f8d5 	bl	80077d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800762a:	e7f1      	b.n	8007610 <prvTimerTask+0x8>

0800762c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007636:	f7ff fa43 	bl	8006ac0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800763a:	f107 0308 	add.w	r3, r7, #8
 800763e:	4618      	mov	r0, r3
 8007640:	f000 f866 	bl	8007710 <prvSampleTimeNow>
 8007644:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d130      	bne.n	80076ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10a      	bne.n	8007668 <prvProcessTimerOrBlockTask+0x3c>
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	429a      	cmp	r2, r3
 8007658:	d806      	bhi.n	8007668 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800765a:	f7ff fa3f 	bl	8006adc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800765e:	68f9      	ldr	r1, [r7, #12]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff ff85 	bl	8007570 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007666:	e024      	b.n	80076b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d008      	beq.n	8007680 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800766e:	4b13      	ldr	r3, [pc, #76]	; (80076bc <prvProcessTimerOrBlockTask+0x90>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <prvProcessTimerOrBlockTask+0x50>
 8007678:	2301      	movs	r3, #1
 800767a:	e000      	b.n	800767e <prvProcessTimerOrBlockTask+0x52>
 800767c:	2300      	movs	r3, #0
 800767e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007680:	4b0f      	ldr	r3, [pc, #60]	; (80076c0 <prvProcessTimerOrBlockTask+0x94>)
 8007682:	6818      	ldr	r0, [r3, #0]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	4619      	mov	r1, r3
 800768e:	f7fe ffa7 	bl	80065e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007692:	f7ff fa23 	bl	8006adc <xTaskResumeAll>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10a      	bne.n	80076b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800769c:	4b09      	ldr	r3, [pc, #36]	; (80076c4 <prvProcessTimerOrBlockTask+0x98>)
 800769e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	f3bf 8f6f 	isb	sy
}
 80076ac:	e001      	b.n	80076b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076ae:	f7ff fa15 	bl	8006adc <xTaskResumeAll>
}
 80076b2:	bf00      	nop
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	20000fa0 	.word	0x20000fa0
 80076c0:	20000fa4 	.word	0x20000fa4
 80076c4:	e000ed04 	.word	0xe000ed04

080076c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076d0:	4b0e      	ldr	r3, [pc, #56]	; (800770c <prvGetNextExpireTime+0x44>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <prvGetNextExpireTime+0x16>
 80076da:	2201      	movs	r2, #1
 80076dc:	e000      	b.n	80076e0 <prvGetNextExpireTime+0x18>
 80076de:	2200      	movs	r2, #0
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d105      	bne.n	80076f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076ec:	4b07      	ldr	r3, [pc, #28]	; (800770c <prvGetNextExpireTime+0x44>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	e001      	b.n	80076fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80076fc:	68fb      	ldr	r3, [r7, #12]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	20000f9c 	.word	0x20000f9c

08007710 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007718:	f7ff fa7e 	bl	8006c18 <xTaskGetTickCount>
 800771c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800771e:	4b0b      	ldr	r3, [pc, #44]	; (800774c <prvSampleTimeNow+0x3c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	429a      	cmp	r2, r3
 8007726:	d205      	bcs.n	8007734 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007728:	f000 f936 	bl	8007998 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	e002      	b.n	800773a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800773a:	4a04      	ldr	r2, [pc, #16]	; (800774c <prvSampleTimeNow+0x3c>)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007740:	68fb      	ldr	r3, [r7, #12]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20000fac 	.word	0x20000fac

08007750 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800775e:	2300      	movs	r3, #0
 8007760:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	429a      	cmp	r2, r3
 8007774:	d812      	bhi.n	800779c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	1ad2      	subs	r2, r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	429a      	cmp	r2, r3
 8007782:	d302      	bcc.n	800778a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007784:	2301      	movs	r3, #1
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	e01b      	b.n	80077c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800778a:	4b10      	ldr	r3, [pc, #64]	; (80077cc <prvInsertTimerInActiveList+0x7c>)
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3304      	adds	r3, #4
 8007792:	4619      	mov	r1, r3
 8007794:	4610      	mov	r0, r2
 8007796:	f7fe fa08 	bl	8005baa <vListInsert>
 800779a:	e012      	b.n	80077c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d206      	bcs.n	80077b2 <prvInsertTimerInActiveList+0x62>
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d302      	bcc.n	80077b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077ac:	2301      	movs	r3, #1
 80077ae:	617b      	str	r3, [r7, #20]
 80077b0:	e007      	b.n	80077c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077b2:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <prvInsertTimerInActiveList+0x80>)
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3304      	adds	r3, #4
 80077ba:	4619      	mov	r1, r3
 80077bc:	4610      	mov	r0, r2
 80077be:	f7fe f9f4 	bl	8005baa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077c2:	697b      	ldr	r3, [r7, #20]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	20000fa0 	.word	0x20000fa0
 80077d0:	20000f9c 	.word	0x20000f9c

080077d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08e      	sub	sp, #56	; 0x38
 80077d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077da:	e0ca      	b.n	8007972 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	da18      	bge.n	8007814 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80077e2:	1d3b      	adds	r3, r7, #4
 80077e4:	3304      	adds	r3, #4
 80077e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80077e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10a      	bne.n	8007804 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	61fb      	str	r3, [r7, #28]
}
 8007800:	bf00      	nop
 8007802:	e7fe      	b.n	8007802 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800780a:	6850      	ldr	r0, [r2, #4]
 800780c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800780e:	6892      	ldr	r2, [r2, #8]
 8007810:	4611      	mov	r1, r2
 8007812:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	f2c0 80aa 	blt.w	8007970 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d004      	beq.n	8007832 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	3304      	adds	r3, #4
 800782c:	4618      	mov	r0, r3
 800782e:	f7fe f9f5 	bl	8005c1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007832:	463b      	mov	r3, r7
 8007834:	4618      	mov	r0, r3
 8007836:	f7ff ff6b 	bl	8007710 <prvSampleTimeNow>
 800783a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b09      	cmp	r3, #9
 8007840:	f200 8097 	bhi.w	8007972 <prvProcessReceivedCommands+0x19e>
 8007844:	a201      	add	r2, pc, #4	; (adr r2, 800784c <prvProcessReceivedCommands+0x78>)
 8007846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784a:	bf00      	nop
 800784c:	08007875 	.word	0x08007875
 8007850:	08007875 	.word	0x08007875
 8007854:	08007875 	.word	0x08007875
 8007858:	080078e9 	.word	0x080078e9
 800785c:	080078fd 	.word	0x080078fd
 8007860:	08007947 	.word	0x08007947
 8007864:	08007875 	.word	0x08007875
 8007868:	08007875 	.word	0x08007875
 800786c:	080078e9 	.word	0x080078e9
 8007870:	080078fd 	.word	0x080078fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800787a:	f043 0301 	orr.w	r3, r3, #1
 800787e:	b2da      	uxtb	r2, r3
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	18d1      	adds	r1, r2, r3
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007894:	f7ff ff5c 	bl	8007750 <prvInsertTimerInActiveList>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d069      	beq.n	8007972 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078ac:	f003 0304 	and.w	r3, r3, #4
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d05e      	beq.n	8007972 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	441a      	add	r2, r3
 80078bc:	2300      	movs	r3, #0
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	2300      	movs	r3, #0
 80078c2:	2100      	movs	r1, #0
 80078c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c6:	f7ff fe05 	bl	80074d4 <xTimerGenericCommand>
 80078ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d14f      	bne.n	8007972 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	61bb      	str	r3, [r7, #24]
}
 80078e4:	bf00      	nop
 80078e6:	e7fe      	b.n	80078e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078ee:	f023 0301 	bic.w	r3, r3, #1
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80078fa:	e03a      	b.n	8007972 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007902:	f043 0301 	orr.w	r3, r3, #1
 8007906:	b2da      	uxtb	r2, r3
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10a      	bne.n	8007932 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	617b      	str	r3, [r7, #20]
}
 800792e:	bf00      	nop
 8007930:	e7fe      	b.n	8007930 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	699a      	ldr	r2, [r3, #24]
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	18d1      	adds	r1, r2, r3
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800793e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007940:	f7ff ff06 	bl	8007750 <prvInsertTimerInActiveList>
					break;
 8007944:	e015      	b.n	8007972 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d103      	bne.n	800795c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007956:	f000 fbdb 	bl	8008110 <vPortFree>
 800795a:	e00a      	b.n	8007972 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007962:	f023 0301 	bic.w	r3, r3, #1
 8007966:	b2da      	uxtb	r2, r3
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800796e:	e000      	b.n	8007972 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007970:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007972:	4b08      	ldr	r3, [pc, #32]	; (8007994 <prvProcessReceivedCommands+0x1c0>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	1d39      	adds	r1, r7, #4
 8007978:	2200      	movs	r2, #0
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe fc16 	bl	80061ac <xQueueReceive>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	f47f af2a 	bne.w	80077dc <prvProcessReceivedCommands+0x8>
	}
}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	3730      	adds	r7, #48	; 0x30
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20000fa4 	.word	0x20000fa4

08007998 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800799e:	e048      	b.n	8007a32 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079a0:	4b2d      	ldr	r3, [pc, #180]	; (8007a58 <prvSwitchTimerLists+0xc0>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079aa:	4b2b      	ldr	r3, [pc, #172]	; (8007a58 <prvSwitchTimerLists+0xc0>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3304      	adds	r3, #4
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe f92f 	bl	8005c1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d02e      	beq.n	8007a32 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	4413      	add	r3, r2
 80079dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d90e      	bls.n	8007a04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079f2:	4b19      	ldr	r3, [pc, #100]	; (8007a58 <prvSwitchTimerLists+0xc0>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3304      	adds	r3, #4
 80079fa:	4619      	mov	r1, r3
 80079fc:	4610      	mov	r0, r2
 80079fe:	f7fe f8d4 	bl	8005baa <vListInsert>
 8007a02:	e016      	b.n	8007a32 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a04:	2300      	movs	r3, #0
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f7ff fd60 	bl	80074d4 <xTimerGenericCommand>
 8007a14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10a      	bne.n	8007a32 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	603b      	str	r3, [r7, #0]
}
 8007a2e:	bf00      	nop
 8007a30:	e7fe      	b.n	8007a30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a32:	4b09      	ldr	r3, [pc, #36]	; (8007a58 <prvSwitchTimerLists+0xc0>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1b1      	bne.n	80079a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a3c:	4b06      	ldr	r3, [pc, #24]	; (8007a58 <prvSwitchTimerLists+0xc0>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a42:	4b06      	ldr	r3, [pc, #24]	; (8007a5c <prvSwitchTimerLists+0xc4>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a04      	ldr	r2, [pc, #16]	; (8007a58 <prvSwitchTimerLists+0xc0>)
 8007a48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a4a:	4a04      	ldr	r2, [pc, #16]	; (8007a5c <prvSwitchTimerLists+0xc4>)
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	6013      	str	r3, [r2, #0]
}
 8007a50:	bf00      	nop
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20000f9c 	.word	0x20000f9c
 8007a5c:	20000fa0 	.word	0x20000fa0

08007a60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a66:	f000 f965 	bl	8007d34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a6a:	4b15      	ldr	r3, [pc, #84]	; (8007ac0 <prvCheckForValidListAndQueue+0x60>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d120      	bne.n	8007ab4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a72:	4814      	ldr	r0, [pc, #80]	; (8007ac4 <prvCheckForValidListAndQueue+0x64>)
 8007a74:	f7fe f848 	bl	8005b08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a78:	4813      	ldr	r0, [pc, #76]	; (8007ac8 <prvCheckForValidListAndQueue+0x68>)
 8007a7a:	f7fe f845 	bl	8005b08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a7e:	4b13      	ldr	r3, [pc, #76]	; (8007acc <prvCheckForValidListAndQueue+0x6c>)
 8007a80:	4a10      	ldr	r2, [pc, #64]	; (8007ac4 <prvCheckForValidListAndQueue+0x64>)
 8007a82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a84:	4b12      	ldr	r3, [pc, #72]	; (8007ad0 <prvCheckForValidListAndQueue+0x70>)
 8007a86:	4a10      	ldr	r2, [pc, #64]	; (8007ac8 <prvCheckForValidListAndQueue+0x68>)
 8007a88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	4b11      	ldr	r3, [pc, #68]	; (8007ad4 <prvCheckForValidListAndQueue+0x74>)
 8007a90:	4a11      	ldr	r2, [pc, #68]	; (8007ad8 <prvCheckForValidListAndQueue+0x78>)
 8007a92:	2110      	movs	r1, #16
 8007a94:	200a      	movs	r0, #10
 8007a96:	f7fe f953 	bl	8005d40 <xQueueGenericCreateStatic>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	4a08      	ldr	r2, [pc, #32]	; (8007ac0 <prvCheckForValidListAndQueue+0x60>)
 8007a9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007aa0:	4b07      	ldr	r3, [pc, #28]	; (8007ac0 <prvCheckForValidListAndQueue+0x60>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d005      	beq.n	8007ab4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007aa8:	4b05      	ldr	r3, [pc, #20]	; (8007ac0 <prvCheckForValidListAndQueue+0x60>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	490b      	ldr	r1, [pc, #44]	; (8007adc <prvCheckForValidListAndQueue+0x7c>)
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fe fd6c 	bl	800658c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ab4:	f000 f96e 	bl	8007d94 <vPortExitCritical>
}
 8007ab8:	bf00      	nop
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20000fa4 	.word	0x20000fa4
 8007ac4:	20000f74 	.word	0x20000f74
 8007ac8:	20000f88 	.word	0x20000f88
 8007acc:	20000f9c 	.word	0x20000f9c
 8007ad0:	20000fa0 	.word	0x20000fa0
 8007ad4:	20001050 	.word	0x20001050
 8007ad8:	20000fb0 	.word	0x20000fb0
 8007adc:	0800cd04 	.word	0x0800cd04

08007ae0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	3b04      	subs	r3, #4
 8007af0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3b04      	subs	r3, #4
 8007afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f023 0201 	bic.w	r2, r3, #1
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3b04      	subs	r3, #4
 8007b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b10:	4a0c      	ldr	r2, [pc, #48]	; (8007b44 <pxPortInitialiseStack+0x64>)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3b14      	subs	r3, #20
 8007b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3b04      	subs	r3, #4
 8007b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f06f 0202 	mvn.w	r2, #2
 8007b2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	3b20      	subs	r3, #32
 8007b34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b36:	68fb      	ldr	r3, [r7, #12]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	08007b49 	.word	0x08007b49

08007b48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b52:	4b12      	ldr	r3, [pc, #72]	; (8007b9c <prvTaskExitError+0x54>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5a:	d00a      	beq.n	8007b72 <prvTaskExitError+0x2a>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	60fb      	str	r3, [r7, #12]
}
 8007b6e:	bf00      	nop
 8007b70:	e7fe      	b.n	8007b70 <prvTaskExitError+0x28>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	60bb      	str	r3, [r7, #8]
}
 8007b84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b86:	bf00      	nop
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0fc      	beq.n	8007b88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b8e:	bf00      	nop
 8007b90:	bf00      	nop
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	2000002c 	.word	0x2000002c

08007ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ba0:	4b07      	ldr	r3, [pc, #28]	; (8007bc0 <pxCurrentTCBConst2>)
 8007ba2:	6819      	ldr	r1, [r3, #0]
 8007ba4:	6808      	ldr	r0, [r1, #0]
 8007ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007baa:	f380 8809 	msr	PSP, r0
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f04f 0000 	mov.w	r0, #0
 8007bb6:	f380 8811 	msr	BASEPRI, r0
 8007bba:	4770      	bx	lr
 8007bbc:	f3af 8000 	nop.w

08007bc0 <pxCurrentTCBConst2>:
 8007bc0:	20000a74 	.word	0x20000a74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop

08007bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007bc8:	4808      	ldr	r0, [pc, #32]	; (8007bec <prvPortStartFirstTask+0x24>)
 8007bca:	6800      	ldr	r0, [r0, #0]
 8007bcc:	6800      	ldr	r0, [r0, #0]
 8007bce:	f380 8808 	msr	MSP, r0
 8007bd2:	f04f 0000 	mov.w	r0, #0
 8007bd6:	f380 8814 	msr	CONTROL, r0
 8007bda:	b662      	cpsie	i
 8007bdc:	b661      	cpsie	f
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	df00      	svc	0
 8007be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bea:	bf00      	nop
 8007bec:	e000ed08 	.word	0xe000ed08

08007bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007bf6:	4b46      	ldr	r3, [pc, #280]	; (8007d10 <xPortStartScheduler+0x120>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a46      	ldr	r2, [pc, #280]	; (8007d14 <xPortStartScheduler+0x124>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d10a      	bne.n	8007c16 <xPortStartScheduler+0x26>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	613b      	str	r3, [r7, #16]
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c16:	4b3e      	ldr	r3, [pc, #248]	; (8007d10 <xPortStartScheduler+0x120>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a3f      	ldr	r2, [pc, #252]	; (8007d18 <xPortStartScheduler+0x128>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d10a      	bne.n	8007c36 <xPortStartScheduler+0x46>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	60fb      	str	r3, [r7, #12]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c36:	4b39      	ldr	r3, [pc, #228]	; (8007d1c <xPortStartScheduler+0x12c>)
 8007c38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	22ff      	movs	r2, #255	; 0xff
 8007c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	4b31      	ldr	r3, [pc, #196]	; (8007d20 <xPortStartScheduler+0x130>)
 8007c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c5e:	4b31      	ldr	r3, [pc, #196]	; (8007d24 <xPortStartScheduler+0x134>)
 8007c60:	2207      	movs	r2, #7
 8007c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c64:	e009      	b.n	8007c7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c66:	4b2f      	ldr	r3, [pc, #188]	; (8007d24 <xPortStartScheduler+0x134>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	4a2d      	ldr	r2, [pc, #180]	; (8007d24 <xPortStartScheduler+0x134>)
 8007c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c82:	2b80      	cmp	r3, #128	; 0x80
 8007c84:	d0ef      	beq.n	8007c66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c86:	4b27      	ldr	r3, [pc, #156]	; (8007d24 <xPortStartScheduler+0x134>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f1c3 0307 	rsb	r3, r3, #7
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d00a      	beq.n	8007ca8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	60bb      	str	r3, [r7, #8]
}
 8007ca4:	bf00      	nop
 8007ca6:	e7fe      	b.n	8007ca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ca8:	4b1e      	ldr	r3, [pc, #120]	; (8007d24 <xPortStartScheduler+0x134>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	021b      	lsls	r3, r3, #8
 8007cae:	4a1d      	ldr	r2, [pc, #116]	; (8007d24 <xPortStartScheduler+0x134>)
 8007cb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cb2:	4b1c      	ldr	r3, [pc, #112]	; (8007d24 <xPortStartScheduler+0x134>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cba:	4a1a      	ldr	r2, [pc, #104]	; (8007d24 <xPortStartScheduler+0x134>)
 8007cbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cc6:	4b18      	ldr	r3, [pc, #96]	; (8007d28 <xPortStartScheduler+0x138>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a17      	ldr	r2, [pc, #92]	; (8007d28 <xPortStartScheduler+0x138>)
 8007ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cd2:	4b15      	ldr	r3, [pc, #84]	; (8007d28 <xPortStartScheduler+0x138>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a14      	ldr	r2, [pc, #80]	; (8007d28 <xPortStartScheduler+0x138>)
 8007cd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007cdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cde:	f000 f8dd 	bl	8007e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ce2:	4b12      	ldr	r3, [pc, #72]	; (8007d2c <xPortStartScheduler+0x13c>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ce8:	f000 f8fc 	bl	8007ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cec:	4b10      	ldr	r3, [pc, #64]	; (8007d30 <xPortStartScheduler+0x140>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a0f      	ldr	r2, [pc, #60]	; (8007d30 <xPortStartScheduler+0x140>)
 8007cf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007cf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cf8:	f7ff ff66 	bl	8007bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cfc:	f7ff f856 	bl	8006dac <vTaskSwitchContext>
	prvTaskExitError();
 8007d00:	f7ff ff22 	bl	8007b48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	e000ed00 	.word	0xe000ed00
 8007d14:	410fc271 	.word	0x410fc271
 8007d18:	410fc270 	.word	0x410fc270
 8007d1c:	e000e400 	.word	0xe000e400
 8007d20:	200010a0 	.word	0x200010a0
 8007d24:	200010a4 	.word	0x200010a4
 8007d28:	e000ed20 	.word	0xe000ed20
 8007d2c:	2000002c 	.word	0x2000002c
 8007d30:	e000ef34 	.word	0xe000ef34

08007d34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
	__asm volatile
 8007d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	607b      	str	r3, [r7, #4]
}
 8007d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d4e:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <vPortEnterCritical+0x58>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3301      	adds	r3, #1
 8007d54:	4a0d      	ldr	r2, [pc, #52]	; (8007d8c <vPortEnterCritical+0x58>)
 8007d56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d58:	4b0c      	ldr	r3, [pc, #48]	; (8007d8c <vPortEnterCritical+0x58>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d10f      	bne.n	8007d80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d60:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <vPortEnterCritical+0x5c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	603b      	str	r3, [r7, #0]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <vPortEnterCritical+0x4a>
	}
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	2000002c 	.word	0x2000002c
 8007d90:	e000ed04 	.word	0xe000ed04

08007d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d9a:	4b12      	ldr	r3, [pc, #72]	; (8007de4 <vPortExitCritical+0x50>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10a      	bne.n	8007db8 <vPortExitCritical+0x24>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	607b      	str	r3, [r7, #4]
}
 8007db4:	bf00      	nop
 8007db6:	e7fe      	b.n	8007db6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007db8:	4b0a      	ldr	r3, [pc, #40]	; (8007de4 <vPortExitCritical+0x50>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	4a09      	ldr	r2, [pc, #36]	; (8007de4 <vPortExitCritical+0x50>)
 8007dc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dc2:	4b08      	ldr	r3, [pc, #32]	; (8007de4 <vPortExitCritical+0x50>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d105      	bne.n	8007dd6 <vPortExitCritical+0x42>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	f383 8811 	msr	BASEPRI, r3
}
 8007dd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	2000002c 	.word	0x2000002c
	...

08007df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007df0:	f3ef 8009 	mrs	r0, PSP
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <pxCurrentTCBConst>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	f01e 0f10 	tst.w	lr, #16
 8007e00:	bf08      	it	eq
 8007e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0a:	6010      	str	r0, [r2, #0]
 8007e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e14:	f380 8811 	msr	BASEPRI, r0
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f7fe ffc4 	bl	8006dac <vTaskSwitchContext>
 8007e24:	f04f 0000 	mov.w	r0, #0
 8007e28:	f380 8811 	msr	BASEPRI, r0
 8007e2c:	bc09      	pop	{r0, r3}
 8007e2e:	6819      	ldr	r1, [r3, #0]
 8007e30:	6808      	ldr	r0, [r1, #0]
 8007e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e36:	f01e 0f10 	tst.w	lr, #16
 8007e3a:	bf08      	it	eq
 8007e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e40:	f380 8809 	msr	PSP, r0
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	f3af 8000 	nop.w

08007e50 <pxCurrentTCBConst>:
 8007e50:	20000a74 	.word	0x20000a74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop

08007e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	607b      	str	r3, [r7, #4]
}
 8007e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e72:	f7fe fee1 	bl	8006c38 <xTaskIncrementTick>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e7c:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <xPortSysTickHandler+0x40>)
 8007e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	2300      	movs	r3, #0
 8007e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	f383 8811 	msr	BASEPRI, r3
}
 8007e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ea0:	4b0b      	ldr	r3, [pc, #44]	; (8007ed0 <vPortSetupTimerInterrupt+0x34>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <vPortSetupTimerInterrupt+0x38>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007eac:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <vPortSetupTimerInterrupt+0x3c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a0a      	ldr	r2, [pc, #40]	; (8007edc <vPortSetupTimerInterrupt+0x40>)
 8007eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb6:	099b      	lsrs	r3, r3, #6
 8007eb8:	4a09      	ldr	r2, [pc, #36]	; (8007ee0 <vPortSetupTimerInterrupt+0x44>)
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ebe:	4b04      	ldr	r3, [pc, #16]	; (8007ed0 <vPortSetupTimerInterrupt+0x34>)
 8007ec0:	2207      	movs	r2, #7
 8007ec2:	601a      	str	r2, [r3, #0]
}
 8007ec4:	bf00      	nop
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	e000e010 	.word	0xe000e010
 8007ed4:	e000e018 	.word	0xe000e018
 8007ed8:	20000020 	.word	0x20000020
 8007edc:	10624dd3 	.word	0x10624dd3
 8007ee0:	e000e014 	.word	0xe000e014

08007ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ef4 <vPortEnableVFP+0x10>
 8007ee8:	6801      	ldr	r1, [r0, #0]
 8007eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007eee:	6001      	str	r1, [r0, #0]
 8007ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ef2:	bf00      	nop
 8007ef4:	e000ed88 	.word	0xe000ed88

08007ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007efe:	f3ef 8305 	mrs	r3, IPSR
 8007f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b0f      	cmp	r3, #15
 8007f08:	d914      	bls.n	8007f34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f0a:	4a17      	ldr	r2, [pc, #92]	; (8007f68 <vPortValidateInterruptPriority+0x70>)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4413      	add	r3, r2
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f14:	4b15      	ldr	r3, [pc, #84]	; (8007f6c <vPortValidateInterruptPriority+0x74>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	7afa      	ldrb	r2, [r7, #11]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d20a      	bcs.n	8007f34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	607b      	str	r3, [r7, #4]
}
 8007f30:	bf00      	nop
 8007f32:	e7fe      	b.n	8007f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f34:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <vPortValidateInterruptPriority+0x78>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f3c:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <vPortValidateInterruptPriority+0x7c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d90a      	bls.n	8007f5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	603b      	str	r3, [r7, #0]
}
 8007f56:	bf00      	nop
 8007f58:	e7fe      	b.n	8007f58 <vPortValidateInterruptPriority+0x60>
	}
 8007f5a:	bf00      	nop
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	e000e3f0 	.word	0xe000e3f0
 8007f6c:	200010a0 	.word	0x200010a0
 8007f70:	e000ed0c 	.word	0xe000ed0c
 8007f74:	200010a4 	.word	0x200010a4

08007f78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08a      	sub	sp, #40	; 0x28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f80:	2300      	movs	r3, #0
 8007f82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f84:	f7fe fd9c 	bl	8006ac0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f88:	4b5b      	ldr	r3, [pc, #364]	; (80080f8 <pvPortMalloc+0x180>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f90:	f000 f920 	bl	80081d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f94:	4b59      	ldr	r3, [pc, #356]	; (80080fc <pvPortMalloc+0x184>)
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f040 8093 	bne.w	80080c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d01d      	beq.n	8007fe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007fa8:	2208      	movs	r2, #8
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f003 0307 	and.w	r3, r3, #7
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d014      	beq.n	8007fe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f023 0307 	bic.w	r3, r3, #7
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <pvPortMalloc+0x6c>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	617b      	str	r3, [r7, #20]
}
 8007fe0:	bf00      	nop
 8007fe2:	e7fe      	b.n	8007fe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d06e      	beq.n	80080c8 <pvPortMalloc+0x150>
 8007fea:	4b45      	ldr	r3, [pc, #276]	; (8008100 <pvPortMalloc+0x188>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d869      	bhi.n	80080c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ff4:	4b43      	ldr	r3, [pc, #268]	; (8008104 <pvPortMalloc+0x18c>)
 8007ff6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ff8:	4b42      	ldr	r3, [pc, #264]	; (8008104 <pvPortMalloc+0x18c>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ffe:	e004      	b.n	800800a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	429a      	cmp	r2, r3
 8008012:	d903      	bls.n	800801c <pvPortMalloc+0xa4>
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1f1      	bne.n	8008000 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800801c:	4b36      	ldr	r3, [pc, #216]	; (80080f8 <pvPortMalloc+0x180>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008022:	429a      	cmp	r2, r3
 8008024:	d050      	beq.n	80080c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2208      	movs	r2, #8
 800802c:	4413      	add	r3, r2
 800802e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	1ad2      	subs	r2, r2, r3
 8008040:	2308      	movs	r3, #8
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	429a      	cmp	r2, r3
 8008046:	d91f      	bls.n	8008088 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4413      	add	r3, r2
 800804e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	f003 0307 	and.w	r3, r3, #7
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <pvPortMalloc+0xf8>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	613b      	str	r3, [r7, #16]
}
 800806c:	bf00      	nop
 800806e:	e7fe      	b.n	800806e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	1ad2      	subs	r2, r2, r3
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008082:	69b8      	ldr	r0, [r7, #24]
 8008084:	f000 f908 	bl	8008298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008088:	4b1d      	ldr	r3, [pc, #116]	; (8008100 <pvPortMalloc+0x188>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	4a1b      	ldr	r2, [pc, #108]	; (8008100 <pvPortMalloc+0x188>)
 8008094:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008096:	4b1a      	ldr	r3, [pc, #104]	; (8008100 <pvPortMalloc+0x188>)
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	4b1b      	ldr	r3, [pc, #108]	; (8008108 <pvPortMalloc+0x190>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d203      	bcs.n	80080aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080a2:	4b17      	ldr	r3, [pc, #92]	; (8008100 <pvPortMalloc+0x188>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a18      	ldr	r2, [pc, #96]	; (8008108 <pvPortMalloc+0x190>)
 80080a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	4b13      	ldr	r3, [pc, #76]	; (80080fc <pvPortMalloc+0x184>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	431a      	orrs	r2, r3
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80080be:	4b13      	ldr	r3, [pc, #76]	; (800810c <pvPortMalloc+0x194>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3301      	adds	r3, #1
 80080c4:	4a11      	ldr	r2, [pc, #68]	; (800810c <pvPortMalloc+0x194>)
 80080c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080c8:	f7fe fd08 	bl	8006adc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	f003 0307 	and.w	r3, r3, #7
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00a      	beq.n	80080ec <pvPortMalloc+0x174>
	__asm volatile
 80080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	60fb      	str	r3, [r7, #12]
}
 80080e8:	bf00      	nop
 80080ea:	e7fe      	b.n	80080ea <pvPortMalloc+0x172>
	return pvReturn;
 80080ec:	69fb      	ldr	r3, [r7, #28]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3728      	adds	r7, #40	; 0x28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	20004cb0 	.word	0x20004cb0
 80080fc:	20004cc4 	.word	0x20004cc4
 8008100:	20004cb4 	.word	0x20004cb4
 8008104:	20004ca8 	.word	0x20004ca8
 8008108:	20004cb8 	.word	0x20004cb8
 800810c:	20004cbc 	.word	0x20004cbc

08008110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d04d      	beq.n	80081be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008122:	2308      	movs	r3, #8
 8008124:	425b      	negs	r3, r3
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	4413      	add	r3, r2
 800812a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	4b24      	ldr	r3, [pc, #144]	; (80081c8 <vPortFree+0xb8>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4013      	ands	r3, r2
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10a      	bne.n	8008154 <vPortFree+0x44>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	60fb      	str	r3, [r7, #12]
}
 8008150:	bf00      	nop
 8008152:	e7fe      	b.n	8008152 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <vPortFree+0x62>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	60bb      	str	r3, [r7, #8]
}
 800816e:	bf00      	nop
 8008170:	e7fe      	b.n	8008170 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	4b14      	ldr	r3, [pc, #80]	; (80081c8 <vPortFree+0xb8>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4013      	ands	r3, r2
 800817c:	2b00      	cmp	r3, #0
 800817e:	d01e      	beq.n	80081be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d11a      	bne.n	80081be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	4b0e      	ldr	r3, [pc, #56]	; (80081c8 <vPortFree+0xb8>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	43db      	mvns	r3, r3
 8008192:	401a      	ands	r2, r3
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008198:	f7fe fc92 	bl	8006ac0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <vPortFree+0xbc>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4413      	add	r3, r2
 80081a6:	4a09      	ldr	r2, [pc, #36]	; (80081cc <vPortFree+0xbc>)
 80081a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081aa:	6938      	ldr	r0, [r7, #16]
 80081ac:	f000 f874 	bl	8008298 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80081b0:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <vPortFree+0xc0>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3301      	adds	r3, #1
 80081b6:	4a06      	ldr	r2, [pc, #24]	; (80081d0 <vPortFree+0xc0>)
 80081b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80081ba:	f7fe fc8f 	bl	8006adc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081be:	bf00      	nop
 80081c0:	3718      	adds	r7, #24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20004cc4 	.word	0x20004cc4
 80081cc:	20004cb4 	.word	0x20004cb4
 80081d0:	20004cc0 	.word	0x20004cc0

080081d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80081de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081e0:	4b27      	ldr	r3, [pc, #156]	; (8008280 <prvHeapInit+0xac>)
 80081e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f003 0307 	and.w	r3, r3, #7
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00c      	beq.n	8008208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3307      	adds	r3, #7
 80081f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f023 0307 	bic.w	r3, r3, #7
 80081fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	4a1f      	ldr	r2, [pc, #124]	; (8008280 <prvHeapInit+0xac>)
 8008204:	4413      	add	r3, r2
 8008206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800820c:	4a1d      	ldr	r2, [pc, #116]	; (8008284 <prvHeapInit+0xb0>)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008212:	4b1c      	ldr	r3, [pc, #112]	; (8008284 <prvHeapInit+0xb0>)
 8008214:	2200      	movs	r2, #0
 8008216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	4413      	add	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008220:	2208      	movs	r2, #8
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	1a9b      	subs	r3, r3, r2
 8008226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 0307 	bic.w	r3, r3, #7
 800822e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4a15      	ldr	r2, [pc, #84]	; (8008288 <prvHeapInit+0xb4>)
 8008234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008236:	4b14      	ldr	r3, [pc, #80]	; (8008288 <prvHeapInit+0xb4>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2200      	movs	r2, #0
 800823c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800823e:	4b12      	ldr	r3, [pc, #72]	; (8008288 <prvHeapInit+0xb4>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	1ad2      	subs	r2, r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008254:	4b0c      	ldr	r3, [pc, #48]	; (8008288 <prvHeapInit+0xb4>)
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	4a0a      	ldr	r2, [pc, #40]	; (800828c <prvHeapInit+0xb8>)
 8008262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	4a09      	ldr	r2, [pc, #36]	; (8008290 <prvHeapInit+0xbc>)
 800826a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800826c:	4b09      	ldr	r3, [pc, #36]	; (8008294 <prvHeapInit+0xc0>)
 800826e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008272:	601a      	str	r2, [r3, #0]
}
 8008274:	bf00      	nop
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	200010a8 	.word	0x200010a8
 8008284:	20004ca8 	.word	0x20004ca8
 8008288:	20004cb0 	.word	0x20004cb0
 800828c:	20004cb8 	.word	0x20004cb8
 8008290:	20004cb4 	.word	0x20004cb4
 8008294:	20004cc4 	.word	0x20004cc4

08008298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082a0:	4b28      	ldr	r3, [pc, #160]	; (8008344 <prvInsertBlockIntoFreeList+0xac>)
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	e002      	b.n	80082ac <prvInsertBlockIntoFreeList+0x14>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d8f7      	bhi.n	80082a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	4413      	add	r3, r2
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d108      	bne.n	80082da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	441a      	add	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	441a      	add	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d118      	bne.n	8008320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	4b15      	ldr	r3, [pc, #84]	; (8008348 <prvInsertBlockIntoFreeList+0xb0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d00d      	beq.n	8008316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	441a      	add	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	e008      	b.n	8008328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008316:	4b0c      	ldr	r3, [pc, #48]	; (8008348 <prvInsertBlockIntoFreeList+0xb0>)
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	e003      	b.n	8008328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	429a      	cmp	r2, r3
 800832e:	d002      	beq.n	8008336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008336:	bf00      	nop
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	20004ca8 	.word	0x20004ca8
 8008348:	20004cb0 	.word	0x20004cb0

0800834c <__errno>:
 800834c:	4b01      	ldr	r3, [pc, #4]	; (8008354 <__errno+0x8>)
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20000030 	.word	0x20000030

08008358 <__libc_init_array>:
 8008358:	b570      	push	{r4, r5, r6, lr}
 800835a:	4d0d      	ldr	r5, [pc, #52]	; (8008390 <__libc_init_array+0x38>)
 800835c:	4c0d      	ldr	r4, [pc, #52]	; (8008394 <__libc_init_array+0x3c>)
 800835e:	1b64      	subs	r4, r4, r5
 8008360:	10a4      	asrs	r4, r4, #2
 8008362:	2600      	movs	r6, #0
 8008364:	42a6      	cmp	r6, r4
 8008366:	d109      	bne.n	800837c <__libc_init_array+0x24>
 8008368:	4d0b      	ldr	r5, [pc, #44]	; (8008398 <__libc_init_array+0x40>)
 800836a:	4c0c      	ldr	r4, [pc, #48]	; (800839c <__libc_init_array+0x44>)
 800836c:	f004 fc90 	bl	800cc90 <_init>
 8008370:	1b64      	subs	r4, r4, r5
 8008372:	10a4      	asrs	r4, r4, #2
 8008374:	2600      	movs	r6, #0
 8008376:	42a6      	cmp	r6, r4
 8008378:	d105      	bne.n	8008386 <__libc_init_array+0x2e>
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008380:	4798      	blx	r3
 8008382:	3601      	adds	r6, #1
 8008384:	e7ee      	b.n	8008364 <__libc_init_array+0xc>
 8008386:	f855 3b04 	ldr.w	r3, [r5], #4
 800838a:	4798      	blx	r3
 800838c:	3601      	adds	r6, #1
 800838e:	e7f2      	b.n	8008376 <__libc_init_array+0x1e>
 8008390:	0800d1f4 	.word	0x0800d1f4
 8008394:	0800d1f4 	.word	0x0800d1f4
 8008398:	0800d1f4 	.word	0x0800d1f4
 800839c:	0800d1f8 	.word	0x0800d1f8

080083a0 <memcpy>:
 80083a0:	440a      	add	r2, r1
 80083a2:	4291      	cmp	r1, r2
 80083a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083a8:	d100      	bne.n	80083ac <memcpy+0xc>
 80083aa:	4770      	bx	lr
 80083ac:	b510      	push	{r4, lr}
 80083ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083b6:	4291      	cmp	r1, r2
 80083b8:	d1f9      	bne.n	80083ae <memcpy+0xe>
 80083ba:	bd10      	pop	{r4, pc}

080083bc <memset>:
 80083bc:	4402      	add	r2, r0
 80083be:	4603      	mov	r3, r0
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d100      	bne.n	80083c6 <memset+0xa>
 80083c4:	4770      	bx	lr
 80083c6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ca:	e7f9      	b.n	80083c0 <memset+0x4>

080083cc <__cvt>:
 80083cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083d0:	ec55 4b10 	vmov	r4, r5, d0
 80083d4:	2d00      	cmp	r5, #0
 80083d6:	460e      	mov	r6, r1
 80083d8:	4619      	mov	r1, r3
 80083da:	462b      	mov	r3, r5
 80083dc:	bfbb      	ittet	lt
 80083de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80083e2:	461d      	movlt	r5, r3
 80083e4:	2300      	movge	r3, #0
 80083e6:	232d      	movlt	r3, #45	; 0x2d
 80083e8:	700b      	strb	r3, [r1, #0]
 80083ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80083f0:	4691      	mov	r9, r2
 80083f2:	f023 0820 	bic.w	r8, r3, #32
 80083f6:	bfbc      	itt	lt
 80083f8:	4622      	movlt	r2, r4
 80083fa:	4614      	movlt	r4, r2
 80083fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008400:	d005      	beq.n	800840e <__cvt+0x42>
 8008402:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008406:	d100      	bne.n	800840a <__cvt+0x3e>
 8008408:	3601      	adds	r6, #1
 800840a:	2102      	movs	r1, #2
 800840c:	e000      	b.n	8008410 <__cvt+0x44>
 800840e:	2103      	movs	r1, #3
 8008410:	ab03      	add	r3, sp, #12
 8008412:	9301      	str	r3, [sp, #4]
 8008414:	ab02      	add	r3, sp, #8
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	ec45 4b10 	vmov	d0, r4, r5
 800841c:	4653      	mov	r3, sl
 800841e:	4632      	mov	r2, r6
 8008420:	f001 fdae 	bl	8009f80 <_dtoa_r>
 8008424:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008428:	4607      	mov	r7, r0
 800842a:	d102      	bne.n	8008432 <__cvt+0x66>
 800842c:	f019 0f01 	tst.w	r9, #1
 8008430:	d022      	beq.n	8008478 <__cvt+0xac>
 8008432:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008436:	eb07 0906 	add.w	r9, r7, r6
 800843a:	d110      	bne.n	800845e <__cvt+0x92>
 800843c:	783b      	ldrb	r3, [r7, #0]
 800843e:	2b30      	cmp	r3, #48	; 0x30
 8008440:	d10a      	bne.n	8008458 <__cvt+0x8c>
 8008442:	2200      	movs	r2, #0
 8008444:	2300      	movs	r3, #0
 8008446:	4620      	mov	r0, r4
 8008448:	4629      	mov	r1, r5
 800844a:	f7f8 fb45 	bl	8000ad8 <__aeabi_dcmpeq>
 800844e:	b918      	cbnz	r0, 8008458 <__cvt+0x8c>
 8008450:	f1c6 0601 	rsb	r6, r6, #1
 8008454:	f8ca 6000 	str.w	r6, [sl]
 8008458:	f8da 3000 	ldr.w	r3, [sl]
 800845c:	4499      	add	r9, r3
 800845e:	2200      	movs	r2, #0
 8008460:	2300      	movs	r3, #0
 8008462:	4620      	mov	r0, r4
 8008464:	4629      	mov	r1, r5
 8008466:	f7f8 fb37 	bl	8000ad8 <__aeabi_dcmpeq>
 800846a:	b108      	cbz	r0, 8008470 <__cvt+0xa4>
 800846c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008470:	2230      	movs	r2, #48	; 0x30
 8008472:	9b03      	ldr	r3, [sp, #12]
 8008474:	454b      	cmp	r3, r9
 8008476:	d307      	bcc.n	8008488 <__cvt+0xbc>
 8008478:	9b03      	ldr	r3, [sp, #12]
 800847a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800847c:	1bdb      	subs	r3, r3, r7
 800847e:	4638      	mov	r0, r7
 8008480:	6013      	str	r3, [r2, #0]
 8008482:	b004      	add	sp, #16
 8008484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008488:	1c59      	adds	r1, r3, #1
 800848a:	9103      	str	r1, [sp, #12]
 800848c:	701a      	strb	r2, [r3, #0]
 800848e:	e7f0      	b.n	8008472 <__cvt+0xa6>

08008490 <__exponent>:
 8008490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008492:	4603      	mov	r3, r0
 8008494:	2900      	cmp	r1, #0
 8008496:	bfb8      	it	lt
 8008498:	4249      	neglt	r1, r1
 800849a:	f803 2b02 	strb.w	r2, [r3], #2
 800849e:	bfb4      	ite	lt
 80084a0:	222d      	movlt	r2, #45	; 0x2d
 80084a2:	222b      	movge	r2, #43	; 0x2b
 80084a4:	2909      	cmp	r1, #9
 80084a6:	7042      	strb	r2, [r0, #1]
 80084a8:	dd2a      	ble.n	8008500 <__exponent+0x70>
 80084aa:	f10d 0407 	add.w	r4, sp, #7
 80084ae:	46a4      	mov	ip, r4
 80084b0:	270a      	movs	r7, #10
 80084b2:	46a6      	mov	lr, r4
 80084b4:	460a      	mov	r2, r1
 80084b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80084ba:	fb07 1516 	mls	r5, r7, r6, r1
 80084be:	3530      	adds	r5, #48	; 0x30
 80084c0:	2a63      	cmp	r2, #99	; 0x63
 80084c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80084c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80084ca:	4631      	mov	r1, r6
 80084cc:	dcf1      	bgt.n	80084b2 <__exponent+0x22>
 80084ce:	3130      	adds	r1, #48	; 0x30
 80084d0:	f1ae 0502 	sub.w	r5, lr, #2
 80084d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80084d8:	1c44      	adds	r4, r0, #1
 80084da:	4629      	mov	r1, r5
 80084dc:	4561      	cmp	r1, ip
 80084de:	d30a      	bcc.n	80084f6 <__exponent+0x66>
 80084e0:	f10d 0209 	add.w	r2, sp, #9
 80084e4:	eba2 020e 	sub.w	r2, r2, lr
 80084e8:	4565      	cmp	r5, ip
 80084ea:	bf88      	it	hi
 80084ec:	2200      	movhi	r2, #0
 80084ee:	4413      	add	r3, r2
 80084f0:	1a18      	subs	r0, r3, r0
 80084f2:	b003      	add	sp, #12
 80084f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80084fe:	e7ed      	b.n	80084dc <__exponent+0x4c>
 8008500:	2330      	movs	r3, #48	; 0x30
 8008502:	3130      	adds	r1, #48	; 0x30
 8008504:	7083      	strb	r3, [r0, #2]
 8008506:	70c1      	strb	r1, [r0, #3]
 8008508:	1d03      	adds	r3, r0, #4
 800850a:	e7f1      	b.n	80084f0 <__exponent+0x60>

0800850c <_printf_float>:
 800850c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008510:	ed2d 8b02 	vpush	{d8}
 8008514:	b08d      	sub	sp, #52	; 0x34
 8008516:	460c      	mov	r4, r1
 8008518:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800851c:	4616      	mov	r6, r2
 800851e:	461f      	mov	r7, r3
 8008520:	4605      	mov	r5, r0
 8008522:	f002 fe8b 	bl	800b23c <_localeconv_r>
 8008526:	f8d0 a000 	ldr.w	sl, [r0]
 800852a:	4650      	mov	r0, sl
 800852c:	f7f7 fe58 	bl	80001e0 <strlen>
 8008530:	2300      	movs	r3, #0
 8008532:	930a      	str	r3, [sp, #40]	; 0x28
 8008534:	6823      	ldr	r3, [r4, #0]
 8008536:	9305      	str	r3, [sp, #20]
 8008538:	f8d8 3000 	ldr.w	r3, [r8]
 800853c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008540:	3307      	adds	r3, #7
 8008542:	f023 0307 	bic.w	r3, r3, #7
 8008546:	f103 0208 	add.w	r2, r3, #8
 800854a:	f8c8 2000 	str.w	r2, [r8]
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008556:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800855a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800855e:	9307      	str	r3, [sp, #28]
 8008560:	f8cd 8018 	str.w	r8, [sp, #24]
 8008564:	ee08 0a10 	vmov	s16, r0
 8008568:	4b9f      	ldr	r3, [pc, #636]	; (80087e8 <_printf_float+0x2dc>)
 800856a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800856e:	f04f 32ff 	mov.w	r2, #4294967295
 8008572:	f7f8 fae3 	bl	8000b3c <__aeabi_dcmpun>
 8008576:	bb88      	cbnz	r0, 80085dc <_printf_float+0xd0>
 8008578:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800857c:	4b9a      	ldr	r3, [pc, #616]	; (80087e8 <_printf_float+0x2dc>)
 800857e:	f04f 32ff 	mov.w	r2, #4294967295
 8008582:	f7f8 fabd 	bl	8000b00 <__aeabi_dcmple>
 8008586:	bb48      	cbnz	r0, 80085dc <_printf_float+0xd0>
 8008588:	2200      	movs	r2, #0
 800858a:	2300      	movs	r3, #0
 800858c:	4640      	mov	r0, r8
 800858e:	4649      	mov	r1, r9
 8008590:	f7f8 faac 	bl	8000aec <__aeabi_dcmplt>
 8008594:	b110      	cbz	r0, 800859c <_printf_float+0x90>
 8008596:	232d      	movs	r3, #45	; 0x2d
 8008598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800859c:	4b93      	ldr	r3, [pc, #588]	; (80087ec <_printf_float+0x2e0>)
 800859e:	4894      	ldr	r0, [pc, #592]	; (80087f0 <_printf_float+0x2e4>)
 80085a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80085a4:	bf94      	ite	ls
 80085a6:	4698      	movls	r8, r3
 80085a8:	4680      	movhi	r8, r0
 80085aa:	2303      	movs	r3, #3
 80085ac:	6123      	str	r3, [r4, #16]
 80085ae:	9b05      	ldr	r3, [sp, #20]
 80085b0:	f023 0204 	bic.w	r2, r3, #4
 80085b4:	6022      	str	r2, [r4, #0]
 80085b6:	f04f 0900 	mov.w	r9, #0
 80085ba:	9700      	str	r7, [sp, #0]
 80085bc:	4633      	mov	r3, r6
 80085be:	aa0b      	add	r2, sp, #44	; 0x2c
 80085c0:	4621      	mov	r1, r4
 80085c2:	4628      	mov	r0, r5
 80085c4:	f000 f9d8 	bl	8008978 <_printf_common>
 80085c8:	3001      	adds	r0, #1
 80085ca:	f040 8090 	bne.w	80086ee <_printf_float+0x1e2>
 80085ce:	f04f 30ff 	mov.w	r0, #4294967295
 80085d2:	b00d      	add	sp, #52	; 0x34
 80085d4:	ecbd 8b02 	vpop	{d8}
 80085d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085dc:	4642      	mov	r2, r8
 80085de:	464b      	mov	r3, r9
 80085e0:	4640      	mov	r0, r8
 80085e2:	4649      	mov	r1, r9
 80085e4:	f7f8 faaa 	bl	8000b3c <__aeabi_dcmpun>
 80085e8:	b140      	cbz	r0, 80085fc <_printf_float+0xf0>
 80085ea:	464b      	mov	r3, r9
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bfbc      	itt	lt
 80085f0:	232d      	movlt	r3, #45	; 0x2d
 80085f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80085f6:	487f      	ldr	r0, [pc, #508]	; (80087f4 <_printf_float+0x2e8>)
 80085f8:	4b7f      	ldr	r3, [pc, #508]	; (80087f8 <_printf_float+0x2ec>)
 80085fa:	e7d1      	b.n	80085a0 <_printf_float+0x94>
 80085fc:	6863      	ldr	r3, [r4, #4]
 80085fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008602:	9206      	str	r2, [sp, #24]
 8008604:	1c5a      	adds	r2, r3, #1
 8008606:	d13f      	bne.n	8008688 <_printf_float+0x17c>
 8008608:	2306      	movs	r3, #6
 800860a:	6063      	str	r3, [r4, #4]
 800860c:	9b05      	ldr	r3, [sp, #20]
 800860e:	6861      	ldr	r1, [r4, #4]
 8008610:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008614:	2300      	movs	r3, #0
 8008616:	9303      	str	r3, [sp, #12]
 8008618:	ab0a      	add	r3, sp, #40	; 0x28
 800861a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800861e:	ab09      	add	r3, sp, #36	; 0x24
 8008620:	ec49 8b10 	vmov	d0, r8, r9
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	6022      	str	r2, [r4, #0]
 8008628:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800862c:	4628      	mov	r0, r5
 800862e:	f7ff fecd 	bl	80083cc <__cvt>
 8008632:	9b06      	ldr	r3, [sp, #24]
 8008634:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008636:	2b47      	cmp	r3, #71	; 0x47
 8008638:	4680      	mov	r8, r0
 800863a:	d108      	bne.n	800864e <_printf_float+0x142>
 800863c:	1cc8      	adds	r0, r1, #3
 800863e:	db02      	blt.n	8008646 <_printf_float+0x13a>
 8008640:	6863      	ldr	r3, [r4, #4]
 8008642:	4299      	cmp	r1, r3
 8008644:	dd41      	ble.n	80086ca <_printf_float+0x1be>
 8008646:	f1ab 0b02 	sub.w	fp, fp, #2
 800864a:	fa5f fb8b 	uxtb.w	fp, fp
 800864e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008652:	d820      	bhi.n	8008696 <_printf_float+0x18a>
 8008654:	3901      	subs	r1, #1
 8008656:	465a      	mov	r2, fp
 8008658:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800865c:	9109      	str	r1, [sp, #36]	; 0x24
 800865e:	f7ff ff17 	bl	8008490 <__exponent>
 8008662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008664:	1813      	adds	r3, r2, r0
 8008666:	2a01      	cmp	r2, #1
 8008668:	4681      	mov	r9, r0
 800866a:	6123      	str	r3, [r4, #16]
 800866c:	dc02      	bgt.n	8008674 <_printf_float+0x168>
 800866e:	6822      	ldr	r2, [r4, #0]
 8008670:	07d2      	lsls	r2, r2, #31
 8008672:	d501      	bpl.n	8008678 <_printf_float+0x16c>
 8008674:	3301      	adds	r3, #1
 8008676:	6123      	str	r3, [r4, #16]
 8008678:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800867c:	2b00      	cmp	r3, #0
 800867e:	d09c      	beq.n	80085ba <_printf_float+0xae>
 8008680:	232d      	movs	r3, #45	; 0x2d
 8008682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008686:	e798      	b.n	80085ba <_printf_float+0xae>
 8008688:	9a06      	ldr	r2, [sp, #24]
 800868a:	2a47      	cmp	r2, #71	; 0x47
 800868c:	d1be      	bne.n	800860c <_printf_float+0x100>
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1bc      	bne.n	800860c <_printf_float+0x100>
 8008692:	2301      	movs	r3, #1
 8008694:	e7b9      	b.n	800860a <_printf_float+0xfe>
 8008696:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800869a:	d118      	bne.n	80086ce <_printf_float+0x1c2>
 800869c:	2900      	cmp	r1, #0
 800869e:	6863      	ldr	r3, [r4, #4]
 80086a0:	dd0b      	ble.n	80086ba <_printf_float+0x1ae>
 80086a2:	6121      	str	r1, [r4, #16]
 80086a4:	b913      	cbnz	r3, 80086ac <_printf_float+0x1a0>
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	07d0      	lsls	r0, r2, #31
 80086aa:	d502      	bpl.n	80086b2 <_printf_float+0x1a6>
 80086ac:	3301      	adds	r3, #1
 80086ae:	440b      	add	r3, r1
 80086b0:	6123      	str	r3, [r4, #16]
 80086b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80086b4:	f04f 0900 	mov.w	r9, #0
 80086b8:	e7de      	b.n	8008678 <_printf_float+0x16c>
 80086ba:	b913      	cbnz	r3, 80086c2 <_printf_float+0x1b6>
 80086bc:	6822      	ldr	r2, [r4, #0]
 80086be:	07d2      	lsls	r2, r2, #31
 80086c0:	d501      	bpl.n	80086c6 <_printf_float+0x1ba>
 80086c2:	3302      	adds	r3, #2
 80086c4:	e7f4      	b.n	80086b0 <_printf_float+0x1a4>
 80086c6:	2301      	movs	r3, #1
 80086c8:	e7f2      	b.n	80086b0 <_printf_float+0x1a4>
 80086ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80086ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d0:	4299      	cmp	r1, r3
 80086d2:	db05      	blt.n	80086e0 <_printf_float+0x1d4>
 80086d4:	6823      	ldr	r3, [r4, #0]
 80086d6:	6121      	str	r1, [r4, #16]
 80086d8:	07d8      	lsls	r0, r3, #31
 80086da:	d5ea      	bpl.n	80086b2 <_printf_float+0x1a6>
 80086dc:	1c4b      	adds	r3, r1, #1
 80086de:	e7e7      	b.n	80086b0 <_printf_float+0x1a4>
 80086e0:	2900      	cmp	r1, #0
 80086e2:	bfd4      	ite	le
 80086e4:	f1c1 0202 	rsble	r2, r1, #2
 80086e8:	2201      	movgt	r2, #1
 80086ea:	4413      	add	r3, r2
 80086ec:	e7e0      	b.n	80086b0 <_printf_float+0x1a4>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	055a      	lsls	r2, r3, #21
 80086f2:	d407      	bmi.n	8008704 <_printf_float+0x1f8>
 80086f4:	6923      	ldr	r3, [r4, #16]
 80086f6:	4642      	mov	r2, r8
 80086f8:	4631      	mov	r1, r6
 80086fa:	4628      	mov	r0, r5
 80086fc:	47b8      	blx	r7
 80086fe:	3001      	adds	r0, #1
 8008700:	d12c      	bne.n	800875c <_printf_float+0x250>
 8008702:	e764      	b.n	80085ce <_printf_float+0xc2>
 8008704:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008708:	f240 80e0 	bls.w	80088cc <_printf_float+0x3c0>
 800870c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008710:	2200      	movs	r2, #0
 8008712:	2300      	movs	r3, #0
 8008714:	f7f8 f9e0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008718:	2800      	cmp	r0, #0
 800871a:	d034      	beq.n	8008786 <_printf_float+0x27a>
 800871c:	4a37      	ldr	r2, [pc, #220]	; (80087fc <_printf_float+0x2f0>)
 800871e:	2301      	movs	r3, #1
 8008720:	4631      	mov	r1, r6
 8008722:	4628      	mov	r0, r5
 8008724:	47b8      	blx	r7
 8008726:	3001      	adds	r0, #1
 8008728:	f43f af51 	beq.w	80085ce <_printf_float+0xc2>
 800872c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008730:	429a      	cmp	r2, r3
 8008732:	db02      	blt.n	800873a <_printf_float+0x22e>
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	07d8      	lsls	r0, r3, #31
 8008738:	d510      	bpl.n	800875c <_printf_float+0x250>
 800873a:	ee18 3a10 	vmov	r3, s16
 800873e:	4652      	mov	r2, sl
 8008740:	4631      	mov	r1, r6
 8008742:	4628      	mov	r0, r5
 8008744:	47b8      	blx	r7
 8008746:	3001      	adds	r0, #1
 8008748:	f43f af41 	beq.w	80085ce <_printf_float+0xc2>
 800874c:	f04f 0800 	mov.w	r8, #0
 8008750:	f104 091a 	add.w	r9, r4, #26
 8008754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008756:	3b01      	subs	r3, #1
 8008758:	4543      	cmp	r3, r8
 800875a:	dc09      	bgt.n	8008770 <_printf_float+0x264>
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	079b      	lsls	r3, r3, #30
 8008760:	f100 8105 	bmi.w	800896e <_printf_float+0x462>
 8008764:	68e0      	ldr	r0, [r4, #12]
 8008766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008768:	4298      	cmp	r0, r3
 800876a:	bfb8      	it	lt
 800876c:	4618      	movlt	r0, r3
 800876e:	e730      	b.n	80085d2 <_printf_float+0xc6>
 8008770:	2301      	movs	r3, #1
 8008772:	464a      	mov	r2, r9
 8008774:	4631      	mov	r1, r6
 8008776:	4628      	mov	r0, r5
 8008778:	47b8      	blx	r7
 800877a:	3001      	adds	r0, #1
 800877c:	f43f af27 	beq.w	80085ce <_printf_float+0xc2>
 8008780:	f108 0801 	add.w	r8, r8, #1
 8008784:	e7e6      	b.n	8008754 <_printf_float+0x248>
 8008786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008788:	2b00      	cmp	r3, #0
 800878a:	dc39      	bgt.n	8008800 <_printf_float+0x2f4>
 800878c:	4a1b      	ldr	r2, [pc, #108]	; (80087fc <_printf_float+0x2f0>)
 800878e:	2301      	movs	r3, #1
 8008790:	4631      	mov	r1, r6
 8008792:	4628      	mov	r0, r5
 8008794:	47b8      	blx	r7
 8008796:	3001      	adds	r0, #1
 8008798:	f43f af19 	beq.w	80085ce <_printf_float+0xc2>
 800879c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087a0:	4313      	orrs	r3, r2
 80087a2:	d102      	bne.n	80087aa <_printf_float+0x29e>
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	07d9      	lsls	r1, r3, #31
 80087a8:	d5d8      	bpl.n	800875c <_printf_float+0x250>
 80087aa:	ee18 3a10 	vmov	r3, s16
 80087ae:	4652      	mov	r2, sl
 80087b0:	4631      	mov	r1, r6
 80087b2:	4628      	mov	r0, r5
 80087b4:	47b8      	blx	r7
 80087b6:	3001      	adds	r0, #1
 80087b8:	f43f af09 	beq.w	80085ce <_printf_float+0xc2>
 80087bc:	f04f 0900 	mov.w	r9, #0
 80087c0:	f104 0a1a 	add.w	sl, r4, #26
 80087c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c6:	425b      	negs	r3, r3
 80087c8:	454b      	cmp	r3, r9
 80087ca:	dc01      	bgt.n	80087d0 <_printf_float+0x2c4>
 80087cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ce:	e792      	b.n	80086f6 <_printf_float+0x1ea>
 80087d0:	2301      	movs	r3, #1
 80087d2:	4652      	mov	r2, sl
 80087d4:	4631      	mov	r1, r6
 80087d6:	4628      	mov	r0, r5
 80087d8:	47b8      	blx	r7
 80087da:	3001      	adds	r0, #1
 80087dc:	f43f aef7 	beq.w	80085ce <_printf_float+0xc2>
 80087e0:	f109 0901 	add.w	r9, r9, #1
 80087e4:	e7ee      	b.n	80087c4 <_printf_float+0x2b8>
 80087e6:	bf00      	nop
 80087e8:	7fefffff 	.word	0x7fefffff
 80087ec:	0800cd4c 	.word	0x0800cd4c
 80087f0:	0800cd50 	.word	0x0800cd50
 80087f4:	0800cd58 	.word	0x0800cd58
 80087f8:	0800cd54 	.word	0x0800cd54
 80087fc:	0800cd5c 	.word	0x0800cd5c
 8008800:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008802:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008804:	429a      	cmp	r2, r3
 8008806:	bfa8      	it	ge
 8008808:	461a      	movge	r2, r3
 800880a:	2a00      	cmp	r2, #0
 800880c:	4691      	mov	r9, r2
 800880e:	dc37      	bgt.n	8008880 <_printf_float+0x374>
 8008810:	f04f 0b00 	mov.w	fp, #0
 8008814:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008818:	f104 021a 	add.w	r2, r4, #26
 800881c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800881e:	9305      	str	r3, [sp, #20]
 8008820:	eba3 0309 	sub.w	r3, r3, r9
 8008824:	455b      	cmp	r3, fp
 8008826:	dc33      	bgt.n	8008890 <_printf_float+0x384>
 8008828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800882c:	429a      	cmp	r2, r3
 800882e:	db3b      	blt.n	80088a8 <_printf_float+0x39c>
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	07da      	lsls	r2, r3, #31
 8008834:	d438      	bmi.n	80088a8 <_printf_float+0x39c>
 8008836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008838:	9a05      	ldr	r2, [sp, #20]
 800883a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800883c:	1a9a      	subs	r2, r3, r2
 800883e:	eba3 0901 	sub.w	r9, r3, r1
 8008842:	4591      	cmp	r9, r2
 8008844:	bfa8      	it	ge
 8008846:	4691      	movge	r9, r2
 8008848:	f1b9 0f00 	cmp.w	r9, #0
 800884c:	dc35      	bgt.n	80088ba <_printf_float+0x3ae>
 800884e:	f04f 0800 	mov.w	r8, #0
 8008852:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008856:	f104 0a1a 	add.w	sl, r4, #26
 800885a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800885e:	1a9b      	subs	r3, r3, r2
 8008860:	eba3 0309 	sub.w	r3, r3, r9
 8008864:	4543      	cmp	r3, r8
 8008866:	f77f af79 	ble.w	800875c <_printf_float+0x250>
 800886a:	2301      	movs	r3, #1
 800886c:	4652      	mov	r2, sl
 800886e:	4631      	mov	r1, r6
 8008870:	4628      	mov	r0, r5
 8008872:	47b8      	blx	r7
 8008874:	3001      	adds	r0, #1
 8008876:	f43f aeaa 	beq.w	80085ce <_printf_float+0xc2>
 800887a:	f108 0801 	add.w	r8, r8, #1
 800887e:	e7ec      	b.n	800885a <_printf_float+0x34e>
 8008880:	4613      	mov	r3, r2
 8008882:	4631      	mov	r1, r6
 8008884:	4642      	mov	r2, r8
 8008886:	4628      	mov	r0, r5
 8008888:	47b8      	blx	r7
 800888a:	3001      	adds	r0, #1
 800888c:	d1c0      	bne.n	8008810 <_printf_float+0x304>
 800888e:	e69e      	b.n	80085ce <_printf_float+0xc2>
 8008890:	2301      	movs	r3, #1
 8008892:	4631      	mov	r1, r6
 8008894:	4628      	mov	r0, r5
 8008896:	9205      	str	r2, [sp, #20]
 8008898:	47b8      	blx	r7
 800889a:	3001      	adds	r0, #1
 800889c:	f43f ae97 	beq.w	80085ce <_printf_float+0xc2>
 80088a0:	9a05      	ldr	r2, [sp, #20]
 80088a2:	f10b 0b01 	add.w	fp, fp, #1
 80088a6:	e7b9      	b.n	800881c <_printf_float+0x310>
 80088a8:	ee18 3a10 	vmov	r3, s16
 80088ac:	4652      	mov	r2, sl
 80088ae:	4631      	mov	r1, r6
 80088b0:	4628      	mov	r0, r5
 80088b2:	47b8      	blx	r7
 80088b4:	3001      	adds	r0, #1
 80088b6:	d1be      	bne.n	8008836 <_printf_float+0x32a>
 80088b8:	e689      	b.n	80085ce <_printf_float+0xc2>
 80088ba:	9a05      	ldr	r2, [sp, #20]
 80088bc:	464b      	mov	r3, r9
 80088be:	4442      	add	r2, r8
 80088c0:	4631      	mov	r1, r6
 80088c2:	4628      	mov	r0, r5
 80088c4:	47b8      	blx	r7
 80088c6:	3001      	adds	r0, #1
 80088c8:	d1c1      	bne.n	800884e <_printf_float+0x342>
 80088ca:	e680      	b.n	80085ce <_printf_float+0xc2>
 80088cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ce:	2a01      	cmp	r2, #1
 80088d0:	dc01      	bgt.n	80088d6 <_printf_float+0x3ca>
 80088d2:	07db      	lsls	r3, r3, #31
 80088d4:	d538      	bpl.n	8008948 <_printf_float+0x43c>
 80088d6:	2301      	movs	r3, #1
 80088d8:	4642      	mov	r2, r8
 80088da:	4631      	mov	r1, r6
 80088dc:	4628      	mov	r0, r5
 80088de:	47b8      	blx	r7
 80088e0:	3001      	adds	r0, #1
 80088e2:	f43f ae74 	beq.w	80085ce <_printf_float+0xc2>
 80088e6:	ee18 3a10 	vmov	r3, s16
 80088ea:	4652      	mov	r2, sl
 80088ec:	4631      	mov	r1, r6
 80088ee:	4628      	mov	r0, r5
 80088f0:	47b8      	blx	r7
 80088f2:	3001      	adds	r0, #1
 80088f4:	f43f ae6b 	beq.w	80085ce <_printf_float+0xc2>
 80088f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088fc:	2200      	movs	r2, #0
 80088fe:	2300      	movs	r3, #0
 8008900:	f7f8 f8ea 	bl	8000ad8 <__aeabi_dcmpeq>
 8008904:	b9d8      	cbnz	r0, 800893e <_printf_float+0x432>
 8008906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008908:	f108 0201 	add.w	r2, r8, #1
 800890c:	3b01      	subs	r3, #1
 800890e:	4631      	mov	r1, r6
 8008910:	4628      	mov	r0, r5
 8008912:	47b8      	blx	r7
 8008914:	3001      	adds	r0, #1
 8008916:	d10e      	bne.n	8008936 <_printf_float+0x42a>
 8008918:	e659      	b.n	80085ce <_printf_float+0xc2>
 800891a:	2301      	movs	r3, #1
 800891c:	4652      	mov	r2, sl
 800891e:	4631      	mov	r1, r6
 8008920:	4628      	mov	r0, r5
 8008922:	47b8      	blx	r7
 8008924:	3001      	adds	r0, #1
 8008926:	f43f ae52 	beq.w	80085ce <_printf_float+0xc2>
 800892a:	f108 0801 	add.w	r8, r8, #1
 800892e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008930:	3b01      	subs	r3, #1
 8008932:	4543      	cmp	r3, r8
 8008934:	dcf1      	bgt.n	800891a <_printf_float+0x40e>
 8008936:	464b      	mov	r3, r9
 8008938:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800893c:	e6dc      	b.n	80086f8 <_printf_float+0x1ec>
 800893e:	f04f 0800 	mov.w	r8, #0
 8008942:	f104 0a1a 	add.w	sl, r4, #26
 8008946:	e7f2      	b.n	800892e <_printf_float+0x422>
 8008948:	2301      	movs	r3, #1
 800894a:	4642      	mov	r2, r8
 800894c:	e7df      	b.n	800890e <_printf_float+0x402>
 800894e:	2301      	movs	r3, #1
 8008950:	464a      	mov	r2, r9
 8008952:	4631      	mov	r1, r6
 8008954:	4628      	mov	r0, r5
 8008956:	47b8      	blx	r7
 8008958:	3001      	adds	r0, #1
 800895a:	f43f ae38 	beq.w	80085ce <_printf_float+0xc2>
 800895e:	f108 0801 	add.w	r8, r8, #1
 8008962:	68e3      	ldr	r3, [r4, #12]
 8008964:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008966:	1a5b      	subs	r3, r3, r1
 8008968:	4543      	cmp	r3, r8
 800896a:	dcf0      	bgt.n	800894e <_printf_float+0x442>
 800896c:	e6fa      	b.n	8008764 <_printf_float+0x258>
 800896e:	f04f 0800 	mov.w	r8, #0
 8008972:	f104 0919 	add.w	r9, r4, #25
 8008976:	e7f4      	b.n	8008962 <_printf_float+0x456>

08008978 <_printf_common>:
 8008978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800897c:	4616      	mov	r6, r2
 800897e:	4699      	mov	r9, r3
 8008980:	688a      	ldr	r2, [r1, #8]
 8008982:	690b      	ldr	r3, [r1, #16]
 8008984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008988:	4293      	cmp	r3, r2
 800898a:	bfb8      	it	lt
 800898c:	4613      	movlt	r3, r2
 800898e:	6033      	str	r3, [r6, #0]
 8008990:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008994:	4607      	mov	r7, r0
 8008996:	460c      	mov	r4, r1
 8008998:	b10a      	cbz	r2, 800899e <_printf_common+0x26>
 800899a:	3301      	adds	r3, #1
 800899c:	6033      	str	r3, [r6, #0]
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	0699      	lsls	r1, r3, #26
 80089a2:	bf42      	ittt	mi
 80089a4:	6833      	ldrmi	r3, [r6, #0]
 80089a6:	3302      	addmi	r3, #2
 80089a8:	6033      	strmi	r3, [r6, #0]
 80089aa:	6825      	ldr	r5, [r4, #0]
 80089ac:	f015 0506 	ands.w	r5, r5, #6
 80089b0:	d106      	bne.n	80089c0 <_printf_common+0x48>
 80089b2:	f104 0a19 	add.w	sl, r4, #25
 80089b6:	68e3      	ldr	r3, [r4, #12]
 80089b8:	6832      	ldr	r2, [r6, #0]
 80089ba:	1a9b      	subs	r3, r3, r2
 80089bc:	42ab      	cmp	r3, r5
 80089be:	dc26      	bgt.n	8008a0e <_printf_common+0x96>
 80089c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089c4:	1e13      	subs	r3, r2, #0
 80089c6:	6822      	ldr	r2, [r4, #0]
 80089c8:	bf18      	it	ne
 80089ca:	2301      	movne	r3, #1
 80089cc:	0692      	lsls	r2, r2, #26
 80089ce:	d42b      	bmi.n	8008a28 <_printf_common+0xb0>
 80089d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089d4:	4649      	mov	r1, r9
 80089d6:	4638      	mov	r0, r7
 80089d8:	47c0      	blx	r8
 80089da:	3001      	adds	r0, #1
 80089dc:	d01e      	beq.n	8008a1c <_printf_common+0xa4>
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	68e5      	ldr	r5, [r4, #12]
 80089e2:	6832      	ldr	r2, [r6, #0]
 80089e4:	f003 0306 	and.w	r3, r3, #6
 80089e8:	2b04      	cmp	r3, #4
 80089ea:	bf08      	it	eq
 80089ec:	1aad      	subeq	r5, r5, r2
 80089ee:	68a3      	ldr	r3, [r4, #8]
 80089f0:	6922      	ldr	r2, [r4, #16]
 80089f2:	bf0c      	ite	eq
 80089f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089f8:	2500      	movne	r5, #0
 80089fa:	4293      	cmp	r3, r2
 80089fc:	bfc4      	itt	gt
 80089fe:	1a9b      	subgt	r3, r3, r2
 8008a00:	18ed      	addgt	r5, r5, r3
 8008a02:	2600      	movs	r6, #0
 8008a04:	341a      	adds	r4, #26
 8008a06:	42b5      	cmp	r5, r6
 8008a08:	d11a      	bne.n	8008a40 <_printf_common+0xc8>
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	e008      	b.n	8008a20 <_printf_common+0xa8>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	4652      	mov	r2, sl
 8008a12:	4649      	mov	r1, r9
 8008a14:	4638      	mov	r0, r7
 8008a16:	47c0      	blx	r8
 8008a18:	3001      	adds	r0, #1
 8008a1a:	d103      	bne.n	8008a24 <_printf_common+0xac>
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a24:	3501      	adds	r5, #1
 8008a26:	e7c6      	b.n	80089b6 <_printf_common+0x3e>
 8008a28:	18e1      	adds	r1, r4, r3
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	2030      	movs	r0, #48	; 0x30
 8008a2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a32:	4422      	add	r2, r4
 8008a34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a3c:	3302      	adds	r3, #2
 8008a3e:	e7c7      	b.n	80089d0 <_printf_common+0x58>
 8008a40:	2301      	movs	r3, #1
 8008a42:	4622      	mov	r2, r4
 8008a44:	4649      	mov	r1, r9
 8008a46:	4638      	mov	r0, r7
 8008a48:	47c0      	blx	r8
 8008a4a:	3001      	adds	r0, #1
 8008a4c:	d0e6      	beq.n	8008a1c <_printf_common+0xa4>
 8008a4e:	3601      	adds	r6, #1
 8008a50:	e7d9      	b.n	8008a06 <_printf_common+0x8e>
	...

08008a54 <_printf_i>:
 8008a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a58:	7e0f      	ldrb	r7, [r1, #24]
 8008a5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a5c:	2f78      	cmp	r7, #120	; 0x78
 8008a5e:	4691      	mov	r9, r2
 8008a60:	4680      	mov	r8, r0
 8008a62:	460c      	mov	r4, r1
 8008a64:	469a      	mov	sl, r3
 8008a66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a6a:	d807      	bhi.n	8008a7c <_printf_i+0x28>
 8008a6c:	2f62      	cmp	r7, #98	; 0x62
 8008a6e:	d80a      	bhi.n	8008a86 <_printf_i+0x32>
 8008a70:	2f00      	cmp	r7, #0
 8008a72:	f000 80d8 	beq.w	8008c26 <_printf_i+0x1d2>
 8008a76:	2f58      	cmp	r7, #88	; 0x58
 8008a78:	f000 80a3 	beq.w	8008bc2 <_printf_i+0x16e>
 8008a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a84:	e03a      	b.n	8008afc <_printf_i+0xa8>
 8008a86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a8a:	2b15      	cmp	r3, #21
 8008a8c:	d8f6      	bhi.n	8008a7c <_printf_i+0x28>
 8008a8e:	a101      	add	r1, pc, #4	; (adr r1, 8008a94 <_printf_i+0x40>)
 8008a90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a94:	08008aed 	.word	0x08008aed
 8008a98:	08008b01 	.word	0x08008b01
 8008a9c:	08008a7d 	.word	0x08008a7d
 8008aa0:	08008a7d 	.word	0x08008a7d
 8008aa4:	08008a7d 	.word	0x08008a7d
 8008aa8:	08008a7d 	.word	0x08008a7d
 8008aac:	08008b01 	.word	0x08008b01
 8008ab0:	08008a7d 	.word	0x08008a7d
 8008ab4:	08008a7d 	.word	0x08008a7d
 8008ab8:	08008a7d 	.word	0x08008a7d
 8008abc:	08008a7d 	.word	0x08008a7d
 8008ac0:	08008c0d 	.word	0x08008c0d
 8008ac4:	08008b31 	.word	0x08008b31
 8008ac8:	08008bef 	.word	0x08008bef
 8008acc:	08008a7d 	.word	0x08008a7d
 8008ad0:	08008a7d 	.word	0x08008a7d
 8008ad4:	08008c2f 	.word	0x08008c2f
 8008ad8:	08008a7d 	.word	0x08008a7d
 8008adc:	08008b31 	.word	0x08008b31
 8008ae0:	08008a7d 	.word	0x08008a7d
 8008ae4:	08008a7d 	.word	0x08008a7d
 8008ae8:	08008bf7 	.word	0x08008bf7
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	1d1a      	adds	r2, r3, #4
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	602a      	str	r2, [r5, #0]
 8008af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008af8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008afc:	2301      	movs	r3, #1
 8008afe:	e0a3      	b.n	8008c48 <_printf_i+0x1f4>
 8008b00:	6820      	ldr	r0, [r4, #0]
 8008b02:	6829      	ldr	r1, [r5, #0]
 8008b04:	0606      	lsls	r6, r0, #24
 8008b06:	f101 0304 	add.w	r3, r1, #4
 8008b0a:	d50a      	bpl.n	8008b22 <_printf_i+0xce>
 8008b0c:	680e      	ldr	r6, [r1, #0]
 8008b0e:	602b      	str	r3, [r5, #0]
 8008b10:	2e00      	cmp	r6, #0
 8008b12:	da03      	bge.n	8008b1c <_printf_i+0xc8>
 8008b14:	232d      	movs	r3, #45	; 0x2d
 8008b16:	4276      	negs	r6, r6
 8008b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b1c:	485e      	ldr	r0, [pc, #376]	; (8008c98 <_printf_i+0x244>)
 8008b1e:	230a      	movs	r3, #10
 8008b20:	e019      	b.n	8008b56 <_printf_i+0x102>
 8008b22:	680e      	ldr	r6, [r1, #0]
 8008b24:	602b      	str	r3, [r5, #0]
 8008b26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b2a:	bf18      	it	ne
 8008b2c:	b236      	sxthne	r6, r6
 8008b2e:	e7ef      	b.n	8008b10 <_printf_i+0xbc>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	6820      	ldr	r0, [r4, #0]
 8008b34:	1d19      	adds	r1, r3, #4
 8008b36:	6029      	str	r1, [r5, #0]
 8008b38:	0601      	lsls	r1, r0, #24
 8008b3a:	d501      	bpl.n	8008b40 <_printf_i+0xec>
 8008b3c:	681e      	ldr	r6, [r3, #0]
 8008b3e:	e002      	b.n	8008b46 <_printf_i+0xf2>
 8008b40:	0646      	lsls	r6, r0, #25
 8008b42:	d5fb      	bpl.n	8008b3c <_printf_i+0xe8>
 8008b44:	881e      	ldrh	r6, [r3, #0]
 8008b46:	4854      	ldr	r0, [pc, #336]	; (8008c98 <_printf_i+0x244>)
 8008b48:	2f6f      	cmp	r7, #111	; 0x6f
 8008b4a:	bf0c      	ite	eq
 8008b4c:	2308      	moveq	r3, #8
 8008b4e:	230a      	movne	r3, #10
 8008b50:	2100      	movs	r1, #0
 8008b52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b56:	6865      	ldr	r5, [r4, #4]
 8008b58:	60a5      	str	r5, [r4, #8]
 8008b5a:	2d00      	cmp	r5, #0
 8008b5c:	bfa2      	ittt	ge
 8008b5e:	6821      	ldrge	r1, [r4, #0]
 8008b60:	f021 0104 	bicge.w	r1, r1, #4
 8008b64:	6021      	strge	r1, [r4, #0]
 8008b66:	b90e      	cbnz	r6, 8008b6c <_printf_i+0x118>
 8008b68:	2d00      	cmp	r5, #0
 8008b6a:	d04d      	beq.n	8008c08 <_printf_i+0x1b4>
 8008b6c:	4615      	mov	r5, r2
 8008b6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b72:	fb03 6711 	mls	r7, r3, r1, r6
 8008b76:	5dc7      	ldrb	r7, [r0, r7]
 8008b78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b7c:	4637      	mov	r7, r6
 8008b7e:	42bb      	cmp	r3, r7
 8008b80:	460e      	mov	r6, r1
 8008b82:	d9f4      	bls.n	8008b6e <_printf_i+0x11a>
 8008b84:	2b08      	cmp	r3, #8
 8008b86:	d10b      	bne.n	8008ba0 <_printf_i+0x14c>
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	07de      	lsls	r6, r3, #31
 8008b8c:	d508      	bpl.n	8008ba0 <_printf_i+0x14c>
 8008b8e:	6923      	ldr	r3, [r4, #16]
 8008b90:	6861      	ldr	r1, [r4, #4]
 8008b92:	4299      	cmp	r1, r3
 8008b94:	bfde      	ittt	le
 8008b96:	2330      	movle	r3, #48	; 0x30
 8008b98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ba0:	1b52      	subs	r2, r2, r5
 8008ba2:	6122      	str	r2, [r4, #16]
 8008ba4:	f8cd a000 	str.w	sl, [sp]
 8008ba8:	464b      	mov	r3, r9
 8008baa:	aa03      	add	r2, sp, #12
 8008bac:	4621      	mov	r1, r4
 8008bae:	4640      	mov	r0, r8
 8008bb0:	f7ff fee2 	bl	8008978 <_printf_common>
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d14c      	bne.n	8008c52 <_printf_i+0x1fe>
 8008bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbc:	b004      	add	sp, #16
 8008bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc2:	4835      	ldr	r0, [pc, #212]	; (8008c98 <_printf_i+0x244>)
 8008bc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bc8:	6829      	ldr	r1, [r5, #0]
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bd0:	6029      	str	r1, [r5, #0]
 8008bd2:	061d      	lsls	r5, r3, #24
 8008bd4:	d514      	bpl.n	8008c00 <_printf_i+0x1ac>
 8008bd6:	07df      	lsls	r7, r3, #31
 8008bd8:	bf44      	itt	mi
 8008bda:	f043 0320 	orrmi.w	r3, r3, #32
 8008bde:	6023      	strmi	r3, [r4, #0]
 8008be0:	b91e      	cbnz	r6, 8008bea <_printf_i+0x196>
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	f023 0320 	bic.w	r3, r3, #32
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	2310      	movs	r3, #16
 8008bec:	e7b0      	b.n	8008b50 <_printf_i+0xfc>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	f043 0320 	orr.w	r3, r3, #32
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	2378      	movs	r3, #120	; 0x78
 8008bf8:	4828      	ldr	r0, [pc, #160]	; (8008c9c <_printf_i+0x248>)
 8008bfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bfe:	e7e3      	b.n	8008bc8 <_printf_i+0x174>
 8008c00:	0659      	lsls	r1, r3, #25
 8008c02:	bf48      	it	mi
 8008c04:	b2b6      	uxthmi	r6, r6
 8008c06:	e7e6      	b.n	8008bd6 <_printf_i+0x182>
 8008c08:	4615      	mov	r5, r2
 8008c0a:	e7bb      	b.n	8008b84 <_printf_i+0x130>
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	6826      	ldr	r6, [r4, #0]
 8008c10:	6961      	ldr	r1, [r4, #20]
 8008c12:	1d18      	adds	r0, r3, #4
 8008c14:	6028      	str	r0, [r5, #0]
 8008c16:	0635      	lsls	r5, r6, #24
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	d501      	bpl.n	8008c20 <_printf_i+0x1cc>
 8008c1c:	6019      	str	r1, [r3, #0]
 8008c1e:	e002      	b.n	8008c26 <_printf_i+0x1d2>
 8008c20:	0670      	lsls	r0, r6, #25
 8008c22:	d5fb      	bpl.n	8008c1c <_printf_i+0x1c8>
 8008c24:	8019      	strh	r1, [r3, #0]
 8008c26:	2300      	movs	r3, #0
 8008c28:	6123      	str	r3, [r4, #16]
 8008c2a:	4615      	mov	r5, r2
 8008c2c:	e7ba      	b.n	8008ba4 <_printf_i+0x150>
 8008c2e:	682b      	ldr	r3, [r5, #0]
 8008c30:	1d1a      	adds	r2, r3, #4
 8008c32:	602a      	str	r2, [r5, #0]
 8008c34:	681d      	ldr	r5, [r3, #0]
 8008c36:	6862      	ldr	r2, [r4, #4]
 8008c38:	2100      	movs	r1, #0
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	f7f7 fad8 	bl	80001f0 <memchr>
 8008c40:	b108      	cbz	r0, 8008c46 <_printf_i+0x1f2>
 8008c42:	1b40      	subs	r0, r0, r5
 8008c44:	6060      	str	r0, [r4, #4]
 8008c46:	6863      	ldr	r3, [r4, #4]
 8008c48:	6123      	str	r3, [r4, #16]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c50:	e7a8      	b.n	8008ba4 <_printf_i+0x150>
 8008c52:	6923      	ldr	r3, [r4, #16]
 8008c54:	462a      	mov	r2, r5
 8008c56:	4649      	mov	r1, r9
 8008c58:	4640      	mov	r0, r8
 8008c5a:	47d0      	blx	sl
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d0ab      	beq.n	8008bb8 <_printf_i+0x164>
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	079b      	lsls	r3, r3, #30
 8008c64:	d413      	bmi.n	8008c8e <_printf_i+0x23a>
 8008c66:	68e0      	ldr	r0, [r4, #12]
 8008c68:	9b03      	ldr	r3, [sp, #12]
 8008c6a:	4298      	cmp	r0, r3
 8008c6c:	bfb8      	it	lt
 8008c6e:	4618      	movlt	r0, r3
 8008c70:	e7a4      	b.n	8008bbc <_printf_i+0x168>
 8008c72:	2301      	movs	r3, #1
 8008c74:	4632      	mov	r2, r6
 8008c76:	4649      	mov	r1, r9
 8008c78:	4640      	mov	r0, r8
 8008c7a:	47d0      	blx	sl
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d09b      	beq.n	8008bb8 <_printf_i+0x164>
 8008c80:	3501      	adds	r5, #1
 8008c82:	68e3      	ldr	r3, [r4, #12]
 8008c84:	9903      	ldr	r1, [sp, #12]
 8008c86:	1a5b      	subs	r3, r3, r1
 8008c88:	42ab      	cmp	r3, r5
 8008c8a:	dcf2      	bgt.n	8008c72 <_printf_i+0x21e>
 8008c8c:	e7eb      	b.n	8008c66 <_printf_i+0x212>
 8008c8e:	2500      	movs	r5, #0
 8008c90:	f104 0619 	add.w	r6, r4, #25
 8008c94:	e7f5      	b.n	8008c82 <_printf_i+0x22e>
 8008c96:	bf00      	nop
 8008c98:	0800cd5e 	.word	0x0800cd5e
 8008c9c:	0800cd6f 	.word	0x0800cd6f

08008ca0 <_scanf_float>:
 8008ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	b087      	sub	sp, #28
 8008ca6:	4617      	mov	r7, r2
 8008ca8:	9303      	str	r3, [sp, #12]
 8008caa:	688b      	ldr	r3, [r1, #8]
 8008cac:	1e5a      	subs	r2, r3, #1
 8008cae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008cb2:	bf83      	ittte	hi
 8008cb4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008cb8:	195b      	addhi	r3, r3, r5
 8008cba:	9302      	strhi	r3, [sp, #8]
 8008cbc:	2300      	movls	r3, #0
 8008cbe:	bf86      	itte	hi
 8008cc0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008cc4:	608b      	strhi	r3, [r1, #8]
 8008cc6:	9302      	strls	r3, [sp, #8]
 8008cc8:	680b      	ldr	r3, [r1, #0]
 8008cca:	468b      	mov	fp, r1
 8008ccc:	2500      	movs	r5, #0
 8008cce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008cd2:	f84b 3b1c 	str.w	r3, [fp], #28
 8008cd6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008cda:	4680      	mov	r8, r0
 8008cdc:	460c      	mov	r4, r1
 8008cde:	465e      	mov	r6, fp
 8008ce0:	46aa      	mov	sl, r5
 8008ce2:	46a9      	mov	r9, r5
 8008ce4:	9501      	str	r5, [sp, #4]
 8008ce6:	68a2      	ldr	r2, [r4, #8]
 8008ce8:	b152      	cbz	r2, 8008d00 <_scanf_float+0x60>
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	2b4e      	cmp	r3, #78	; 0x4e
 8008cf0:	d864      	bhi.n	8008dbc <_scanf_float+0x11c>
 8008cf2:	2b40      	cmp	r3, #64	; 0x40
 8008cf4:	d83c      	bhi.n	8008d70 <_scanf_float+0xd0>
 8008cf6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008cfa:	b2c8      	uxtb	r0, r1
 8008cfc:	280e      	cmp	r0, #14
 8008cfe:	d93a      	bls.n	8008d76 <_scanf_float+0xd6>
 8008d00:	f1b9 0f00 	cmp.w	r9, #0
 8008d04:	d003      	beq.n	8008d0e <_scanf_float+0x6e>
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d12:	f1ba 0f01 	cmp.w	sl, #1
 8008d16:	f200 8113 	bhi.w	8008f40 <_scanf_float+0x2a0>
 8008d1a:	455e      	cmp	r6, fp
 8008d1c:	f200 8105 	bhi.w	8008f2a <_scanf_float+0x28a>
 8008d20:	2501      	movs	r5, #1
 8008d22:	4628      	mov	r0, r5
 8008d24:	b007      	add	sp, #28
 8008d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008d2e:	2a0d      	cmp	r2, #13
 8008d30:	d8e6      	bhi.n	8008d00 <_scanf_float+0x60>
 8008d32:	a101      	add	r1, pc, #4	; (adr r1, 8008d38 <_scanf_float+0x98>)
 8008d34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d38:	08008e77 	.word	0x08008e77
 8008d3c:	08008d01 	.word	0x08008d01
 8008d40:	08008d01 	.word	0x08008d01
 8008d44:	08008d01 	.word	0x08008d01
 8008d48:	08008ed7 	.word	0x08008ed7
 8008d4c:	08008eaf 	.word	0x08008eaf
 8008d50:	08008d01 	.word	0x08008d01
 8008d54:	08008d01 	.word	0x08008d01
 8008d58:	08008e85 	.word	0x08008e85
 8008d5c:	08008d01 	.word	0x08008d01
 8008d60:	08008d01 	.word	0x08008d01
 8008d64:	08008d01 	.word	0x08008d01
 8008d68:	08008d01 	.word	0x08008d01
 8008d6c:	08008e3d 	.word	0x08008e3d
 8008d70:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008d74:	e7db      	b.n	8008d2e <_scanf_float+0x8e>
 8008d76:	290e      	cmp	r1, #14
 8008d78:	d8c2      	bhi.n	8008d00 <_scanf_float+0x60>
 8008d7a:	a001      	add	r0, pc, #4	; (adr r0, 8008d80 <_scanf_float+0xe0>)
 8008d7c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008d80:	08008e2f 	.word	0x08008e2f
 8008d84:	08008d01 	.word	0x08008d01
 8008d88:	08008e2f 	.word	0x08008e2f
 8008d8c:	08008ec3 	.word	0x08008ec3
 8008d90:	08008d01 	.word	0x08008d01
 8008d94:	08008ddd 	.word	0x08008ddd
 8008d98:	08008e19 	.word	0x08008e19
 8008d9c:	08008e19 	.word	0x08008e19
 8008da0:	08008e19 	.word	0x08008e19
 8008da4:	08008e19 	.word	0x08008e19
 8008da8:	08008e19 	.word	0x08008e19
 8008dac:	08008e19 	.word	0x08008e19
 8008db0:	08008e19 	.word	0x08008e19
 8008db4:	08008e19 	.word	0x08008e19
 8008db8:	08008e19 	.word	0x08008e19
 8008dbc:	2b6e      	cmp	r3, #110	; 0x6e
 8008dbe:	d809      	bhi.n	8008dd4 <_scanf_float+0x134>
 8008dc0:	2b60      	cmp	r3, #96	; 0x60
 8008dc2:	d8b2      	bhi.n	8008d2a <_scanf_float+0x8a>
 8008dc4:	2b54      	cmp	r3, #84	; 0x54
 8008dc6:	d077      	beq.n	8008eb8 <_scanf_float+0x218>
 8008dc8:	2b59      	cmp	r3, #89	; 0x59
 8008dca:	d199      	bne.n	8008d00 <_scanf_float+0x60>
 8008dcc:	2d07      	cmp	r5, #7
 8008dce:	d197      	bne.n	8008d00 <_scanf_float+0x60>
 8008dd0:	2508      	movs	r5, #8
 8008dd2:	e029      	b.n	8008e28 <_scanf_float+0x188>
 8008dd4:	2b74      	cmp	r3, #116	; 0x74
 8008dd6:	d06f      	beq.n	8008eb8 <_scanf_float+0x218>
 8008dd8:	2b79      	cmp	r3, #121	; 0x79
 8008dda:	e7f6      	b.n	8008dca <_scanf_float+0x12a>
 8008ddc:	6821      	ldr	r1, [r4, #0]
 8008dde:	05c8      	lsls	r0, r1, #23
 8008de0:	d51a      	bpl.n	8008e18 <_scanf_float+0x178>
 8008de2:	9b02      	ldr	r3, [sp, #8]
 8008de4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008de8:	6021      	str	r1, [r4, #0]
 8008dea:	f109 0901 	add.w	r9, r9, #1
 8008dee:	b11b      	cbz	r3, 8008df8 <_scanf_float+0x158>
 8008df0:	3b01      	subs	r3, #1
 8008df2:	3201      	adds	r2, #1
 8008df4:	9302      	str	r3, [sp, #8]
 8008df6:	60a2      	str	r2, [r4, #8]
 8008df8:	68a3      	ldr	r3, [r4, #8]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	60a3      	str	r3, [r4, #8]
 8008dfe:	6923      	ldr	r3, [r4, #16]
 8008e00:	3301      	adds	r3, #1
 8008e02:	6123      	str	r3, [r4, #16]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3b01      	subs	r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	607b      	str	r3, [r7, #4]
 8008e0c:	f340 8084 	ble.w	8008f18 <_scanf_float+0x278>
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	3301      	adds	r3, #1
 8008e14:	603b      	str	r3, [r7, #0]
 8008e16:	e766      	b.n	8008ce6 <_scanf_float+0x46>
 8008e18:	eb1a 0f05 	cmn.w	sl, r5
 8008e1c:	f47f af70 	bne.w	8008d00 <_scanf_float+0x60>
 8008e20:	6822      	ldr	r2, [r4, #0]
 8008e22:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008e26:	6022      	str	r2, [r4, #0]
 8008e28:	f806 3b01 	strb.w	r3, [r6], #1
 8008e2c:	e7e4      	b.n	8008df8 <_scanf_float+0x158>
 8008e2e:	6822      	ldr	r2, [r4, #0]
 8008e30:	0610      	lsls	r0, r2, #24
 8008e32:	f57f af65 	bpl.w	8008d00 <_scanf_float+0x60>
 8008e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e3a:	e7f4      	b.n	8008e26 <_scanf_float+0x186>
 8008e3c:	f1ba 0f00 	cmp.w	sl, #0
 8008e40:	d10e      	bne.n	8008e60 <_scanf_float+0x1c0>
 8008e42:	f1b9 0f00 	cmp.w	r9, #0
 8008e46:	d10e      	bne.n	8008e66 <_scanf_float+0x1c6>
 8008e48:	6822      	ldr	r2, [r4, #0]
 8008e4a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e4e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e52:	d108      	bne.n	8008e66 <_scanf_float+0x1c6>
 8008e54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e58:	6022      	str	r2, [r4, #0]
 8008e5a:	f04f 0a01 	mov.w	sl, #1
 8008e5e:	e7e3      	b.n	8008e28 <_scanf_float+0x188>
 8008e60:	f1ba 0f02 	cmp.w	sl, #2
 8008e64:	d055      	beq.n	8008f12 <_scanf_float+0x272>
 8008e66:	2d01      	cmp	r5, #1
 8008e68:	d002      	beq.n	8008e70 <_scanf_float+0x1d0>
 8008e6a:	2d04      	cmp	r5, #4
 8008e6c:	f47f af48 	bne.w	8008d00 <_scanf_float+0x60>
 8008e70:	3501      	adds	r5, #1
 8008e72:	b2ed      	uxtb	r5, r5
 8008e74:	e7d8      	b.n	8008e28 <_scanf_float+0x188>
 8008e76:	f1ba 0f01 	cmp.w	sl, #1
 8008e7a:	f47f af41 	bne.w	8008d00 <_scanf_float+0x60>
 8008e7e:	f04f 0a02 	mov.w	sl, #2
 8008e82:	e7d1      	b.n	8008e28 <_scanf_float+0x188>
 8008e84:	b97d      	cbnz	r5, 8008ea6 <_scanf_float+0x206>
 8008e86:	f1b9 0f00 	cmp.w	r9, #0
 8008e8a:	f47f af3c 	bne.w	8008d06 <_scanf_float+0x66>
 8008e8e:	6822      	ldr	r2, [r4, #0]
 8008e90:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e94:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e98:	f47f af39 	bne.w	8008d0e <_scanf_float+0x6e>
 8008e9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ea0:	6022      	str	r2, [r4, #0]
 8008ea2:	2501      	movs	r5, #1
 8008ea4:	e7c0      	b.n	8008e28 <_scanf_float+0x188>
 8008ea6:	2d03      	cmp	r5, #3
 8008ea8:	d0e2      	beq.n	8008e70 <_scanf_float+0x1d0>
 8008eaa:	2d05      	cmp	r5, #5
 8008eac:	e7de      	b.n	8008e6c <_scanf_float+0x1cc>
 8008eae:	2d02      	cmp	r5, #2
 8008eb0:	f47f af26 	bne.w	8008d00 <_scanf_float+0x60>
 8008eb4:	2503      	movs	r5, #3
 8008eb6:	e7b7      	b.n	8008e28 <_scanf_float+0x188>
 8008eb8:	2d06      	cmp	r5, #6
 8008eba:	f47f af21 	bne.w	8008d00 <_scanf_float+0x60>
 8008ebe:	2507      	movs	r5, #7
 8008ec0:	e7b2      	b.n	8008e28 <_scanf_float+0x188>
 8008ec2:	6822      	ldr	r2, [r4, #0]
 8008ec4:	0591      	lsls	r1, r2, #22
 8008ec6:	f57f af1b 	bpl.w	8008d00 <_scanf_float+0x60>
 8008eca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008ece:	6022      	str	r2, [r4, #0]
 8008ed0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ed4:	e7a8      	b.n	8008e28 <_scanf_float+0x188>
 8008ed6:	6822      	ldr	r2, [r4, #0]
 8008ed8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008edc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008ee0:	d006      	beq.n	8008ef0 <_scanf_float+0x250>
 8008ee2:	0550      	lsls	r0, r2, #21
 8008ee4:	f57f af0c 	bpl.w	8008d00 <_scanf_float+0x60>
 8008ee8:	f1b9 0f00 	cmp.w	r9, #0
 8008eec:	f43f af0f 	beq.w	8008d0e <_scanf_float+0x6e>
 8008ef0:	0591      	lsls	r1, r2, #22
 8008ef2:	bf58      	it	pl
 8008ef4:	9901      	ldrpl	r1, [sp, #4]
 8008ef6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008efa:	bf58      	it	pl
 8008efc:	eba9 0101 	subpl.w	r1, r9, r1
 8008f00:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008f04:	bf58      	it	pl
 8008f06:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f0a:	6022      	str	r2, [r4, #0]
 8008f0c:	f04f 0900 	mov.w	r9, #0
 8008f10:	e78a      	b.n	8008e28 <_scanf_float+0x188>
 8008f12:	f04f 0a03 	mov.w	sl, #3
 8008f16:	e787      	b.n	8008e28 <_scanf_float+0x188>
 8008f18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f1c:	4639      	mov	r1, r7
 8008f1e:	4640      	mov	r0, r8
 8008f20:	4798      	blx	r3
 8008f22:	2800      	cmp	r0, #0
 8008f24:	f43f aedf 	beq.w	8008ce6 <_scanf_float+0x46>
 8008f28:	e6ea      	b.n	8008d00 <_scanf_float+0x60>
 8008f2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f32:	463a      	mov	r2, r7
 8008f34:	4640      	mov	r0, r8
 8008f36:	4798      	blx	r3
 8008f38:	6923      	ldr	r3, [r4, #16]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	6123      	str	r3, [r4, #16]
 8008f3e:	e6ec      	b.n	8008d1a <_scanf_float+0x7a>
 8008f40:	1e6b      	subs	r3, r5, #1
 8008f42:	2b06      	cmp	r3, #6
 8008f44:	d825      	bhi.n	8008f92 <_scanf_float+0x2f2>
 8008f46:	2d02      	cmp	r5, #2
 8008f48:	d836      	bhi.n	8008fb8 <_scanf_float+0x318>
 8008f4a:	455e      	cmp	r6, fp
 8008f4c:	f67f aee8 	bls.w	8008d20 <_scanf_float+0x80>
 8008f50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f54:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f58:	463a      	mov	r2, r7
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	4798      	blx	r3
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	3b01      	subs	r3, #1
 8008f62:	6123      	str	r3, [r4, #16]
 8008f64:	e7f1      	b.n	8008f4a <_scanf_float+0x2aa>
 8008f66:	9802      	ldr	r0, [sp, #8]
 8008f68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f6c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008f70:	9002      	str	r0, [sp, #8]
 8008f72:	463a      	mov	r2, r7
 8008f74:	4640      	mov	r0, r8
 8008f76:	4798      	blx	r3
 8008f78:	6923      	ldr	r3, [r4, #16]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	6123      	str	r3, [r4, #16]
 8008f7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f82:	fa5f fa8a 	uxtb.w	sl, sl
 8008f86:	f1ba 0f02 	cmp.w	sl, #2
 8008f8a:	d1ec      	bne.n	8008f66 <_scanf_float+0x2c6>
 8008f8c:	3d03      	subs	r5, #3
 8008f8e:	b2ed      	uxtb	r5, r5
 8008f90:	1b76      	subs	r6, r6, r5
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	05da      	lsls	r2, r3, #23
 8008f96:	d52f      	bpl.n	8008ff8 <_scanf_float+0x358>
 8008f98:	055b      	lsls	r3, r3, #21
 8008f9a:	d510      	bpl.n	8008fbe <_scanf_float+0x31e>
 8008f9c:	455e      	cmp	r6, fp
 8008f9e:	f67f aebf 	bls.w	8008d20 <_scanf_float+0x80>
 8008fa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fa6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008faa:	463a      	mov	r2, r7
 8008fac:	4640      	mov	r0, r8
 8008fae:	4798      	blx	r3
 8008fb0:	6923      	ldr	r3, [r4, #16]
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	6123      	str	r3, [r4, #16]
 8008fb6:	e7f1      	b.n	8008f9c <_scanf_float+0x2fc>
 8008fb8:	46aa      	mov	sl, r5
 8008fba:	9602      	str	r6, [sp, #8]
 8008fbc:	e7df      	b.n	8008f7e <_scanf_float+0x2de>
 8008fbe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008fc2:	6923      	ldr	r3, [r4, #16]
 8008fc4:	2965      	cmp	r1, #101	; 0x65
 8008fc6:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fca:	f106 35ff 	add.w	r5, r6, #4294967295
 8008fce:	6123      	str	r3, [r4, #16]
 8008fd0:	d00c      	beq.n	8008fec <_scanf_float+0x34c>
 8008fd2:	2945      	cmp	r1, #69	; 0x45
 8008fd4:	d00a      	beq.n	8008fec <_scanf_float+0x34c>
 8008fd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fda:	463a      	mov	r2, r7
 8008fdc:	4640      	mov	r0, r8
 8008fde:	4798      	blx	r3
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	1eb5      	subs	r5, r6, #2
 8008fea:	6123      	str	r3, [r4, #16]
 8008fec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ff0:	463a      	mov	r2, r7
 8008ff2:	4640      	mov	r0, r8
 8008ff4:	4798      	blx	r3
 8008ff6:	462e      	mov	r6, r5
 8008ff8:	6825      	ldr	r5, [r4, #0]
 8008ffa:	f015 0510 	ands.w	r5, r5, #16
 8008ffe:	d159      	bne.n	80090b4 <_scanf_float+0x414>
 8009000:	7035      	strb	r5, [r6, #0]
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800900c:	d11b      	bne.n	8009046 <_scanf_float+0x3a6>
 800900e:	9b01      	ldr	r3, [sp, #4]
 8009010:	454b      	cmp	r3, r9
 8009012:	eba3 0209 	sub.w	r2, r3, r9
 8009016:	d123      	bne.n	8009060 <_scanf_float+0x3c0>
 8009018:	2200      	movs	r2, #0
 800901a:	4659      	mov	r1, fp
 800901c:	4640      	mov	r0, r8
 800901e:	f000 fe99 	bl	8009d54 <_strtod_r>
 8009022:	6822      	ldr	r2, [r4, #0]
 8009024:	9b03      	ldr	r3, [sp, #12]
 8009026:	f012 0f02 	tst.w	r2, #2
 800902a:	ec57 6b10 	vmov	r6, r7, d0
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	d021      	beq.n	8009076 <_scanf_float+0x3d6>
 8009032:	9903      	ldr	r1, [sp, #12]
 8009034:	1d1a      	adds	r2, r3, #4
 8009036:	600a      	str	r2, [r1, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	e9c3 6700 	strd	r6, r7, [r3]
 800903e:	68e3      	ldr	r3, [r4, #12]
 8009040:	3301      	adds	r3, #1
 8009042:	60e3      	str	r3, [r4, #12]
 8009044:	e66d      	b.n	8008d22 <_scanf_float+0x82>
 8009046:	9b04      	ldr	r3, [sp, #16]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0e5      	beq.n	8009018 <_scanf_float+0x378>
 800904c:	9905      	ldr	r1, [sp, #20]
 800904e:	230a      	movs	r3, #10
 8009050:	462a      	mov	r2, r5
 8009052:	3101      	adds	r1, #1
 8009054:	4640      	mov	r0, r8
 8009056:	f000 ff05 	bl	8009e64 <_strtol_r>
 800905a:	9b04      	ldr	r3, [sp, #16]
 800905c:	9e05      	ldr	r6, [sp, #20]
 800905e:	1ac2      	subs	r2, r0, r3
 8009060:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009064:	429e      	cmp	r6, r3
 8009066:	bf28      	it	cs
 8009068:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800906c:	4912      	ldr	r1, [pc, #72]	; (80090b8 <_scanf_float+0x418>)
 800906e:	4630      	mov	r0, r6
 8009070:	f000 f82c 	bl	80090cc <siprintf>
 8009074:	e7d0      	b.n	8009018 <_scanf_float+0x378>
 8009076:	9903      	ldr	r1, [sp, #12]
 8009078:	f012 0f04 	tst.w	r2, #4
 800907c:	f103 0204 	add.w	r2, r3, #4
 8009080:	600a      	str	r2, [r1, #0]
 8009082:	d1d9      	bne.n	8009038 <_scanf_float+0x398>
 8009084:	f8d3 8000 	ldr.w	r8, [r3]
 8009088:	ee10 2a10 	vmov	r2, s0
 800908c:	ee10 0a10 	vmov	r0, s0
 8009090:	463b      	mov	r3, r7
 8009092:	4639      	mov	r1, r7
 8009094:	f7f7 fd52 	bl	8000b3c <__aeabi_dcmpun>
 8009098:	b128      	cbz	r0, 80090a6 <_scanf_float+0x406>
 800909a:	4808      	ldr	r0, [pc, #32]	; (80090bc <_scanf_float+0x41c>)
 800909c:	f000 f810 	bl	80090c0 <nanf>
 80090a0:	ed88 0a00 	vstr	s0, [r8]
 80090a4:	e7cb      	b.n	800903e <_scanf_float+0x39e>
 80090a6:	4630      	mov	r0, r6
 80090a8:	4639      	mov	r1, r7
 80090aa:	f7f7 fda5 	bl	8000bf8 <__aeabi_d2f>
 80090ae:	f8c8 0000 	str.w	r0, [r8]
 80090b2:	e7c4      	b.n	800903e <_scanf_float+0x39e>
 80090b4:	2500      	movs	r5, #0
 80090b6:	e634      	b.n	8008d22 <_scanf_float+0x82>
 80090b8:	0800cd80 	.word	0x0800cd80
 80090bc:	0800d188 	.word	0x0800d188

080090c0 <nanf>:
 80090c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80090c8 <nanf+0x8>
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	7fc00000 	.word	0x7fc00000

080090cc <siprintf>:
 80090cc:	b40e      	push	{r1, r2, r3}
 80090ce:	b500      	push	{lr}
 80090d0:	b09c      	sub	sp, #112	; 0x70
 80090d2:	ab1d      	add	r3, sp, #116	; 0x74
 80090d4:	9002      	str	r0, [sp, #8]
 80090d6:	9006      	str	r0, [sp, #24]
 80090d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090dc:	4809      	ldr	r0, [pc, #36]	; (8009104 <siprintf+0x38>)
 80090de:	9107      	str	r1, [sp, #28]
 80090e0:	9104      	str	r1, [sp, #16]
 80090e2:	4909      	ldr	r1, [pc, #36]	; (8009108 <siprintf+0x3c>)
 80090e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e8:	9105      	str	r1, [sp, #20]
 80090ea:	6800      	ldr	r0, [r0, #0]
 80090ec:	9301      	str	r3, [sp, #4]
 80090ee:	a902      	add	r1, sp, #8
 80090f0:	f002 fed6 	bl	800bea0 <_svfiprintf_r>
 80090f4:	9b02      	ldr	r3, [sp, #8]
 80090f6:	2200      	movs	r2, #0
 80090f8:	701a      	strb	r2, [r3, #0]
 80090fa:	b01c      	add	sp, #112	; 0x70
 80090fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009100:	b003      	add	sp, #12
 8009102:	4770      	bx	lr
 8009104:	20000030 	.word	0x20000030
 8009108:	ffff0208 	.word	0xffff0208

0800910c <sulp>:
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	4604      	mov	r4, r0
 8009110:	460d      	mov	r5, r1
 8009112:	ec45 4b10 	vmov	d0, r4, r5
 8009116:	4616      	mov	r6, r2
 8009118:	f002 fc20 	bl	800b95c <__ulp>
 800911c:	ec51 0b10 	vmov	r0, r1, d0
 8009120:	b17e      	cbz	r6, 8009142 <sulp+0x36>
 8009122:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009126:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800912a:	2b00      	cmp	r3, #0
 800912c:	dd09      	ble.n	8009142 <sulp+0x36>
 800912e:	051b      	lsls	r3, r3, #20
 8009130:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009134:	2400      	movs	r4, #0
 8009136:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800913a:	4622      	mov	r2, r4
 800913c:	462b      	mov	r3, r5
 800913e:	f7f7 fa63 	bl	8000608 <__aeabi_dmul>
 8009142:	bd70      	pop	{r4, r5, r6, pc}
 8009144:	0000      	movs	r0, r0
	...

08009148 <_strtod_l>:
 8009148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	ed2d 8b02 	vpush	{d8}
 8009150:	b09d      	sub	sp, #116	; 0x74
 8009152:	461f      	mov	r7, r3
 8009154:	2300      	movs	r3, #0
 8009156:	9318      	str	r3, [sp, #96]	; 0x60
 8009158:	4ba2      	ldr	r3, [pc, #648]	; (80093e4 <_strtod_l+0x29c>)
 800915a:	9213      	str	r2, [sp, #76]	; 0x4c
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	9305      	str	r3, [sp, #20]
 8009160:	4604      	mov	r4, r0
 8009162:	4618      	mov	r0, r3
 8009164:	4688      	mov	r8, r1
 8009166:	f7f7 f83b 	bl	80001e0 <strlen>
 800916a:	f04f 0a00 	mov.w	sl, #0
 800916e:	4605      	mov	r5, r0
 8009170:	f04f 0b00 	mov.w	fp, #0
 8009174:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009178:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800917a:	781a      	ldrb	r2, [r3, #0]
 800917c:	2a2b      	cmp	r2, #43	; 0x2b
 800917e:	d04e      	beq.n	800921e <_strtod_l+0xd6>
 8009180:	d83b      	bhi.n	80091fa <_strtod_l+0xb2>
 8009182:	2a0d      	cmp	r2, #13
 8009184:	d834      	bhi.n	80091f0 <_strtod_l+0xa8>
 8009186:	2a08      	cmp	r2, #8
 8009188:	d834      	bhi.n	80091f4 <_strtod_l+0xac>
 800918a:	2a00      	cmp	r2, #0
 800918c:	d03e      	beq.n	800920c <_strtod_l+0xc4>
 800918e:	2300      	movs	r3, #0
 8009190:	930a      	str	r3, [sp, #40]	; 0x28
 8009192:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009194:	7833      	ldrb	r3, [r6, #0]
 8009196:	2b30      	cmp	r3, #48	; 0x30
 8009198:	f040 80b0 	bne.w	80092fc <_strtod_l+0x1b4>
 800919c:	7873      	ldrb	r3, [r6, #1]
 800919e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80091a2:	2b58      	cmp	r3, #88	; 0x58
 80091a4:	d168      	bne.n	8009278 <_strtod_l+0x130>
 80091a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091a8:	9301      	str	r3, [sp, #4]
 80091aa:	ab18      	add	r3, sp, #96	; 0x60
 80091ac:	9702      	str	r7, [sp, #8]
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	4a8d      	ldr	r2, [pc, #564]	; (80093e8 <_strtod_l+0x2a0>)
 80091b2:	ab19      	add	r3, sp, #100	; 0x64
 80091b4:	a917      	add	r1, sp, #92	; 0x5c
 80091b6:	4620      	mov	r0, r4
 80091b8:	f001 fd38 	bl	800ac2c <__gethex>
 80091bc:	f010 0707 	ands.w	r7, r0, #7
 80091c0:	4605      	mov	r5, r0
 80091c2:	d005      	beq.n	80091d0 <_strtod_l+0x88>
 80091c4:	2f06      	cmp	r7, #6
 80091c6:	d12c      	bne.n	8009222 <_strtod_l+0xda>
 80091c8:	3601      	adds	r6, #1
 80091ca:	2300      	movs	r3, #0
 80091cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80091ce:	930a      	str	r3, [sp, #40]	; 0x28
 80091d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f040 8590 	bne.w	8009cf8 <_strtod_l+0xbb0>
 80091d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091da:	b1eb      	cbz	r3, 8009218 <_strtod_l+0xd0>
 80091dc:	4652      	mov	r2, sl
 80091de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80091e2:	ec43 2b10 	vmov	d0, r2, r3
 80091e6:	b01d      	add	sp, #116	; 0x74
 80091e8:	ecbd 8b02 	vpop	{d8}
 80091ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f0:	2a20      	cmp	r2, #32
 80091f2:	d1cc      	bne.n	800918e <_strtod_l+0x46>
 80091f4:	3301      	adds	r3, #1
 80091f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80091f8:	e7be      	b.n	8009178 <_strtod_l+0x30>
 80091fa:	2a2d      	cmp	r2, #45	; 0x2d
 80091fc:	d1c7      	bne.n	800918e <_strtod_l+0x46>
 80091fe:	2201      	movs	r2, #1
 8009200:	920a      	str	r2, [sp, #40]	; 0x28
 8009202:	1c5a      	adds	r2, r3, #1
 8009204:	9217      	str	r2, [sp, #92]	; 0x5c
 8009206:	785b      	ldrb	r3, [r3, #1]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1c2      	bne.n	8009192 <_strtod_l+0x4a>
 800920c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800920e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009212:	2b00      	cmp	r3, #0
 8009214:	f040 856e 	bne.w	8009cf4 <_strtod_l+0xbac>
 8009218:	4652      	mov	r2, sl
 800921a:	465b      	mov	r3, fp
 800921c:	e7e1      	b.n	80091e2 <_strtod_l+0x9a>
 800921e:	2200      	movs	r2, #0
 8009220:	e7ee      	b.n	8009200 <_strtod_l+0xb8>
 8009222:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009224:	b13a      	cbz	r2, 8009236 <_strtod_l+0xee>
 8009226:	2135      	movs	r1, #53	; 0x35
 8009228:	a81a      	add	r0, sp, #104	; 0x68
 800922a:	f002 fca2 	bl	800bb72 <__copybits>
 800922e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009230:	4620      	mov	r0, r4
 8009232:	f002 f861 	bl	800b2f8 <_Bfree>
 8009236:	3f01      	subs	r7, #1
 8009238:	2f04      	cmp	r7, #4
 800923a:	d806      	bhi.n	800924a <_strtod_l+0x102>
 800923c:	e8df f007 	tbb	[pc, r7]
 8009240:	1714030a 	.word	0x1714030a
 8009244:	0a          	.byte	0x0a
 8009245:	00          	.byte	0x00
 8009246:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800924a:	0728      	lsls	r0, r5, #28
 800924c:	d5c0      	bpl.n	80091d0 <_strtod_l+0x88>
 800924e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009252:	e7bd      	b.n	80091d0 <_strtod_l+0x88>
 8009254:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009258:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800925a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800925e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009262:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009266:	e7f0      	b.n	800924a <_strtod_l+0x102>
 8009268:	f8df b180 	ldr.w	fp, [pc, #384]	; 80093ec <_strtod_l+0x2a4>
 800926c:	e7ed      	b.n	800924a <_strtod_l+0x102>
 800926e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009272:	f04f 3aff 	mov.w	sl, #4294967295
 8009276:	e7e8      	b.n	800924a <_strtod_l+0x102>
 8009278:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	9217      	str	r2, [sp, #92]	; 0x5c
 800927e:	785b      	ldrb	r3, [r3, #1]
 8009280:	2b30      	cmp	r3, #48	; 0x30
 8009282:	d0f9      	beq.n	8009278 <_strtod_l+0x130>
 8009284:	2b00      	cmp	r3, #0
 8009286:	d0a3      	beq.n	80091d0 <_strtod_l+0x88>
 8009288:	2301      	movs	r3, #1
 800928a:	f04f 0900 	mov.w	r9, #0
 800928e:	9304      	str	r3, [sp, #16]
 8009290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009292:	9308      	str	r3, [sp, #32]
 8009294:	f8cd 901c 	str.w	r9, [sp, #28]
 8009298:	464f      	mov	r7, r9
 800929a:	220a      	movs	r2, #10
 800929c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800929e:	7806      	ldrb	r6, [r0, #0]
 80092a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80092a4:	b2d9      	uxtb	r1, r3
 80092a6:	2909      	cmp	r1, #9
 80092a8:	d92a      	bls.n	8009300 <_strtod_l+0x1b8>
 80092aa:	9905      	ldr	r1, [sp, #20]
 80092ac:	462a      	mov	r2, r5
 80092ae:	f002 ff0f 	bl	800c0d0 <strncmp>
 80092b2:	b398      	cbz	r0, 800931c <_strtod_l+0x1d4>
 80092b4:	2000      	movs	r0, #0
 80092b6:	4632      	mov	r2, r6
 80092b8:	463d      	mov	r5, r7
 80092ba:	9005      	str	r0, [sp, #20]
 80092bc:	4603      	mov	r3, r0
 80092be:	2a65      	cmp	r2, #101	; 0x65
 80092c0:	d001      	beq.n	80092c6 <_strtod_l+0x17e>
 80092c2:	2a45      	cmp	r2, #69	; 0x45
 80092c4:	d118      	bne.n	80092f8 <_strtod_l+0x1b0>
 80092c6:	b91d      	cbnz	r5, 80092d0 <_strtod_l+0x188>
 80092c8:	9a04      	ldr	r2, [sp, #16]
 80092ca:	4302      	orrs	r2, r0
 80092cc:	d09e      	beq.n	800920c <_strtod_l+0xc4>
 80092ce:	2500      	movs	r5, #0
 80092d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80092d4:	f108 0201 	add.w	r2, r8, #1
 80092d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80092da:	f898 2001 	ldrb.w	r2, [r8, #1]
 80092de:	2a2b      	cmp	r2, #43	; 0x2b
 80092e0:	d075      	beq.n	80093ce <_strtod_l+0x286>
 80092e2:	2a2d      	cmp	r2, #45	; 0x2d
 80092e4:	d07b      	beq.n	80093de <_strtod_l+0x296>
 80092e6:	f04f 0c00 	mov.w	ip, #0
 80092ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80092ee:	2909      	cmp	r1, #9
 80092f0:	f240 8082 	bls.w	80093f8 <_strtod_l+0x2b0>
 80092f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80092f8:	2600      	movs	r6, #0
 80092fa:	e09d      	b.n	8009438 <_strtod_l+0x2f0>
 80092fc:	2300      	movs	r3, #0
 80092fe:	e7c4      	b.n	800928a <_strtod_l+0x142>
 8009300:	2f08      	cmp	r7, #8
 8009302:	bfd8      	it	le
 8009304:	9907      	ldrle	r1, [sp, #28]
 8009306:	f100 0001 	add.w	r0, r0, #1
 800930a:	bfda      	itte	le
 800930c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009310:	9307      	strle	r3, [sp, #28]
 8009312:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009316:	3701      	adds	r7, #1
 8009318:	9017      	str	r0, [sp, #92]	; 0x5c
 800931a:	e7bf      	b.n	800929c <_strtod_l+0x154>
 800931c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800931e:	195a      	adds	r2, r3, r5
 8009320:	9217      	str	r2, [sp, #92]	; 0x5c
 8009322:	5d5a      	ldrb	r2, [r3, r5]
 8009324:	2f00      	cmp	r7, #0
 8009326:	d037      	beq.n	8009398 <_strtod_l+0x250>
 8009328:	9005      	str	r0, [sp, #20]
 800932a:	463d      	mov	r5, r7
 800932c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009330:	2b09      	cmp	r3, #9
 8009332:	d912      	bls.n	800935a <_strtod_l+0x212>
 8009334:	2301      	movs	r3, #1
 8009336:	e7c2      	b.n	80092be <_strtod_l+0x176>
 8009338:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800933a:	1c5a      	adds	r2, r3, #1
 800933c:	9217      	str	r2, [sp, #92]	; 0x5c
 800933e:	785a      	ldrb	r2, [r3, #1]
 8009340:	3001      	adds	r0, #1
 8009342:	2a30      	cmp	r2, #48	; 0x30
 8009344:	d0f8      	beq.n	8009338 <_strtod_l+0x1f0>
 8009346:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800934a:	2b08      	cmp	r3, #8
 800934c:	f200 84d9 	bhi.w	8009d02 <_strtod_l+0xbba>
 8009350:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009352:	9005      	str	r0, [sp, #20]
 8009354:	2000      	movs	r0, #0
 8009356:	9308      	str	r3, [sp, #32]
 8009358:	4605      	mov	r5, r0
 800935a:	3a30      	subs	r2, #48	; 0x30
 800935c:	f100 0301 	add.w	r3, r0, #1
 8009360:	d014      	beq.n	800938c <_strtod_l+0x244>
 8009362:	9905      	ldr	r1, [sp, #20]
 8009364:	4419      	add	r1, r3
 8009366:	9105      	str	r1, [sp, #20]
 8009368:	462b      	mov	r3, r5
 800936a:	eb00 0e05 	add.w	lr, r0, r5
 800936e:	210a      	movs	r1, #10
 8009370:	4573      	cmp	r3, lr
 8009372:	d113      	bne.n	800939c <_strtod_l+0x254>
 8009374:	182b      	adds	r3, r5, r0
 8009376:	2b08      	cmp	r3, #8
 8009378:	f105 0501 	add.w	r5, r5, #1
 800937c:	4405      	add	r5, r0
 800937e:	dc1c      	bgt.n	80093ba <_strtod_l+0x272>
 8009380:	9907      	ldr	r1, [sp, #28]
 8009382:	230a      	movs	r3, #10
 8009384:	fb03 2301 	mla	r3, r3, r1, r2
 8009388:	9307      	str	r3, [sp, #28]
 800938a:	2300      	movs	r3, #0
 800938c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800938e:	1c51      	adds	r1, r2, #1
 8009390:	9117      	str	r1, [sp, #92]	; 0x5c
 8009392:	7852      	ldrb	r2, [r2, #1]
 8009394:	4618      	mov	r0, r3
 8009396:	e7c9      	b.n	800932c <_strtod_l+0x1e4>
 8009398:	4638      	mov	r0, r7
 800939a:	e7d2      	b.n	8009342 <_strtod_l+0x1fa>
 800939c:	2b08      	cmp	r3, #8
 800939e:	dc04      	bgt.n	80093aa <_strtod_l+0x262>
 80093a0:	9e07      	ldr	r6, [sp, #28]
 80093a2:	434e      	muls	r6, r1
 80093a4:	9607      	str	r6, [sp, #28]
 80093a6:	3301      	adds	r3, #1
 80093a8:	e7e2      	b.n	8009370 <_strtod_l+0x228>
 80093aa:	f103 0c01 	add.w	ip, r3, #1
 80093ae:	f1bc 0f10 	cmp.w	ip, #16
 80093b2:	bfd8      	it	le
 80093b4:	fb01 f909 	mulle.w	r9, r1, r9
 80093b8:	e7f5      	b.n	80093a6 <_strtod_l+0x25e>
 80093ba:	2d10      	cmp	r5, #16
 80093bc:	bfdc      	itt	le
 80093be:	230a      	movle	r3, #10
 80093c0:	fb03 2909 	mlale	r9, r3, r9, r2
 80093c4:	e7e1      	b.n	800938a <_strtod_l+0x242>
 80093c6:	2300      	movs	r3, #0
 80093c8:	9305      	str	r3, [sp, #20]
 80093ca:	2301      	movs	r3, #1
 80093cc:	e77c      	b.n	80092c8 <_strtod_l+0x180>
 80093ce:	f04f 0c00 	mov.w	ip, #0
 80093d2:	f108 0202 	add.w	r2, r8, #2
 80093d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80093d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80093dc:	e785      	b.n	80092ea <_strtod_l+0x1a2>
 80093de:	f04f 0c01 	mov.w	ip, #1
 80093e2:	e7f6      	b.n	80093d2 <_strtod_l+0x28a>
 80093e4:	0800cfd0 	.word	0x0800cfd0
 80093e8:	0800cd88 	.word	0x0800cd88
 80093ec:	7ff00000 	.word	0x7ff00000
 80093f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80093f2:	1c51      	adds	r1, r2, #1
 80093f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80093f6:	7852      	ldrb	r2, [r2, #1]
 80093f8:	2a30      	cmp	r2, #48	; 0x30
 80093fa:	d0f9      	beq.n	80093f0 <_strtod_l+0x2a8>
 80093fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009400:	2908      	cmp	r1, #8
 8009402:	f63f af79 	bhi.w	80092f8 <_strtod_l+0x1b0>
 8009406:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800940a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800940c:	9206      	str	r2, [sp, #24]
 800940e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009410:	1c51      	adds	r1, r2, #1
 8009412:	9117      	str	r1, [sp, #92]	; 0x5c
 8009414:	7852      	ldrb	r2, [r2, #1]
 8009416:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800941a:	2e09      	cmp	r6, #9
 800941c:	d937      	bls.n	800948e <_strtod_l+0x346>
 800941e:	9e06      	ldr	r6, [sp, #24]
 8009420:	1b89      	subs	r1, r1, r6
 8009422:	2908      	cmp	r1, #8
 8009424:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009428:	dc02      	bgt.n	8009430 <_strtod_l+0x2e8>
 800942a:	4576      	cmp	r6, lr
 800942c:	bfa8      	it	ge
 800942e:	4676      	movge	r6, lr
 8009430:	f1bc 0f00 	cmp.w	ip, #0
 8009434:	d000      	beq.n	8009438 <_strtod_l+0x2f0>
 8009436:	4276      	negs	r6, r6
 8009438:	2d00      	cmp	r5, #0
 800943a:	d14d      	bne.n	80094d8 <_strtod_l+0x390>
 800943c:	9904      	ldr	r1, [sp, #16]
 800943e:	4301      	orrs	r1, r0
 8009440:	f47f aec6 	bne.w	80091d0 <_strtod_l+0x88>
 8009444:	2b00      	cmp	r3, #0
 8009446:	f47f aee1 	bne.w	800920c <_strtod_l+0xc4>
 800944a:	2a69      	cmp	r2, #105	; 0x69
 800944c:	d027      	beq.n	800949e <_strtod_l+0x356>
 800944e:	dc24      	bgt.n	800949a <_strtod_l+0x352>
 8009450:	2a49      	cmp	r2, #73	; 0x49
 8009452:	d024      	beq.n	800949e <_strtod_l+0x356>
 8009454:	2a4e      	cmp	r2, #78	; 0x4e
 8009456:	f47f aed9 	bne.w	800920c <_strtod_l+0xc4>
 800945a:	499f      	ldr	r1, [pc, #636]	; (80096d8 <_strtod_l+0x590>)
 800945c:	a817      	add	r0, sp, #92	; 0x5c
 800945e:	f001 fe3d 	bl	800b0dc <__match>
 8009462:	2800      	cmp	r0, #0
 8009464:	f43f aed2 	beq.w	800920c <_strtod_l+0xc4>
 8009468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	2b28      	cmp	r3, #40	; 0x28
 800946e:	d12d      	bne.n	80094cc <_strtod_l+0x384>
 8009470:	499a      	ldr	r1, [pc, #616]	; (80096dc <_strtod_l+0x594>)
 8009472:	aa1a      	add	r2, sp, #104	; 0x68
 8009474:	a817      	add	r0, sp, #92	; 0x5c
 8009476:	f001 fe45 	bl	800b104 <__hexnan>
 800947a:	2805      	cmp	r0, #5
 800947c:	d126      	bne.n	80094cc <_strtod_l+0x384>
 800947e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009480:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009484:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009488:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800948c:	e6a0      	b.n	80091d0 <_strtod_l+0x88>
 800948e:	210a      	movs	r1, #10
 8009490:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009494:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009498:	e7b9      	b.n	800940e <_strtod_l+0x2c6>
 800949a:	2a6e      	cmp	r2, #110	; 0x6e
 800949c:	e7db      	b.n	8009456 <_strtod_l+0x30e>
 800949e:	4990      	ldr	r1, [pc, #576]	; (80096e0 <_strtod_l+0x598>)
 80094a0:	a817      	add	r0, sp, #92	; 0x5c
 80094a2:	f001 fe1b 	bl	800b0dc <__match>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	f43f aeb0 	beq.w	800920c <_strtod_l+0xc4>
 80094ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094ae:	498d      	ldr	r1, [pc, #564]	; (80096e4 <_strtod_l+0x59c>)
 80094b0:	3b01      	subs	r3, #1
 80094b2:	a817      	add	r0, sp, #92	; 0x5c
 80094b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80094b6:	f001 fe11 	bl	800b0dc <__match>
 80094ba:	b910      	cbnz	r0, 80094c2 <_strtod_l+0x37a>
 80094bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094be:	3301      	adds	r3, #1
 80094c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80094c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80096f4 <_strtod_l+0x5ac>
 80094c6:	f04f 0a00 	mov.w	sl, #0
 80094ca:	e681      	b.n	80091d0 <_strtod_l+0x88>
 80094cc:	4886      	ldr	r0, [pc, #536]	; (80096e8 <_strtod_l+0x5a0>)
 80094ce:	f002 fde7 	bl	800c0a0 <nan>
 80094d2:	ec5b ab10 	vmov	sl, fp, d0
 80094d6:	e67b      	b.n	80091d0 <_strtod_l+0x88>
 80094d8:	9b05      	ldr	r3, [sp, #20]
 80094da:	9807      	ldr	r0, [sp, #28]
 80094dc:	1af3      	subs	r3, r6, r3
 80094de:	2f00      	cmp	r7, #0
 80094e0:	bf08      	it	eq
 80094e2:	462f      	moveq	r7, r5
 80094e4:	2d10      	cmp	r5, #16
 80094e6:	9306      	str	r3, [sp, #24]
 80094e8:	46a8      	mov	r8, r5
 80094ea:	bfa8      	it	ge
 80094ec:	f04f 0810 	movge.w	r8, #16
 80094f0:	f7f7 f810 	bl	8000514 <__aeabi_ui2d>
 80094f4:	2d09      	cmp	r5, #9
 80094f6:	4682      	mov	sl, r0
 80094f8:	468b      	mov	fp, r1
 80094fa:	dd13      	ble.n	8009524 <_strtod_l+0x3dc>
 80094fc:	4b7b      	ldr	r3, [pc, #492]	; (80096ec <_strtod_l+0x5a4>)
 80094fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009502:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009506:	f7f7 f87f 	bl	8000608 <__aeabi_dmul>
 800950a:	4682      	mov	sl, r0
 800950c:	4648      	mov	r0, r9
 800950e:	468b      	mov	fp, r1
 8009510:	f7f7 f800 	bl	8000514 <__aeabi_ui2d>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	4650      	mov	r0, sl
 800951a:	4659      	mov	r1, fp
 800951c:	f7f6 febe 	bl	800029c <__adddf3>
 8009520:	4682      	mov	sl, r0
 8009522:	468b      	mov	fp, r1
 8009524:	2d0f      	cmp	r5, #15
 8009526:	dc38      	bgt.n	800959a <_strtod_l+0x452>
 8009528:	9b06      	ldr	r3, [sp, #24]
 800952a:	2b00      	cmp	r3, #0
 800952c:	f43f ae50 	beq.w	80091d0 <_strtod_l+0x88>
 8009530:	dd24      	ble.n	800957c <_strtod_l+0x434>
 8009532:	2b16      	cmp	r3, #22
 8009534:	dc0b      	bgt.n	800954e <_strtod_l+0x406>
 8009536:	496d      	ldr	r1, [pc, #436]	; (80096ec <_strtod_l+0x5a4>)
 8009538:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800953c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009540:	4652      	mov	r2, sl
 8009542:	465b      	mov	r3, fp
 8009544:	f7f7 f860 	bl	8000608 <__aeabi_dmul>
 8009548:	4682      	mov	sl, r0
 800954a:	468b      	mov	fp, r1
 800954c:	e640      	b.n	80091d0 <_strtod_l+0x88>
 800954e:	9a06      	ldr	r2, [sp, #24]
 8009550:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009554:	4293      	cmp	r3, r2
 8009556:	db20      	blt.n	800959a <_strtod_l+0x452>
 8009558:	4c64      	ldr	r4, [pc, #400]	; (80096ec <_strtod_l+0x5a4>)
 800955a:	f1c5 050f 	rsb	r5, r5, #15
 800955e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009562:	4652      	mov	r2, sl
 8009564:	465b      	mov	r3, fp
 8009566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800956a:	f7f7 f84d 	bl	8000608 <__aeabi_dmul>
 800956e:	9b06      	ldr	r3, [sp, #24]
 8009570:	1b5d      	subs	r5, r3, r5
 8009572:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009576:	e9d4 2300 	ldrd	r2, r3, [r4]
 800957a:	e7e3      	b.n	8009544 <_strtod_l+0x3fc>
 800957c:	9b06      	ldr	r3, [sp, #24]
 800957e:	3316      	adds	r3, #22
 8009580:	db0b      	blt.n	800959a <_strtod_l+0x452>
 8009582:	9b05      	ldr	r3, [sp, #20]
 8009584:	1b9e      	subs	r6, r3, r6
 8009586:	4b59      	ldr	r3, [pc, #356]	; (80096ec <_strtod_l+0x5a4>)
 8009588:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800958c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009590:	4650      	mov	r0, sl
 8009592:	4659      	mov	r1, fp
 8009594:	f7f7 f962 	bl	800085c <__aeabi_ddiv>
 8009598:	e7d6      	b.n	8009548 <_strtod_l+0x400>
 800959a:	9b06      	ldr	r3, [sp, #24]
 800959c:	eba5 0808 	sub.w	r8, r5, r8
 80095a0:	4498      	add	r8, r3
 80095a2:	f1b8 0f00 	cmp.w	r8, #0
 80095a6:	dd74      	ble.n	8009692 <_strtod_l+0x54a>
 80095a8:	f018 030f 	ands.w	r3, r8, #15
 80095ac:	d00a      	beq.n	80095c4 <_strtod_l+0x47c>
 80095ae:	494f      	ldr	r1, [pc, #316]	; (80096ec <_strtod_l+0x5a4>)
 80095b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095b4:	4652      	mov	r2, sl
 80095b6:	465b      	mov	r3, fp
 80095b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095bc:	f7f7 f824 	bl	8000608 <__aeabi_dmul>
 80095c0:	4682      	mov	sl, r0
 80095c2:	468b      	mov	fp, r1
 80095c4:	f038 080f 	bics.w	r8, r8, #15
 80095c8:	d04f      	beq.n	800966a <_strtod_l+0x522>
 80095ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80095ce:	dd22      	ble.n	8009616 <_strtod_l+0x4ce>
 80095d0:	2500      	movs	r5, #0
 80095d2:	462e      	mov	r6, r5
 80095d4:	9507      	str	r5, [sp, #28]
 80095d6:	9505      	str	r5, [sp, #20]
 80095d8:	2322      	movs	r3, #34	; 0x22
 80095da:	f8df b118 	ldr.w	fp, [pc, #280]	; 80096f4 <_strtod_l+0x5ac>
 80095de:	6023      	str	r3, [r4, #0]
 80095e0:	f04f 0a00 	mov.w	sl, #0
 80095e4:	9b07      	ldr	r3, [sp, #28]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f43f adf2 	beq.w	80091d0 <_strtod_l+0x88>
 80095ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80095ee:	4620      	mov	r0, r4
 80095f0:	f001 fe82 	bl	800b2f8 <_Bfree>
 80095f4:	9905      	ldr	r1, [sp, #20]
 80095f6:	4620      	mov	r0, r4
 80095f8:	f001 fe7e 	bl	800b2f8 <_Bfree>
 80095fc:	4631      	mov	r1, r6
 80095fe:	4620      	mov	r0, r4
 8009600:	f001 fe7a 	bl	800b2f8 <_Bfree>
 8009604:	9907      	ldr	r1, [sp, #28]
 8009606:	4620      	mov	r0, r4
 8009608:	f001 fe76 	bl	800b2f8 <_Bfree>
 800960c:	4629      	mov	r1, r5
 800960e:	4620      	mov	r0, r4
 8009610:	f001 fe72 	bl	800b2f8 <_Bfree>
 8009614:	e5dc      	b.n	80091d0 <_strtod_l+0x88>
 8009616:	4b36      	ldr	r3, [pc, #216]	; (80096f0 <_strtod_l+0x5a8>)
 8009618:	9304      	str	r3, [sp, #16]
 800961a:	2300      	movs	r3, #0
 800961c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009620:	4650      	mov	r0, sl
 8009622:	4659      	mov	r1, fp
 8009624:	4699      	mov	r9, r3
 8009626:	f1b8 0f01 	cmp.w	r8, #1
 800962a:	dc21      	bgt.n	8009670 <_strtod_l+0x528>
 800962c:	b10b      	cbz	r3, 8009632 <_strtod_l+0x4ea>
 800962e:	4682      	mov	sl, r0
 8009630:	468b      	mov	fp, r1
 8009632:	4b2f      	ldr	r3, [pc, #188]	; (80096f0 <_strtod_l+0x5a8>)
 8009634:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009638:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800963c:	4652      	mov	r2, sl
 800963e:	465b      	mov	r3, fp
 8009640:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009644:	f7f6 ffe0 	bl	8000608 <__aeabi_dmul>
 8009648:	4b2a      	ldr	r3, [pc, #168]	; (80096f4 <_strtod_l+0x5ac>)
 800964a:	460a      	mov	r2, r1
 800964c:	400b      	ands	r3, r1
 800964e:	492a      	ldr	r1, [pc, #168]	; (80096f8 <_strtod_l+0x5b0>)
 8009650:	428b      	cmp	r3, r1
 8009652:	4682      	mov	sl, r0
 8009654:	d8bc      	bhi.n	80095d0 <_strtod_l+0x488>
 8009656:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800965a:	428b      	cmp	r3, r1
 800965c:	bf86      	itte	hi
 800965e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80096fc <_strtod_l+0x5b4>
 8009662:	f04f 3aff 	movhi.w	sl, #4294967295
 8009666:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800966a:	2300      	movs	r3, #0
 800966c:	9304      	str	r3, [sp, #16]
 800966e:	e084      	b.n	800977a <_strtod_l+0x632>
 8009670:	f018 0f01 	tst.w	r8, #1
 8009674:	d005      	beq.n	8009682 <_strtod_l+0x53a>
 8009676:	9b04      	ldr	r3, [sp, #16]
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	f7f6 ffc4 	bl	8000608 <__aeabi_dmul>
 8009680:	2301      	movs	r3, #1
 8009682:	9a04      	ldr	r2, [sp, #16]
 8009684:	3208      	adds	r2, #8
 8009686:	f109 0901 	add.w	r9, r9, #1
 800968a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800968e:	9204      	str	r2, [sp, #16]
 8009690:	e7c9      	b.n	8009626 <_strtod_l+0x4de>
 8009692:	d0ea      	beq.n	800966a <_strtod_l+0x522>
 8009694:	f1c8 0800 	rsb	r8, r8, #0
 8009698:	f018 020f 	ands.w	r2, r8, #15
 800969c:	d00a      	beq.n	80096b4 <_strtod_l+0x56c>
 800969e:	4b13      	ldr	r3, [pc, #76]	; (80096ec <_strtod_l+0x5a4>)
 80096a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096a4:	4650      	mov	r0, sl
 80096a6:	4659      	mov	r1, fp
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f7f7 f8d6 	bl	800085c <__aeabi_ddiv>
 80096b0:	4682      	mov	sl, r0
 80096b2:	468b      	mov	fp, r1
 80096b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80096b8:	d0d7      	beq.n	800966a <_strtod_l+0x522>
 80096ba:	f1b8 0f1f 	cmp.w	r8, #31
 80096be:	dd1f      	ble.n	8009700 <_strtod_l+0x5b8>
 80096c0:	2500      	movs	r5, #0
 80096c2:	462e      	mov	r6, r5
 80096c4:	9507      	str	r5, [sp, #28]
 80096c6:	9505      	str	r5, [sp, #20]
 80096c8:	2322      	movs	r3, #34	; 0x22
 80096ca:	f04f 0a00 	mov.w	sl, #0
 80096ce:	f04f 0b00 	mov.w	fp, #0
 80096d2:	6023      	str	r3, [r4, #0]
 80096d4:	e786      	b.n	80095e4 <_strtod_l+0x49c>
 80096d6:	bf00      	nop
 80096d8:	0800cd59 	.word	0x0800cd59
 80096dc:	0800cd9c 	.word	0x0800cd9c
 80096e0:	0800cd51 	.word	0x0800cd51
 80096e4:	0800cedc 	.word	0x0800cedc
 80096e8:	0800d188 	.word	0x0800d188
 80096ec:	0800d068 	.word	0x0800d068
 80096f0:	0800d040 	.word	0x0800d040
 80096f4:	7ff00000 	.word	0x7ff00000
 80096f8:	7ca00000 	.word	0x7ca00000
 80096fc:	7fefffff 	.word	0x7fefffff
 8009700:	f018 0310 	ands.w	r3, r8, #16
 8009704:	bf18      	it	ne
 8009706:	236a      	movne	r3, #106	; 0x6a
 8009708:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009ab8 <_strtod_l+0x970>
 800970c:	9304      	str	r3, [sp, #16]
 800970e:	4650      	mov	r0, sl
 8009710:	4659      	mov	r1, fp
 8009712:	2300      	movs	r3, #0
 8009714:	f018 0f01 	tst.w	r8, #1
 8009718:	d004      	beq.n	8009724 <_strtod_l+0x5dc>
 800971a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800971e:	f7f6 ff73 	bl	8000608 <__aeabi_dmul>
 8009722:	2301      	movs	r3, #1
 8009724:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009728:	f109 0908 	add.w	r9, r9, #8
 800972c:	d1f2      	bne.n	8009714 <_strtod_l+0x5cc>
 800972e:	b10b      	cbz	r3, 8009734 <_strtod_l+0x5ec>
 8009730:	4682      	mov	sl, r0
 8009732:	468b      	mov	fp, r1
 8009734:	9b04      	ldr	r3, [sp, #16]
 8009736:	b1c3      	cbz	r3, 800976a <_strtod_l+0x622>
 8009738:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800973c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009740:	2b00      	cmp	r3, #0
 8009742:	4659      	mov	r1, fp
 8009744:	dd11      	ble.n	800976a <_strtod_l+0x622>
 8009746:	2b1f      	cmp	r3, #31
 8009748:	f340 8124 	ble.w	8009994 <_strtod_l+0x84c>
 800974c:	2b34      	cmp	r3, #52	; 0x34
 800974e:	bfde      	ittt	le
 8009750:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009754:	f04f 33ff 	movle.w	r3, #4294967295
 8009758:	fa03 f202 	lslle.w	r2, r3, r2
 800975c:	f04f 0a00 	mov.w	sl, #0
 8009760:	bfcc      	ite	gt
 8009762:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009766:	ea02 0b01 	andle.w	fp, r2, r1
 800976a:	2200      	movs	r2, #0
 800976c:	2300      	movs	r3, #0
 800976e:	4650      	mov	r0, sl
 8009770:	4659      	mov	r1, fp
 8009772:	f7f7 f9b1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009776:	2800      	cmp	r0, #0
 8009778:	d1a2      	bne.n	80096c0 <_strtod_l+0x578>
 800977a:	9b07      	ldr	r3, [sp, #28]
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	9908      	ldr	r1, [sp, #32]
 8009780:	462b      	mov	r3, r5
 8009782:	463a      	mov	r2, r7
 8009784:	4620      	mov	r0, r4
 8009786:	f001 fe1f 	bl	800b3c8 <__s2b>
 800978a:	9007      	str	r0, [sp, #28]
 800978c:	2800      	cmp	r0, #0
 800978e:	f43f af1f 	beq.w	80095d0 <_strtod_l+0x488>
 8009792:	9b05      	ldr	r3, [sp, #20]
 8009794:	1b9e      	subs	r6, r3, r6
 8009796:	9b06      	ldr	r3, [sp, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	bfb4      	ite	lt
 800979c:	4633      	movlt	r3, r6
 800979e:	2300      	movge	r3, #0
 80097a0:	930c      	str	r3, [sp, #48]	; 0x30
 80097a2:	9b06      	ldr	r3, [sp, #24]
 80097a4:	2500      	movs	r5, #0
 80097a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80097aa:	9312      	str	r3, [sp, #72]	; 0x48
 80097ac:	462e      	mov	r6, r5
 80097ae:	9b07      	ldr	r3, [sp, #28]
 80097b0:	4620      	mov	r0, r4
 80097b2:	6859      	ldr	r1, [r3, #4]
 80097b4:	f001 fd60 	bl	800b278 <_Balloc>
 80097b8:	9005      	str	r0, [sp, #20]
 80097ba:	2800      	cmp	r0, #0
 80097bc:	f43f af0c 	beq.w	80095d8 <_strtod_l+0x490>
 80097c0:	9b07      	ldr	r3, [sp, #28]
 80097c2:	691a      	ldr	r2, [r3, #16]
 80097c4:	3202      	adds	r2, #2
 80097c6:	f103 010c 	add.w	r1, r3, #12
 80097ca:	0092      	lsls	r2, r2, #2
 80097cc:	300c      	adds	r0, #12
 80097ce:	f7fe fde7 	bl	80083a0 <memcpy>
 80097d2:	ec4b ab10 	vmov	d0, sl, fp
 80097d6:	aa1a      	add	r2, sp, #104	; 0x68
 80097d8:	a919      	add	r1, sp, #100	; 0x64
 80097da:	4620      	mov	r0, r4
 80097dc:	f002 f93a 	bl	800ba54 <__d2b>
 80097e0:	ec4b ab18 	vmov	d8, sl, fp
 80097e4:	9018      	str	r0, [sp, #96]	; 0x60
 80097e6:	2800      	cmp	r0, #0
 80097e8:	f43f aef6 	beq.w	80095d8 <_strtod_l+0x490>
 80097ec:	2101      	movs	r1, #1
 80097ee:	4620      	mov	r0, r4
 80097f0:	f001 fe84 	bl	800b4fc <__i2b>
 80097f4:	4606      	mov	r6, r0
 80097f6:	2800      	cmp	r0, #0
 80097f8:	f43f aeee 	beq.w	80095d8 <_strtod_l+0x490>
 80097fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097fe:	9904      	ldr	r1, [sp, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	bfab      	itete	ge
 8009804:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009806:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009808:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800980a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800980e:	bfac      	ite	ge
 8009810:	eb03 0902 	addge.w	r9, r3, r2
 8009814:	1ad7      	sublt	r7, r2, r3
 8009816:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009818:	eba3 0801 	sub.w	r8, r3, r1
 800981c:	4490      	add	r8, r2
 800981e:	4ba1      	ldr	r3, [pc, #644]	; (8009aa4 <_strtod_l+0x95c>)
 8009820:	f108 38ff 	add.w	r8, r8, #4294967295
 8009824:	4598      	cmp	r8, r3
 8009826:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800982a:	f280 80c7 	bge.w	80099bc <_strtod_l+0x874>
 800982e:	eba3 0308 	sub.w	r3, r3, r8
 8009832:	2b1f      	cmp	r3, #31
 8009834:	eba2 0203 	sub.w	r2, r2, r3
 8009838:	f04f 0101 	mov.w	r1, #1
 800983c:	f300 80b1 	bgt.w	80099a2 <_strtod_l+0x85a>
 8009840:	fa01 f303 	lsl.w	r3, r1, r3
 8009844:	930d      	str	r3, [sp, #52]	; 0x34
 8009846:	2300      	movs	r3, #0
 8009848:	9308      	str	r3, [sp, #32]
 800984a:	eb09 0802 	add.w	r8, r9, r2
 800984e:	9b04      	ldr	r3, [sp, #16]
 8009850:	45c1      	cmp	r9, r8
 8009852:	4417      	add	r7, r2
 8009854:	441f      	add	r7, r3
 8009856:	464b      	mov	r3, r9
 8009858:	bfa8      	it	ge
 800985a:	4643      	movge	r3, r8
 800985c:	42bb      	cmp	r3, r7
 800985e:	bfa8      	it	ge
 8009860:	463b      	movge	r3, r7
 8009862:	2b00      	cmp	r3, #0
 8009864:	bfc2      	ittt	gt
 8009866:	eba8 0803 	subgt.w	r8, r8, r3
 800986a:	1aff      	subgt	r7, r7, r3
 800986c:	eba9 0903 	subgt.w	r9, r9, r3
 8009870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009872:	2b00      	cmp	r3, #0
 8009874:	dd17      	ble.n	80098a6 <_strtod_l+0x75e>
 8009876:	4631      	mov	r1, r6
 8009878:	461a      	mov	r2, r3
 800987a:	4620      	mov	r0, r4
 800987c:	f001 fefe 	bl	800b67c <__pow5mult>
 8009880:	4606      	mov	r6, r0
 8009882:	2800      	cmp	r0, #0
 8009884:	f43f aea8 	beq.w	80095d8 <_strtod_l+0x490>
 8009888:	4601      	mov	r1, r0
 800988a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800988c:	4620      	mov	r0, r4
 800988e:	f001 fe4b 	bl	800b528 <__multiply>
 8009892:	900b      	str	r0, [sp, #44]	; 0x2c
 8009894:	2800      	cmp	r0, #0
 8009896:	f43f ae9f 	beq.w	80095d8 <_strtod_l+0x490>
 800989a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800989c:	4620      	mov	r0, r4
 800989e:	f001 fd2b 	bl	800b2f8 <_Bfree>
 80098a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098a4:	9318      	str	r3, [sp, #96]	; 0x60
 80098a6:	f1b8 0f00 	cmp.w	r8, #0
 80098aa:	f300 808c 	bgt.w	80099c6 <_strtod_l+0x87e>
 80098ae:	9b06      	ldr	r3, [sp, #24]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	dd08      	ble.n	80098c6 <_strtod_l+0x77e>
 80098b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098b6:	9905      	ldr	r1, [sp, #20]
 80098b8:	4620      	mov	r0, r4
 80098ba:	f001 fedf 	bl	800b67c <__pow5mult>
 80098be:	9005      	str	r0, [sp, #20]
 80098c0:	2800      	cmp	r0, #0
 80098c2:	f43f ae89 	beq.w	80095d8 <_strtod_l+0x490>
 80098c6:	2f00      	cmp	r7, #0
 80098c8:	dd08      	ble.n	80098dc <_strtod_l+0x794>
 80098ca:	9905      	ldr	r1, [sp, #20]
 80098cc:	463a      	mov	r2, r7
 80098ce:	4620      	mov	r0, r4
 80098d0:	f001 ff2e 	bl	800b730 <__lshift>
 80098d4:	9005      	str	r0, [sp, #20]
 80098d6:	2800      	cmp	r0, #0
 80098d8:	f43f ae7e 	beq.w	80095d8 <_strtod_l+0x490>
 80098dc:	f1b9 0f00 	cmp.w	r9, #0
 80098e0:	dd08      	ble.n	80098f4 <_strtod_l+0x7ac>
 80098e2:	4631      	mov	r1, r6
 80098e4:	464a      	mov	r2, r9
 80098e6:	4620      	mov	r0, r4
 80098e8:	f001 ff22 	bl	800b730 <__lshift>
 80098ec:	4606      	mov	r6, r0
 80098ee:	2800      	cmp	r0, #0
 80098f0:	f43f ae72 	beq.w	80095d8 <_strtod_l+0x490>
 80098f4:	9a05      	ldr	r2, [sp, #20]
 80098f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80098f8:	4620      	mov	r0, r4
 80098fa:	f001 ffa5 	bl	800b848 <__mdiff>
 80098fe:	4605      	mov	r5, r0
 8009900:	2800      	cmp	r0, #0
 8009902:	f43f ae69 	beq.w	80095d8 <_strtod_l+0x490>
 8009906:	68c3      	ldr	r3, [r0, #12]
 8009908:	930b      	str	r3, [sp, #44]	; 0x2c
 800990a:	2300      	movs	r3, #0
 800990c:	60c3      	str	r3, [r0, #12]
 800990e:	4631      	mov	r1, r6
 8009910:	f001 ff7e 	bl	800b810 <__mcmp>
 8009914:	2800      	cmp	r0, #0
 8009916:	da60      	bge.n	80099da <_strtod_l+0x892>
 8009918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800991a:	ea53 030a 	orrs.w	r3, r3, sl
 800991e:	f040 8082 	bne.w	8009a26 <_strtod_l+0x8de>
 8009922:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009926:	2b00      	cmp	r3, #0
 8009928:	d17d      	bne.n	8009a26 <_strtod_l+0x8de>
 800992a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800992e:	0d1b      	lsrs	r3, r3, #20
 8009930:	051b      	lsls	r3, r3, #20
 8009932:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009936:	d976      	bls.n	8009a26 <_strtod_l+0x8de>
 8009938:	696b      	ldr	r3, [r5, #20]
 800993a:	b913      	cbnz	r3, 8009942 <_strtod_l+0x7fa>
 800993c:	692b      	ldr	r3, [r5, #16]
 800993e:	2b01      	cmp	r3, #1
 8009940:	dd71      	ble.n	8009a26 <_strtod_l+0x8de>
 8009942:	4629      	mov	r1, r5
 8009944:	2201      	movs	r2, #1
 8009946:	4620      	mov	r0, r4
 8009948:	f001 fef2 	bl	800b730 <__lshift>
 800994c:	4631      	mov	r1, r6
 800994e:	4605      	mov	r5, r0
 8009950:	f001 ff5e 	bl	800b810 <__mcmp>
 8009954:	2800      	cmp	r0, #0
 8009956:	dd66      	ble.n	8009a26 <_strtod_l+0x8de>
 8009958:	9904      	ldr	r1, [sp, #16]
 800995a:	4a53      	ldr	r2, [pc, #332]	; (8009aa8 <_strtod_l+0x960>)
 800995c:	465b      	mov	r3, fp
 800995e:	2900      	cmp	r1, #0
 8009960:	f000 8081 	beq.w	8009a66 <_strtod_l+0x91e>
 8009964:	ea02 010b 	and.w	r1, r2, fp
 8009968:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800996c:	dc7b      	bgt.n	8009a66 <_strtod_l+0x91e>
 800996e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009972:	f77f aea9 	ble.w	80096c8 <_strtod_l+0x580>
 8009976:	4b4d      	ldr	r3, [pc, #308]	; (8009aac <_strtod_l+0x964>)
 8009978:	4650      	mov	r0, sl
 800997a:	4659      	mov	r1, fp
 800997c:	2200      	movs	r2, #0
 800997e:	f7f6 fe43 	bl	8000608 <__aeabi_dmul>
 8009982:	460b      	mov	r3, r1
 8009984:	4303      	orrs	r3, r0
 8009986:	bf08      	it	eq
 8009988:	2322      	moveq	r3, #34	; 0x22
 800998a:	4682      	mov	sl, r0
 800998c:	468b      	mov	fp, r1
 800998e:	bf08      	it	eq
 8009990:	6023      	streq	r3, [r4, #0]
 8009992:	e62b      	b.n	80095ec <_strtod_l+0x4a4>
 8009994:	f04f 32ff 	mov.w	r2, #4294967295
 8009998:	fa02 f303 	lsl.w	r3, r2, r3
 800999c:	ea03 0a0a 	and.w	sl, r3, sl
 80099a0:	e6e3      	b.n	800976a <_strtod_l+0x622>
 80099a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80099a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80099aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80099ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80099b2:	fa01 f308 	lsl.w	r3, r1, r8
 80099b6:	9308      	str	r3, [sp, #32]
 80099b8:	910d      	str	r1, [sp, #52]	; 0x34
 80099ba:	e746      	b.n	800984a <_strtod_l+0x702>
 80099bc:	2300      	movs	r3, #0
 80099be:	9308      	str	r3, [sp, #32]
 80099c0:	2301      	movs	r3, #1
 80099c2:	930d      	str	r3, [sp, #52]	; 0x34
 80099c4:	e741      	b.n	800984a <_strtod_l+0x702>
 80099c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80099c8:	4642      	mov	r2, r8
 80099ca:	4620      	mov	r0, r4
 80099cc:	f001 feb0 	bl	800b730 <__lshift>
 80099d0:	9018      	str	r0, [sp, #96]	; 0x60
 80099d2:	2800      	cmp	r0, #0
 80099d4:	f47f af6b 	bne.w	80098ae <_strtod_l+0x766>
 80099d8:	e5fe      	b.n	80095d8 <_strtod_l+0x490>
 80099da:	465f      	mov	r7, fp
 80099dc:	d16e      	bne.n	8009abc <_strtod_l+0x974>
 80099de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099e4:	b342      	cbz	r2, 8009a38 <_strtod_l+0x8f0>
 80099e6:	4a32      	ldr	r2, [pc, #200]	; (8009ab0 <_strtod_l+0x968>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d128      	bne.n	8009a3e <_strtod_l+0x8f6>
 80099ec:	9b04      	ldr	r3, [sp, #16]
 80099ee:	4651      	mov	r1, sl
 80099f0:	b1eb      	cbz	r3, 8009a2e <_strtod_l+0x8e6>
 80099f2:	4b2d      	ldr	r3, [pc, #180]	; (8009aa8 <_strtod_l+0x960>)
 80099f4:	403b      	ands	r3, r7
 80099f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80099fa:	f04f 32ff 	mov.w	r2, #4294967295
 80099fe:	d819      	bhi.n	8009a34 <_strtod_l+0x8ec>
 8009a00:	0d1b      	lsrs	r3, r3, #20
 8009a02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a06:	fa02 f303 	lsl.w	r3, r2, r3
 8009a0a:	4299      	cmp	r1, r3
 8009a0c:	d117      	bne.n	8009a3e <_strtod_l+0x8f6>
 8009a0e:	4b29      	ldr	r3, [pc, #164]	; (8009ab4 <_strtod_l+0x96c>)
 8009a10:	429f      	cmp	r7, r3
 8009a12:	d102      	bne.n	8009a1a <_strtod_l+0x8d2>
 8009a14:	3101      	adds	r1, #1
 8009a16:	f43f addf 	beq.w	80095d8 <_strtod_l+0x490>
 8009a1a:	4b23      	ldr	r3, [pc, #140]	; (8009aa8 <_strtod_l+0x960>)
 8009a1c:	403b      	ands	r3, r7
 8009a1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009a22:	f04f 0a00 	mov.w	sl, #0
 8009a26:	9b04      	ldr	r3, [sp, #16]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1a4      	bne.n	8009976 <_strtod_l+0x82e>
 8009a2c:	e5de      	b.n	80095ec <_strtod_l+0x4a4>
 8009a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a32:	e7ea      	b.n	8009a0a <_strtod_l+0x8c2>
 8009a34:	4613      	mov	r3, r2
 8009a36:	e7e8      	b.n	8009a0a <_strtod_l+0x8c2>
 8009a38:	ea53 030a 	orrs.w	r3, r3, sl
 8009a3c:	d08c      	beq.n	8009958 <_strtod_l+0x810>
 8009a3e:	9b08      	ldr	r3, [sp, #32]
 8009a40:	b1db      	cbz	r3, 8009a7a <_strtod_l+0x932>
 8009a42:	423b      	tst	r3, r7
 8009a44:	d0ef      	beq.n	8009a26 <_strtod_l+0x8de>
 8009a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a48:	9a04      	ldr	r2, [sp, #16]
 8009a4a:	4650      	mov	r0, sl
 8009a4c:	4659      	mov	r1, fp
 8009a4e:	b1c3      	cbz	r3, 8009a82 <_strtod_l+0x93a>
 8009a50:	f7ff fb5c 	bl	800910c <sulp>
 8009a54:	4602      	mov	r2, r0
 8009a56:	460b      	mov	r3, r1
 8009a58:	ec51 0b18 	vmov	r0, r1, d8
 8009a5c:	f7f6 fc1e 	bl	800029c <__adddf3>
 8009a60:	4682      	mov	sl, r0
 8009a62:	468b      	mov	fp, r1
 8009a64:	e7df      	b.n	8009a26 <_strtod_l+0x8de>
 8009a66:	4013      	ands	r3, r2
 8009a68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009a6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a74:	f04f 3aff 	mov.w	sl, #4294967295
 8009a78:	e7d5      	b.n	8009a26 <_strtod_l+0x8de>
 8009a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a7c:	ea13 0f0a 	tst.w	r3, sl
 8009a80:	e7e0      	b.n	8009a44 <_strtod_l+0x8fc>
 8009a82:	f7ff fb43 	bl	800910c <sulp>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	ec51 0b18 	vmov	r0, r1, d8
 8009a8e:	f7f6 fc03 	bl	8000298 <__aeabi_dsub>
 8009a92:	2200      	movs	r2, #0
 8009a94:	2300      	movs	r3, #0
 8009a96:	4682      	mov	sl, r0
 8009a98:	468b      	mov	fp, r1
 8009a9a:	f7f7 f81d 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d0c1      	beq.n	8009a26 <_strtod_l+0x8de>
 8009aa2:	e611      	b.n	80096c8 <_strtod_l+0x580>
 8009aa4:	fffffc02 	.word	0xfffffc02
 8009aa8:	7ff00000 	.word	0x7ff00000
 8009aac:	39500000 	.word	0x39500000
 8009ab0:	000fffff 	.word	0x000fffff
 8009ab4:	7fefffff 	.word	0x7fefffff
 8009ab8:	0800cdb0 	.word	0x0800cdb0
 8009abc:	4631      	mov	r1, r6
 8009abe:	4628      	mov	r0, r5
 8009ac0:	f002 f824 	bl	800bb0c <__ratio>
 8009ac4:	ec59 8b10 	vmov	r8, r9, d0
 8009ac8:	ee10 0a10 	vmov	r0, s0
 8009acc:	2200      	movs	r2, #0
 8009ace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	f7f7 f814 	bl	8000b00 <__aeabi_dcmple>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d07a      	beq.n	8009bd2 <_strtod_l+0xa8a>
 8009adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d04a      	beq.n	8009b78 <_strtod_l+0xa30>
 8009ae2:	4b95      	ldr	r3, [pc, #596]	; (8009d38 <_strtod_l+0xbf0>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009aea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009d38 <_strtod_l+0xbf0>
 8009aee:	f04f 0800 	mov.w	r8, #0
 8009af2:	4b92      	ldr	r3, [pc, #584]	; (8009d3c <_strtod_l+0xbf4>)
 8009af4:	403b      	ands	r3, r7
 8009af6:	930d      	str	r3, [sp, #52]	; 0x34
 8009af8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009afa:	4b91      	ldr	r3, [pc, #580]	; (8009d40 <_strtod_l+0xbf8>)
 8009afc:	429a      	cmp	r2, r3
 8009afe:	f040 80b0 	bne.w	8009c62 <_strtod_l+0xb1a>
 8009b02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b06:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009b0a:	ec4b ab10 	vmov	d0, sl, fp
 8009b0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b12:	f001 ff23 	bl	800b95c <__ulp>
 8009b16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b1a:	ec53 2b10 	vmov	r2, r3, d0
 8009b1e:	f7f6 fd73 	bl	8000608 <__aeabi_dmul>
 8009b22:	4652      	mov	r2, sl
 8009b24:	465b      	mov	r3, fp
 8009b26:	f7f6 fbb9 	bl	800029c <__adddf3>
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4983      	ldr	r1, [pc, #524]	; (8009d3c <_strtod_l+0xbf4>)
 8009b2e:	4a85      	ldr	r2, [pc, #532]	; (8009d44 <_strtod_l+0xbfc>)
 8009b30:	4019      	ands	r1, r3
 8009b32:	4291      	cmp	r1, r2
 8009b34:	4682      	mov	sl, r0
 8009b36:	d960      	bls.n	8009bfa <_strtod_l+0xab2>
 8009b38:	ee18 3a90 	vmov	r3, s17
 8009b3c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d104      	bne.n	8009b4e <_strtod_l+0xa06>
 8009b44:	ee18 3a10 	vmov	r3, s16
 8009b48:	3301      	adds	r3, #1
 8009b4a:	f43f ad45 	beq.w	80095d8 <_strtod_l+0x490>
 8009b4e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009d50 <_strtod_l+0xc08>
 8009b52:	f04f 3aff 	mov.w	sl, #4294967295
 8009b56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f001 fbcd 	bl	800b2f8 <_Bfree>
 8009b5e:	9905      	ldr	r1, [sp, #20]
 8009b60:	4620      	mov	r0, r4
 8009b62:	f001 fbc9 	bl	800b2f8 <_Bfree>
 8009b66:	4631      	mov	r1, r6
 8009b68:	4620      	mov	r0, r4
 8009b6a:	f001 fbc5 	bl	800b2f8 <_Bfree>
 8009b6e:	4629      	mov	r1, r5
 8009b70:	4620      	mov	r0, r4
 8009b72:	f001 fbc1 	bl	800b2f8 <_Bfree>
 8009b76:	e61a      	b.n	80097ae <_strtod_l+0x666>
 8009b78:	f1ba 0f00 	cmp.w	sl, #0
 8009b7c:	d11b      	bne.n	8009bb6 <_strtod_l+0xa6e>
 8009b7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b82:	b9f3      	cbnz	r3, 8009bc2 <_strtod_l+0xa7a>
 8009b84:	4b6c      	ldr	r3, [pc, #432]	; (8009d38 <_strtod_l+0xbf0>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	4640      	mov	r0, r8
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	f7f6 ffae 	bl	8000aec <__aeabi_dcmplt>
 8009b90:	b9d0      	cbnz	r0, 8009bc8 <_strtod_l+0xa80>
 8009b92:	4640      	mov	r0, r8
 8009b94:	4649      	mov	r1, r9
 8009b96:	4b6c      	ldr	r3, [pc, #432]	; (8009d48 <_strtod_l+0xc00>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f7f6 fd35 	bl	8000608 <__aeabi_dmul>
 8009b9e:	4680      	mov	r8, r0
 8009ba0:	4689      	mov	r9, r1
 8009ba2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009ba6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009baa:	9315      	str	r3, [sp, #84]	; 0x54
 8009bac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009bb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009bb4:	e79d      	b.n	8009af2 <_strtod_l+0x9aa>
 8009bb6:	f1ba 0f01 	cmp.w	sl, #1
 8009bba:	d102      	bne.n	8009bc2 <_strtod_l+0xa7a>
 8009bbc:	2f00      	cmp	r7, #0
 8009bbe:	f43f ad83 	beq.w	80096c8 <_strtod_l+0x580>
 8009bc2:	4b62      	ldr	r3, [pc, #392]	; (8009d4c <_strtod_l+0xc04>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	e78e      	b.n	8009ae6 <_strtod_l+0x99e>
 8009bc8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009d48 <_strtod_l+0xc00>
 8009bcc:	f04f 0800 	mov.w	r8, #0
 8009bd0:	e7e7      	b.n	8009ba2 <_strtod_l+0xa5a>
 8009bd2:	4b5d      	ldr	r3, [pc, #372]	; (8009d48 <_strtod_l+0xc00>)
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f7f6 fd15 	bl	8000608 <__aeabi_dmul>
 8009bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009be0:	4680      	mov	r8, r0
 8009be2:	4689      	mov	r9, r1
 8009be4:	b933      	cbnz	r3, 8009bf4 <_strtod_l+0xaac>
 8009be6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bea:	900e      	str	r0, [sp, #56]	; 0x38
 8009bec:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009bf2:	e7dd      	b.n	8009bb0 <_strtod_l+0xa68>
 8009bf4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009bf8:	e7f9      	b.n	8009bee <_strtod_l+0xaa6>
 8009bfa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009bfe:	9b04      	ldr	r3, [sp, #16]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1a8      	bne.n	8009b56 <_strtod_l+0xa0e>
 8009c04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c0a:	0d1b      	lsrs	r3, r3, #20
 8009c0c:	051b      	lsls	r3, r3, #20
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d1a1      	bne.n	8009b56 <_strtod_l+0xa0e>
 8009c12:	4640      	mov	r0, r8
 8009c14:	4649      	mov	r1, r9
 8009c16:	f7f7 f8a7 	bl	8000d68 <__aeabi_d2lz>
 8009c1a:	f7f6 fcc7 	bl	80005ac <__aeabi_l2d>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	4640      	mov	r0, r8
 8009c24:	4649      	mov	r1, r9
 8009c26:	f7f6 fb37 	bl	8000298 <__aeabi_dsub>
 8009c2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c30:	ea43 030a 	orr.w	r3, r3, sl
 8009c34:	4313      	orrs	r3, r2
 8009c36:	4680      	mov	r8, r0
 8009c38:	4689      	mov	r9, r1
 8009c3a:	d055      	beq.n	8009ce8 <_strtod_l+0xba0>
 8009c3c:	a336      	add	r3, pc, #216	; (adr r3, 8009d18 <_strtod_l+0xbd0>)
 8009c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c42:	f7f6 ff53 	bl	8000aec <__aeabi_dcmplt>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	f47f acd0 	bne.w	80095ec <_strtod_l+0x4a4>
 8009c4c:	a334      	add	r3, pc, #208	; (adr r3, 8009d20 <_strtod_l+0xbd8>)
 8009c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c52:	4640      	mov	r0, r8
 8009c54:	4649      	mov	r1, r9
 8009c56:	f7f6 ff67 	bl	8000b28 <__aeabi_dcmpgt>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	f43f af7b 	beq.w	8009b56 <_strtod_l+0xa0e>
 8009c60:	e4c4      	b.n	80095ec <_strtod_l+0x4a4>
 8009c62:	9b04      	ldr	r3, [sp, #16]
 8009c64:	b333      	cbz	r3, 8009cb4 <_strtod_l+0xb6c>
 8009c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c68:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c6c:	d822      	bhi.n	8009cb4 <_strtod_l+0xb6c>
 8009c6e:	a32e      	add	r3, pc, #184	; (adr r3, 8009d28 <_strtod_l+0xbe0>)
 8009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c74:	4640      	mov	r0, r8
 8009c76:	4649      	mov	r1, r9
 8009c78:	f7f6 ff42 	bl	8000b00 <__aeabi_dcmple>
 8009c7c:	b1a0      	cbz	r0, 8009ca8 <_strtod_l+0xb60>
 8009c7e:	4649      	mov	r1, r9
 8009c80:	4640      	mov	r0, r8
 8009c82:	f7f6 ff99 	bl	8000bb8 <__aeabi_d2uiz>
 8009c86:	2801      	cmp	r0, #1
 8009c88:	bf38      	it	cc
 8009c8a:	2001      	movcc	r0, #1
 8009c8c:	f7f6 fc42 	bl	8000514 <__aeabi_ui2d>
 8009c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c92:	4680      	mov	r8, r0
 8009c94:	4689      	mov	r9, r1
 8009c96:	bb23      	cbnz	r3, 8009ce2 <_strtod_l+0xb9a>
 8009c98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c9c:	9010      	str	r0, [sp, #64]	; 0x40
 8009c9e:	9311      	str	r3, [sp, #68]	; 0x44
 8009ca0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ca4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009caa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009cb0:	1a9b      	subs	r3, r3, r2
 8009cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009cb8:	eeb0 0a48 	vmov.f32	s0, s16
 8009cbc:	eef0 0a68 	vmov.f32	s1, s17
 8009cc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009cc4:	f001 fe4a 	bl	800b95c <__ulp>
 8009cc8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ccc:	ec53 2b10 	vmov	r2, r3, d0
 8009cd0:	f7f6 fc9a 	bl	8000608 <__aeabi_dmul>
 8009cd4:	ec53 2b18 	vmov	r2, r3, d8
 8009cd8:	f7f6 fae0 	bl	800029c <__adddf3>
 8009cdc:	4682      	mov	sl, r0
 8009cde:	468b      	mov	fp, r1
 8009ce0:	e78d      	b.n	8009bfe <_strtod_l+0xab6>
 8009ce2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009ce6:	e7db      	b.n	8009ca0 <_strtod_l+0xb58>
 8009ce8:	a311      	add	r3, pc, #68	; (adr r3, 8009d30 <_strtod_l+0xbe8>)
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	f7f6 fefd 	bl	8000aec <__aeabi_dcmplt>
 8009cf2:	e7b2      	b.n	8009c5a <_strtod_l+0xb12>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8009cf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009cfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cfc:	6013      	str	r3, [r2, #0]
 8009cfe:	f7ff ba6b 	b.w	80091d8 <_strtod_l+0x90>
 8009d02:	2a65      	cmp	r2, #101	; 0x65
 8009d04:	f43f ab5f 	beq.w	80093c6 <_strtod_l+0x27e>
 8009d08:	2a45      	cmp	r2, #69	; 0x45
 8009d0a:	f43f ab5c 	beq.w	80093c6 <_strtod_l+0x27e>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	f7ff bb94 	b.w	800943c <_strtod_l+0x2f4>
 8009d14:	f3af 8000 	nop.w
 8009d18:	94a03595 	.word	0x94a03595
 8009d1c:	3fdfffff 	.word	0x3fdfffff
 8009d20:	35afe535 	.word	0x35afe535
 8009d24:	3fe00000 	.word	0x3fe00000
 8009d28:	ffc00000 	.word	0xffc00000
 8009d2c:	41dfffff 	.word	0x41dfffff
 8009d30:	94a03595 	.word	0x94a03595
 8009d34:	3fcfffff 	.word	0x3fcfffff
 8009d38:	3ff00000 	.word	0x3ff00000
 8009d3c:	7ff00000 	.word	0x7ff00000
 8009d40:	7fe00000 	.word	0x7fe00000
 8009d44:	7c9fffff 	.word	0x7c9fffff
 8009d48:	3fe00000 	.word	0x3fe00000
 8009d4c:	bff00000 	.word	0xbff00000
 8009d50:	7fefffff 	.word	0x7fefffff

08009d54 <_strtod_r>:
 8009d54:	4b01      	ldr	r3, [pc, #4]	; (8009d5c <_strtod_r+0x8>)
 8009d56:	f7ff b9f7 	b.w	8009148 <_strtod_l>
 8009d5a:	bf00      	nop
 8009d5c:	20000098 	.word	0x20000098

08009d60 <_strtol_l.constprop.0>:
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d66:	d001      	beq.n	8009d6c <_strtol_l.constprop.0+0xc>
 8009d68:	2b24      	cmp	r3, #36	; 0x24
 8009d6a:	d906      	bls.n	8009d7a <_strtol_l.constprop.0+0x1a>
 8009d6c:	f7fe faee 	bl	800834c <__errno>
 8009d70:	2316      	movs	r3, #22
 8009d72:	6003      	str	r3, [r0, #0]
 8009d74:	2000      	movs	r0, #0
 8009d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009e60 <_strtol_l.constprop.0+0x100>
 8009d7e:	460d      	mov	r5, r1
 8009d80:	462e      	mov	r6, r5
 8009d82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d86:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009d8a:	f017 0708 	ands.w	r7, r7, #8
 8009d8e:	d1f7      	bne.n	8009d80 <_strtol_l.constprop.0+0x20>
 8009d90:	2c2d      	cmp	r4, #45	; 0x2d
 8009d92:	d132      	bne.n	8009dfa <_strtol_l.constprop.0+0x9a>
 8009d94:	782c      	ldrb	r4, [r5, #0]
 8009d96:	2701      	movs	r7, #1
 8009d98:	1cb5      	adds	r5, r6, #2
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d05b      	beq.n	8009e56 <_strtol_l.constprop.0+0xf6>
 8009d9e:	2b10      	cmp	r3, #16
 8009da0:	d109      	bne.n	8009db6 <_strtol_l.constprop.0+0x56>
 8009da2:	2c30      	cmp	r4, #48	; 0x30
 8009da4:	d107      	bne.n	8009db6 <_strtol_l.constprop.0+0x56>
 8009da6:	782c      	ldrb	r4, [r5, #0]
 8009da8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009dac:	2c58      	cmp	r4, #88	; 0x58
 8009dae:	d14d      	bne.n	8009e4c <_strtol_l.constprop.0+0xec>
 8009db0:	786c      	ldrb	r4, [r5, #1]
 8009db2:	2310      	movs	r3, #16
 8009db4:	3502      	adds	r5, #2
 8009db6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009dba:	f108 38ff 	add.w	r8, r8, #4294967295
 8009dbe:	f04f 0c00 	mov.w	ip, #0
 8009dc2:	fbb8 f9f3 	udiv	r9, r8, r3
 8009dc6:	4666      	mov	r6, ip
 8009dc8:	fb03 8a19 	mls	sl, r3, r9, r8
 8009dcc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009dd0:	f1be 0f09 	cmp.w	lr, #9
 8009dd4:	d816      	bhi.n	8009e04 <_strtol_l.constprop.0+0xa4>
 8009dd6:	4674      	mov	r4, lr
 8009dd8:	42a3      	cmp	r3, r4
 8009dda:	dd24      	ble.n	8009e26 <_strtol_l.constprop.0+0xc6>
 8009ddc:	f1bc 0f00 	cmp.w	ip, #0
 8009de0:	db1e      	blt.n	8009e20 <_strtol_l.constprop.0+0xc0>
 8009de2:	45b1      	cmp	r9, r6
 8009de4:	d31c      	bcc.n	8009e20 <_strtol_l.constprop.0+0xc0>
 8009de6:	d101      	bne.n	8009dec <_strtol_l.constprop.0+0x8c>
 8009de8:	45a2      	cmp	sl, r4
 8009dea:	db19      	blt.n	8009e20 <_strtol_l.constprop.0+0xc0>
 8009dec:	fb06 4603 	mla	r6, r6, r3, r4
 8009df0:	f04f 0c01 	mov.w	ip, #1
 8009df4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009df8:	e7e8      	b.n	8009dcc <_strtol_l.constprop.0+0x6c>
 8009dfa:	2c2b      	cmp	r4, #43	; 0x2b
 8009dfc:	bf04      	itt	eq
 8009dfe:	782c      	ldrbeq	r4, [r5, #0]
 8009e00:	1cb5      	addeq	r5, r6, #2
 8009e02:	e7ca      	b.n	8009d9a <_strtol_l.constprop.0+0x3a>
 8009e04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009e08:	f1be 0f19 	cmp.w	lr, #25
 8009e0c:	d801      	bhi.n	8009e12 <_strtol_l.constprop.0+0xb2>
 8009e0e:	3c37      	subs	r4, #55	; 0x37
 8009e10:	e7e2      	b.n	8009dd8 <_strtol_l.constprop.0+0x78>
 8009e12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009e16:	f1be 0f19 	cmp.w	lr, #25
 8009e1a:	d804      	bhi.n	8009e26 <_strtol_l.constprop.0+0xc6>
 8009e1c:	3c57      	subs	r4, #87	; 0x57
 8009e1e:	e7db      	b.n	8009dd8 <_strtol_l.constprop.0+0x78>
 8009e20:	f04f 3cff 	mov.w	ip, #4294967295
 8009e24:	e7e6      	b.n	8009df4 <_strtol_l.constprop.0+0x94>
 8009e26:	f1bc 0f00 	cmp.w	ip, #0
 8009e2a:	da05      	bge.n	8009e38 <_strtol_l.constprop.0+0xd8>
 8009e2c:	2322      	movs	r3, #34	; 0x22
 8009e2e:	6003      	str	r3, [r0, #0]
 8009e30:	4646      	mov	r6, r8
 8009e32:	b942      	cbnz	r2, 8009e46 <_strtol_l.constprop.0+0xe6>
 8009e34:	4630      	mov	r0, r6
 8009e36:	e79e      	b.n	8009d76 <_strtol_l.constprop.0+0x16>
 8009e38:	b107      	cbz	r7, 8009e3c <_strtol_l.constprop.0+0xdc>
 8009e3a:	4276      	negs	r6, r6
 8009e3c:	2a00      	cmp	r2, #0
 8009e3e:	d0f9      	beq.n	8009e34 <_strtol_l.constprop.0+0xd4>
 8009e40:	f1bc 0f00 	cmp.w	ip, #0
 8009e44:	d000      	beq.n	8009e48 <_strtol_l.constprop.0+0xe8>
 8009e46:	1e69      	subs	r1, r5, #1
 8009e48:	6011      	str	r1, [r2, #0]
 8009e4a:	e7f3      	b.n	8009e34 <_strtol_l.constprop.0+0xd4>
 8009e4c:	2430      	movs	r4, #48	; 0x30
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1b1      	bne.n	8009db6 <_strtol_l.constprop.0+0x56>
 8009e52:	2308      	movs	r3, #8
 8009e54:	e7af      	b.n	8009db6 <_strtol_l.constprop.0+0x56>
 8009e56:	2c30      	cmp	r4, #48	; 0x30
 8009e58:	d0a5      	beq.n	8009da6 <_strtol_l.constprop.0+0x46>
 8009e5a:	230a      	movs	r3, #10
 8009e5c:	e7ab      	b.n	8009db6 <_strtol_l.constprop.0+0x56>
 8009e5e:	bf00      	nop
 8009e60:	0800cdd9 	.word	0x0800cdd9

08009e64 <_strtol_r>:
 8009e64:	f7ff bf7c 	b.w	8009d60 <_strtol_l.constprop.0>

08009e68 <quorem>:
 8009e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e6c:	6903      	ldr	r3, [r0, #16]
 8009e6e:	690c      	ldr	r4, [r1, #16]
 8009e70:	42a3      	cmp	r3, r4
 8009e72:	4607      	mov	r7, r0
 8009e74:	f2c0 8081 	blt.w	8009f7a <quorem+0x112>
 8009e78:	3c01      	subs	r4, #1
 8009e7a:	f101 0814 	add.w	r8, r1, #20
 8009e7e:	f100 0514 	add.w	r5, r0, #20
 8009e82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e86:	9301      	str	r3, [sp, #4]
 8009e88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e90:	3301      	adds	r3, #1
 8009e92:	429a      	cmp	r2, r3
 8009e94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ea0:	d331      	bcc.n	8009f06 <quorem+0x9e>
 8009ea2:	f04f 0e00 	mov.w	lr, #0
 8009ea6:	4640      	mov	r0, r8
 8009ea8:	46ac      	mov	ip, r5
 8009eaa:	46f2      	mov	sl, lr
 8009eac:	f850 2b04 	ldr.w	r2, [r0], #4
 8009eb0:	b293      	uxth	r3, r2
 8009eb2:	fb06 e303 	mla	r3, r6, r3, lr
 8009eb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	ebaa 0303 	sub.w	r3, sl, r3
 8009ec0:	f8dc a000 	ldr.w	sl, [ip]
 8009ec4:	0c12      	lsrs	r2, r2, #16
 8009ec6:	fa13 f38a 	uxtah	r3, r3, sl
 8009eca:	fb06 e202 	mla	r2, r6, r2, lr
 8009ece:	9300      	str	r3, [sp, #0]
 8009ed0:	9b00      	ldr	r3, [sp, #0]
 8009ed2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ed6:	b292      	uxth	r2, r2
 8009ed8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009edc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ee0:	f8bd 3000 	ldrh.w	r3, [sp]
 8009ee4:	4581      	cmp	r9, r0
 8009ee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009eea:	f84c 3b04 	str.w	r3, [ip], #4
 8009eee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ef2:	d2db      	bcs.n	8009eac <quorem+0x44>
 8009ef4:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ef8:	b92b      	cbnz	r3, 8009f06 <quorem+0x9e>
 8009efa:	9b01      	ldr	r3, [sp, #4]
 8009efc:	3b04      	subs	r3, #4
 8009efe:	429d      	cmp	r5, r3
 8009f00:	461a      	mov	r2, r3
 8009f02:	d32e      	bcc.n	8009f62 <quorem+0xfa>
 8009f04:	613c      	str	r4, [r7, #16]
 8009f06:	4638      	mov	r0, r7
 8009f08:	f001 fc82 	bl	800b810 <__mcmp>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	db24      	blt.n	8009f5a <quorem+0xf2>
 8009f10:	3601      	adds	r6, #1
 8009f12:	4628      	mov	r0, r5
 8009f14:	f04f 0c00 	mov.w	ip, #0
 8009f18:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f1c:	f8d0 e000 	ldr.w	lr, [r0]
 8009f20:	b293      	uxth	r3, r2
 8009f22:	ebac 0303 	sub.w	r3, ip, r3
 8009f26:	0c12      	lsrs	r2, r2, #16
 8009f28:	fa13 f38e 	uxtah	r3, r3, lr
 8009f2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f3a:	45c1      	cmp	r9, r8
 8009f3c:	f840 3b04 	str.w	r3, [r0], #4
 8009f40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f44:	d2e8      	bcs.n	8009f18 <quorem+0xb0>
 8009f46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f4e:	b922      	cbnz	r2, 8009f5a <quorem+0xf2>
 8009f50:	3b04      	subs	r3, #4
 8009f52:	429d      	cmp	r5, r3
 8009f54:	461a      	mov	r2, r3
 8009f56:	d30a      	bcc.n	8009f6e <quorem+0x106>
 8009f58:	613c      	str	r4, [r7, #16]
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	b003      	add	sp, #12
 8009f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f62:	6812      	ldr	r2, [r2, #0]
 8009f64:	3b04      	subs	r3, #4
 8009f66:	2a00      	cmp	r2, #0
 8009f68:	d1cc      	bne.n	8009f04 <quorem+0x9c>
 8009f6a:	3c01      	subs	r4, #1
 8009f6c:	e7c7      	b.n	8009efe <quorem+0x96>
 8009f6e:	6812      	ldr	r2, [r2, #0]
 8009f70:	3b04      	subs	r3, #4
 8009f72:	2a00      	cmp	r2, #0
 8009f74:	d1f0      	bne.n	8009f58 <quorem+0xf0>
 8009f76:	3c01      	subs	r4, #1
 8009f78:	e7eb      	b.n	8009f52 <quorem+0xea>
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	e7ee      	b.n	8009f5c <quorem+0xf4>
	...

08009f80 <_dtoa_r>:
 8009f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	ed2d 8b04 	vpush	{d8-d9}
 8009f88:	ec57 6b10 	vmov	r6, r7, d0
 8009f8c:	b093      	sub	sp, #76	; 0x4c
 8009f8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f94:	9106      	str	r1, [sp, #24]
 8009f96:	ee10 aa10 	vmov	sl, s0
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f9e:	930c      	str	r3, [sp, #48]	; 0x30
 8009fa0:	46bb      	mov	fp, r7
 8009fa2:	b975      	cbnz	r5, 8009fc2 <_dtoa_r+0x42>
 8009fa4:	2010      	movs	r0, #16
 8009fa6:	f001 f94d 	bl	800b244 <malloc>
 8009faa:	4602      	mov	r2, r0
 8009fac:	6260      	str	r0, [r4, #36]	; 0x24
 8009fae:	b920      	cbnz	r0, 8009fba <_dtoa_r+0x3a>
 8009fb0:	4ba7      	ldr	r3, [pc, #668]	; (800a250 <_dtoa_r+0x2d0>)
 8009fb2:	21ea      	movs	r1, #234	; 0xea
 8009fb4:	48a7      	ldr	r0, [pc, #668]	; (800a254 <_dtoa_r+0x2d4>)
 8009fb6:	f002 f8ad 	bl	800c114 <__assert_func>
 8009fba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009fbe:	6005      	str	r5, [r0, #0]
 8009fc0:	60c5      	str	r5, [r0, #12]
 8009fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fc4:	6819      	ldr	r1, [r3, #0]
 8009fc6:	b151      	cbz	r1, 8009fde <_dtoa_r+0x5e>
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	604a      	str	r2, [r1, #4]
 8009fcc:	2301      	movs	r3, #1
 8009fce:	4093      	lsls	r3, r2
 8009fd0:	608b      	str	r3, [r1, #8]
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f001 f990 	bl	800b2f8 <_Bfree>
 8009fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fda:	2200      	movs	r2, #0
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	1e3b      	subs	r3, r7, #0
 8009fe0:	bfaa      	itet	ge
 8009fe2:	2300      	movge	r3, #0
 8009fe4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009fe8:	f8c8 3000 	strge.w	r3, [r8]
 8009fec:	4b9a      	ldr	r3, [pc, #616]	; (800a258 <_dtoa_r+0x2d8>)
 8009fee:	bfbc      	itt	lt
 8009ff0:	2201      	movlt	r2, #1
 8009ff2:	f8c8 2000 	strlt.w	r2, [r8]
 8009ff6:	ea33 030b 	bics.w	r3, r3, fp
 8009ffa:	d11b      	bne.n	800a034 <_dtoa_r+0xb4>
 8009ffc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ffe:	f242 730f 	movw	r3, #9999	; 0x270f
 800a002:	6013      	str	r3, [r2, #0]
 800a004:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a008:	4333      	orrs	r3, r6
 800a00a:	f000 8592 	beq.w	800ab32 <_dtoa_r+0xbb2>
 800a00e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a010:	b963      	cbnz	r3, 800a02c <_dtoa_r+0xac>
 800a012:	4b92      	ldr	r3, [pc, #584]	; (800a25c <_dtoa_r+0x2dc>)
 800a014:	e022      	b.n	800a05c <_dtoa_r+0xdc>
 800a016:	4b92      	ldr	r3, [pc, #584]	; (800a260 <_dtoa_r+0x2e0>)
 800a018:	9301      	str	r3, [sp, #4]
 800a01a:	3308      	adds	r3, #8
 800a01c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	9801      	ldr	r0, [sp, #4]
 800a022:	b013      	add	sp, #76	; 0x4c
 800a024:	ecbd 8b04 	vpop	{d8-d9}
 800a028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02c:	4b8b      	ldr	r3, [pc, #556]	; (800a25c <_dtoa_r+0x2dc>)
 800a02e:	9301      	str	r3, [sp, #4]
 800a030:	3303      	adds	r3, #3
 800a032:	e7f3      	b.n	800a01c <_dtoa_r+0x9c>
 800a034:	2200      	movs	r2, #0
 800a036:	2300      	movs	r3, #0
 800a038:	4650      	mov	r0, sl
 800a03a:	4659      	mov	r1, fp
 800a03c:	f7f6 fd4c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a040:	ec4b ab19 	vmov	d9, sl, fp
 800a044:	4680      	mov	r8, r0
 800a046:	b158      	cbz	r0, 800a060 <_dtoa_r+0xe0>
 800a048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a04a:	2301      	movs	r3, #1
 800a04c:	6013      	str	r3, [r2, #0]
 800a04e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 856b 	beq.w	800ab2c <_dtoa_r+0xbac>
 800a056:	4883      	ldr	r0, [pc, #524]	; (800a264 <_dtoa_r+0x2e4>)
 800a058:	6018      	str	r0, [r3, #0]
 800a05a:	1e43      	subs	r3, r0, #1
 800a05c:	9301      	str	r3, [sp, #4]
 800a05e:	e7df      	b.n	800a020 <_dtoa_r+0xa0>
 800a060:	ec4b ab10 	vmov	d0, sl, fp
 800a064:	aa10      	add	r2, sp, #64	; 0x40
 800a066:	a911      	add	r1, sp, #68	; 0x44
 800a068:	4620      	mov	r0, r4
 800a06a:	f001 fcf3 	bl	800ba54 <__d2b>
 800a06e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a072:	ee08 0a10 	vmov	s16, r0
 800a076:	2d00      	cmp	r5, #0
 800a078:	f000 8084 	beq.w	800a184 <_dtoa_r+0x204>
 800a07c:	ee19 3a90 	vmov	r3, s19
 800a080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a084:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a088:	4656      	mov	r6, sl
 800a08a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a08e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a092:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a096:	4b74      	ldr	r3, [pc, #464]	; (800a268 <_dtoa_r+0x2e8>)
 800a098:	2200      	movs	r2, #0
 800a09a:	4630      	mov	r0, r6
 800a09c:	4639      	mov	r1, r7
 800a09e:	f7f6 f8fb 	bl	8000298 <__aeabi_dsub>
 800a0a2:	a365      	add	r3, pc, #404	; (adr r3, 800a238 <_dtoa_r+0x2b8>)
 800a0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a8:	f7f6 faae 	bl	8000608 <__aeabi_dmul>
 800a0ac:	a364      	add	r3, pc, #400	; (adr r3, 800a240 <_dtoa_r+0x2c0>)
 800a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b2:	f7f6 f8f3 	bl	800029c <__adddf3>
 800a0b6:	4606      	mov	r6, r0
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	460f      	mov	r7, r1
 800a0bc:	f7f6 fa3a 	bl	8000534 <__aeabi_i2d>
 800a0c0:	a361      	add	r3, pc, #388	; (adr r3, 800a248 <_dtoa_r+0x2c8>)
 800a0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c6:	f7f6 fa9f 	bl	8000608 <__aeabi_dmul>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	4639      	mov	r1, r7
 800a0d2:	f7f6 f8e3 	bl	800029c <__adddf3>
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	460f      	mov	r7, r1
 800a0da:	f7f6 fd45 	bl	8000b68 <__aeabi_d2iz>
 800a0de:	2200      	movs	r2, #0
 800a0e0:	9000      	str	r0, [sp, #0]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	4639      	mov	r1, r7
 800a0e8:	f7f6 fd00 	bl	8000aec <__aeabi_dcmplt>
 800a0ec:	b150      	cbz	r0, 800a104 <_dtoa_r+0x184>
 800a0ee:	9800      	ldr	r0, [sp, #0]
 800a0f0:	f7f6 fa20 	bl	8000534 <__aeabi_i2d>
 800a0f4:	4632      	mov	r2, r6
 800a0f6:	463b      	mov	r3, r7
 800a0f8:	f7f6 fcee 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0fc:	b910      	cbnz	r0, 800a104 <_dtoa_r+0x184>
 800a0fe:	9b00      	ldr	r3, [sp, #0]
 800a100:	3b01      	subs	r3, #1
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	9b00      	ldr	r3, [sp, #0]
 800a106:	2b16      	cmp	r3, #22
 800a108:	d85a      	bhi.n	800a1c0 <_dtoa_r+0x240>
 800a10a:	9a00      	ldr	r2, [sp, #0]
 800a10c:	4b57      	ldr	r3, [pc, #348]	; (800a26c <_dtoa_r+0x2ec>)
 800a10e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	ec51 0b19 	vmov	r0, r1, d9
 800a11a:	f7f6 fce7 	bl	8000aec <__aeabi_dcmplt>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d050      	beq.n	800a1c4 <_dtoa_r+0x244>
 800a122:	9b00      	ldr	r3, [sp, #0]
 800a124:	3b01      	subs	r3, #1
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	2300      	movs	r3, #0
 800a12a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a12c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a12e:	1b5d      	subs	r5, r3, r5
 800a130:	1e6b      	subs	r3, r5, #1
 800a132:	9305      	str	r3, [sp, #20]
 800a134:	bf45      	ittet	mi
 800a136:	f1c5 0301 	rsbmi	r3, r5, #1
 800a13a:	9304      	strmi	r3, [sp, #16]
 800a13c:	2300      	movpl	r3, #0
 800a13e:	2300      	movmi	r3, #0
 800a140:	bf4c      	ite	mi
 800a142:	9305      	strmi	r3, [sp, #20]
 800a144:	9304      	strpl	r3, [sp, #16]
 800a146:	9b00      	ldr	r3, [sp, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	db3d      	blt.n	800a1c8 <_dtoa_r+0x248>
 800a14c:	9b05      	ldr	r3, [sp, #20]
 800a14e:	9a00      	ldr	r2, [sp, #0]
 800a150:	920a      	str	r2, [sp, #40]	; 0x28
 800a152:	4413      	add	r3, r2
 800a154:	9305      	str	r3, [sp, #20]
 800a156:	2300      	movs	r3, #0
 800a158:	9307      	str	r3, [sp, #28]
 800a15a:	9b06      	ldr	r3, [sp, #24]
 800a15c:	2b09      	cmp	r3, #9
 800a15e:	f200 8089 	bhi.w	800a274 <_dtoa_r+0x2f4>
 800a162:	2b05      	cmp	r3, #5
 800a164:	bfc4      	itt	gt
 800a166:	3b04      	subgt	r3, #4
 800a168:	9306      	strgt	r3, [sp, #24]
 800a16a:	9b06      	ldr	r3, [sp, #24]
 800a16c:	f1a3 0302 	sub.w	r3, r3, #2
 800a170:	bfcc      	ite	gt
 800a172:	2500      	movgt	r5, #0
 800a174:	2501      	movle	r5, #1
 800a176:	2b03      	cmp	r3, #3
 800a178:	f200 8087 	bhi.w	800a28a <_dtoa_r+0x30a>
 800a17c:	e8df f003 	tbb	[pc, r3]
 800a180:	59383a2d 	.word	0x59383a2d
 800a184:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a188:	441d      	add	r5, r3
 800a18a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a18e:	2b20      	cmp	r3, #32
 800a190:	bfc1      	itttt	gt
 800a192:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a196:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a19a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a19e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a1a2:	bfda      	itte	le
 800a1a4:	f1c3 0320 	rsble	r3, r3, #32
 800a1a8:	fa06 f003 	lslle.w	r0, r6, r3
 800a1ac:	4318      	orrgt	r0, r3
 800a1ae:	f7f6 f9b1 	bl	8000514 <__aeabi_ui2d>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	4606      	mov	r6, r0
 800a1b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a1ba:	3d01      	subs	r5, #1
 800a1bc:	930e      	str	r3, [sp, #56]	; 0x38
 800a1be:	e76a      	b.n	800a096 <_dtoa_r+0x116>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e7b2      	b.n	800a12a <_dtoa_r+0x1aa>
 800a1c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a1c6:	e7b1      	b.n	800a12c <_dtoa_r+0x1ac>
 800a1c8:	9b04      	ldr	r3, [sp, #16]
 800a1ca:	9a00      	ldr	r2, [sp, #0]
 800a1cc:	1a9b      	subs	r3, r3, r2
 800a1ce:	9304      	str	r3, [sp, #16]
 800a1d0:	4253      	negs	r3, r2
 800a1d2:	9307      	str	r3, [sp, #28]
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a1d8:	e7bf      	b.n	800a15a <_dtoa_r+0x1da>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	9308      	str	r3, [sp, #32]
 800a1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	dc55      	bgt.n	800a290 <_dtoa_r+0x310>
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a1ee:	e00c      	b.n	800a20a <_dtoa_r+0x28a>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e7f3      	b.n	800a1dc <_dtoa_r+0x25c>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1f8:	9308      	str	r3, [sp, #32]
 800a1fa:	9b00      	ldr	r3, [sp, #0]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	9302      	str	r3, [sp, #8]
 800a200:	3301      	adds	r3, #1
 800a202:	2b01      	cmp	r3, #1
 800a204:	9303      	str	r3, [sp, #12]
 800a206:	bfb8      	it	lt
 800a208:	2301      	movlt	r3, #1
 800a20a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a20c:	2200      	movs	r2, #0
 800a20e:	6042      	str	r2, [r0, #4]
 800a210:	2204      	movs	r2, #4
 800a212:	f102 0614 	add.w	r6, r2, #20
 800a216:	429e      	cmp	r6, r3
 800a218:	6841      	ldr	r1, [r0, #4]
 800a21a:	d93d      	bls.n	800a298 <_dtoa_r+0x318>
 800a21c:	4620      	mov	r0, r4
 800a21e:	f001 f82b 	bl	800b278 <_Balloc>
 800a222:	9001      	str	r0, [sp, #4]
 800a224:	2800      	cmp	r0, #0
 800a226:	d13b      	bne.n	800a2a0 <_dtoa_r+0x320>
 800a228:	4b11      	ldr	r3, [pc, #68]	; (800a270 <_dtoa_r+0x2f0>)
 800a22a:	4602      	mov	r2, r0
 800a22c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a230:	e6c0      	b.n	8009fb4 <_dtoa_r+0x34>
 800a232:	2301      	movs	r3, #1
 800a234:	e7df      	b.n	800a1f6 <_dtoa_r+0x276>
 800a236:	bf00      	nop
 800a238:	636f4361 	.word	0x636f4361
 800a23c:	3fd287a7 	.word	0x3fd287a7
 800a240:	8b60c8b3 	.word	0x8b60c8b3
 800a244:	3fc68a28 	.word	0x3fc68a28
 800a248:	509f79fb 	.word	0x509f79fb
 800a24c:	3fd34413 	.word	0x3fd34413
 800a250:	0800cee6 	.word	0x0800cee6
 800a254:	0800cefd 	.word	0x0800cefd
 800a258:	7ff00000 	.word	0x7ff00000
 800a25c:	0800cee2 	.word	0x0800cee2
 800a260:	0800ced9 	.word	0x0800ced9
 800a264:	0800cd5d 	.word	0x0800cd5d
 800a268:	3ff80000 	.word	0x3ff80000
 800a26c:	0800d068 	.word	0x0800d068
 800a270:	0800cf58 	.word	0x0800cf58
 800a274:	2501      	movs	r5, #1
 800a276:	2300      	movs	r3, #0
 800a278:	9306      	str	r3, [sp, #24]
 800a27a:	9508      	str	r5, [sp, #32]
 800a27c:	f04f 33ff 	mov.w	r3, #4294967295
 800a280:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a284:	2200      	movs	r2, #0
 800a286:	2312      	movs	r3, #18
 800a288:	e7b0      	b.n	800a1ec <_dtoa_r+0x26c>
 800a28a:	2301      	movs	r3, #1
 800a28c:	9308      	str	r3, [sp, #32]
 800a28e:	e7f5      	b.n	800a27c <_dtoa_r+0x2fc>
 800a290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a292:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a296:	e7b8      	b.n	800a20a <_dtoa_r+0x28a>
 800a298:	3101      	adds	r1, #1
 800a29a:	6041      	str	r1, [r0, #4]
 800a29c:	0052      	lsls	r2, r2, #1
 800a29e:	e7b8      	b.n	800a212 <_dtoa_r+0x292>
 800a2a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2a2:	9a01      	ldr	r2, [sp, #4]
 800a2a4:	601a      	str	r2, [r3, #0]
 800a2a6:	9b03      	ldr	r3, [sp, #12]
 800a2a8:	2b0e      	cmp	r3, #14
 800a2aa:	f200 809d 	bhi.w	800a3e8 <_dtoa_r+0x468>
 800a2ae:	2d00      	cmp	r5, #0
 800a2b0:	f000 809a 	beq.w	800a3e8 <_dtoa_r+0x468>
 800a2b4:	9b00      	ldr	r3, [sp, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	dd32      	ble.n	800a320 <_dtoa_r+0x3a0>
 800a2ba:	4ab7      	ldr	r2, [pc, #732]	; (800a598 <_dtoa_r+0x618>)
 800a2bc:	f003 030f 	and.w	r3, r3, #15
 800a2c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2c8:	9b00      	ldr	r3, [sp, #0]
 800a2ca:	05d8      	lsls	r0, r3, #23
 800a2cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a2d0:	d516      	bpl.n	800a300 <_dtoa_r+0x380>
 800a2d2:	4bb2      	ldr	r3, [pc, #712]	; (800a59c <_dtoa_r+0x61c>)
 800a2d4:	ec51 0b19 	vmov	r0, r1, d9
 800a2d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2dc:	f7f6 fabe 	bl	800085c <__aeabi_ddiv>
 800a2e0:	f007 070f 	and.w	r7, r7, #15
 800a2e4:	4682      	mov	sl, r0
 800a2e6:	468b      	mov	fp, r1
 800a2e8:	2503      	movs	r5, #3
 800a2ea:	4eac      	ldr	r6, [pc, #688]	; (800a59c <_dtoa_r+0x61c>)
 800a2ec:	b957      	cbnz	r7, 800a304 <_dtoa_r+0x384>
 800a2ee:	4642      	mov	r2, r8
 800a2f0:	464b      	mov	r3, r9
 800a2f2:	4650      	mov	r0, sl
 800a2f4:	4659      	mov	r1, fp
 800a2f6:	f7f6 fab1 	bl	800085c <__aeabi_ddiv>
 800a2fa:	4682      	mov	sl, r0
 800a2fc:	468b      	mov	fp, r1
 800a2fe:	e028      	b.n	800a352 <_dtoa_r+0x3d2>
 800a300:	2502      	movs	r5, #2
 800a302:	e7f2      	b.n	800a2ea <_dtoa_r+0x36a>
 800a304:	07f9      	lsls	r1, r7, #31
 800a306:	d508      	bpl.n	800a31a <_dtoa_r+0x39a>
 800a308:	4640      	mov	r0, r8
 800a30a:	4649      	mov	r1, r9
 800a30c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a310:	f7f6 f97a 	bl	8000608 <__aeabi_dmul>
 800a314:	3501      	adds	r5, #1
 800a316:	4680      	mov	r8, r0
 800a318:	4689      	mov	r9, r1
 800a31a:	107f      	asrs	r7, r7, #1
 800a31c:	3608      	adds	r6, #8
 800a31e:	e7e5      	b.n	800a2ec <_dtoa_r+0x36c>
 800a320:	f000 809b 	beq.w	800a45a <_dtoa_r+0x4da>
 800a324:	9b00      	ldr	r3, [sp, #0]
 800a326:	4f9d      	ldr	r7, [pc, #628]	; (800a59c <_dtoa_r+0x61c>)
 800a328:	425e      	negs	r6, r3
 800a32a:	4b9b      	ldr	r3, [pc, #620]	; (800a598 <_dtoa_r+0x618>)
 800a32c:	f006 020f 	and.w	r2, r6, #15
 800a330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	ec51 0b19 	vmov	r0, r1, d9
 800a33c:	f7f6 f964 	bl	8000608 <__aeabi_dmul>
 800a340:	1136      	asrs	r6, r6, #4
 800a342:	4682      	mov	sl, r0
 800a344:	468b      	mov	fp, r1
 800a346:	2300      	movs	r3, #0
 800a348:	2502      	movs	r5, #2
 800a34a:	2e00      	cmp	r6, #0
 800a34c:	d17a      	bne.n	800a444 <_dtoa_r+0x4c4>
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1d3      	bne.n	800a2fa <_dtoa_r+0x37a>
 800a352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 8082 	beq.w	800a45e <_dtoa_r+0x4de>
 800a35a:	4b91      	ldr	r3, [pc, #580]	; (800a5a0 <_dtoa_r+0x620>)
 800a35c:	2200      	movs	r2, #0
 800a35e:	4650      	mov	r0, sl
 800a360:	4659      	mov	r1, fp
 800a362:	f7f6 fbc3 	bl	8000aec <__aeabi_dcmplt>
 800a366:	2800      	cmp	r0, #0
 800a368:	d079      	beq.n	800a45e <_dtoa_r+0x4de>
 800a36a:	9b03      	ldr	r3, [sp, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d076      	beq.n	800a45e <_dtoa_r+0x4de>
 800a370:	9b02      	ldr	r3, [sp, #8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	dd36      	ble.n	800a3e4 <_dtoa_r+0x464>
 800a376:	9b00      	ldr	r3, [sp, #0]
 800a378:	4650      	mov	r0, sl
 800a37a:	4659      	mov	r1, fp
 800a37c:	1e5f      	subs	r7, r3, #1
 800a37e:	2200      	movs	r2, #0
 800a380:	4b88      	ldr	r3, [pc, #544]	; (800a5a4 <_dtoa_r+0x624>)
 800a382:	f7f6 f941 	bl	8000608 <__aeabi_dmul>
 800a386:	9e02      	ldr	r6, [sp, #8]
 800a388:	4682      	mov	sl, r0
 800a38a:	468b      	mov	fp, r1
 800a38c:	3501      	adds	r5, #1
 800a38e:	4628      	mov	r0, r5
 800a390:	f7f6 f8d0 	bl	8000534 <__aeabi_i2d>
 800a394:	4652      	mov	r2, sl
 800a396:	465b      	mov	r3, fp
 800a398:	f7f6 f936 	bl	8000608 <__aeabi_dmul>
 800a39c:	4b82      	ldr	r3, [pc, #520]	; (800a5a8 <_dtoa_r+0x628>)
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f7f5 ff7c 	bl	800029c <__adddf3>
 800a3a4:	46d0      	mov	r8, sl
 800a3a6:	46d9      	mov	r9, fp
 800a3a8:	4682      	mov	sl, r0
 800a3aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a3ae:	2e00      	cmp	r6, #0
 800a3b0:	d158      	bne.n	800a464 <_dtoa_r+0x4e4>
 800a3b2:	4b7e      	ldr	r3, [pc, #504]	; (800a5ac <_dtoa_r+0x62c>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	4640      	mov	r0, r8
 800a3b8:	4649      	mov	r1, r9
 800a3ba:	f7f5 ff6d 	bl	8000298 <__aeabi_dsub>
 800a3be:	4652      	mov	r2, sl
 800a3c0:	465b      	mov	r3, fp
 800a3c2:	4680      	mov	r8, r0
 800a3c4:	4689      	mov	r9, r1
 800a3c6:	f7f6 fbaf 	bl	8000b28 <__aeabi_dcmpgt>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	f040 8295 	bne.w	800a8fa <_dtoa_r+0x97a>
 800a3d0:	4652      	mov	r2, sl
 800a3d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a3d6:	4640      	mov	r0, r8
 800a3d8:	4649      	mov	r1, r9
 800a3da:	f7f6 fb87 	bl	8000aec <__aeabi_dcmplt>
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	f040 8289 	bne.w	800a8f6 <_dtoa_r+0x976>
 800a3e4:	ec5b ab19 	vmov	sl, fp, d9
 800a3e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f2c0 8148 	blt.w	800a680 <_dtoa_r+0x700>
 800a3f0:	9a00      	ldr	r2, [sp, #0]
 800a3f2:	2a0e      	cmp	r2, #14
 800a3f4:	f300 8144 	bgt.w	800a680 <_dtoa_r+0x700>
 800a3f8:	4b67      	ldr	r3, [pc, #412]	; (800a598 <_dtoa_r+0x618>)
 800a3fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a404:	2b00      	cmp	r3, #0
 800a406:	f280 80d5 	bge.w	800a5b4 <_dtoa_r+0x634>
 800a40a:	9b03      	ldr	r3, [sp, #12]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f300 80d1 	bgt.w	800a5b4 <_dtoa_r+0x634>
 800a412:	f040 826f 	bne.w	800a8f4 <_dtoa_r+0x974>
 800a416:	4b65      	ldr	r3, [pc, #404]	; (800a5ac <_dtoa_r+0x62c>)
 800a418:	2200      	movs	r2, #0
 800a41a:	4640      	mov	r0, r8
 800a41c:	4649      	mov	r1, r9
 800a41e:	f7f6 f8f3 	bl	8000608 <__aeabi_dmul>
 800a422:	4652      	mov	r2, sl
 800a424:	465b      	mov	r3, fp
 800a426:	f7f6 fb75 	bl	8000b14 <__aeabi_dcmpge>
 800a42a:	9e03      	ldr	r6, [sp, #12]
 800a42c:	4637      	mov	r7, r6
 800a42e:	2800      	cmp	r0, #0
 800a430:	f040 8245 	bne.w	800a8be <_dtoa_r+0x93e>
 800a434:	9d01      	ldr	r5, [sp, #4]
 800a436:	2331      	movs	r3, #49	; 0x31
 800a438:	f805 3b01 	strb.w	r3, [r5], #1
 800a43c:	9b00      	ldr	r3, [sp, #0]
 800a43e:	3301      	adds	r3, #1
 800a440:	9300      	str	r3, [sp, #0]
 800a442:	e240      	b.n	800a8c6 <_dtoa_r+0x946>
 800a444:	07f2      	lsls	r2, r6, #31
 800a446:	d505      	bpl.n	800a454 <_dtoa_r+0x4d4>
 800a448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a44c:	f7f6 f8dc 	bl	8000608 <__aeabi_dmul>
 800a450:	3501      	adds	r5, #1
 800a452:	2301      	movs	r3, #1
 800a454:	1076      	asrs	r6, r6, #1
 800a456:	3708      	adds	r7, #8
 800a458:	e777      	b.n	800a34a <_dtoa_r+0x3ca>
 800a45a:	2502      	movs	r5, #2
 800a45c:	e779      	b.n	800a352 <_dtoa_r+0x3d2>
 800a45e:	9f00      	ldr	r7, [sp, #0]
 800a460:	9e03      	ldr	r6, [sp, #12]
 800a462:	e794      	b.n	800a38e <_dtoa_r+0x40e>
 800a464:	9901      	ldr	r1, [sp, #4]
 800a466:	4b4c      	ldr	r3, [pc, #304]	; (800a598 <_dtoa_r+0x618>)
 800a468:	4431      	add	r1, r6
 800a46a:	910d      	str	r1, [sp, #52]	; 0x34
 800a46c:	9908      	ldr	r1, [sp, #32]
 800a46e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a472:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a476:	2900      	cmp	r1, #0
 800a478:	d043      	beq.n	800a502 <_dtoa_r+0x582>
 800a47a:	494d      	ldr	r1, [pc, #308]	; (800a5b0 <_dtoa_r+0x630>)
 800a47c:	2000      	movs	r0, #0
 800a47e:	f7f6 f9ed 	bl	800085c <__aeabi_ddiv>
 800a482:	4652      	mov	r2, sl
 800a484:	465b      	mov	r3, fp
 800a486:	f7f5 ff07 	bl	8000298 <__aeabi_dsub>
 800a48a:	9d01      	ldr	r5, [sp, #4]
 800a48c:	4682      	mov	sl, r0
 800a48e:	468b      	mov	fp, r1
 800a490:	4649      	mov	r1, r9
 800a492:	4640      	mov	r0, r8
 800a494:	f7f6 fb68 	bl	8000b68 <__aeabi_d2iz>
 800a498:	4606      	mov	r6, r0
 800a49a:	f7f6 f84b 	bl	8000534 <__aeabi_i2d>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	4640      	mov	r0, r8
 800a4a4:	4649      	mov	r1, r9
 800a4a6:	f7f5 fef7 	bl	8000298 <__aeabi_dsub>
 800a4aa:	3630      	adds	r6, #48	; 0x30
 800a4ac:	f805 6b01 	strb.w	r6, [r5], #1
 800a4b0:	4652      	mov	r2, sl
 800a4b2:	465b      	mov	r3, fp
 800a4b4:	4680      	mov	r8, r0
 800a4b6:	4689      	mov	r9, r1
 800a4b8:	f7f6 fb18 	bl	8000aec <__aeabi_dcmplt>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d163      	bne.n	800a588 <_dtoa_r+0x608>
 800a4c0:	4642      	mov	r2, r8
 800a4c2:	464b      	mov	r3, r9
 800a4c4:	4936      	ldr	r1, [pc, #216]	; (800a5a0 <_dtoa_r+0x620>)
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	f7f5 fee6 	bl	8000298 <__aeabi_dsub>
 800a4cc:	4652      	mov	r2, sl
 800a4ce:	465b      	mov	r3, fp
 800a4d0:	f7f6 fb0c 	bl	8000aec <__aeabi_dcmplt>
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	f040 80b5 	bne.w	800a644 <_dtoa_r+0x6c4>
 800a4da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4dc:	429d      	cmp	r5, r3
 800a4de:	d081      	beq.n	800a3e4 <_dtoa_r+0x464>
 800a4e0:	4b30      	ldr	r3, [pc, #192]	; (800a5a4 <_dtoa_r+0x624>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	4650      	mov	r0, sl
 800a4e6:	4659      	mov	r1, fp
 800a4e8:	f7f6 f88e 	bl	8000608 <__aeabi_dmul>
 800a4ec:	4b2d      	ldr	r3, [pc, #180]	; (800a5a4 <_dtoa_r+0x624>)
 800a4ee:	4682      	mov	sl, r0
 800a4f0:	468b      	mov	fp, r1
 800a4f2:	4640      	mov	r0, r8
 800a4f4:	4649      	mov	r1, r9
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f7f6 f886 	bl	8000608 <__aeabi_dmul>
 800a4fc:	4680      	mov	r8, r0
 800a4fe:	4689      	mov	r9, r1
 800a500:	e7c6      	b.n	800a490 <_dtoa_r+0x510>
 800a502:	4650      	mov	r0, sl
 800a504:	4659      	mov	r1, fp
 800a506:	f7f6 f87f 	bl	8000608 <__aeabi_dmul>
 800a50a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a50c:	9d01      	ldr	r5, [sp, #4]
 800a50e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a510:	4682      	mov	sl, r0
 800a512:	468b      	mov	fp, r1
 800a514:	4649      	mov	r1, r9
 800a516:	4640      	mov	r0, r8
 800a518:	f7f6 fb26 	bl	8000b68 <__aeabi_d2iz>
 800a51c:	4606      	mov	r6, r0
 800a51e:	f7f6 f809 	bl	8000534 <__aeabi_i2d>
 800a522:	3630      	adds	r6, #48	; 0x30
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	4640      	mov	r0, r8
 800a52a:	4649      	mov	r1, r9
 800a52c:	f7f5 feb4 	bl	8000298 <__aeabi_dsub>
 800a530:	f805 6b01 	strb.w	r6, [r5], #1
 800a534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a536:	429d      	cmp	r5, r3
 800a538:	4680      	mov	r8, r0
 800a53a:	4689      	mov	r9, r1
 800a53c:	f04f 0200 	mov.w	r2, #0
 800a540:	d124      	bne.n	800a58c <_dtoa_r+0x60c>
 800a542:	4b1b      	ldr	r3, [pc, #108]	; (800a5b0 <_dtoa_r+0x630>)
 800a544:	4650      	mov	r0, sl
 800a546:	4659      	mov	r1, fp
 800a548:	f7f5 fea8 	bl	800029c <__adddf3>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	4640      	mov	r0, r8
 800a552:	4649      	mov	r1, r9
 800a554:	f7f6 fae8 	bl	8000b28 <__aeabi_dcmpgt>
 800a558:	2800      	cmp	r0, #0
 800a55a:	d173      	bne.n	800a644 <_dtoa_r+0x6c4>
 800a55c:	4652      	mov	r2, sl
 800a55e:	465b      	mov	r3, fp
 800a560:	4913      	ldr	r1, [pc, #76]	; (800a5b0 <_dtoa_r+0x630>)
 800a562:	2000      	movs	r0, #0
 800a564:	f7f5 fe98 	bl	8000298 <__aeabi_dsub>
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	4640      	mov	r0, r8
 800a56e:	4649      	mov	r1, r9
 800a570:	f7f6 fabc 	bl	8000aec <__aeabi_dcmplt>
 800a574:	2800      	cmp	r0, #0
 800a576:	f43f af35 	beq.w	800a3e4 <_dtoa_r+0x464>
 800a57a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a57c:	1e6b      	subs	r3, r5, #1
 800a57e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a580:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a584:	2b30      	cmp	r3, #48	; 0x30
 800a586:	d0f8      	beq.n	800a57a <_dtoa_r+0x5fa>
 800a588:	9700      	str	r7, [sp, #0]
 800a58a:	e049      	b.n	800a620 <_dtoa_r+0x6a0>
 800a58c:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <_dtoa_r+0x624>)
 800a58e:	f7f6 f83b 	bl	8000608 <__aeabi_dmul>
 800a592:	4680      	mov	r8, r0
 800a594:	4689      	mov	r9, r1
 800a596:	e7bd      	b.n	800a514 <_dtoa_r+0x594>
 800a598:	0800d068 	.word	0x0800d068
 800a59c:	0800d040 	.word	0x0800d040
 800a5a0:	3ff00000 	.word	0x3ff00000
 800a5a4:	40240000 	.word	0x40240000
 800a5a8:	401c0000 	.word	0x401c0000
 800a5ac:	40140000 	.word	0x40140000
 800a5b0:	3fe00000 	.word	0x3fe00000
 800a5b4:	9d01      	ldr	r5, [sp, #4]
 800a5b6:	4656      	mov	r6, sl
 800a5b8:	465f      	mov	r7, fp
 800a5ba:	4642      	mov	r2, r8
 800a5bc:	464b      	mov	r3, r9
 800a5be:	4630      	mov	r0, r6
 800a5c0:	4639      	mov	r1, r7
 800a5c2:	f7f6 f94b 	bl	800085c <__aeabi_ddiv>
 800a5c6:	f7f6 facf 	bl	8000b68 <__aeabi_d2iz>
 800a5ca:	4682      	mov	sl, r0
 800a5cc:	f7f5 ffb2 	bl	8000534 <__aeabi_i2d>
 800a5d0:	4642      	mov	r2, r8
 800a5d2:	464b      	mov	r3, r9
 800a5d4:	f7f6 f818 	bl	8000608 <__aeabi_dmul>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	460b      	mov	r3, r1
 800a5dc:	4630      	mov	r0, r6
 800a5de:	4639      	mov	r1, r7
 800a5e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a5e4:	f7f5 fe58 	bl	8000298 <__aeabi_dsub>
 800a5e8:	f805 6b01 	strb.w	r6, [r5], #1
 800a5ec:	9e01      	ldr	r6, [sp, #4]
 800a5ee:	9f03      	ldr	r7, [sp, #12]
 800a5f0:	1bae      	subs	r6, r5, r6
 800a5f2:	42b7      	cmp	r7, r6
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	d135      	bne.n	800a666 <_dtoa_r+0x6e6>
 800a5fa:	f7f5 fe4f 	bl	800029c <__adddf3>
 800a5fe:	4642      	mov	r2, r8
 800a600:	464b      	mov	r3, r9
 800a602:	4606      	mov	r6, r0
 800a604:	460f      	mov	r7, r1
 800a606:	f7f6 fa8f 	bl	8000b28 <__aeabi_dcmpgt>
 800a60a:	b9d0      	cbnz	r0, 800a642 <_dtoa_r+0x6c2>
 800a60c:	4642      	mov	r2, r8
 800a60e:	464b      	mov	r3, r9
 800a610:	4630      	mov	r0, r6
 800a612:	4639      	mov	r1, r7
 800a614:	f7f6 fa60 	bl	8000ad8 <__aeabi_dcmpeq>
 800a618:	b110      	cbz	r0, 800a620 <_dtoa_r+0x6a0>
 800a61a:	f01a 0f01 	tst.w	sl, #1
 800a61e:	d110      	bne.n	800a642 <_dtoa_r+0x6c2>
 800a620:	4620      	mov	r0, r4
 800a622:	ee18 1a10 	vmov	r1, s16
 800a626:	f000 fe67 	bl	800b2f8 <_Bfree>
 800a62a:	2300      	movs	r3, #0
 800a62c:	9800      	ldr	r0, [sp, #0]
 800a62e:	702b      	strb	r3, [r5, #0]
 800a630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a632:	3001      	adds	r0, #1
 800a634:	6018      	str	r0, [r3, #0]
 800a636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f43f acf1 	beq.w	800a020 <_dtoa_r+0xa0>
 800a63e:	601d      	str	r5, [r3, #0]
 800a640:	e4ee      	b.n	800a020 <_dtoa_r+0xa0>
 800a642:	9f00      	ldr	r7, [sp, #0]
 800a644:	462b      	mov	r3, r5
 800a646:	461d      	mov	r5, r3
 800a648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a64c:	2a39      	cmp	r2, #57	; 0x39
 800a64e:	d106      	bne.n	800a65e <_dtoa_r+0x6de>
 800a650:	9a01      	ldr	r2, [sp, #4]
 800a652:	429a      	cmp	r2, r3
 800a654:	d1f7      	bne.n	800a646 <_dtoa_r+0x6c6>
 800a656:	9901      	ldr	r1, [sp, #4]
 800a658:	2230      	movs	r2, #48	; 0x30
 800a65a:	3701      	adds	r7, #1
 800a65c:	700a      	strb	r2, [r1, #0]
 800a65e:	781a      	ldrb	r2, [r3, #0]
 800a660:	3201      	adds	r2, #1
 800a662:	701a      	strb	r2, [r3, #0]
 800a664:	e790      	b.n	800a588 <_dtoa_r+0x608>
 800a666:	4ba6      	ldr	r3, [pc, #664]	; (800a900 <_dtoa_r+0x980>)
 800a668:	2200      	movs	r2, #0
 800a66a:	f7f5 ffcd 	bl	8000608 <__aeabi_dmul>
 800a66e:	2200      	movs	r2, #0
 800a670:	2300      	movs	r3, #0
 800a672:	4606      	mov	r6, r0
 800a674:	460f      	mov	r7, r1
 800a676:	f7f6 fa2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d09d      	beq.n	800a5ba <_dtoa_r+0x63a>
 800a67e:	e7cf      	b.n	800a620 <_dtoa_r+0x6a0>
 800a680:	9a08      	ldr	r2, [sp, #32]
 800a682:	2a00      	cmp	r2, #0
 800a684:	f000 80d7 	beq.w	800a836 <_dtoa_r+0x8b6>
 800a688:	9a06      	ldr	r2, [sp, #24]
 800a68a:	2a01      	cmp	r2, #1
 800a68c:	f300 80ba 	bgt.w	800a804 <_dtoa_r+0x884>
 800a690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a692:	2a00      	cmp	r2, #0
 800a694:	f000 80b2 	beq.w	800a7fc <_dtoa_r+0x87c>
 800a698:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a69c:	9e07      	ldr	r6, [sp, #28]
 800a69e:	9d04      	ldr	r5, [sp, #16]
 800a6a0:	9a04      	ldr	r2, [sp, #16]
 800a6a2:	441a      	add	r2, r3
 800a6a4:	9204      	str	r2, [sp, #16]
 800a6a6:	9a05      	ldr	r2, [sp, #20]
 800a6a8:	2101      	movs	r1, #1
 800a6aa:	441a      	add	r2, r3
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	9205      	str	r2, [sp, #20]
 800a6b0:	f000 ff24 	bl	800b4fc <__i2b>
 800a6b4:	4607      	mov	r7, r0
 800a6b6:	2d00      	cmp	r5, #0
 800a6b8:	dd0c      	ble.n	800a6d4 <_dtoa_r+0x754>
 800a6ba:	9b05      	ldr	r3, [sp, #20]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	dd09      	ble.n	800a6d4 <_dtoa_r+0x754>
 800a6c0:	42ab      	cmp	r3, r5
 800a6c2:	9a04      	ldr	r2, [sp, #16]
 800a6c4:	bfa8      	it	ge
 800a6c6:	462b      	movge	r3, r5
 800a6c8:	1ad2      	subs	r2, r2, r3
 800a6ca:	9204      	str	r2, [sp, #16]
 800a6cc:	9a05      	ldr	r2, [sp, #20]
 800a6ce:	1aed      	subs	r5, r5, r3
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	9305      	str	r3, [sp, #20]
 800a6d4:	9b07      	ldr	r3, [sp, #28]
 800a6d6:	b31b      	cbz	r3, 800a720 <_dtoa_r+0x7a0>
 800a6d8:	9b08      	ldr	r3, [sp, #32]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f000 80af 	beq.w	800a83e <_dtoa_r+0x8be>
 800a6e0:	2e00      	cmp	r6, #0
 800a6e2:	dd13      	ble.n	800a70c <_dtoa_r+0x78c>
 800a6e4:	4639      	mov	r1, r7
 800a6e6:	4632      	mov	r2, r6
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f000 ffc7 	bl	800b67c <__pow5mult>
 800a6ee:	ee18 2a10 	vmov	r2, s16
 800a6f2:	4601      	mov	r1, r0
 800a6f4:	4607      	mov	r7, r0
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f000 ff16 	bl	800b528 <__multiply>
 800a6fc:	ee18 1a10 	vmov	r1, s16
 800a700:	4680      	mov	r8, r0
 800a702:	4620      	mov	r0, r4
 800a704:	f000 fdf8 	bl	800b2f8 <_Bfree>
 800a708:	ee08 8a10 	vmov	s16, r8
 800a70c:	9b07      	ldr	r3, [sp, #28]
 800a70e:	1b9a      	subs	r2, r3, r6
 800a710:	d006      	beq.n	800a720 <_dtoa_r+0x7a0>
 800a712:	ee18 1a10 	vmov	r1, s16
 800a716:	4620      	mov	r0, r4
 800a718:	f000 ffb0 	bl	800b67c <__pow5mult>
 800a71c:	ee08 0a10 	vmov	s16, r0
 800a720:	2101      	movs	r1, #1
 800a722:	4620      	mov	r0, r4
 800a724:	f000 feea 	bl	800b4fc <__i2b>
 800a728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	4606      	mov	r6, r0
 800a72e:	f340 8088 	ble.w	800a842 <_dtoa_r+0x8c2>
 800a732:	461a      	mov	r2, r3
 800a734:	4601      	mov	r1, r0
 800a736:	4620      	mov	r0, r4
 800a738:	f000 ffa0 	bl	800b67c <__pow5mult>
 800a73c:	9b06      	ldr	r3, [sp, #24]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	4606      	mov	r6, r0
 800a742:	f340 8081 	ble.w	800a848 <_dtoa_r+0x8c8>
 800a746:	f04f 0800 	mov.w	r8, #0
 800a74a:	6933      	ldr	r3, [r6, #16]
 800a74c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a750:	6918      	ldr	r0, [r3, #16]
 800a752:	f000 fe83 	bl	800b45c <__hi0bits>
 800a756:	f1c0 0020 	rsb	r0, r0, #32
 800a75a:	9b05      	ldr	r3, [sp, #20]
 800a75c:	4418      	add	r0, r3
 800a75e:	f010 001f 	ands.w	r0, r0, #31
 800a762:	f000 8092 	beq.w	800a88a <_dtoa_r+0x90a>
 800a766:	f1c0 0320 	rsb	r3, r0, #32
 800a76a:	2b04      	cmp	r3, #4
 800a76c:	f340 808a 	ble.w	800a884 <_dtoa_r+0x904>
 800a770:	f1c0 001c 	rsb	r0, r0, #28
 800a774:	9b04      	ldr	r3, [sp, #16]
 800a776:	4403      	add	r3, r0
 800a778:	9304      	str	r3, [sp, #16]
 800a77a:	9b05      	ldr	r3, [sp, #20]
 800a77c:	4403      	add	r3, r0
 800a77e:	4405      	add	r5, r0
 800a780:	9305      	str	r3, [sp, #20]
 800a782:	9b04      	ldr	r3, [sp, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	dd07      	ble.n	800a798 <_dtoa_r+0x818>
 800a788:	ee18 1a10 	vmov	r1, s16
 800a78c:	461a      	mov	r2, r3
 800a78e:	4620      	mov	r0, r4
 800a790:	f000 ffce 	bl	800b730 <__lshift>
 800a794:	ee08 0a10 	vmov	s16, r0
 800a798:	9b05      	ldr	r3, [sp, #20]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	dd05      	ble.n	800a7aa <_dtoa_r+0x82a>
 800a79e:	4631      	mov	r1, r6
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f000 ffc4 	bl	800b730 <__lshift>
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d06e      	beq.n	800a88e <_dtoa_r+0x90e>
 800a7b0:	ee18 0a10 	vmov	r0, s16
 800a7b4:	4631      	mov	r1, r6
 800a7b6:	f001 f82b 	bl	800b810 <__mcmp>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	da67      	bge.n	800a88e <_dtoa_r+0x90e>
 800a7be:	9b00      	ldr	r3, [sp, #0]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	ee18 1a10 	vmov	r1, s16
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	220a      	movs	r2, #10
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f000 fdb5 	bl	800b33c <__multadd>
 800a7d2:	9b08      	ldr	r3, [sp, #32]
 800a7d4:	ee08 0a10 	vmov	s16, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 81b1 	beq.w	800ab40 <_dtoa_r+0xbc0>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	220a      	movs	r2, #10
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f000 fda9 	bl	800b33c <__multadd>
 800a7ea:	9b02      	ldr	r3, [sp, #8]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	4607      	mov	r7, r0
 800a7f0:	f300 808e 	bgt.w	800a910 <_dtoa_r+0x990>
 800a7f4:	9b06      	ldr	r3, [sp, #24]
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	dc51      	bgt.n	800a89e <_dtoa_r+0x91e>
 800a7fa:	e089      	b.n	800a910 <_dtoa_r+0x990>
 800a7fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a802:	e74b      	b.n	800a69c <_dtoa_r+0x71c>
 800a804:	9b03      	ldr	r3, [sp, #12]
 800a806:	1e5e      	subs	r6, r3, #1
 800a808:	9b07      	ldr	r3, [sp, #28]
 800a80a:	42b3      	cmp	r3, r6
 800a80c:	bfbf      	itttt	lt
 800a80e:	9b07      	ldrlt	r3, [sp, #28]
 800a810:	9607      	strlt	r6, [sp, #28]
 800a812:	1af2      	sublt	r2, r6, r3
 800a814:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a816:	bfb6      	itet	lt
 800a818:	189b      	addlt	r3, r3, r2
 800a81a:	1b9e      	subge	r6, r3, r6
 800a81c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a81e:	9b03      	ldr	r3, [sp, #12]
 800a820:	bfb8      	it	lt
 800a822:	2600      	movlt	r6, #0
 800a824:	2b00      	cmp	r3, #0
 800a826:	bfb7      	itett	lt
 800a828:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a82c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a830:	1a9d      	sublt	r5, r3, r2
 800a832:	2300      	movlt	r3, #0
 800a834:	e734      	b.n	800a6a0 <_dtoa_r+0x720>
 800a836:	9e07      	ldr	r6, [sp, #28]
 800a838:	9d04      	ldr	r5, [sp, #16]
 800a83a:	9f08      	ldr	r7, [sp, #32]
 800a83c:	e73b      	b.n	800a6b6 <_dtoa_r+0x736>
 800a83e:	9a07      	ldr	r2, [sp, #28]
 800a840:	e767      	b.n	800a712 <_dtoa_r+0x792>
 800a842:	9b06      	ldr	r3, [sp, #24]
 800a844:	2b01      	cmp	r3, #1
 800a846:	dc18      	bgt.n	800a87a <_dtoa_r+0x8fa>
 800a848:	f1ba 0f00 	cmp.w	sl, #0
 800a84c:	d115      	bne.n	800a87a <_dtoa_r+0x8fa>
 800a84e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a852:	b993      	cbnz	r3, 800a87a <_dtoa_r+0x8fa>
 800a854:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a858:	0d1b      	lsrs	r3, r3, #20
 800a85a:	051b      	lsls	r3, r3, #20
 800a85c:	b183      	cbz	r3, 800a880 <_dtoa_r+0x900>
 800a85e:	9b04      	ldr	r3, [sp, #16]
 800a860:	3301      	adds	r3, #1
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	9b05      	ldr	r3, [sp, #20]
 800a866:	3301      	adds	r3, #1
 800a868:	9305      	str	r3, [sp, #20]
 800a86a:	f04f 0801 	mov.w	r8, #1
 800a86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a870:	2b00      	cmp	r3, #0
 800a872:	f47f af6a 	bne.w	800a74a <_dtoa_r+0x7ca>
 800a876:	2001      	movs	r0, #1
 800a878:	e76f      	b.n	800a75a <_dtoa_r+0x7da>
 800a87a:	f04f 0800 	mov.w	r8, #0
 800a87e:	e7f6      	b.n	800a86e <_dtoa_r+0x8ee>
 800a880:	4698      	mov	r8, r3
 800a882:	e7f4      	b.n	800a86e <_dtoa_r+0x8ee>
 800a884:	f43f af7d 	beq.w	800a782 <_dtoa_r+0x802>
 800a888:	4618      	mov	r0, r3
 800a88a:	301c      	adds	r0, #28
 800a88c:	e772      	b.n	800a774 <_dtoa_r+0x7f4>
 800a88e:	9b03      	ldr	r3, [sp, #12]
 800a890:	2b00      	cmp	r3, #0
 800a892:	dc37      	bgt.n	800a904 <_dtoa_r+0x984>
 800a894:	9b06      	ldr	r3, [sp, #24]
 800a896:	2b02      	cmp	r3, #2
 800a898:	dd34      	ble.n	800a904 <_dtoa_r+0x984>
 800a89a:	9b03      	ldr	r3, [sp, #12]
 800a89c:	9302      	str	r3, [sp, #8]
 800a89e:	9b02      	ldr	r3, [sp, #8]
 800a8a0:	b96b      	cbnz	r3, 800a8be <_dtoa_r+0x93e>
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	2205      	movs	r2, #5
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f000 fd48 	bl	800b33c <__multadd>
 800a8ac:	4601      	mov	r1, r0
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	ee18 0a10 	vmov	r0, s16
 800a8b4:	f000 ffac 	bl	800b810 <__mcmp>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	f73f adbb 	bgt.w	800a434 <_dtoa_r+0x4b4>
 800a8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8c0:	9d01      	ldr	r5, [sp, #4]
 800a8c2:	43db      	mvns	r3, r3
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	f04f 0800 	mov.w	r8, #0
 800a8ca:	4631      	mov	r1, r6
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f000 fd13 	bl	800b2f8 <_Bfree>
 800a8d2:	2f00      	cmp	r7, #0
 800a8d4:	f43f aea4 	beq.w	800a620 <_dtoa_r+0x6a0>
 800a8d8:	f1b8 0f00 	cmp.w	r8, #0
 800a8dc:	d005      	beq.n	800a8ea <_dtoa_r+0x96a>
 800a8de:	45b8      	cmp	r8, r7
 800a8e0:	d003      	beq.n	800a8ea <_dtoa_r+0x96a>
 800a8e2:	4641      	mov	r1, r8
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f000 fd07 	bl	800b2f8 <_Bfree>
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f000 fd03 	bl	800b2f8 <_Bfree>
 800a8f2:	e695      	b.n	800a620 <_dtoa_r+0x6a0>
 800a8f4:	2600      	movs	r6, #0
 800a8f6:	4637      	mov	r7, r6
 800a8f8:	e7e1      	b.n	800a8be <_dtoa_r+0x93e>
 800a8fa:	9700      	str	r7, [sp, #0]
 800a8fc:	4637      	mov	r7, r6
 800a8fe:	e599      	b.n	800a434 <_dtoa_r+0x4b4>
 800a900:	40240000 	.word	0x40240000
 800a904:	9b08      	ldr	r3, [sp, #32]
 800a906:	2b00      	cmp	r3, #0
 800a908:	f000 80ca 	beq.w	800aaa0 <_dtoa_r+0xb20>
 800a90c:	9b03      	ldr	r3, [sp, #12]
 800a90e:	9302      	str	r3, [sp, #8]
 800a910:	2d00      	cmp	r5, #0
 800a912:	dd05      	ble.n	800a920 <_dtoa_r+0x9a0>
 800a914:	4639      	mov	r1, r7
 800a916:	462a      	mov	r2, r5
 800a918:	4620      	mov	r0, r4
 800a91a:	f000 ff09 	bl	800b730 <__lshift>
 800a91e:	4607      	mov	r7, r0
 800a920:	f1b8 0f00 	cmp.w	r8, #0
 800a924:	d05b      	beq.n	800a9de <_dtoa_r+0xa5e>
 800a926:	6879      	ldr	r1, [r7, #4]
 800a928:	4620      	mov	r0, r4
 800a92a:	f000 fca5 	bl	800b278 <_Balloc>
 800a92e:	4605      	mov	r5, r0
 800a930:	b928      	cbnz	r0, 800a93e <_dtoa_r+0x9be>
 800a932:	4b87      	ldr	r3, [pc, #540]	; (800ab50 <_dtoa_r+0xbd0>)
 800a934:	4602      	mov	r2, r0
 800a936:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a93a:	f7ff bb3b 	b.w	8009fb4 <_dtoa_r+0x34>
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	3202      	adds	r2, #2
 800a942:	0092      	lsls	r2, r2, #2
 800a944:	f107 010c 	add.w	r1, r7, #12
 800a948:	300c      	adds	r0, #12
 800a94a:	f7fd fd29 	bl	80083a0 <memcpy>
 800a94e:	2201      	movs	r2, #1
 800a950:	4629      	mov	r1, r5
 800a952:	4620      	mov	r0, r4
 800a954:	f000 feec 	bl	800b730 <__lshift>
 800a958:	9b01      	ldr	r3, [sp, #4]
 800a95a:	f103 0901 	add.w	r9, r3, #1
 800a95e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a962:	4413      	add	r3, r2
 800a964:	9305      	str	r3, [sp, #20]
 800a966:	f00a 0301 	and.w	r3, sl, #1
 800a96a:	46b8      	mov	r8, r7
 800a96c:	9304      	str	r3, [sp, #16]
 800a96e:	4607      	mov	r7, r0
 800a970:	4631      	mov	r1, r6
 800a972:	ee18 0a10 	vmov	r0, s16
 800a976:	f7ff fa77 	bl	8009e68 <quorem>
 800a97a:	4641      	mov	r1, r8
 800a97c:	9002      	str	r0, [sp, #8]
 800a97e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a982:	ee18 0a10 	vmov	r0, s16
 800a986:	f000 ff43 	bl	800b810 <__mcmp>
 800a98a:	463a      	mov	r2, r7
 800a98c:	9003      	str	r0, [sp, #12]
 800a98e:	4631      	mov	r1, r6
 800a990:	4620      	mov	r0, r4
 800a992:	f000 ff59 	bl	800b848 <__mdiff>
 800a996:	68c2      	ldr	r2, [r0, #12]
 800a998:	f109 3bff 	add.w	fp, r9, #4294967295
 800a99c:	4605      	mov	r5, r0
 800a99e:	bb02      	cbnz	r2, 800a9e2 <_dtoa_r+0xa62>
 800a9a0:	4601      	mov	r1, r0
 800a9a2:	ee18 0a10 	vmov	r0, s16
 800a9a6:	f000 ff33 	bl	800b810 <__mcmp>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	9207      	str	r2, [sp, #28]
 800a9b2:	f000 fca1 	bl	800b2f8 <_Bfree>
 800a9b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a9ba:	ea43 0102 	orr.w	r1, r3, r2
 800a9be:	9b04      	ldr	r3, [sp, #16]
 800a9c0:	430b      	orrs	r3, r1
 800a9c2:	464d      	mov	r5, r9
 800a9c4:	d10f      	bne.n	800a9e6 <_dtoa_r+0xa66>
 800a9c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9ca:	d02a      	beq.n	800aa22 <_dtoa_r+0xaa2>
 800a9cc:	9b03      	ldr	r3, [sp, #12]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	dd02      	ble.n	800a9d8 <_dtoa_r+0xa58>
 800a9d2:	9b02      	ldr	r3, [sp, #8]
 800a9d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a9d8:	f88b a000 	strb.w	sl, [fp]
 800a9dc:	e775      	b.n	800a8ca <_dtoa_r+0x94a>
 800a9de:	4638      	mov	r0, r7
 800a9e0:	e7ba      	b.n	800a958 <_dtoa_r+0x9d8>
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	e7e2      	b.n	800a9ac <_dtoa_r+0xa2c>
 800a9e6:	9b03      	ldr	r3, [sp, #12]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	db04      	blt.n	800a9f6 <_dtoa_r+0xa76>
 800a9ec:	9906      	ldr	r1, [sp, #24]
 800a9ee:	430b      	orrs	r3, r1
 800a9f0:	9904      	ldr	r1, [sp, #16]
 800a9f2:	430b      	orrs	r3, r1
 800a9f4:	d122      	bne.n	800aa3c <_dtoa_r+0xabc>
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	ddee      	ble.n	800a9d8 <_dtoa_r+0xa58>
 800a9fa:	ee18 1a10 	vmov	r1, s16
 800a9fe:	2201      	movs	r2, #1
 800aa00:	4620      	mov	r0, r4
 800aa02:	f000 fe95 	bl	800b730 <__lshift>
 800aa06:	4631      	mov	r1, r6
 800aa08:	ee08 0a10 	vmov	s16, r0
 800aa0c:	f000 ff00 	bl	800b810 <__mcmp>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	dc03      	bgt.n	800aa1c <_dtoa_r+0xa9c>
 800aa14:	d1e0      	bne.n	800a9d8 <_dtoa_r+0xa58>
 800aa16:	f01a 0f01 	tst.w	sl, #1
 800aa1a:	d0dd      	beq.n	800a9d8 <_dtoa_r+0xa58>
 800aa1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa20:	d1d7      	bne.n	800a9d2 <_dtoa_r+0xa52>
 800aa22:	2339      	movs	r3, #57	; 0x39
 800aa24:	f88b 3000 	strb.w	r3, [fp]
 800aa28:	462b      	mov	r3, r5
 800aa2a:	461d      	mov	r5, r3
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa32:	2a39      	cmp	r2, #57	; 0x39
 800aa34:	d071      	beq.n	800ab1a <_dtoa_r+0xb9a>
 800aa36:	3201      	adds	r2, #1
 800aa38:	701a      	strb	r2, [r3, #0]
 800aa3a:	e746      	b.n	800a8ca <_dtoa_r+0x94a>
 800aa3c:	2a00      	cmp	r2, #0
 800aa3e:	dd07      	ble.n	800aa50 <_dtoa_r+0xad0>
 800aa40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa44:	d0ed      	beq.n	800aa22 <_dtoa_r+0xaa2>
 800aa46:	f10a 0301 	add.w	r3, sl, #1
 800aa4a:	f88b 3000 	strb.w	r3, [fp]
 800aa4e:	e73c      	b.n	800a8ca <_dtoa_r+0x94a>
 800aa50:	9b05      	ldr	r3, [sp, #20]
 800aa52:	f809 ac01 	strb.w	sl, [r9, #-1]
 800aa56:	4599      	cmp	r9, r3
 800aa58:	d047      	beq.n	800aaea <_dtoa_r+0xb6a>
 800aa5a:	ee18 1a10 	vmov	r1, s16
 800aa5e:	2300      	movs	r3, #0
 800aa60:	220a      	movs	r2, #10
 800aa62:	4620      	mov	r0, r4
 800aa64:	f000 fc6a 	bl	800b33c <__multadd>
 800aa68:	45b8      	cmp	r8, r7
 800aa6a:	ee08 0a10 	vmov	s16, r0
 800aa6e:	f04f 0300 	mov.w	r3, #0
 800aa72:	f04f 020a 	mov.w	r2, #10
 800aa76:	4641      	mov	r1, r8
 800aa78:	4620      	mov	r0, r4
 800aa7a:	d106      	bne.n	800aa8a <_dtoa_r+0xb0a>
 800aa7c:	f000 fc5e 	bl	800b33c <__multadd>
 800aa80:	4680      	mov	r8, r0
 800aa82:	4607      	mov	r7, r0
 800aa84:	f109 0901 	add.w	r9, r9, #1
 800aa88:	e772      	b.n	800a970 <_dtoa_r+0x9f0>
 800aa8a:	f000 fc57 	bl	800b33c <__multadd>
 800aa8e:	4639      	mov	r1, r7
 800aa90:	4680      	mov	r8, r0
 800aa92:	2300      	movs	r3, #0
 800aa94:	220a      	movs	r2, #10
 800aa96:	4620      	mov	r0, r4
 800aa98:	f000 fc50 	bl	800b33c <__multadd>
 800aa9c:	4607      	mov	r7, r0
 800aa9e:	e7f1      	b.n	800aa84 <_dtoa_r+0xb04>
 800aaa0:	9b03      	ldr	r3, [sp, #12]
 800aaa2:	9302      	str	r3, [sp, #8]
 800aaa4:	9d01      	ldr	r5, [sp, #4]
 800aaa6:	ee18 0a10 	vmov	r0, s16
 800aaaa:	4631      	mov	r1, r6
 800aaac:	f7ff f9dc 	bl	8009e68 <quorem>
 800aab0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aab4:	9b01      	ldr	r3, [sp, #4]
 800aab6:	f805 ab01 	strb.w	sl, [r5], #1
 800aaba:	1aea      	subs	r2, r5, r3
 800aabc:	9b02      	ldr	r3, [sp, #8]
 800aabe:	4293      	cmp	r3, r2
 800aac0:	dd09      	ble.n	800aad6 <_dtoa_r+0xb56>
 800aac2:	ee18 1a10 	vmov	r1, s16
 800aac6:	2300      	movs	r3, #0
 800aac8:	220a      	movs	r2, #10
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 fc36 	bl	800b33c <__multadd>
 800aad0:	ee08 0a10 	vmov	s16, r0
 800aad4:	e7e7      	b.n	800aaa6 <_dtoa_r+0xb26>
 800aad6:	9b02      	ldr	r3, [sp, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	bfc8      	it	gt
 800aadc:	461d      	movgt	r5, r3
 800aade:	9b01      	ldr	r3, [sp, #4]
 800aae0:	bfd8      	it	le
 800aae2:	2501      	movle	r5, #1
 800aae4:	441d      	add	r5, r3
 800aae6:	f04f 0800 	mov.w	r8, #0
 800aaea:	ee18 1a10 	vmov	r1, s16
 800aaee:	2201      	movs	r2, #1
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f000 fe1d 	bl	800b730 <__lshift>
 800aaf6:	4631      	mov	r1, r6
 800aaf8:	ee08 0a10 	vmov	s16, r0
 800aafc:	f000 fe88 	bl	800b810 <__mcmp>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	dc91      	bgt.n	800aa28 <_dtoa_r+0xaa8>
 800ab04:	d102      	bne.n	800ab0c <_dtoa_r+0xb8c>
 800ab06:	f01a 0f01 	tst.w	sl, #1
 800ab0a:	d18d      	bne.n	800aa28 <_dtoa_r+0xaa8>
 800ab0c:	462b      	mov	r3, r5
 800ab0e:	461d      	mov	r5, r3
 800ab10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab14:	2a30      	cmp	r2, #48	; 0x30
 800ab16:	d0fa      	beq.n	800ab0e <_dtoa_r+0xb8e>
 800ab18:	e6d7      	b.n	800a8ca <_dtoa_r+0x94a>
 800ab1a:	9a01      	ldr	r2, [sp, #4]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d184      	bne.n	800aa2a <_dtoa_r+0xaaa>
 800ab20:	9b00      	ldr	r3, [sp, #0]
 800ab22:	3301      	adds	r3, #1
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	2331      	movs	r3, #49	; 0x31
 800ab28:	7013      	strb	r3, [r2, #0]
 800ab2a:	e6ce      	b.n	800a8ca <_dtoa_r+0x94a>
 800ab2c:	4b09      	ldr	r3, [pc, #36]	; (800ab54 <_dtoa_r+0xbd4>)
 800ab2e:	f7ff ba95 	b.w	800a05c <_dtoa_r+0xdc>
 800ab32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f47f aa6e 	bne.w	800a016 <_dtoa_r+0x96>
 800ab3a:	4b07      	ldr	r3, [pc, #28]	; (800ab58 <_dtoa_r+0xbd8>)
 800ab3c:	f7ff ba8e 	b.w	800a05c <_dtoa_r+0xdc>
 800ab40:	9b02      	ldr	r3, [sp, #8]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	dcae      	bgt.n	800aaa4 <_dtoa_r+0xb24>
 800ab46:	9b06      	ldr	r3, [sp, #24]
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	f73f aea8 	bgt.w	800a89e <_dtoa_r+0x91e>
 800ab4e:	e7a9      	b.n	800aaa4 <_dtoa_r+0xb24>
 800ab50:	0800cf58 	.word	0x0800cf58
 800ab54:	0800cd5c 	.word	0x0800cd5c
 800ab58:	0800ced9 	.word	0x0800ced9

0800ab5c <rshift>:
 800ab5c:	6903      	ldr	r3, [r0, #16]
 800ab5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab66:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab6a:	f100 0414 	add.w	r4, r0, #20
 800ab6e:	dd45      	ble.n	800abfc <rshift+0xa0>
 800ab70:	f011 011f 	ands.w	r1, r1, #31
 800ab74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab7c:	d10c      	bne.n	800ab98 <rshift+0x3c>
 800ab7e:	f100 0710 	add.w	r7, r0, #16
 800ab82:	4629      	mov	r1, r5
 800ab84:	42b1      	cmp	r1, r6
 800ab86:	d334      	bcc.n	800abf2 <rshift+0x96>
 800ab88:	1a9b      	subs	r3, r3, r2
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	1eea      	subs	r2, r5, #3
 800ab8e:	4296      	cmp	r6, r2
 800ab90:	bf38      	it	cc
 800ab92:	2300      	movcc	r3, #0
 800ab94:	4423      	add	r3, r4
 800ab96:	e015      	b.n	800abc4 <rshift+0x68>
 800ab98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab9c:	f1c1 0820 	rsb	r8, r1, #32
 800aba0:	40cf      	lsrs	r7, r1
 800aba2:	f105 0e04 	add.w	lr, r5, #4
 800aba6:	46a1      	mov	r9, r4
 800aba8:	4576      	cmp	r6, lr
 800abaa:	46f4      	mov	ip, lr
 800abac:	d815      	bhi.n	800abda <rshift+0x7e>
 800abae:	1a9a      	subs	r2, r3, r2
 800abb0:	0092      	lsls	r2, r2, #2
 800abb2:	3a04      	subs	r2, #4
 800abb4:	3501      	adds	r5, #1
 800abb6:	42ae      	cmp	r6, r5
 800abb8:	bf38      	it	cc
 800abba:	2200      	movcc	r2, #0
 800abbc:	18a3      	adds	r3, r4, r2
 800abbe:	50a7      	str	r7, [r4, r2]
 800abc0:	b107      	cbz	r7, 800abc4 <rshift+0x68>
 800abc2:	3304      	adds	r3, #4
 800abc4:	1b1a      	subs	r2, r3, r4
 800abc6:	42a3      	cmp	r3, r4
 800abc8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800abcc:	bf08      	it	eq
 800abce:	2300      	moveq	r3, #0
 800abd0:	6102      	str	r2, [r0, #16]
 800abd2:	bf08      	it	eq
 800abd4:	6143      	streq	r3, [r0, #20]
 800abd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abda:	f8dc c000 	ldr.w	ip, [ip]
 800abde:	fa0c fc08 	lsl.w	ip, ip, r8
 800abe2:	ea4c 0707 	orr.w	r7, ip, r7
 800abe6:	f849 7b04 	str.w	r7, [r9], #4
 800abea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abee:	40cf      	lsrs	r7, r1
 800abf0:	e7da      	b.n	800aba8 <rshift+0x4c>
 800abf2:	f851 cb04 	ldr.w	ip, [r1], #4
 800abf6:	f847 cf04 	str.w	ip, [r7, #4]!
 800abfa:	e7c3      	b.n	800ab84 <rshift+0x28>
 800abfc:	4623      	mov	r3, r4
 800abfe:	e7e1      	b.n	800abc4 <rshift+0x68>

0800ac00 <__hexdig_fun>:
 800ac00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ac04:	2b09      	cmp	r3, #9
 800ac06:	d802      	bhi.n	800ac0e <__hexdig_fun+0xe>
 800ac08:	3820      	subs	r0, #32
 800ac0a:	b2c0      	uxtb	r0, r0
 800ac0c:	4770      	bx	lr
 800ac0e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ac12:	2b05      	cmp	r3, #5
 800ac14:	d801      	bhi.n	800ac1a <__hexdig_fun+0x1a>
 800ac16:	3847      	subs	r0, #71	; 0x47
 800ac18:	e7f7      	b.n	800ac0a <__hexdig_fun+0xa>
 800ac1a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ac1e:	2b05      	cmp	r3, #5
 800ac20:	d801      	bhi.n	800ac26 <__hexdig_fun+0x26>
 800ac22:	3827      	subs	r0, #39	; 0x27
 800ac24:	e7f1      	b.n	800ac0a <__hexdig_fun+0xa>
 800ac26:	2000      	movs	r0, #0
 800ac28:	4770      	bx	lr
	...

0800ac2c <__gethex>:
 800ac2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac30:	ed2d 8b02 	vpush	{d8}
 800ac34:	b089      	sub	sp, #36	; 0x24
 800ac36:	ee08 0a10 	vmov	s16, r0
 800ac3a:	9304      	str	r3, [sp, #16]
 800ac3c:	4bb4      	ldr	r3, [pc, #720]	; (800af10 <__gethex+0x2e4>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	9301      	str	r3, [sp, #4]
 800ac42:	4618      	mov	r0, r3
 800ac44:	468b      	mov	fp, r1
 800ac46:	4690      	mov	r8, r2
 800ac48:	f7f5 faca 	bl	80001e0 <strlen>
 800ac4c:	9b01      	ldr	r3, [sp, #4]
 800ac4e:	f8db 2000 	ldr.w	r2, [fp]
 800ac52:	4403      	add	r3, r0
 800ac54:	4682      	mov	sl, r0
 800ac56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ac5a:	9305      	str	r3, [sp, #20]
 800ac5c:	1c93      	adds	r3, r2, #2
 800ac5e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ac62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ac66:	32fe      	adds	r2, #254	; 0xfe
 800ac68:	18d1      	adds	r1, r2, r3
 800ac6a:	461f      	mov	r7, r3
 800ac6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ac70:	9100      	str	r1, [sp, #0]
 800ac72:	2830      	cmp	r0, #48	; 0x30
 800ac74:	d0f8      	beq.n	800ac68 <__gethex+0x3c>
 800ac76:	f7ff ffc3 	bl	800ac00 <__hexdig_fun>
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d13a      	bne.n	800acf6 <__gethex+0xca>
 800ac80:	9901      	ldr	r1, [sp, #4]
 800ac82:	4652      	mov	r2, sl
 800ac84:	4638      	mov	r0, r7
 800ac86:	f001 fa23 	bl	800c0d0 <strncmp>
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	d168      	bne.n	800ad62 <__gethex+0x136>
 800ac90:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ac94:	eb07 060a 	add.w	r6, r7, sl
 800ac98:	f7ff ffb2 	bl	800ac00 <__hexdig_fun>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d062      	beq.n	800ad66 <__gethex+0x13a>
 800aca0:	4633      	mov	r3, r6
 800aca2:	7818      	ldrb	r0, [r3, #0]
 800aca4:	2830      	cmp	r0, #48	; 0x30
 800aca6:	461f      	mov	r7, r3
 800aca8:	f103 0301 	add.w	r3, r3, #1
 800acac:	d0f9      	beq.n	800aca2 <__gethex+0x76>
 800acae:	f7ff ffa7 	bl	800ac00 <__hexdig_fun>
 800acb2:	2301      	movs	r3, #1
 800acb4:	fab0 f480 	clz	r4, r0
 800acb8:	0964      	lsrs	r4, r4, #5
 800acba:	4635      	mov	r5, r6
 800acbc:	9300      	str	r3, [sp, #0]
 800acbe:	463a      	mov	r2, r7
 800acc0:	4616      	mov	r6, r2
 800acc2:	3201      	adds	r2, #1
 800acc4:	7830      	ldrb	r0, [r6, #0]
 800acc6:	f7ff ff9b 	bl	800ac00 <__hexdig_fun>
 800acca:	2800      	cmp	r0, #0
 800accc:	d1f8      	bne.n	800acc0 <__gethex+0x94>
 800acce:	9901      	ldr	r1, [sp, #4]
 800acd0:	4652      	mov	r2, sl
 800acd2:	4630      	mov	r0, r6
 800acd4:	f001 f9fc 	bl	800c0d0 <strncmp>
 800acd8:	b980      	cbnz	r0, 800acfc <__gethex+0xd0>
 800acda:	b94d      	cbnz	r5, 800acf0 <__gethex+0xc4>
 800acdc:	eb06 050a 	add.w	r5, r6, sl
 800ace0:	462a      	mov	r2, r5
 800ace2:	4616      	mov	r6, r2
 800ace4:	3201      	adds	r2, #1
 800ace6:	7830      	ldrb	r0, [r6, #0]
 800ace8:	f7ff ff8a 	bl	800ac00 <__hexdig_fun>
 800acec:	2800      	cmp	r0, #0
 800acee:	d1f8      	bne.n	800ace2 <__gethex+0xb6>
 800acf0:	1bad      	subs	r5, r5, r6
 800acf2:	00ad      	lsls	r5, r5, #2
 800acf4:	e004      	b.n	800ad00 <__gethex+0xd4>
 800acf6:	2400      	movs	r4, #0
 800acf8:	4625      	mov	r5, r4
 800acfa:	e7e0      	b.n	800acbe <__gethex+0x92>
 800acfc:	2d00      	cmp	r5, #0
 800acfe:	d1f7      	bne.n	800acf0 <__gethex+0xc4>
 800ad00:	7833      	ldrb	r3, [r6, #0]
 800ad02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ad06:	2b50      	cmp	r3, #80	; 0x50
 800ad08:	d13b      	bne.n	800ad82 <__gethex+0x156>
 800ad0a:	7873      	ldrb	r3, [r6, #1]
 800ad0c:	2b2b      	cmp	r3, #43	; 0x2b
 800ad0e:	d02c      	beq.n	800ad6a <__gethex+0x13e>
 800ad10:	2b2d      	cmp	r3, #45	; 0x2d
 800ad12:	d02e      	beq.n	800ad72 <__gethex+0x146>
 800ad14:	1c71      	adds	r1, r6, #1
 800ad16:	f04f 0900 	mov.w	r9, #0
 800ad1a:	7808      	ldrb	r0, [r1, #0]
 800ad1c:	f7ff ff70 	bl	800ac00 <__hexdig_fun>
 800ad20:	1e43      	subs	r3, r0, #1
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	2b18      	cmp	r3, #24
 800ad26:	d82c      	bhi.n	800ad82 <__gethex+0x156>
 800ad28:	f1a0 0210 	sub.w	r2, r0, #16
 800ad2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad30:	f7ff ff66 	bl	800ac00 <__hexdig_fun>
 800ad34:	1e43      	subs	r3, r0, #1
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	2b18      	cmp	r3, #24
 800ad3a:	d91d      	bls.n	800ad78 <__gethex+0x14c>
 800ad3c:	f1b9 0f00 	cmp.w	r9, #0
 800ad40:	d000      	beq.n	800ad44 <__gethex+0x118>
 800ad42:	4252      	negs	r2, r2
 800ad44:	4415      	add	r5, r2
 800ad46:	f8cb 1000 	str.w	r1, [fp]
 800ad4a:	b1e4      	cbz	r4, 800ad86 <__gethex+0x15a>
 800ad4c:	9b00      	ldr	r3, [sp, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	bf14      	ite	ne
 800ad52:	2700      	movne	r7, #0
 800ad54:	2706      	moveq	r7, #6
 800ad56:	4638      	mov	r0, r7
 800ad58:	b009      	add	sp, #36	; 0x24
 800ad5a:	ecbd 8b02 	vpop	{d8}
 800ad5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad62:	463e      	mov	r6, r7
 800ad64:	4625      	mov	r5, r4
 800ad66:	2401      	movs	r4, #1
 800ad68:	e7ca      	b.n	800ad00 <__gethex+0xd4>
 800ad6a:	f04f 0900 	mov.w	r9, #0
 800ad6e:	1cb1      	adds	r1, r6, #2
 800ad70:	e7d3      	b.n	800ad1a <__gethex+0xee>
 800ad72:	f04f 0901 	mov.w	r9, #1
 800ad76:	e7fa      	b.n	800ad6e <__gethex+0x142>
 800ad78:	230a      	movs	r3, #10
 800ad7a:	fb03 0202 	mla	r2, r3, r2, r0
 800ad7e:	3a10      	subs	r2, #16
 800ad80:	e7d4      	b.n	800ad2c <__gethex+0x100>
 800ad82:	4631      	mov	r1, r6
 800ad84:	e7df      	b.n	800ad46 <__gethex+0x11a>
 800ad86:	1bf3      	subs	r3, r6, r7
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	4621      	mov	r1, r4
 800ad8c:	2b07      	cmp	r3, #7
 800ad8e:	dc0b      	bgt.n	800ada8 <__gethex+0x17c>
 800ad90:	ee18 0a10 	vmov	r0, s16
 800ad94:	f000 fa70 	bl	800b278 <_Balloc>
 800ad98:	4604      	mov	r4, r0
 800ad9a:	b940      	cbnz	r0, 800adae <__gethex+0x182>
 800ad9c:	4b5d      	ldr	r3, [pc, #372]	; (800af14 <__gethex+0x2e8>)
 800ad9e:	4602      	mov	r2, r0
 800ada0:	21de      	movs	r1, #222	; 0xde
 800ada2:	485d      	ldr	r0, [pc, #372]	; (800af18 <__gethex+0x2ec>)
 800ada4:	f001 f9b6 	bl	800c114 <__assert_func>
 800ada8:	3101      	adds	r1, #1
 800adaa:	105b      	asrs	r3, r3, #1
 800adac:	e7ee      	b.n	800ad8c <__gethex+0x160>
 800adae:	f100 0914 	add.w	r9, r0, #20
 800adb2:	f04f 0b00 	mov.w	fp, #0
 800adb6:	f1ca 0301 	rsb	r3, sl, #1
 800adba:	f8cd 9008 	str.w	r9, [sp, #8]
 800adbe:	f8cd b000 	str.w	fp, [sp]
 800adc2:	9306      	str	r3, [sp, #24]
 800adc4:	42b7      	cmp	r7, r6
 800adc6:	d340      	bcc.n	800ae4a <__gethex+0x21e>
 800adc8:	9802      	ldr	r0, [sp, #8]
 800adca:	9b00      	ldr	r3, [sp, #0]
 800adcc:	f840 3b04 	str.w	r3, [r0], #4
 800add0:	eba0 0009 	sub.w	r0, r0, r9
 800add4:	1080      	asrs	r0, r0, #2
 800add6:	0146      	lsls	r6, r0, #5
 800add8:	6120      	str	r0, [r4, #16]
 800adda:	4618      	mov	r0, r3
 800addc:	f000 fb3e 	bl	800b45c <__hi0bits>
 800ade0:	1a30      	subs	r0, r6, r0
 800ade2:	f8d8 6000 	ldr.w	r6, [r8]
 800ade6:	42b0      	cmp	r0, r6
 800ade8:	dd63      	ble.n	800aeb2 <__gethex+0x286>
 800adea:	1b87      	subs	r7, r0, r6
 800adec:	4639      	mov	r1, r7
 800adee:	4620      	mov	r0, r4
 800adf0:	f000 fee2 	bl	800bbb8 <__any_on>
 800adf4:	4682      	mov	sl, r0
 800adf6:	b1a8      	cbz	r0, 800ae24 <__gethex+0x1f8>
 800adf8:	1e7b      	subs	r3, r7, #1
 800adfa:	1159      	asrs	r1, r3, #5
 800adfc:	f003 021f 	and.w	r2, r3, #31
 800ae00:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ae04:	f04f 0a01 	mov.w	sl, #1
 800ae08:	fa0a f202 	lsl.w	r2, sl, r2
 800ae0c:	420a      	tst	r2, r1
 800ae0e:	d009      	beq.n	800ae24 <__gethex+0x1f8>
 800ae10:	4553      	cmp	r3, sl
 800ae12:	dd05      	ble.n	800ae20 <__gethex+0x1f4>
 800ae14:	1eb9      	subs	r1, r7, #2
 800ae16:	4620      	mov	r0, r4
 800ae18:	f000 fece 	bl	800bbb8 <__any_on>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	d145      	bne.n	800aeac <__gethex+0x280>
 800ae20:	f04f 0a02 	mov.w	sl, #2
 800ae24:	4639      	mov	r1, r7
 800ae26:	4620      	mov	r0, r4
 800ae28:	f7ff fe98 	bl	800ab5c <rshift>
 800ae2c:	443d      	add	r5, r7
 800ae2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae32:	42ab      	cmp	r3, r5
 800ae34:	da4c      	bge.n	800aed0 <__gethex+0x2a4>
 800ae36:	ee18 0a10 	vmov	r0, s16
 800ae3a:	4621      	mov	r1, r4
 800ae3c:	f000 fa5c 	bl	800b2f8 <_Bfree>
 800ae40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae42:	2300      	movs	r3, #0
 800ae44:	6013      	str	r3, [r2, #0]
 800ae46:	27a3      	movs	r7, #163	; 0xa3
 800ae48:	e785      	b.n	800ad56 <__gethex+0x12a>
 800ae4a:	1e73      	subs	r3, r6, #1
 800ae4c:	9a05      	ldr	r2, [sp, #20]
 800ae4e:	9303      	str	r3, [sp, #12]
 800ae50:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d019      	beq.n	800ae8c <__gethex+0x260>
 800ae58:	f1bb 0f20 	cmp.w	fp, #32
 800ae5c:	d107      	bne.n	800ae6e <__gethex+0x242>
 800ae5e:	9b02      	ldr	r3, [sp, #8]
 800ae60:	9a00      	ldr	r2, [sp, #0]
 800ae62:	f843 2b04 	str.w	r2, [r3], #4
 800ae66:	9302      	str	r3, [sp, #8]
 800ae68:	2300      	movs	r3, #0
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	469b      	mov	fp, r3
 800ae6e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ae72:	f7ff fec5 	bl	800ac00 <__hexdig_fun>
 800ae76:	9b00      	ldr	r3, [sp, #0]
 800ae78:	f000 000f 	and.w	r0, r0, #15
 800ae7c:	fa00 f00b 	lsl.w	r0, r0, fp
 800ae80:	4303      	orrs	r3, r0
 800ae82:	9300      	str	r3, [sp, #0]
 800ae84:	f10b 0b04 	add.w	fp, fp, #4
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	e00d      	b.n	800aea8 <__gethex+0x27c>
 800ae8c:	9b03      	ldr	r3, [sp, #12]
 800ae8e:	9a06      	ldr	r2, [sp, #24]
 800ae90:	4413      	add	r3, r2
 800ae92:	42bb      	cmp	r3, r7
 800ae94:	d3e0      	bcc.n	800ae58 <__gethex+0x22c>
 800ae96:	4618      	mov	r0, r3
 800ae98:	9901      	ldr	r1, [sp, #4]
 800ae9a:	9307      	str	r3, [sp, #28]
 800ae9c:	4652      	mov	r2, sl
 800ae9e:	f001 f917 	bl	800c0d0 <strncmp>
 800aea2:	9b07      	ldr	r3, [sp, #28]
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d1d7      	bne.n	800ae58 <__gethex+0x22c>
 800aea8:	461e      	mov	r6, r3
 800aeaa:	e78b      	b.n	800adc4 <__gethex+0x198>
 800aeac:	f04f 0a03 	mov.w	sl, #3
 800aeb0:	e7b8      	b.n	800ae24 <__gethex+0x1f8>
 800aeb2:	da0a      	bge.n	800aeca <__gethex+0x29e>
 800aeb4:	1a37      	subs	r7, r6, r0
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	ee18 0a10 	vmov	r0, s16
 800aebc:	463a      	mov	r2, r7
 800aebe:	f000 fc37 	bl	800b730 <__lshift>
 800aec2:	1bed      	subs	r5, r5, r7
 800aec4:	4604      	mov	r4, r0
 800aec6:	f100 0914 	add.w	r9, r0, #20
 800aeca:	f04f 0a00 	mov.w	sl, #0
 800aece:	e7ae      	b.n	800ae2e <__gethex+0x202>
 800aed0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aed4:	42a8      	cmp	r0, r5
 800aed6:	dd72      	ble.n	800afbe <__gethex+0x392>
 800aed8:	1b45      	subs	r5, r0, r5
 800aeda:	42ae      	cmp	r6, r5
 800aedc:	dc36      	bgt.n	800af4c <__gethex+0x320>
 800aede:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d02a      	beq.n	800af3c <__gethex+0x310>
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d02c      	beq.n	800af44 <__gethex+0x318>
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d11c      	bne.n	800af28 <__gethex+0x2fc>
 800aeee:	42ae      	cmp	r6, r5
 800aef0:	d11a      	bne.n	800af28 <__gethex+0x2fc>
 800aef2:	2e01      	cmp	r6, #1
 800aef4:	d112      	bne.n	800af1c <__gethex+0x2f0>
 800aef6:	9a04      	ldr	r2, [sp, #16]
 800aef8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	2301      	movs	r3, #1
 800af00:	6123      	str	r3, [r4, #16]
 800af02:	f8c9 3000 	str.w	r3, [r9]
 800af06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af08:	2762      	movs	r7, #98	; 0x62
 800af0a:	601c      	str	r4, [r3, #0]
 800af0c:	e723      	b.n	800ad56 <__gethex+0x12a>
 800af0e:	bf00      	nop
 800af10:	0800cfd0 	.word	0x0800cfd0
 800af14:	0800cf58 	.word	0x0800cf58
 800af18:	0800cf69 	.word	0x0800cf69
 800af1c:	1e71      	subs	r1, r6, #1
 800af1e:	4620      	mov	r0, r4
 800af20:	f000 fe4a 	bl	800bbb8 <__any_on>
 800af24:	2800      	cmp	r0, #0
 800af26:	d1e6      	bne.n	800aef6 <__gethex+0x2ca>
 800af28:	ee18 0a10 	vmov	r0, s16
 800af2c:	4621      	mov	r1, r4
 800af2e:	f000 f9e3 	bl	800b2f8 <_Bfree>
 800af32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af34:	2300      	movs	r3, #0
 800af36:	6013      	str	r3, [r2, #0]
 800af38:	2750      	movs	r7, #80	; 0x50
 800af3a:	e70c      	b.n	800ad56 <__gethex+0x12a>
 800af3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1f2      	bne.n	800af28 <__gethex+0x2fc>
 800af42:	e7d8      	b.n	800aef6 <__gethex+0x2ca>
 800af44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1d5      	bne.n	800aef6 <__gethex+0x2ca>
 800af4a:	e7ed      	b.n	800af28 <__gethex+0x2fc>
 800af4c:	1e6f      	subs	r7, r5, #1
 800af4e:	f1ba 0f00 	cmp.w	sl, #0
 800af52:	d131      	bne.n	800afb8 <__gethex+0x38c>
 800af54:	b127      	cbz	r7, 800af60 <__gethex+0x334>
 800af56:	4639      	mov	r1, r7
 800af58:	4620      	mov	r0, r4
 800af5a:	f000 fe2d 	bl	800bbb8 <__any_on>
 800af5e:	4682      	mov	sl, r0
 800af60:	117b      	asrs	r3, r7, #5
 800af62:	2101      	movs	r1, #1
 800af64:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800af68:	f007 071f 	and.w	r7, r7, #31
 800af6c:	fa01 f707 	lsl.w	r7, r1, r7
 800af70:	421f      	tst	r7, r3
 800af72:	4629      	mov	r1, r5
 800af74:	4620      	mov	r0, r4
 800af76:	bf18      	it	ne
 800af78:	f04a 0a02 	orrne.w	sl, sl, #2
 800af7c:	1b76      	subs	r6, r6, r5
 800af7e:	f7ff fded 	bl	800ab5c <rshift>
 800af82:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800af86:	2702      	movs	r7, #2
 800af88:	f1ba 0f00 	cmp.w	sl, #0
 800af8c:	d048      	beq.n	800b020 <__gethex+0x3f4>
 800af8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af92:	2b02      	cmp	r3, #2
 800af94:	d015      	beq.n	800afc2 <__gethex+0x396>
 800af96:	2b03      	cmp	r3, #3
 800af98:	d017      	beq.n	800afca <__gethex+0x39e>
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d109      	bne.n	800afb2 <__gethex+0x386>
 800af9e:	f01a 0f02 	tst.w	sl, #2
 800afa2:	d006      	beq.n	800afb2 <__gethex+0x386>
 800afa4:	f8d9 0000 	ldr.w	r0, [r9]
 800afa8:	ea4a 0a00 	orr.w	sl, sl, r0
 800afac:	f01a 0f01 	tst.w	sl, #1
 800afb0:	d10e      	bne.n	800afd0 <__gethex+0x3a4>
 800afb2:	f047 0710 	orr.w	r7, r7, #16
 800afb6:	e033      	b.n	800b020 <__gethex+0x3f4>
 800afb8:	f04f 0a01 	mov.w	sl, #1
 800afbc:	e7d0      	b.n	800af60 <__gethex+0x334>
 800afbe:	2701      	movs	r7, #1
 800afc0:	e7e2      	b.n	800af88 <__gethex+0x35c>
 800afc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afc4:	f1c3 0301 	rsb	r3, r3, #1
 800afc8:	9315      	str	r3, [sp, #84]	; 0x54
 800afca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d0f0      	beq.n	800afb2 <__gethex+0x386>
 800afd0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800afd4:	f104 0314 	add.w	r3, r4, #20
 800afd8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800afdc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800afe0:	f04f 0c00 	mov.w	ip, #0
 800afe4:	4618      	mov	r0, r3
 800afe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800afea:	f1b2 3fff 	cmp.w	r2, #4294967295
 800afee:	d01c      	beq.n	800b02a <__gethex+0x3fe>
 800aff0:	3201      	adds	r2, #1
 800aff2:	6002      	str	r2, [r0, #0]
 800aff4:	2f02      	cmp	r7, #2
 800aff6:	f104 0314 	add.w	r3, r4, #20
 800affa:	d13f      	bne.n	800b07c <__gethex+0x450>
 800affc:	f8d8 2000 	ldr.w	r2, [r8]
 800b000:	3a01      	subs	r2, #1
 800b002:	42b2      	cmp	r2, r6
 800b004:	d10a      	bne.n	800b01c <__gethex+0x3f0>
 800b006:	1171      	asrs	r1, r6, #5
 800b008:	2201      	movs	r2, #1
 800b00a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b00e:	f006 061f 	and.w	r6, r6, #31
 800b012:	fa02 f606 	lsl.w	r6, r2, r6
 800b016:	421e      	tst	r6, r3
 800b018:	bf18      	it	ne
 800b01a:	4617      	movne	r7, r2
 800b01c:	f047 0720 	orr.w	r7, r7, #32
 800b020:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b022:	601c      	str	r4, [r3, #0]
 800b024:	9b04      	ldr	r3, [sp, #16]
 800b026:	601d      	str	r5, [r3, #0]
 800b028:	e695      	b.n	800ad56 <__gethex+0x12a>
 800b02a:	4299      	cmp	r1, r3
 800b02c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b030:	d8d8      	bhi.n	800afe4 <__gethex+0x3b8>
 800b032:	68a3      	ldr	r3, [r4, #8]
 800b034:	459b      	cmp	fp, r3
 800b036:	db19      	blt.n	800b06c <__gethex+0x440>
 800b038:	6861      	ldr	r1, [r4, #4]
 800b03a:	ee18 0a10 	vmov	r0, s16
 800b03e:	3101      	adds	r1, #1
 800b040:	f000 f91a 	bl	800b278 <_Balloc>
 800b044:	4681      	mov	r9, r0
 800b046:	b918      	cbnz	r0, 800b050 <__gethex+0x424>
 800b048:	4b1a      	ldr	r3, [pc, #104]	; (800b0b4 <__gethex+0x488>)
 800b04a:	4602      	mov	r2, r0
 800b04c:	2184      	movs	r1, #132	; 0x84
 800b04e:	e6a8      	b.n	800ada2 <__gethex+0x176>
 800b050:	6922      	ldr	r2, [r4, #16]
 800b052:	3202      	adds	r2, #2
 800b054:	f104 010c 	add.w	r1, r4, #12
 800b058:	0092      	lsls	r2, r2, #2
 800b05a:	300c      	adds	r0, #12
 800b05c:	f7fd f9a0 	bl	80083a0 <memcpy>
 800b060:	4621      	mov	r1, r4
 800b062:	ee18 0a10 	vmov	r0, s16
 800b066:	f000 f947 	bl	800b2f8 <_Bfree>
 800b06a:	464c      	mov	r4, r9
 800b06c:	6923      	ldr	r3, [r4, #16]
 800b06e:	1c5a      	adds	r2, r3, #1
 800b070:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b074:	6122      	str	r2, [r4, #16]
 800b076:	2201      	movs	r2, #1
 800b078:	615a      	str	r2, [r3, #20]
 800b07a:	e7bb      	b.n	800aff4 <__gethex+0x3c8>
 800b07c:	6922      	ldr	r2, [r4, #16]
 800b07e:	455a      	cmp	r2, fp
 800b080:	dd0b      	ble.n	800b09a <__gethex+0x46e>
 800b082:	2101      	movs	r1, #1
 800b084:	4620      	mov	r0, r4
 800b086:	f7ff fd69 	bl	800ab5c <rshift>
 800b08a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b08e:	3501      	adds	r5, #1
 800b090:	42ab      	cmp	r3, r5
 800b092:	f6ff aed0 	blt.w	800ae36 <__gethex+0x20a>
 800b096:	2701      	movs	r7, #1
 800b098:	e7c0      	b.n	800b01c <__gethex+0x3f0>
 800b09a:	f016 061f 	ands.w	r6, r6, #31
 800b09e:	d0fa      	beq.n	800b096 <__gethex+0x46a>
 800b0a0:	4453      	add	r3, sl
 800b0a2:	f1c6 0620 	rsb	r6, r6, #32
 800b0a6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b0aa:	f000 f9d7 	bl	800b45c <__hi0bits>
 800b0ae:	42b0      	cmp	r0, r6
 800b0b0:	dbe7      	blt.n	800b082 <__gethex+0x456>
 800b0b2:	e7f0      	b.n	800b096 <__gethex+0x46a>
 800b0b4:	0800cf58 	.word	0x0800cf58

0800b0b8 <L_shift>:
 800b0b8:	f1c2 0208 	rsb	r2, r2, #8
 800b0bc:	0092      	lsls	r2, r2, #2
 800b0be:	b570      	push	{r4, r5, r6, lr}
 800b0c0:	f1c2 0620 	rsb	r6, r2, #32
 800b0c4:	6843      	ldr	r3, [r0, #4]
 800b0c6:	6804      	ldr	r4, [r0, #0]
 800b0c8:	fa03 f506 	lsl.w	r5, r3, r6
 800b0cc:	432c      	orrs	r4, r5
 800b0ce:	40d3      	lsrs	r3, r2
 800b0d0:	6004      	str	r4, [r0, #0]
 800b0d2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b0d6:	4288      	cmp	r0, r1
 800b0d8:	d3f4      	bcc.n	800b0c4 <L_shift+0xc>
 800b0da:	bd70      	pop	{r4, r5, r6, pc}

0800b0dc <__match>:
 800b0dc:	b530      	push	{r4, r5, lr}
 800b0de:	6803      	ldr	r3, [r0, #0]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0e6:	b914      	cbnz	r4, 800b0ee <__match+0x12>
 800b0e8:	6003      	str	r3, [r0, #0]
 800b0ea:	2001      	movs	r0, #1
 800b0ec:	bd30      	pop	{r4, r5, pc}
 800b0ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b0f6:	2d19      	cmp	r5, #25
 800b0f8:	bf98      	it	ls
 800b0fa:	3220      	addls	r2, #32
 800b0fc:	42a2      	cmp	r2, r4
 800b0fe:	d0f0      	beq.n	800b0e2 <__match+0x6>
 800b100:	2000      	movs	r0, #0
 800b102:	e7f3      	b.n	800b0ec <__match+0x10>

0800b104 <__hexnan>:
 800b104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b108:	680b      	ldr	r3, [r1, #0]
 800b10a:	115e      	asrs	r6, r3, #5
 800b10c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b110:	f013 031f 	ands.w	r3, r3, #31
 800b114:	b087      	sub	sp, #28
 800b116:	bf18      	it	ne
 800b118:	3604      	addne	r6, #4
 800b11a:	2500      	movs	r5, #0
 800b11c:	1f37      	subs	r7, r6, #4
 800b11e:	4690      	mov	r8, r2
 800b120:	6802      	ldr	r2, [r0, #0]
 800b122:	9301      	str	r3, [sp, #4]
 800b124:	4682      	mov	sl, r0
 800b126:	f846 5c04 	str.w	r5, [r6, #-4]
 800b12a:	46b9      	mov	r9, r7
 800b12c:	463c      	mov	r4, r7
 800b12e:	9502      	str	r5, [sp, #8]
 800b130:	46ab      	mov	fp, r5
 800b132:	7851      	ldrb	r1, [r2, #1]
 800b134:	1c53      	adds	r3, r2, #1
 800b136:	9303      	str	r3, [sp, #12]
 800b138:	b341      	cbz	r1, 800b18c <__hexnan+0x88>
 800b13a:	4608      	mov	r0, r1
 800b13c:	9205      	str	r2, [sp, #20]
 800b13e:	9104      	str	r1, [sp, #16]
 800b140:	f7ff fd5e 	bl	800ac00 <__hexdig_fun>
 800b144:	2800      	cmp	r0, #0
 800b146:	d14f      	bne.n	800b1e8 <__hexnan+0xe4>
 800b148:	9904      	ldr	r1, [sp, #16]
 800b14a:	9a05      	ldr	r2, [sp, #20]
 800b14c:	2920      	cmp	r1, #32
 800b14e:	d818      	bhi.n	800b182 <__hexnan+0x7e>
 800b150:	9b02      	ldr	r3, [sp, #8]
 800b152:	459b      	cmp	fp, r3
 800b154:	dd13      	ble.n	800b17e <__hexnan+0x7a>
 800b156:	454c      	cmp	r4, r9
 800b158:	d206      	bcs.n	800b168 <__hexnan+0x64>
 800b15a:	2d07      	cmp	r5, #7
 800b15c:	dc04      	bgt.n	800b168 <__hexnan+0x64>
 800b15e:	462a      	mov	r2, r5
 800b160:	4649      	mov	r1, r9
 800b162:	4620      	mov	r0, r4
 800b164:	f7ff ffa8 	bl	800b0b8 <L_shift>
 800b168:	4544      	cmp	r4, r8
 800b16a:	d950      	bls.n	800b20e <__hexnan+0x10a>
 800b16c:	2300      	movs	r3, #0
 800b16e:	f1a4 0904 	sub.w	r9, r4, #4
 800b172:	f844 3c04 	str.w	r3, [r4, #-4]
 800b176:	f8cd b008 	str.w	fp, [sp, #8]
 800b17a:	464c      	mov	r4, r9
 800b17c:	461d      	mov	r5, r3
 800b17e:	9a03      	ldr	r2, [sp, #12]
 800b180:	e7d7      	b.n	800b132 <__hexnan+0x2e>
 800b182:	2929      	cmp	r1, #41	; 0x29
 800b184:	d156      	bne.n	800b234 <__hexnan+0x130>
 800b186:	3202      	adds	r2, #2
 800b188:	f8ca 2000 	str.w	r2, [sl]
 800b18c:	f1bb 0f00 	cmp.w	fp, #0
 800b190:	d050      	beq.n	800b234 <__hexnan+0x130>
 800b192:	454c      	cmp	r4, r9
 800b194:	d206      	bcs.n	800b1a4 <__hexnan+0xa0>
 800b196:	2d07      	cmp	r5, #7
 800b198:	dc04      	bgt.n	800b1a4 <__hexnan+0xa0>
 800b19a:	462a      	mov	r2, r5
 800b19c:	4649      	mov	r1, r9
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f7ff ff8a 	bl	800b0b8 <L_shift>
 800b1a4:	4544      	cmp	r4, r8
 800b1a6:	d934      	bls.n	800b212 <__hexnan+0x10e>
 800b1a8:	f1a8 0204 	sub.w	r2, r8, #4
 800b1ac:	4623      	mov	r3, r4
 800b1ae:	f853 1b04 	ldr.w	r1, [r3], #4
 800b1b2:	f842 1f04 	str.w	r1, [r2, #4]!
 800b1b6:	429f      	cmp	r7, r3
 800b1b8:	d2f9      	bcs.n	800b1ae <__hexnan+0xaa>
 800b1ba:	1b3b      	subs	r3, r7, r4
 800b1bc:	f023 0303 	bic.w	r3, r3, #3
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	3401      	adds	r4, #1
 800b1c4:	3e03      	subs	r6, #3
 800b1c6:	42b4      	cmp	r4, r6
 800b1c8:	bf88      	it	hi
 800b1ca:	2304      	movhi	r3, #4
 800b1cc:	4443      	add	r3, r8
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f843 2b04 	str.w	r2, [r3], #4
 800b1d4:	429f      	cmp	r7, r3
 800b1d6:	d2fb      	bcs.n	800b1d0 <__hexnan+0xcc>
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	b91b      	cbnz	r3, 800b1e4 <__hexnan+0xe0>
 800b1dc:	4547      	cmp	r7, r8
 800b1de:	d127      	bne.n	800b230 <__hexnan+0x12c>
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	603b      	str	r3, [r7, #0]
 800b1e4:	2005      	movs	r0, #5
 800b1e6:	e026      	b.n	800b236 <__hexnan+0x132>
 800b1e8:	3501      	adds	r5, #1
 800b1ea:	2d08      	cmp	r5, #8
 800b1ec:	f10b 0b01 	add.w	fp, fp, #1
 800b1f0:	dd06      	ble.n	800b200 <__hexnan+0xfc>
 800b1f2:	4544      	cmp	r4, r8
 800b1f4:	d9c3      	bls.n	800b17e <__hexnan+0x7a>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1fc:	2501      	movs	r5, #1
 800b1fe:	3c04      	subs	r4, #4
 800b200:	6822      	ldr	r2, [r4, #0]
 800b202:	f000 000f 	and.w	r0, r0, #15
 800b206:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b20a:	6022      	str	r2, [r4, #0]
 800b20c:	e7b7      	b.n	800b17e <__hexnan+0x7a>
 800b20e:	2508      	movs	r5, #8
 800b210:	e7b5      	b.n	800b17e <__hexnan+0x7a>
 800b212:	9b01      	ldr	r3, [sp, #4]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d0df      	beq.n	800b1d8 <__hexnan+0xd4>
 800b218:	f04f 32ff 	mov.w	r2, #4294967295
 800b21c:	f1c3 0320 	rsb	r3, r3, #32
 800b220:	fa22 f303 	lsr.w	r3, r2, r3
 800b224:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b228:	401a      	ands	r2, r3
 800b22a:	f846 2c04 	str.w	r2, [r6, #-4]
 800b22e:	e7d3      	b.n	800b1d8 <__hexnan+0xd4>
 800b230:	3f04      	subs	r7, #4
 800b232:	e7d1      	b.n	800b1d8 <__hexnan+0xd4>
 800b234:	2004      	movs	r0, #4
 800b236:	b007      	add	sp, #28
 800b238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b23c <_localeconv_r>:
 800b23c:	4800      	ldr	r0, [pc, #0]	; (800b240 <_localeconv_r+0x4>)
 800b23e:	4770      	bx	lr
 800b240:	20000188 	.word	0x20000188

0800b244 <malloc>:
 800b244:	4b02      	ldr	r3, [pc, #8]	; (800b250 <malloc+0xc>)
 800b246:	4601      	mov	r1, r0
 800b248:	6818      	ldr	r0, [r3, #0]
 800b24a:	f000 bd59 	b.w	800bd00 <_malloc_r>
 800b24e:	bf00      	nop
 800b250:	20000030 	.word	0x20000030

0800b254 <__ascii_mbtowc>:
 800b254:	b082      	sub	sp, #8
 800b256:	b901      	cbnz	r1, 800b25a <__ascii_mbtowc+0x6>
 800b258:	a901      	add	r1, sp, #4
 800b25a:	b142      	cbz	r2, 800b26e <__ascii_mbtowc+0x1a>
 800b25c:	b14b      	cbz	r3, 800b272 <__ascii_mbtowc+0x1e>
 800b25e:	7813      	ldrb	r3, [r2, #0]
 800b260:	600b      	str	r3, [r1, #0]
 800b262:	7812      	ldrb	r2, [r2, #0]
 800b264:	1e10      	subs	r0, r2, #0
 800b266:	bf18      	it	ne
 800b268:	2001      	movne	r0, #1
 800b26a:	b002      	add	sp, #8
 800b26c:	4770      	bx	lr
 800b26e:	4610      	mov	r0, r2
 800b270:	e7fb      	b.n	800b26a <__ascii_mbtowc+0x16>
 800b272:	f06f 0001 	mvn.w	r0, #1
 800b276:	e7f8      	b.n	800b26a <__ascii_mbtowc+0x16>

0800b278 <_Balloc>:
 800b278:	b570      	push	{r4, r5, r6, lr}
 800b27a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b27c:	4604      	mov	r4, r0
 800b27e:	460d      	mov	r5, r1
 800b280:	b976      	cbnz	r6, 800b2a0 <_Balloc+0x28>
 800b282:	2010      	movs	r0, #16
 800b284:	f7ff ffde 	bl	800b244 <malloc>
 800b288:	4602      	mov	r2, r0
 800b28a:	6260      	str	r0, [r4, #36]	; 0x24
 800b28c:	b920      	cbnz	r0, 800b298 <_Balloc+0x20>
 800b28e:	4b18      	ldr	r3, [pc, #96]	; (800b2f0 <_Balloc+0x78>)
 800b290:	4818      	ldr	r0, [pc, #96]	; (800b2f4 <_Balloc+0x7c>)
 800b292:	2166      	movs	r1, #102	; 0x66
 800b294:	f000 ff3e 	bl	800c114 <__assert_func>
 800b298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b29c:	6006      	str	r6, [r0, #0]
 800b29e:	60c6      	str	r6, [r0, #12]
 800b2a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b2a2:	68f3      	ldr	r3, [r6, #12]
 800b2a4:	b183      	cbz	r3, 800b2c8 <_Balloc+0x50>
 800b2a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2a8:	68db      	ldr	r3, [r3, #12]
 800b2aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2ae:	b9b8      	cbnz	r0, 800b2e0 <_Balloc+0x68>
 800b2b0:	2101      	movs	r1, #1
 800b2b2:	fa01 f605 	lsl.w	r6, r1, r5
 800b2b6:	1d72      	adds	r2, r6, #5
 800b2b8:	0092      	lsls	r2, r2, #2
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f000 fc9d 	bl	800bbfa <_calloc_r>
 800b2c0:	b160      	cbz	r0, 800b2dc <_Balloc+0x64>
 800b2c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2c6:	e00e      	b.n	800b2e6 <_Balloc+0x6e>
 800b2c8:	2221      	movs	r2, #33	; 0x21
 800b2ca:	2104      	movs	r1, #4
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f000 fc94 	bl	800bbfa <_calloc_r>
 800b2d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2d4:	60f0      	str	r0, [r6, #12]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1e4      	bne.n	800b2a6 <_Balloc+0x2e>
 800b2dc:	2000      	movs	r0, #0
 800b2de:	bd70      	pop	{r4, r5, r6, pc}
 800b2e0:	6802      	ldr	r2, [r0, #0]
 800b2e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2ec:	e7f7      	b.n	800b2de <_Balloc+0x66>
 800b2ee:	bf00      	nop
 800b2f0:	0800cee6 	.word	0x0800cee6
 800b2f4:	0800cfe4 	.word	0x0800cfe4

0800b2f8 <_Bfree>:
 800b2f8:	b570      	push	{r4, r5, r6, lr}
 800b2fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	460c      	mov	r4, r1
 800b300:	b976      	cbnz	r6, 800b320 <_Bfree+0x28>
 800b302:	2010      	movs	r0, #16
 800b304:	f7ff ff9e 	bl	800b244 <malloc>
 800b308:	4602      	mov	r2, r0
 800b30a:	6268      	str	r0, [r5, #36]	; 0x24
 800b30c:	b920      	cbnz	r0, 800b318 <_Bfree+0x20>
 800b30e:	4b09      	ldr	r3, [pc, #36]	; (800b334 <_Bfree+0x3c>)
 800b310:	4809      	ldr	r0, [pc, #36]	; (800b338 <_Bfree+0x40>)
 800b312:	218a      	movs	r1, #138	; 0x8a
 800b314:	f000 fefe 	bl	800c114 <__assert_func>
 800b318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b31c:	6006      	str	r6, [r0, #0]
 800b31e:	60c6      	str	r6, [r0, #12]
 800b320:	b13c      	cbz	r4, 800b332 <_Bfree+0x3a>
 800b322:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b324:	6862      	ldr	r2, [r4, #4]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b32c:	6021      	str	r1, [r4, #0]
 800b32e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b332:	bd70      	pop	{r4, r5, r6, pc}
 800b334:	0800cee6 	.word	0x0800cee6
 800b338:	0800cfe4 	.word	0x0800cfe4

0800b33c <__multadd>:
 800b33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b340:	690d      	ldr	r5, [r1, #16]
 800b342:	4607      	mov	r7, r0
 800b344:	460c      	mov	r4, r1
 800b346:	461e      	mov	r6, r3
 800b348:	f101 0c14 	add.w	ip, r1, #20
 800b34c:	2000      	movs	r0, #0
 800b34e:	f8dc 3000 	ldr.w	r3, [ip]
 800b352:	b299      	uxth	r1, r3
 800b354:	fb02 6101 	mla	r1, r2, r1, r6
 800b358:	0c1e      	lsrs	r6, r3, #16
 800b35a:	0c0b      	lsrs	r3, r1, #16
 800b35c:	fb02 3306 	mla	r3, r2, r6, r3
 800b360:	b289      	uxth	r1, r1
 800b362:	3001      	adds	r0, #1
 800b364:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b368:	4285      	cmp	r5, r0
 800b36a:	f84c 1b04 	str.w	r1, [ip], #4
 800b36e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b372:	dcec      	bgt.n	800b34e <__multadd+0x12>
 800b374:	b30e      	cbz	r6, 800b3ba <__multadd+0x7e>
 800b376:	68a3      	ldr	r3, [r4, #8]
 800b378:	42ab      	cmp	r3, r5
 800b37a:	dc19      	bgt.n	800b3b0 <__multadd+0x74>
 800b37c:	6861      	ldr	r1, [r4, #4]
 800b37e:	4638      	mov	r0, r7
 800b380:	3101      	adds	r1, #1
 800b382:	f7ff ff79 	bl	800b278 <_Balloc>
 800b386:	4680      	mov	r8, r0
 800b388:	b928      	cbnz	r0, 800b396 <__multadd+0x5a>
 800b38a:	4602      	mov	r2, r0
 800b38c:	4b0c      	ldr	r3, [pc, #48]	; (800b3c0 <__multadd+0x84>)
 800b38e:	480d      	ldr	r0, [pc, #52]	; (800b3c4 <__multadd+0x88>)
 800b390:	21b5      	movs	r1, #181	; 0xb5
 800b392:	f000 febf 	bl	800c114 <__assert_func>
 800b396:	6922      	ldr	r2, [r4, #16]
 800b398:	3202      	adds	r2, #2
 800b39a:	f104 010c 	add.w	r1, r4, #12
 800b39e:	0092      	lsls	r2, r2, #2
 800b3a0:	300c      	adds	r0, #12
 800b3a2:	f7fc fffd 	bl	80083a0 <memcpy>
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	4638      	mov	r0, r7
 800b3aa:	f7ff ffa5 	bl	800b2f8 <_Bfree>
 800b3ae:	4644      	mov	r4, r8
 800b3b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3b4:	3501      	adds	r5, #1
 800b3b6:	615e      	str	r6, [r3, #20]
 800b3b8:	6125      	str	r5, [r4, #16]
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c0:	0800cf58 	.word	0x0800cf58
 800b3c4:	0800cfe4 	.word	0x0800cfe4

0800b3c8 <__s2b>:
 800b3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3cc:	460c      	mov	r4, r1
 800b3ce:	4615      	mov	r5, r2
 800b3d0:	461f      	mov	r7, r3
 800b3d2:	2209      	movs	r2, #9
 800b3d4:	3308      	adds	r3, #8
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3dc:	2100      	movs	r1, #0
 800b3de:	2201      	movs	r2, #1
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	db09      	blt.n	800b3f8 <__s2b+0x30>
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	f7ff ff47 	bl	800b278 <_Balloc>
 800b3ea:	b940      	cbnz	r0, 800b3fe <__s2b+0x36>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	4b19      	ldr	r3, [pc, #100]	; (800b454 <__s2b+0x8c>)
 800b3f0:	4819      	ldr	r0, [pc, #100]	; (800b458 <__s2b+0x90>)
 800b3f2:	21ce      	movs	r1, #206	; 0xce
 800b3f4:	f000 fe8e 	bl	800c114 <__assert_func>
 800b3f8:	0052      	lsls	r2, r2, #1
 800b3fa:	3101      	adds	r1, #1
 800b3fc:	e7f0      	b.n	800b3e0 <__s2b+0x18>
 800b3fe:	9b08      	ldr	r3, [sp, #32]
 800b400:	6143      	str	r3, [r0, #20]
 800b402:	2d09      	cmp	r5, #9
 800b404:	f04f 0301 	mov.w	r3, #1
 800b408:	6103      	str	r3, [r0, #16]
 800b40a:	dd16      	ble.n	800b43a <__s2b+0x72>
 800b40c:	f104 0909 	add.w	r9, r4, #9
 800b410:	46c8      	mov	r8, r9
 800b412:	442c      	add	r4, r5
 800b414:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b418:	4601      	mov	r1, r0
 800b41a:	3b30      	subs	r3, #48	; 0x30
 800b41c:	220a      	movs	r2, #10
 800b41e:	4630      	mov	r0, r6
 800b420:	f7ff ff8c 	bl	800b33c <__multadd>
 800b424:	45a0      	cmp	r8, r4
 800b426:	d1f5      	bne.n	800b414 <__s2b+0x4c>
 800b428:	f1a5 0408 	sub.w	r4, r5, #8
 800b42c:	444c      	add	r4, r9
 800b42e:	1b2d      	subs	r5, r5, r4
 800b430:	1963      	adds	r3, r4, r5
 800b432:	42bb      	cmp	r3, r7
 800b434:	db04      	blt.n	800b440 <__s2b+0x78>
 800b436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b43a:	340a      	adds	r4, #10
 800b43c:	2509      	movs	r5, #9
 800b43e:	e7f6      	b.n	800b42e <__s2b+0x66>
 800b440:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b444:	4601      	mov	r1, r0
 800b446:	3b30      	subs	r3, #48	; 0x30
 800b448:	220a      	movs	r2, #10
 800b44a:	4630      	mov	r0, r6
 800b44c:	f7ff ff76 	bl	800b33c <__multadd>
 800b450:	e7ee      	b.n	800b430 <__s2b+0x68>
 800b452:	bf00      	nop
 800b454:	0800cf58 	.word	0x0800cf58
 800b458:	0800cfe4 	.word	0x0800cfe4

0800b45c <__hi0bits>:
 800b45c:	0c03      	lsrs	r3, r0, #16
 800b45e:	041b      	lsls	r3, r3, #16
 800b460:	b9d3      	cbnz	r3, 800b498 <__hi0bits+0x3c>
 800b462:	0400      	lsls	r0, r0, #16
 800b464:	2310      	movs	r3, #16
 800b466:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b46a:	bf04      	itt	eq
 800b46c:	0200      	lsleq	r0, r0, #8
 800b46e:	3308      	addeq	r3, #8
 800b470:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b474:	bf04      	itt	eq
 800b476:	0100      	lsleq	r0, r0, #4
 800b478:	3304      	addeq	r3, #4
 800b47a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b47e:	bf04      	itt	eq
 800b480:	0080      	lsleq	r0, r0, #2
 800b482:	3302      	addeq	r3, #2
 800b484:	2800      	cmp	r0, #0
 800b486:	db05      	blt.n	800b494 <__hi0bits+0x38>
 800b488:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b48c:	f103 0301 	add.w	r3, r3, #1
 800b490:	bf08      	it	eq
 800b492:	2320      	moveq	r3, #32
 800b494:	4618      	mov	r0, r3
 800b496:	4770      	bx	lr
 800b498:	2300      	movs	r3, #0
 800b49a:	e7e4      	b.n	800b466 <__hi0bits+0xa>

0800b49c <__lo0bits>:
 800b49c:	6803      	ldr	r3, [r0, #0]
 800b49e:	f013 0207 	ands.w	r2, r3, #7
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	d00b      	beq.n	800b4be <__lo0bits+0x22>
 800b4a6:	07da      	lsls	r2, r3, #31
 800b4a8:	d423      	bmi.n	800b4f2 <__lo0bits+0x56>
 800b4aa:	0798      	lsls	r0, r3, #30
 800b4ac:	bf49      	itett	mi
 800b4ae:	085b      	lsrmi	r3, r3, #1
 800b4b0:	089b      	lsrpl	r3, r3, #2
 800b4b2:	2001      	movmi	r0, #1
 800b4b4:	600b      	strmi	r3, [r1, #0]
 800b4b6:	bf5c      	itt	pl
 800b4b8:	600b      	strpl	r3, [r1, #0]
 800b4ba:	2002      	movpl	r0, #2
 800b4bc:	4770      	bx	lr
 800b4be:	b298      	uxth	r0, r3
 800b4c0:	b9a8      	cbnz	r0, 800b4ee <__lo0bits+0x52>
 800b4c2:	0c1b      	lsrs	r3, r3, #16
 800b4c4:	2010      	movs	r0, #16
 800b4c6:	b2da      	uxtb	r2, r3
 800b4c8:	b90a      	cbnz	r2, 800b4ce <__lo0bits+0x32>
 800b4ca:	3008      	adds	r0, #8
 800b4cc:	0a1b      	lsrs	r3, r3, #8
 800b4ce:	071a      	lsls	r2, r3, #28
 800b4d0:	bf04      	itt	eq
 800b4d2:	091b      	lsreq	r3, r3, #4
 800b4d4:	3004      	addeq	r0, #4
 800b4d6:	079a      	lsls	r2, r3, #30
 800b4d8:	bf04      	itt	eq
 800b4da:	089b      	lsreq	r3, r3, #2
 800b4dc:	3002      	addeq	r0, #2
 800b4de:	07da      	lsls	r2, r3, #31
 800b4e0:	d403      	bmi.n	800b4ea <__lo0bits+0x4e>
 800b4e2:	085b      	lsrs	r3, r3, #1
 800b4e4:	f100 0001 	add.w	r0, r0, #1
 800b4e8:	d005      	beq.n	800b4f6 <__lo0bits+0x5a>
 800b4ea:	600b      	str	r3, [r1, #0]
 800b4ec:	4770      	bx	lr
 800b4ee:	4610      	mov	r0, r2
 800b4f0:	e7e9      	b.n	800b4c6 <__lo0bits+0x2a>
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	4770      	bx	lr
 800b4f6:	2020      	movs	r0, #32
 800b4f8:	4770      	bx	lr
	...

0800b4fc <__i2b>:
 800b4fc:	b510      	push	{r4, lr}
 800b4fe:	460c      	mov	r4, r1
 800b500:	2101      	movs	r1, #1
 800b502:	f7ff feb9 	bl	800b278 <_Balloc>
 800b506:	4602      	mov	r2, r0
 800b508:	b928      	cbnz	r0, 800b516 <__i2b+0x1a>
 800b50a:	4b05      	ldr	r3, [pc, #20]	; (800b520 <__i2b+0x24>)
 800b50c:	4805      	ldr	r0, [pc, #20]	; (800b524 <__i2b+0x28>)
 800b50e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b512:	f000 fdff 	bl	800c114 <__assert_func>
 800b516:	2301      	movs	r3, #1
 800b518:	6144      	str	r4, [r0, #20]
 800b51a:	6103      	str	r3, [r0, #16]
 800b51c:	bd10      	pop	{r4, pc}
 800b51e:	bf00      	nop
 800b520:	0800cf58 	.word	0x0800cf58
 800b524:	0800cfe4 	.word	0x0800cfe4

0800b528 <__multiply>:
 800b528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52c:	4691      	mov	r9, r2
 800b52e:	690a      	ldr	r2, [r1, #16]
 800b530:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b534:	429a      	cmp	r2, r3
 800b536:	bfb8      	it	lt
 800b538:	460b      	movlt	r3, r1
 800b53a:	460c      	mov	r4, r1
 800b53c:	bfbc      	itt	lt
 800b53e:	464c      	movlt	r4, r9
 800b540:	4699      	movlt	r9, r3
 800b542:	6927      	ldr	r7, [r4, #16]
 800b544:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b548:	68a3      	ldr	r3, [r4, #8]
 800b54a:	6861      	ldr	r1, [r4, #4]
 800b54c:	eb07 060a 	add.w	r6, r7, sl
 800b550:	42b3      	cmp	r3, r6
 800b552:	b085      	sub	sp, #20
 800b554:	bfb8      	it	lt
 800b556:	3101      	addlt	r1, #1
 800b558:	f7ff fe8e 	bl	800b278 <_Balloc>
 800b55c:	b930      	cbnz	r0, 800b56c <__multiply+0x44>
 800b55e:	4602      	mov	r2, r0
 800b560:	4b44      	ldr	r3, [pc, #272]	; (800b674 <__multiply+0x14c>)
 800b562:	4845      	ldr	r0, [pc, #276]	; (800b678 <__multiply+0x150>)
 800b564:	f240 115d 	movw	r1, #349	; 0x15d
 800b568:	f000 fdd4 	bl	800c114 <__assert_func>
 800b56c:	f100 0514 	add.w	r5, r0, #20
 800b570:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b574:	462b      	mov	r3, r5
 800b576:	2200      	movs	r2, #0
 800b578:	4543      	cmp	r3, r8
 800b57a:	d321      	bcc.n	800b5c0 <__multiply+0x98>
 800b57c:	f104 0314 	add.w	r3, r4, #20
 800b580:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b584:	f109 0314 	add.w	r3, r9, #20
 800b588:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b58c:	9202      	str	r2, [sp, #8]
 800b58e:	1b3a      	subs	r2, r7, r4
 800b590:	3a15      	subs	r2, #21
 800b592:	f022 0203 	bic.w	r2, r2, #3
 800b596:	3204      	adds	r2, #4
 800b598:	f104 0115 	add.w	r1, r4, #21
 800b59c:	428f      	cmp	r7, r1
 800b59e:	bf38      	it	cc
 800b5a0:	2204      	movcc	r2, #4
 800b5a2:	9201      	str	r2, [sp, #4]
 800b5a4:	9a02      	ldr	r2, [sp, #8]
 800b5a6:	9303      	str	r3, [sp, #12]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d80c      	bhi.n	800b5c6 <__multiply+0x9e>
 800b5ac:	2e00      	cmp	r6, #0
 800b5ae:	dd03      	ble.n	800b5b8 <__multiply+0x90>
 800b5b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d05a      	beq.n	800b66e <__multiply+0x146>
 800b5b8:	6106      	str	r6, [r0, #16]
 800b5ba:	b005      	add	sp, #20
 800b5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c0:	f843 2b04 	str.w	r2, [r3], #4
 800b5c4:	e7d8      	b.n	800b578 <__multiply+0x50>
 800b5c6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b5ca:	f1ba 0f00 	cmp.w	sl, #0
 800b5ce:	d024      	beq.n	800b61a <__multiply+0xf2>
 800b5d0:	f104 0e14 	add.w	lr, r4, #20
 800b5d4:	46a9      	mov	r9, r5
 800b5d6:	f04f 0c00 	mov.w	ip, #0
 800b5da:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b5de:	f8d9 1000 	ldr.w	r1, [r9]
 800b5e2:	fa1f fb82 	uxth.w	fp, r2
 800b5e6:	b289      	uxth	r1, r1
 800b5e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b5ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b5f0:	f8d9 2000 	ldr.w	r2, [r9]
 800b5f4:	4461      	add	r1, ip
 800b5f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5fa:	fb0a c20b 	mla	r2, sl, fp, ip
 800b5fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b602:	b289      	uxth	r1, r1
 800b604:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b608:	4577      	cmp	r7, lr
 800b60a:	f849 1b04 	str.w	r1, [r9], #4
 800b60e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b612:	d8e2      	bhi.n	800b5da <__multiply+0xb2>
 800b614:	9a01      	ldr	r2, [sp, #4]
 800b616:	f845 c002 	str.w	ip, [r5, r2]
 800b61a:	9a03      	ldr	r2, [sp, #12]
 800b61c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b620:	3304      	adds	r3, #4
 800b622:	f1b9 0f00 	cmp.w	r9, #0
 800b626:	d020      	beq.n	800b66a <__multiply+0x142>
 800b628:	6829      	ldr	r1, [r5, #0]
 800b62a:	f104 0c14 	add.w	ip, r4, #20
 800b62e:	46ae      	mov	lr, r5
 800b630:	f04f 0a00 	mov.w	sl, #0
 800b634:	f8bc b000 	ldrh.w	fp, [ip]
 800b638:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b63c:	fb09 220b 	mla	r2, r9, fp, r2
 800b640:	4492      	add	sl, r2
 800b642:	b289      	uxth	r1, r1
 800b644:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b648:	f84e 1b04 	str.w	r1, [lr], #4
 800b64c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b650:	f8be 1000 	ldrh.w	r1, [lr]
 800b654:	0c12      	lsrs	r2, r2, #16
 800b656:	fb09 1102 	mla	r1, r9, r2, r1
 800b65a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b65e:	4567      	cmp	r7, ip
 800b660:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b664:	d8e6      	bhi.n	800b634 <__multiply+0x10c>
 800b666:	9a01      	ldr	r2, [sp, #4]
 800b668:	50a9      	str	r1, [r5, r2]
 800b66a:	3504      	adds	r5, #4
 800b66c:	e79a      	b.n	800b5a4 <__multiply+0x7c>
 800b66e:	3e01      	subs	r6, #1
 800b670:	e79c      	b.n	800b5ac <__multiply+0x84>
 800b672:	bf00      	nop
 800b674:	0800cf58 	.word	0x0800cf58
 800b678:	0800cfe4 	.word	0x0800cfe4

0800b67c <__pow5mult>:
 800b67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b680:	4615      	mov	r5, r2
 800b682:	f012 0203 	ands.w	r2, r2, #3
 800b686:	4606      	mov	r6, r0
 800b688:	460f      	mov	r7, r1
 800b68a:	d007      	beq.n	800b69c <__pow5mult+0x20>
 800b68c:	4c25      	ldr	r4, [pc, #148]	; (800b724 <__pow5mult+0xa8>)
 800b68e:	3a01      	subs	r2, #1
 800b690:	2300      	movs	r3, #0
 800b692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b696:	f7ff fe51 	bl	800b33c <__multadd>
 800b69a:	4607      	mov	r7, r0
 800b69c:	10ad      	asrs	r5, r5, #2
 800b69e:	d03d      	beq.n	800b71c <__pow5mult+0xa0>
 800b6a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b6a2:	b97c      	cbnz	r4, 800b6c4 <__pow5mult+0x48>
 800b6a4:	2010      	movs	r0, #16
 800b6a6:	f7ff fdcd 	bl	800b244 <malloc>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	6270      	str	r0, [r6, #36]	; 0x24
 800b6ae:	b928      	cbnz	r0, 800b6bc <__pow5mult+0x40>
 800b6b0:	4b1d      	ldr	r3, [pc, #116]	; (800b728 <__pow5mult+0xac>)
 800b6b2:	481e      	ldr	r0, [pc, #120]	; (800b72c <__pow5mult+0xb0>)
 800b6b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b6b8:	f000 fd2c 	bl	800c114 <__assert_func>
 800b6bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6c0:	6004      	str	r4, [r0, #0]
 800b6c2:	60c4      	str	r4, [r0, #12]
 800b6c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b6c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6cc:	b94c      	cbnz	r4, 800b6e2 <__pow5mult+0x66>
 800b6ce:	f240 2171 	movw	r1, #625	; 0x271
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f7ff ff12 	bl	800b4fc <__i2b>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6de:	4604      	mov	r4, r0
 800b6e0:	6003      	str	r3, [r0, #0]
 800b6e2:	f04f 0900 	mov.w	r9, #0
 800b6e6:	07eb      	lsls	r3, r5, #31
 800b6e8:	d50a      	bpl.n	800b700 <__pow5mult+0x84>
 800b6ea:	4639      	mov	r1, r7
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	f7ff ff1a 	bl	800b528 <__multiply>
 800b6f4:	4639      	mov	r1, r7
 800b6f6:	4680      	mov	r8, r0
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	f7ff fdfd 	bl	800b2f8 <_Bfree>
 800b6fe:	4647      	mov	r7, r8
 800b700:	106d      	asrs	r5, r5, #1
 800b702:	d00b      	beq.n	800b71c <__pow5mult+0xa0>
 800b704:	6820      	ldr	r0, [r4, #0]
 800b706:	b938      	cbnz	r0, 800b718 <__pow5mult+0x9c>
 800b708:	4622      	mov	r2, r4
 800b70a:	4621      	mov	r1, r4
 800b70c:	4630      	mov	r0, r6
 800b70e:	f7ff ff0b 	bl	800b528 <__multiply>
 800b712:	6020      	str	r0, [r4, #0]
 800b714:	f8c0 9000 	str.w	r9, [r0]
 800b718:	4604      	mov	r4, r0
 800b71a:	e7e4      	b.n	800b6e6 <__pow5mult+0x6a>
 800b71c:	4638      	mov	r0, r7
 800b71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b722:	bf00      	nop
 800b724:	0800d130 	.word	0x0800d130
 800b728:	0800cee6 	.word	0x0800cee6
 800b72c:	0800cfe4 	.word	0x0800cfe4

0800b730 <__lshift>:
 800b730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b734:	460c      	mov	r4, r1
 800b736:	6849      	ldr	r1, [r1, #4]
 800b738:	6923      	ldr	r3, [r4, #16]
 800b73a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b73e:	68a3      	ldr	r3, [r4, #8]
 800b740:	4607      	mov	r7, r0
 800b742:	4691      	mov	r9, r2
 800b744:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b748:	f108 0601 	add.w	r6, r8, #1
 800b74c:	42b3      	cmp	r3, r6
 800b74e:	db0b      	blt.n	800b768 <__lshift+0x38>
 800b750:	4638      	mov	r0, r7
 800b752:	f7ff fd91 	bl	800b278 <_Balloc>
 800b756:	4605      	mov	r5, r0
 800b758:	b948      	cbnz	r0, 800b76e <__lshift+0x3e>
 800b75a:	4602      	mov	r2, r0
 800b75c:	4b2a      	ldr	r3, [pc, #168]	; (800b808 <__lshift+0xd8>)
 800b75e:	482b      	ldr	r0, [pc, #172]	; (800b80c <__lshift+0xdc>)
 800b760:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b764:	f000 fcd6 	bl	800c114 <__assert_func>
 800b768:	3101      	adds	r1, #1
 800b76a:	005b      	lsls	r3, r3, #1
 800b76c:	e7ee      	b.n	800b74c <__lshift+0x1c>
 800b76e:	2300      	movs	r3, #0
 800b770:	f100 0114 	add.w	r1, r0, #20
 800b774:	f100 0210 	add.w	r2, r0, #16
 800b778:	4618      	mov	r0, r3
 800b77a:	4553      	cmp	r3, sl
 800b77c:	db37      	blt.n	800b7ee <__lshift+0xbe>
 800b77e:	6920      	ldr	r0, [r4, #16]
 800b780:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b784:	f104 0314 	add.w	r3, r4, #20
 800b788:	f019 091f 	ands.w	r9, r9, #31
 800b78c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b790:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b794:	d02f      	beq.n	800b7f6 <__lshift+0xc6>
 800b796:	f1c9 0e20 	rsb	lr, r9, #32
 800b79a:	468a      	mov	sl, r1
 800b79c:	f04f 0c00 	mov.w	ip, #0
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	fa02 f209 	lsl.w	r2, r2, r9
 800b7a6:	ea42 020c 	orr.w	r2, r2, ip
 800b7aa:	f84a 2b04 	str.w	r2, [sl], #4
 800b7ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7b2:	4298      	cmp	r0, r3
 800b7b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b7b8:	d8f2      	bhi.n	800b7a0 <__lshift+0x70>
 800b7ba:	1b03      	subs	r3, r0, r4
 800b7bc:	3b15      	subs	r3, #21
 800b7be:	f023 0303 	bic.w	r3, r3, #3
 800b7c2:	3304      	adds	r3, #4
 800b7c4:	f104 0215 	add.w	r2, r4, #21
 800b7c8:	4290      	cmp	r0, r2
 800b7ca:	bf38      	it	cc
 800b7cc:	2304      	movcc	r3, #4
 800b7ce:	f841 c003 	str.w	ip, [r1, r3]
 800b7d2:	f1bc 0f00 	cmp.w	ip, #0
 800b7d6:	d001      	beq.n	800b7dc <__lshift+0xac>
 800b7d8:	f108 0602 	add.w	r6, r8, #2
 800b7dc:	3e01      	subs	r6, #1
 800b7de:	4638      	mov	r0, r7
 800b7e0:	612e      	str	r6, [r5, #16]
 800b7e2:	4621      	mov	r1, r4
 800b7e4:	f7ff fd88 	bl	800b2f8 <_Bfree>
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	e7c1      	b.n	800b77a <__lshift+0x4a>
 800b7f6:	3904      	subs	r1, #4
 800b7f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b800:	4298      	cmp	r0, r3
 800b802:	d8f9      	bhi.n	800b7f8 <__lshift+0xc8>
 800b804:	e7ea      	b.n	800b7dc <__lshift+0xac>
 800b806:	bf00      	nop
 800b808:	0800cf58 	.word	0x0800cf58
 800b80c:	0800cfe4 	.word	0x0800cfe4

0800b810 <__mcmp>:
 800b810:	b530      	push	{r4, r5, lr}
 800b812:	6902      	ldr	r2, [r0, #16]
 800b814:	690c      	ldr	r4, [r1, #16]
 800b816:	1b12      	subs	r2, r2, r4
 800b818:	d10e      	bne.n	800b838 <__mcmp+0x28>
 800b81a:	f100 0314 	add.w	r3, r0, #20
 800b81e:	3114      	adds	r1, #20
 800b820:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b824:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b828:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b82c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b830:	42a5      	cmp	r5, r4
 800b832:	d003      	beq.n	800b83c <__mcmp+0x2c>
 800b834:	d305      	bcc.n	800b842 <__mcmp+0x32>
 800b836:	2201      	movs	r2, #1
 800b838:	4610      	mov	r0, r2
 800b83a:	bd30      	pop	{r4, r5, pc}
 800b83c:	4283      	cmp	r3, r0
 800b83e:	d3f3      	bcc.n	800b828 <__mcmp+0x18>
 800b840:	e7fa      	b.n	800b838 <__mcmp+0x28>
 800b842:	f04f 32ff 	mov.w	r2, #4294967295
 800b846:	e7f7      	b.n	800b838 <__mcmp+0x28>

0800b848 <__mdiff>:
 800b848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	460c      	mov	r4, r1
 800b84e:	4606      	mov	r6, r0
 800b850:	4611      	mov	r1, r2
 800b852:	4620      	mov	r0, r4
 800b854:	4690      	mov	r8, r2
 800b856:	f7ff ffdb 	bl	800b810 <__mcmp>
 800b85a:	1e05      	subs	r5, r0, #0
 800b85c:	d110      	bne.n	800b880 <__mdiff+0x38>
 800b85e:	4629      	mov	r1, r5
 800b860:	4630      	mov	r0, r6
 800b862:	f7ff fd09 	bl	800b278 <_Balloc>
 800b866:	b930      	cbnz	r0, 800b876 <__mdiff+0x2e>
 800b868:	4b3a      	ldr	r3, [pc, #232]	; (800b954 <__mdiff+0x10c>)
 800b86a:	4602      	mov	r2, r0
 800b86c:	f240 2132 	movw	r1, #562	; 0x232
 800b870:	4839      	ldr	r0, [pc, #228]	; (800b958 <__mdiff+0x110>)
 800b872:	f000 fc4f 	bl	800c114 <__assert_func>
 800b876:	2301      	movs	r3, #1
 800b878:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b87c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b880:	bfa4      	itt	ge
 800b882:	4643      	movge	r3, r8
 800b884:	46a0      	movge	r8, r4
 800b886:	4630      	mov	r0, r6
 800b888:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b88c:	bfa6      	itte	ge
 800b88e:	461c      	movge	r4, r3
 800b890:	2500      	movge	r5, #0
 800b892:	2501      	movlt	r5, #1
 800b894:	f7ff fcf0 	bl	800b278 <_Balloc>
 800b898:	b920      	cbnz	r0, 800b8a4 <__mdiff+0x5c>
 800b89a:	4b2e      	ldr	r3, [pc, #184]	; (800b954 <__mdiff+0x10c>)
 800b89c:	4602      	mov	r2, r0
 800b89e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b8a2:	e7e5      	b.n	800b870 <__mdiff+0x28>
 800b8a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b8a8:	6926      	ldr	r6, [r4, #16]
 800b8aa:	60c5      	str	r5, [r0, #12]
 800b8ac:	f104 0914 	add.w	r9, r4, #20
 800b8b0:	f108 0514 	add.w	r5, r8, #20
 800b8b4:	f100 0e14 	add.w	lr, r0, #20
 800b8b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b8bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b8c0:	f108 0210 	add.w	r2, r8, #16
 800b8c4:	46f2      	mov	sl, lr
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b8cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b8d0:	fa1f f883 	uxth.w	r8, r3
 800b8d4:	fa11 f18b 	uxtah	r1, r1, fp
 800b8d8:	0c1b      	lsrs	r3, r3, #16
 800b8da:	eba1 0808 	sub.w	r8, r1, r8
 800b8de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b8e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b8e6:	fa1f f888 	uxth.w	r8, r8
 800b8ea:	1419      	asrs	r1, r3, #16
 800b8ec:	454e      	cmp	r6, r9
 800b8ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b8f2:	f84a 3b04 	str.w	r3, [sl], #4
 800b8f6:	d8e7      	bhi.n	800b8c8 <__mdiff+0x80>
 800b8f8:	1b33      	subs	r3, r6, r4
 800b8fa:	3b15      	subs	r3, #21
 800b8fc:	f023 0303 	bic.w	r3, r3, #3
 800b900:	3304      	adds	r3, #4
 800b902:	3415      	adds	r4, #21
 800b904:	42a6      	cmp	r6, r4
 800b906:	bf38      	it	cc
 800b908:	2304      	movcc	r3, #4
 800b90a:	441d      	add	r5, r3
 800b90c:	4473      	add	r3, lr
 800b90e:	469e      	mov	lr, r3
 800b910:	462e      	mov	r6, r5
 800b912:	4566      	cmp	r6, ip
 800b914:	d30e      	bcc.n	800b934 <__mdiff+0xec>
 800b916:	f10c 0203 	add.w	r2, ip, #3
 800b91a:	1b52      	subs	r2, r2, r5
 800b91c:	f022 0203 	bic.w	r2, r2, #3
 800b920:	3d03      	subs	r5, #3
 800b922:	45ac      	cmp	ip, r5
 800b924:	bf38      	it	cc
 800b926:	2200      	movcc	r2, #0
 800b928:	441a      	add	r2, r3
 800b92a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b92e:	b17b      	cbz	r3, 800b950 <__mdiff+0x108>
 800b930:	6107      	str	r7, [r0, #16]
 800b932:	e7a3      	b.n	800b87c <__mdiff+0x34>
 800b934:	f856 8b04 	ldr.w	r8, [r6], #4
 800b938:	fa11 f288 	uxtah	r2, r1, r8
 800b93c:	1414      	asrs	r4, r2, #16
 800b93e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b942:	b292      	uxth	r2, r2
 800b944:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b948:	f84e 2b04 	str.w	r2, [lr], #4
 800b94c:	1421      	asrs	r1, r4, #16
 800b94e:	e7e0      	b.n	800b912 <__mdiff+0xca>
 800b950:	3f01      	subs	r7, #1
 800b952:	e7ea      	b.n	800b92a <__mdiff+0xe2>
 800b954:	0800cf58 	.word	0x0800cf58
 800b958:	0800cfe4 	.word	0x0800cfe4

0800b95c <__ulp>:
 800b95c:	b082      	sub	sp, #8
 800b95e:	ed8d 0b00 	vstr	d0, [sp]
 800b962:	9b01      	ldr	r3, [sp, #4]
 800b964:	4912      	ldr	r1, [pc, #72]	; (800b9b0 <__ulp+0x54>)
 800b966:	4019      	ands	r1, r3
 800b968:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b96c:	2900      	cmp	r1, #0
 800b96e:	dd05      	ble.n	800b97c <__ulp+0x20>
 800b970:	2200      	movs	r2, #0
 800b972:	460b      	mov	r3, r1
 800b974:	ec43 2b10 	vmov	d0, r2, r3
 800b978:	b002      	add	sp, #8
 800b97a:	4770      	bx	lr
 800b97c:	4249      	negs	r1, r1
 800b97e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b982:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b986:	f04f 0200 	mov.w	r2, #0
 800b98a:	f04f 0300 	mov.w	r3, #0
 800b98e:	da04      	bge.n	800b99a <__ulp+0x3e>
 800b990:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b994:	fa41 f300 	asr.w	r3, r1, r0
 800b998:	e7ec      	b.n	800b974 <__ulp+0x18>
 800b99a:	f1a0 0114 	sub.w	r1, r0, #20
 800b99e:	291e      	cmp	r1, #30
 800b9a0:	bfda      	itte	le
 800b9a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b9a6:	fa20 f101 	lsrle.w	r1, r0, r1
 800b9aa:	2101      	movgt	r1, #1
 800b9ac:	460a      	mov	r2, r1
 800b9ae:	e7e1      	b.n	800b974 <__ulp+0x18>
 800b9b0:	7ff00000 	.word	0x7ff00000

0800b9b4 <__b2d>:
 800b9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b6:	6905      	ldr	r5, [r0, #16]
 800b9b8:	f100 0714 	add.w	r7, r0, #20
 800b9bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b9c0:	1f2e      	subs	r6, r5, #4
 800b9c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f7ff fd48 	bl	800b45c <__hi0bits>
 800b9cc:	f1c0 0320 	rsb	r3, r0, #32
 800b9d0:	280a      	cmp	r0, #10
 800b9d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ba50 <__b2d+0x9c>
 800b9d6:	600b      	str	r3, [r1, #0]
 800b9d8:	dc14      	bgt.n	800ba04 <__b2d+0x50>
 800b9da:	f1c0 0e0b 	rsb	lr, r0, #11
 800b9de:	fa24 f10e 	lsr.w	r1, r4, lr
 800b9e2:	42b7      	cmp	r7, r6
 800b9e4:	ea41 030c 	orr.w	r3, r1, ip
 800b9e8:	bf34      	ite	cc
 800b9ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b9ee:	2100      	movcs	r1, #0
 800b9f0:	3015      	adds	r0, #21
 800b9f2:	fa04 f000 	lsl.w	r0, r4, r0
 800b9f6:	fa21 f10e 	lsr.w	r1, r1, lr
 800b9fa:	ea40 0201 	orr.w	r2, r0, r1
 800b9fe:	ec43 2b10 	vmov	d0, r2, r3
 800ba02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba04:	42b7      	cmp	r7, r6
 800ba06:	bf3a      	itte	cc
 800ba08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ba0c:	f1a5 0608 	subcc.w	r6, r5, #8
 800ba10:	2100      	movcs	r1, #0
 800ba12:	380b      	subs	r0, #11
 800ba14:	d017      	beq.n	800ba46 <__b2d+0x92>
 800ba16:	f1c0 0c20 	rsb	ip, r0, #32
 800ba1a:	fa04 f500 	lsl.w	r5, r4, r0
 800ba1e:	42be      	cmp	r6, r7
 800ba20:	fa21 f40c 	lsr.w	r4, r1, ip
 800ba24:	ea45 0504 	orr.w	r5, r5, r4
 800ba28:	bf8c      	ite	hi
 800ba2a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ba2e:	2400      	movls	r4, #0
 800ba30:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ba34:	fa01 f000 	lsl.w	r0, r1, r0
 800ba38:	fa24 f40c 	lsr.w	r4, r4, ip
 800ba3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ba40:	ea40 0204 	orr.w	r2, r0, r4
 800ba44:	e7db      	b.n	800b9fe <__b2d+0x4a>
 800ba46:	ea44 030c 	orr.w	r3, r4, ip
 800ba4a:	460a      	mov	r2, r1
 800ba4c:	e7d7      	b.n	800b9fe <__b2d+0x4a>
 800ba4e:	bf00      	nop
 800ba50:	3ff00000 	.word	0x3ff00000

0800ba54 <__d2b>:
 800ba54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba58:	4689      	mov	r9, r1
 800ba5a:	2101      	movs	r1, #1
 800ba5c:	ec57 6b10 	vmov	r6, r7, d0
 800ba60:	4690      	mov	r8, r2
 800ba62:	f7ff fc09 	bl	800b278 <_Balloc>
 800ba66:	4604      	mov	r4, r0
 800ba68:	b930      	cbnz	r0, 800ba78 <__d2b+0x24>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	4b25      	ldr	r3, [pc, #148]	; (800bb04 <__d2b+0xb0>)
 800ba6e:	4826      	ldr	r0, [pc, #152]	; (800bb08 <__d2b+0xb4>)
 800ba70:	f240 310a 	movw	r1, #778	; 0x30a
 800ba74:	f000 fb4e 	bl	800c114 <__assert_func>
 800ba78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ba7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba80:	bb35      	cbnz	r5, 800bad0 <__d2b+0x7c>
 800ba82:	2e00      	cmp	r6, #0
 800ba84:	9301      	str	r3, [sp, #4]
 800ba86:	d028      	beq.n	800bada <__d2b+0x86>
 800ba88:	4668      	mov	r0, sp
 800ba8a:	9600      	str	r6, [sp, #0]
 800ba8c:	f7ff fd06 	bl	800b49c <__lo0bits>
 800ba90:	9900      	ldr	r1, [sp, #0]
 800ba92:	b300      	cbz	r0, 800bad6 <__d2b+0x82>
 800ba94:	9a01      	ldr	r2, [sp, #4]
 800ba96:	f1c0 0320 	rsb	r3, r0, #32
 800ba9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba9e:	430b      	orrs	r3, r1
 800baa0:	40c2      	lsrs	r2, r0
 800baa2:	6163      	str	r3, [r4, #20]
 800baa4:	9201      	str	r2, [sp, #4]
 800baa6:	9b01      	ldr	r3, [sp, #4]
 800baa8:	61a3      	str	r3, [r4, #24]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	bf14      	ite	ne
 800baae:	2202      	movne	r2, #2
 800bab0:	2201      	moveq	r2, #1
 800bab2:	6122      	str	r2, [r4, #16]
 800bab4:	b1d5      	cbz	r5, 800baec <__d2b+0x98>
 800bab6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800baba:	4405      	add	r5, r0
 800babc:	f8c9 5000 	str.w	r5, [r9]
 800bac0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bac4:	f8c8 0000 	str.w	r0, [r8]
 800bac8:	4620      	mov	r0, r4
 800baca:	b003      	add	sp, #12
 800bacc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bad4:	e7d5      	b.n	800ba82 <__d2b+0x2e>
 800bad6:	6161      	str	r1, [r4, #20]
 800bad8:	e7e5      	b.n	800baa6 <__d2b+0x52>
 800bada:	a801      	add	r0, sp, #4
 800badc:	f7ff fcde 	bl	800b49c <__lo0bits>
 800bae0:	9b01      	ldr	r3, [sp, #4]
 800bae2:	6163      	str	r3, [r4, #20]
 800bae4:	2201      	movs	r2, #1
 800bae6:	6122      	str	r2, [r4, #16]
 800bae8:	3020      	adds	r0, #32
 800baea:	e7e3      	b.n	800bab4 <__d2b+0x60>
 800baec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800baf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800baf4:	f8c9 0000 	str.w	r0, [r9]
 800baf8:	6918      	ldr	r0, [r3, #16]
 800bafa:	f7ff fcaf 	bl	800b45c <__hi0bits>
 800bafe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb02:	e7df      	b.n	800bac4 <__d2b+0x70>
 800bb04:	0800cf58 	.word	0x0800cf58
 800bb08:	0800cfe4 	.word	0x0800cfe4

0800bb0c <__ratio>:
 800bb0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb10:	4688      	mov	r8, r1
 800bb12:	4669      	mov	r1, sp
 800bb14:	4681      	mov	r9, r0
 800bb16:	f7ff ff4d 	bl	800b9b4 <__b2d>
 800bb1a:	a901      	add	r1, sp, #4
 800bb1c:	4640      	mov	r0, r8
 800bb1e:	ec55 4b10 	vmov	r4, r5, d0
 800bb22:	f7ff ff47 	bl	800b9b4 <__b2d>
 800bb26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb2a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bb2e:	eba3 0c02 	sub.w	ip, r3, r2
 800bb32:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bb36:	1a9b      	subs	r3, r3, r2
 800bb38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bb3c:	ec51 0b10 	vmov	r0, r1, d0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	bfd6      	itet	le
 800bb44:	460a      	movle	r2, r1
 800bb46:	462a      	movgt	r2, r5
 800bb48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bb4c:	468b      	mov	fp, r1
 800bb4e:	462f      	mov	r7, r5
 800bb50:	bfd4      	ite	le
 800bb52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bb56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	ee10 2a10 	vmov	r2, s0
 800bb60:	465b      	mov	r3, fp
 800bb62:	4639      	mov	r1, r7
 800bb64:	f7f4 fe7a 	bl	800085c <__aeabi_ddiv>
 800bb68:	ec41 0b10 	vmov	d0, r0, r1
 800bb6c:	b003      	add	sp, #12
 800bb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb72 <__copybits>:
 800bb72:	3901      	subs	r1, #1
 800bb74:	b570      	push	{r4, r5, r6, lr}
 800bb76:	1149      	asrs	r1, r1, #5
 800bb78:	6914      	ldr	r4, [r2, #16]
 800bb7a:	3101      	adds	r1, #1
 800bb7c:	f102 0314 	add.w	r3, r2, #20
 800bb80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bb84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb88:	1f05      	subs	r5, r0, #4
 800bb8a:	42a3      	cmp	r3, r4
 800bb8c:	d30c      	bcc.n	800bba8 <__copybits+0x36>
 800bb8e:	1aa3      	subs	r3, r4, r2
 800bb90:	3b11      	subs	r3, #17
 800bb92:	f023 0303 	bic.w	r3, r3, #3
 800bb96:	3211      	adds	r2, #17
 800bb98:	42a2      	cmp	r2, r4
 800bb9a:	bf88      	it	hi
 800bb9c:	2300      	movhi	r3, #0
 800bb9e:	4418      	add	r0, r3
 800bba0:	2300      	movs	r3, #0
 800bba2:	4288      	cmp	r0, r1
 800bba4:	d305      	bcc.n	800bbb2 <__copybits+0x40>
 800bba6:	bd70      	pop	{r4, r5, r6, pc}
 800bba8:	f853 6b04 	ldr.w	r6, [r3], #4
 800bbac:	f845 6f04 	str.w	r6, [r5, #4]!
 800bbb0:	e7eb      	b.n	800bb8a <__copybits+0x18>
 800bbb2:	f840 3b04 	str.w	r3, [r0], #4
 800bbb6:	e7f4      	b.n	800bba2 <__copybits+0x30>

0800bbb8 <__any_on>:
 800bbb8:	f100 0214 	add.w	r2, r0, #20
 800bbbc:	6900      	ldr	r0, [r0, #16]
 800bbbe:	114b      	asrs	r3, r1, #5
 800bbc0:	4298      	cmp	r0, r3
 800bbc2:	b510      	push	{r4, lr}
 800bbc4:	db11      	blt.n	800bbea <__any_on+0x32>
 800bbc6:	dd0a      	ble.n	800bbde <__any_on+0x26>
 800bbc8:	f011 011f 	ands.w	r1, r1, #31
 800bbcc:	d007      	beq.n	800bbde <__any_on+0x26>
 800bbce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bbd2:	fa24 f001 	lsr.w	r0, r4, r1
 800bbd6:	fa00 f101 	lsl.w	r1, r0, r1
 800bbda:	428c      	cmp	r4, r1
 800bbdc:	d10b      	bne.n	800bbf6 <__any_on+0x3e>
 800bbde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d803      	bhi.n	800bbee <__any_on+0x36>
 800bbe6:	2000      	movs	r0, #0
 800bbe8:	bd10      	pop	{r4, pc}
 800bbea:	4603      	mov	r3, r0
 800bbec:	e7f7      	b.n	800bbde <__any_on+0x26>
 800bbee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bbf2:	2900      	cmp	r1, #0
 800bbf4:	d0f5      	beq.n	800bbe2 <__any_on+0x2a>
 800bbf6:	2001      	movs	r0, #1
 800bbf8:	e7f6      	b.n	800bbe8 <__any_on+0x30>

0800bbfa <_calloc_r>:
 800bbfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbfc:	fba1 2402 	umull	r2, r4, r1, r2
 800bc00:	b94c      	cbnz	r4, 800bc16 <_calloc_r+0x1c>
 800bc02:	4611      	mov	r1, r2
 800bc04:	9201      	str	r2, [sp, #4]
 800bc06:	f000 f87b 	bl	800bd00 <_malloc_r>
 800bc0a:	9a01      	ldr	r2, [sp, #4]
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	b930      	cbnz	r0, 800bc1e <_calloc_r+0x24>
 800bc10:	4628      	mov	r0, r5
 800bc12:	b003      	add	sp, #12
 800bc14:	bd30      	pop	{r4, r5, pc}
 800bc16:	220c      	movs	r2, #12
 800bc18:	6002      	str	r2, [r0, #0]
 800bc1a:	2500      	movs	r5, #0
 800bc1c:	e7f8      	b.n	800bc10 <_calloc_r+0x16>
 800bc1e:	4621      	mov	r1, r4
 800bc20:	f7fc fbcc 	bl	80083bc <memset>
 800bc24:	e7f4      	b.n	800bc10 <_calloc_r+0x16>
	...

0800bc28 <_free_r>:
 800bc28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc2a:	2900      	cmp	r1, #0
 800bc2c:	d044      	beq.n	800bcb8 <_free_r+0x90>
 800bc2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc32:	9001      	str	r0, [sp, #4]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	f1a1 0404 	sub.w	r4, r1, #4
 800bc3a:	bfb8      	it	lt
 800bc3c:	18e4      	addlt	r4, r4, r3
 800bc3e:	f000 fab3 	bl	800c1a8 <__malloc_lock>
 800bc42:	4a1e      	ldr	r2, [pc, #120]	; (800bcbc <_free_r+0x94>)
 800bc44:	9801      	ldr	r0, [sp, #4]
 800bc46:	6813      	ldr	r3, [r2, #0]
 800bc48:	b933      	cbnz	r3, 800bc58 <_free_r+0x30>
 800bc4a:	6063      	str	r3, [r4, #4]
 800bc4c:	6014      	str	r4, [r2, #0]
 800bc4e:	b003      	add	sp, #12
 800bc50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc54:	f000 baae 	b.w	800c1b4 <__malloc_unlock>
 800bc58:	42a3      	cmp	r3, r4
 800bc5a:	d908      	bls.n	800bc6e <_free_r+0x46>
 800bc5c:	6825      	ldr	r5, [r4, #0]
 800bc5e:	1961      	adds	r1, r4, r5
 800bc60:	428b      	cmp	r3, r1
 800bc62:	bf01      	itttt	eq
 800bc64:	6819      	ldreq	r1, [r3, #0]
 800bc66:	685b      	ldreq	r3, [r3, #4]
 800bc68:	1949      	addeq	r1, r1, r5
 800bc6a:	6021      	streq	r1, [r4, #0]
 800bc6c:	e7ed      	b.n	800bc4a <_free_r+0x22>
 800bc6e:	461a      	mov	r2, r3
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	b10b      	cbz	r3, 800bc78 <_free_r+0x50>
 800bc74:	42a3      	cmp	r3, r4
 800bc76:	d9fa      	bls.n	800bc6e <_free_r+0x46>
 800bc78:	6811      	ldr	r1, [r2, #0]
 800bc7a:	1855      	adds	r5, r2, r1
 800bc7c:	42a5      	cmp	r5, r4
 800bc7e:	d10b      	bne.n	800bc98 <_free_r+0x70>
 800bc80:	6824      	ldr	r4, [r4, #0]
 800bc82:	4421      	add	r1, r4
 800bc84:	1854      	adds	r4, r2, r1
 800bc86:	42a3      	cmp	r3, r4
 800bc88:	6011      	str	r1, [r2, #0]
 800bc8a:	d1e0      	bne.n	800bc4e <_free_r+0x26>
 800bc8c:	681c      	ldr	r4, [r3, #0]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	6053      	str	r3, [r2, #4]
 800bc92:	4421      	add	r1, r4
 800bc94:	6011      	str	r1, [r2, #0]
 800bc96:	e7da      	b.n	800bc4e <_free_r+0x26>
 800bc98:	d902      	bls.n	800bca0 <_free_r+0x78>
 800bc9a:	230c      	movs	r3, #12
 800bc9c:	6003      	str	r3, [r0, #0]
 800bc9e:	e7d6      	b.n	800bc4e <_free_r+0x26>
 800bca0:	6825      	ldr	r5, [r4, #0]
 800bca2:	1961      	adds	r1, r4, r5
 800bca4:	428b      	cmp	r3, r1
 800bca6:	bf04      	itt	eq
 800bca8:	6819      	ldreq	r1, [r3, #0]
 800bcaa:	685b      	ldreq	r3, [r3, #4]
 800bcac:	6063      	str	r3, [r4, #4]
 800bcae:	bf04      	itt	eq
 800bcb0:	1949      	addeq	r1, r1, r5
 800bcb2:	6021      	streq	r1, [r4, #0]
 800bcb4:	6054      	str	r4, [r2, #4]
 800bcb6:	e7ca      	b.n	800bc4e <_free_r+0x26>
 800bcb8:	b003      	add	sp, #12
 800bcba:	bd30      	pop	{r4, r5, pc}
 800bcbc:	20004cc8 	.word	0x20004cc8

0800bcc0 <sbrk_aligned>:
 800bcc0:	b570      	push	{r4, r5, r6, lr}
 800bcc2:	4e0e      	ldr	r6, [pc, #56]	; (800bcfc <sbrk_aligned+0x3c>)
 800bcc4:	460c      	mov	r4, r1
 800bcc6:	6831      	ldr	r1, [r6, #0]
 800bcc8:	4605      	mov	r5, r0
 800bcca:	b911      	cbnz	r1, 800bcd2 <sbrk_aligned+0x12>
 800bccc:	f000 f9f0 	bl	800c0b0 <_sbrk_r>
 800bcd0:	6030      	str	r0, [r6, #0]
 800bcd2:	4621      	mov	r1, r4
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	f000 f9eb 	bl	800c0b0 <_sbrk_r>
 800bcda:	1c43      	adds	r3, r0, #1
 800bcdc:	d00a      	beq.n	800bcf4 <sbrk_aligned+0x34>
 800bcde:	1cc4      	adds	r4, r0, #3
 800bce0:	f024 0403 	bic.w	r4, r4, #3
 800bce4:	42a0      	cmp	r0, r4
 800bce6:	d007      	beq.n	800bcf8 <sbrk_aligned+0x38>
 800bce8:	1a21      	subs	r1, r4, r0
 800bcea:	4628      	mov	r0, r5
 800bcec:	f000 f9e0 	bl	800c0b0 <_sbrk_r>
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	d101      	bne.n	800bcf8 <sbrk_aligned+0x38>
 800bcf4:	f04f 34ff 	mov.w	r4, #4294967295
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	bd70      	pop	{r4, r5, r6, pc}
 800bcfc:	20004ccc 	.word	0x20004ccc

0800bd00 <_malloc_r>:
 800bd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd04:	1ccd      	adds	r5, r1, #3
 800bd06:	f025 0503 	bic.w	r5, r5, #3
 800bd0a:	3508      	adds	r5, #8
 800bd0c:	2d0c      	cmp	r5, #12
 800bd0e:	bf38      	it	cc
 800bd10:	250c      	movcc	r5, #12
 800bd12:	2d00      	cmp	r5, #0
 800bd14:	4607      	mov	r7, r0
 800bd16:	db01      	blt.n	800bd1c <_malloc_r+0x1c>
 800bd18:	42a9      	cmp	r1, r5
 800bd1a:	d905      	bls.n	800bd28 <_malloc_r+0x28>
 800bd1c:	230c      	movs	r3, #12
 800bd1e:	603b      	str	r3, [r7, #0]
 800bd20:	2600      	movs	r6, #0
 800bd22:	4630      	mov	r0, r6
 800bd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd28:	4e2e      	ldr	r6, [pc, #184]	; (800bde4 <_malloc_r+0xe4>)
 800bd2a:	f000 fa3d 	bl	800c1a8 <__malloc_lock>
 800bd2e:	6833      	ldr	r3, [r6, #0]
 800bd30:	461c      	mov	r4, r3
 800bd32:	bb34      	cbnz	r4, 800bd82 <_malloc_r+0x82>
 800bd34:	4629      	mov	r1, r5
 800bd36:	4638      	mov	r0, r7
 800bd38:	f7ff ffc2 	bl	800bcc0 <sbrk_aligned>
 800bd3c:	1c43      	adds	r3, r0, #1
 800bd3e:	4604      	mov	r4, r0
 800bd40:	d14d      	bne.n	800bdde <_malloc_r+0xde>
 800bd42:	6834      	ldr	r4, [r6, #0]
 800bd44:	4626      	mov	r6, r4
 800bd46:	2e00      	cmp	r6, #0
 800bd48:	d140      	bne.n	800bdcc <_malloc_r+0xcc>
 800bd4a:	6823      	ldr	r3, [r4, #0]
 800bd4c:	4631      	mov	r1, r6
 800bd4e:	4638      	mov	r0, r7
 800bd50:	eb04 0803 	add.w	r8, r4, r3
 800bd54:	f000 f9ac 	bl	800c0b0 <_sbrk_r>
 800bd58:	4580      	cmp	r8, r0
 800bd5a:	d13a      	bne.n	800bdd2 <_malloc_r+0xd2>
 800bd5c:	6821      	ldr	r1, [r4, #0]
 800bd5e:	3503      	adds	r5, #3
 800bd60:	1a6d      	subs	r5, r5, r1
 800bd62:	f025 0503 	bic.w	r5, r5, #3
 800bd66:	3508      	adds	r5, #8
 800bd68:	2d0c      	cmp	r5, #12
 800bd6a:	bf38      	it	cc
 800bd6c:	250c      	movcc	r5, #12
 800bd6e:	4629      	mov	r1, r5
 800bd70:	4638      	mov	r0, r7
 800bd72:	f7ff ffa5 	bl	800bcc0 <sbrk_aligned>
 800bd76:	3001      	adds	r0, #1
 800bd78:	d02b      	beq.n	800bdd2 <_malloc_r+0xd2>
 800bd7a:	6823      	ldr	r3, [r4, #0]
 800bd7c:	442b      	add	r3, r5
 800bd7e:	6023      	str	r3, [r4, #0]
 800bd80:	e00e      	b.n	800bda0 <_malloc_r+0xa0>
 800bd82:	6822      	ldr	r2, [r4, #0]
 800bd84:	1b52      	subs	r2, r2, r5
 800bd86:	d41e      	bmi.n	800bdc6 <_malloc_r+0xc6>
 800bd88:	2a0b      	cmp	r2, #11
 800bd8a:	d916      	bls.n	800bdba <_malloc_r+0xba>
 800bd8c:	1961      	adds	r1, r4, r5
 800bd8e:	42a3      	cmp	r3, r4
 800bd90:	6025      	str	r5, [r4, #0]
 800bd92:	bf18      	it	ne
 800bd94:	6059      	strne	r1, [r3, #4]
 800bd96:	6863      	ldr	r3, [r4, #4]
 800bd98:	bf08      	it	eq
 800bd9a:	6031      	streq	r1, [r6, #0]
 800bd9c:	5162      	str	r2, [r4, r5]
 800bd9e:	604b      	str	r3, [r1, #4]
 800bda0:	4638      	mov	r0, r7
 800bda2:	f104 060b 	add.w	r6, r4, #11
 800bda6:	f000 fa05 	bl	800c1b4 <__malloc_unlock>
 800bdaa:	f026 0607 	bic.w	r6, r6, #7
 800bdae:	1d23      	adds	r3, r4, #4
 800bdb0:	1af2      	subs	r2, r6, r3
 800bdb2:	d0b6      	beq.n	800bd22 <_malloc_r+0x22>
 800bdb4:	1b9b      	subs	r3, r3, r6
 800bdb6:	50a3      	str	r3, [r4, r2]
 800bdb8:	e7b3      	b.n	800bd22 <_malloc_r+0x22>
 800bdba:	6862      	ldr	r2, [r4, #4]
 800bdbc:	42a3      	cmp	r3, r4
 800bdbe:	bf0c      	ite	eq
 800bdc0:	6032      	streq	r2, [r6, #0]
 800bdc2:	605a      	strne	r2, [r3, #4]
 800bdc4:	e7ec      	b.n	800bda0 <_malloc_r+0xa0>
 800bdc6:	4623      	mov	r3, r4
 800bdc8:	6864      	ldr	r4, [r4, #4]
 800bdca:	e7b2      	b.n	800bd32 <_malloc_r+0x32>
 800bdcc:	4634      	mov	r4, r6
 800bdce:	6876      	ldr	r6, [r6, #4]
 800bdd0:	e7b9      	b.n	800bd46 <_malloc_r+0x46>
 800bdd2:	230c      	movs	r3, #12
 800bdd4:	603b      	str	r3, [r7, #0]
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	f000 f9ec 	bl	800c1b4 <__malloc_unlock>
 800bddc:	e7a1      	b.n	800bd22 <_malloc_r+0x22>
 800bdde:	6025      	str	r5, [r4, #0]
 800bde0:	e7de      	b.n	800bda0 <_malloc_r+0xa0>
 800bde2:	bf00      	nop
 800bde4:	20004cc8 	.word	0x20004cc8

0800bde8 <__ssputs_r>:
 800bde8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdec:	688e      	ldr	r6, [r1, #8]
 800bdee:	429e      	cmp	r6, r3
 800bdf0:	4682      	mov	sl, r0
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	4690      	mov	r8, r2
 800bdf6:	461f      	mov	r7, r3
 800bdf8:	d838      	bhi.n	800be6c <__ssputs_r+0x84>
 800bdfa:	898a      	ldrh	r2, [r1, #12]
 800bdfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be00:	d032      	beq.n	800be68 <__ssputs_r+0x80>
 800be02:	6825      	ldr	r5, [r4, #0]
 800be04:	6909      	ldr	r1, [r1, #16]
 800be06:	eba5 0901 	sub.w	r9, r5, r1
 800be0a:	6965      	ldr	r5, [r4, #20]
 800be0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be14:	3301      	adds	r3, #1
 800be16:	444b      	add	r3, r9
 800be18:	106d      	asrs	r5, r5, #1
 800be1a:	429d      	cmp	r5, r3
 800be1c:	bf38      	it	cc
 800be1e:	461d      	movcc	r5, r3
 800be20:	0553      	lsls	r3, r2, #21
 800be22:	d531      	bpl.n	800be88 <__ssputs_r+0xa0>
 800be24:	4629      	mov	r1, r5
 800be26:	f7ff ff6b 	bl	800bd00 <_malloc_r>
 800be2a:	4606      	mov	r6, r0
 800be2c:	b950      	cbnz	r0, 800be44 <__ssputs_r+0x5c>
 800be2e:	230c      	movs	r3, #12
 800be30:	f8ca 3000 	str.w	r3, [sl]
 800be34:	89a3      	ldrh	r3, [r4, #12]
 800be36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be3a:	81a3      	strh	r3, [r4, #12]
 800be3c:	f04f 30ff 	mov.w	r0, #4294967295
 800be40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be44:	6921      	ldr	r1, [r4, #16]
 800be46:	464a      	mov	r2, r9
 800be48:	f7fc faaa 	bl	80083a0 <memcpy>
 800be4c:	89a3      	ldrh	r3, [r4, #12]
 800be4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be56:	81a3      	strh	r3, [r4, #12]
 800be58:	6126      	str	r6, [r4, #16]
 800be5a:	6165      	str	r5, [r4, #20]
 800be5c:	444e      	add	r6, r9
 800be5e:	eba5 0509 	sub.w	r5, r5, r9
 800be62:	6026      	str	r6, [r4, #0]
 800be64:	60a5      	str	r5, [r4, #8]
 800be66:	463e      	mov	r6, r7
 800be68:	42be      	cmp	r6, r7
 800be6a:	d900      	bls.n	800be6e <__ssputs_r+0x86>
 800be6c:	463e      	mov	r6, r7
 800be6e:	6820      	ldr	r0, [r4, #0]
 800be70:	4632      	mov	r2, r6
 800be72:	4641      	mov	r1, r8
 800be74:	f000 f97e 	bl	800c174 <memmove>
 800be78:	68a3      	ldr	r3, [r4, #8]
 800be7a:	1b9b      	subs	r3, r3, r6
 800be7c:	60a3      	str	r3, [r4, #8]
 800be7e:	6823      	ldr	r3, [r4, #0]
 800be80:	4433      	add	r3, r6
 800be82:	6023      	str	r3, [r4, #0]
 800be84:	2000      	movs	r0, #0
 800be86:	e7db      	b.n	800be40 <__ssputs_r+0x58>
 800be88:	462a      	mov	r2, r5
 800be8a:	f000 f999 	bl	800c1c0 <_realloc_r>
 800be8e:	4606      	mov	r6, r0
 800be90:	2800      	cmp	r0, #0
 800be92:	d1e1      	bne.n	800be58 <__ssputs_r+0x70>
 800be94:	6921      	ldr	r1, [r4, #16]
 800be96:	4650      	mov	r0, sl
 800be98:	f7ff fec6 	bl	800bc28 <_free_r>
 800be9c:	e7c7      	b.n	800be2e <__ssputs_r+0x46>
	...

0800bea0 <_svfiprintf_r>:
 800bea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea4:	4698      	mov	r8, r3
 800bea6:	898b      	ldrh	r3, [r1, #12]
 800bea8:	061b      	lsls	r3, r3, #24
 800beaa:	b09d      	sub	sp, #116	; 0x74
 800beac:	4607      	mov	r7, r0
 800beae:	460d      	mov	r5, r1
 800beb0:	4614      	mov	r4, r2
 800beb2:	d50e      	bpl.n	800bed2 <_svfiprintf_r+0x32>
 800beb4:	690b      	ldr	r3, [r1, #16]
 800beb6:	b963      	cbnz	r3, 800bed2 <_svfiprintf_r+0x32>
 800beb8:	2140      	movs	r1, #64	; 0x40
 800beba:	f7ff ff21 	bl	800bd00 <_malloc_r>
 800bebe:	6028      	str	r0, [r5, #0]
 800bec0:	6128      	str	r0, [r5, #16]
 800bec2:	b920      	cbnz	r0, 800bece <_svfiprintf_r+0x2e>
 800bec4:	230c      	movs	r3, #12
 800bec6:	603b      	str	r3, [r7, #0]
 800bec8:	f04f 30ff 	mov.w	r0, #4294967295
 800becc:	e0d1      	b.n	800c072 <_svfiprintf_r+0x1d2>
 800bece:	2340      	movs	r3, #64	; 0x40
 800bed0:	616b      	str	r3, [r5, #20]
 800bed2:	2300      	movs	r3, #0
 800bed4:	9309      	str	r3, [sp, #36]	; 0x24
 800bed6:	2320      	movs	r3, #32
 800bed8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bedc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bee0:	2330      	movs	r3, #48	; 0x30
 800bee2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c08c <_svfiprintf_r+0x1ec>
 800bee6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800beea:	f04f 0901 	mov.w	r9, #1
 800beee:	4623      	mov	r3, r4
 800bef0:	469a      	mov	sl, r3
 800bef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bef6:	b10a      	cbz	r2, 800befc <_svfiprintf_r+0x5c>
 800bef8:	2a25      	cmp	r2, #37	; 0x25
 800befa:	d1f9      	bne.n	800bef0 <_svfiprintf_r+0x50>
 800befc:	ebba 0b04 	subs.w	fp, sl, r4
 800bf00:	d00b      	beq.n	800bf1a <_svfiprintf_r+0x7a>
 800bf02:	465b      	mov	r3, fp
 800bf04:	4622      	mov	r2, r4
 800bf06:	4629      	mov	r1, r5
 800bf08:	4638      	mov	r0, r7
 800bf0a:	f7ff ff6d 	bl	800bde8 <__ssputs_r>
 800bf0e:	3001      	adds	r0, #1
 800bf10:	f000 80aa 	beq.w	800c068 <_svfiprintf_r+0x1c8>
 800bf14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf16:	445a      	add	r2, fp
 800bf18:	9209      	str	r2, [sp, #36]	; 0x24
 800bf1a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f000 80a2 	beq.w	800c068 <_svfiprintf_r+0x1c8>
 800bf24:	2300      	movs	r3, #0
 800bf26:	f04f 32ff 	mov.w	r2, #4294967295
 800bf2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf2e:	f10a 0a01 	add.w	sl, sl, #1
 800bf32:	9304      	str	r3, [sp, #16]
 800bf34:	9307      	str	r3, [sp, #28]
 800bf36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf3a:	931a      	str	r3, [sp, #104]	; 0x68
 800bf3c:	4654      	mov	r4, sl
 800bf3e:	2205      	movs	r2, #5
 800bf40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf44:	4851      	ldr	r0, [pc, #324]	; (800c08c <_svfiprintf_r+0x1ec>)
 800bf46:	f7f4 f953 	bl	80001f0 <memchr>
 800bf4a:	9a04      	ldr	r2, [sp, #16]
 800bf4c:	b9d8      	cbnz	r0, 800bf86 <_svfiprintf_r+0xe6>
 800bf4e:	06d0      	lsls	r0, r2, #27
 800bf50:	bf44      	itt	mi
 800bf52:	2320      	movmi	r3, #32
 800bf54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf58:	0711      	lsls	r1, r2, #28
 800bf5a:	bf44      	itt	mi
 800bf5c:	232b      	movmi	r3, #43	; 0x2b
 800bf5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf62:	f89a 3000 	ldrb.w	r3, [sl]
 800bf66:	2b2a      	cmp	r3, #42	; 0x2a
 800bf68:	d015      	beq.n	800bf96 <_svfiprintf_r+0xf6>
 800bf6a:	9a07      	ldr	r2, [sp, #28]
 800bf6c:	4654      	mov	r4, sl
 800bf6e:	2000      	movs	r0, #0
 800bf70:	f04f 0c0a 	mov.w	ip, #10
 800bf74:	4621      	mov	r1, r4
 800bf76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf7a:	3b30      	subs	r3, #48	; 0x30
 800bf7c:	2b09      	cmp	r3, #9
 800bf7e:	d94e      	bls.n	800c01e <_svfiprintf_r+0x17e>
 800bf80:	b1b0      	cbz	r0, 800bfb0 <_svfiprintf_r+0x110>
 800bf82:	9207      	str	r2, [sp, #28]
 800bf84:	e014      	b.n	800bfb0 <_svfiprintf_r+0x110>
 800bf86:	eba0 0308 	sub.w	r3, r0, r8
 800bf8a:	fa09 f303 	lsl.w	r3, r9, r3
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	9304      	str	r3, [sp, #16]
 800bf92:	46a2      	mov	sl, r4
 800bf94:	e7d2      	b.n	800bf3c <_svfiprintf_r+0x9c>
 800bf96:	9b03      	ldr	r3, [sp, #12]
 800bf98:	1d19      	adds	r1, r3, #4
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	9103      	str	r1, [sp, #12]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	bfbb      	ittet	lt
 800bfa2:	425b      	neglt	r3, r3
 800bfa4:	f042 0202 	orrlt.w	r2, r2, #2
 800bfa8:	9307      	strge	r3, [sp, #28]
 800bfaa:	9307      	strlt	r3, [sp, #28]
 800bfac:	bfb8      	it	lt
 800bfae:	9204      	strlt	r2, [sp, #16]
 800bfb0:	7823      	ldrb	r3, [r4, #0]
 800bfb2:	2b2e      	cmp	r3, #46	; 0x2e
 800bfb4:	d10c      	bne.n	800bfd0 <_svfiprintf_r+0x130>
 800bfb6:	7863      	ldrb	r3, [r4, #1]
 800bfb8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfba:	d135      	bne.n	800c028 <_svfiprintf_r+0x188>
 800bfbc:	9b03      	ldr	r3, [sp, #12]
 800bfbe:	1d1a      	adds	r2, r3, #4
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	9203      	str	r2, [sp, #12]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	bfb8      	it	lt
 800bfc8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfcc:	3402      	adds	r4, #2
 800bfce:	9305      	str	r3, [sp, #20]
 800bfd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c09c <_svfiprintf_r+0x1fc>
 800bfd4:	7821      	ldrb	r1, [r4, #0]
 800bfd6:	2203      	movs	r2, #3
 800bfd8:	4650      	mov	r0, sl
 800bfda:	f7f4 f909 	bl	80001f0 <memchr>
 800bfde:	b140      	cbz	r0, 800bff2 <_svfiprintf_r+0x152>
 800bfe0:	2340      	movs	r3, #64	; 0x40
 800bfe2:	eba0 000a 	sub.w	r0, r0, sl
 800bfe6:	fa03 f000 	lsl.w	r0, r3, r0
 800bfea:	9b04      	ldr	r3, [sp, #16]
 800bfec:	4303      	orrs	r3, r0
 800bfee:	3401      	adds	r4, #1
 800bff0:	9304      	str	r3, [sp, #16]
 800bff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bff6:	4826      	ldr	r0, [pc, #152]	; (800c090 <_svfiprintf_r+0x1f0>)
 800bff8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bffc:	2206      	movs	r2, #6
 800bffe:	f7f4 f8f7 	bl	80001f0 <memchr>
 800c002:	2800      	cmp	r0, #0
 800c004:	d038      	beq.n	800c078 <_svfiprintf_r+0x1d8>
 800c006:	4b23      	ldr	r3, [pc, #140]	; (800c094 <_svfiprintf_r+0x1f4>)
 800c008:	bb1b      	cbnz	r3, 800c052 <_svfiprintf_r+0x1b2>
 800c00a:	9b03      	ldr	r3, [sp, #12]
 800c00c:	3307      	adds	r3, #7
 800c00e:	f023 0307 	bic.w	r3, r3, #7
 800c012:	3308      	adds	r3, #8
 800c014:	9303      	str	r3, [sp, #12]
 800c016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c018:	4433      	add	r3, r6
 800c01a:	9309      	str	r3, [sp, #36]	; 0x24
 800c01c:	e767      	b.n	800beee <_svfiprintf_r+0x4e>
 800c01e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c022:	460c      	mov	r4, r1
 800c024:	2001      	movs	r0, #1
 800c026:	e7a5      	b.n	800bf74 <_svfiprintf_r+0xd4>
 800c028:	2300      	movs	r3, #0
 800c02a:	3401      	adds	r4, #1
 800c02c:	9305      	str	r3, [sp, #20]
 800c02e:	4619      	mov	r1, r3
 800c030:	f04f 0c0a 	mov.w	ip, #10
 800c034:	4620      	mov	r0, r4
 800c036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c03a:	3a30      	subs	r2, #48	; 0x30
 800c03c:	2a09      	cmp	r2, #9
 800c03e:	d903      	bls.n	800c048 <_svfiprintf_r+0x1a8>
 800c040:	2b00      	cmp	r3, #0
 800c042:	d0c5      	beq.n	800bfd0 <_svfiprintf_r+0x130>
 800c044:	9105      	str	r1, [sp, #20]
 800c046:	e7c3      	b.n	800bfd0 <_svfiprintf_r+0x130>
 800c048:	fb0c 2101 	mla	r1, ip, r1, r2
 800c04c:	4604      	mov	r4, r0
 800c04e:	2301      	movs	r3, #1
 800c050:	e7f0      	b.n	800c034 <_svfiprintf_r+0x194>
 800c052:	ab03      	add	r3, sp, #12
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	462a      	mov	r2, r5
 800c058:	4b0f      	ldr	r3, [pc, #60]	; (800c098 <_svfiprintf_r+0x1f8>)
 800c05a:	a904      	add	r1, sp, #16
 800c05c:	4638      	mov	r0, r7
 800c05e:	f7fc fa55 	bl	800850c <_printf_float>
 800c062:	1c42      	adds	r2, r0, #1
 800c064:	4606      	mov	r6, r0
 800c066:	d1d6      	bne.n	800c016 <_svfiprintf_r+0x176>
 800c068:	89ab      	ldrh	r3, [r5, #12]
 800c06a:	065b      	lsls	r3, r3, #25
 800c06c:	f53f af2c 	bmi.w	800bec8 <_svfiprintf_r+0x28>
 800c070:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c072:	b01d      	add	sp, #116	; 0x74
 800c074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c078:	ab03      	add	r3, sp, #12
 800c07a:	9300      	str	r3, [sp, #0]
 800c07c:	462a      	mov	r2, r5
 800c07e:	4b06      	ldr	r3, [pc, #24]	; (800c098 <_svfiprintf_r+0x1f8>)
 800c080:	a904      	add	r1, sp, #16
 800c082:	4638      	mov	r0, r7
 800c084:	f7fc fce6 	bl	8008a54 <_printf_i>
 800c088:	e7eb      	b.n	800c062 <_svfiprintf_r+0x1c2>
 800c08a:	bf00      	nop
 800c08c:	0800d13c 	.word	0x0800d13c
 800c090:	0800d146 	.word	0x0800d146
 800c094:	0800850d 	.word	0x0800850d
 800c098:	0800bde9 	.word	0x0800bde9
 800c09c:	0800d142 	.word	0x0800d142

0800c0a0 <nan>:
 800c0a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c0a8 <nan+0x8>
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	00000000 	.word	0x00000000
 800c0ac:	7ff80000 	.word	0x7ff80000

0800c0b0 <_sbrk_r>:
 800c0b0:	b538      	push	{r3, r4, r5, lr}
 800c0b2:	4d06      	ldr	r5, [pc, #24]	; (800c0cc <_sbrk_r+0x1c>)
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	4608      	mov	r0, r1
 800c0ba:	602b      	str	r3, [r5, #0]
 800c0bc:	f7f6 fbd8 	bl	8002870 <_sbrk>
 800c0c0:	1c43      	adds	r3, r0, #1
 800c0c2:	d102      	bne.n	800c0ca <_sbrk_r+0x1a>
 800c0c4:	682b      	ldr	r3, [r5, #0]
 800c0c6:	b103      	cbz	r3, 800c0ca <_sbrk_r+0x1a>
 800c0c8:	6023      	str	r3, [r4, #0]
 800c0ca:	bd38      	pop	{r3, r4, r5, pc}
 800c0cc:	20004cd0 	.word	0x20004cd0

0800c0d0 <strncmp>:
 800c0d0:	b510      	push	{r4, lr}
 800c0d2:	b17a      	cbz	r2, 800c0f4 <strncmp+0x24>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	3901      	subs	r1, #1
 800c0d8:	1884      	adds	r4, r0, r2
 800c0da:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c0de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c0e2:	4290      	cmp	r0, r2
 800c0e4:	d101      	bne.n	800c0ea <strncmp+0x1a>
 800c0e6:	42a3      	cmp	r3, r4
 800c0e8:	d101      	bne.n	800c0ee <strncmp+0x1e>
 800c0ea:	1a80      	subs	r0, r0, r2
 800c0ec:	bd10      	pop	{r4, pc}
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	d1f3      	bne.n	800c0da <strncmp+0xa>
 800c0f2:	e7fa      	b.n	800c0ea <strncmp+0x1a>
 800c0f4:	4610      	mov	r0, r2
 800c0f6:	e7f9      	b.n	800c0ec <strncmp+0x1c>

0800c0f8 <__ascii_wctomb>:
 800c0f8:	b149      	cbz	r1, 800c10e <__ascii_wctomb+0x16>
 800c0fa:	2aff      	cmp	r2, #255	; 0xff
 800c0fc:	bf85      	ittet	hi
 800c0fe:	238a      	movhi	r3, #138	; 0x8a
 800c100:	6003      	strhi	r3, [r0, #0]
 800c102:	700a      	strbls	r2, [r1, #0]
 800c104:	f04f 30ff 	movhi.w	r0, #4294967295
 800c108:	bf98      	it	ls
 800c10a:	2001      	movls	r0, #1
 800c10c:	4770      	bx	lr
 800c10e:	4608      	mov	r0, r1
 800c110:	4770      	bx	lr
	...

0800c114 <__assert_func>:
 800c114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c116:	4614      	mov	r4, r2
 800c118:	461a      	mov	r2, r3
 800c11a:	4b09      	ldr	r3, [pc, #36]	; (800c140 <__assert_func+0x2c>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4605      	mov	r5, r0
 800c120:	68d8      	ldr	r0, [r3, #12]
 800c122:	b14c      	cbz	r4, 800c138 <__assert_func+0x24>
 800c124:	4b07      	ldr	r3, [pc, #28]	; (800c144 <__assert_func+0x30>)
 800c126:	9100      	str	r1, [sp, #0]
 800c128:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c12c:	4906      	ldr	r1, [pc, #24]	; (800c148 <__assert_func+0x34>)
 800c12e:	462b      	mov	r3, r5
 800c130:	f000 f80e 	bl	800c150 <fiprintf>
 800c134:	f000 fa8c 	bl	800c650 <abort>
 800c138:	4b04      	ldr	r3, [pc, #16]	; (800c14c <__assert_func+0x38>)
 800c13a:	461c      	mov	r4, r3
 800c13c:	e7f3      	b.n	800c126 <__assert_func+0x12>
 800c13e:	bf00      	nop
 800c140:	20000030 	.word	0x20000030
 800c144:	0800d14d 	.word	0x0800d14d
 800c148:	0800d15a 	.word	0x0800d15a
 800c14c:	0800d188 	.word	0x0800d188

0800c150 <fiprintf>:
 800c150:	b40e      	push	{r1, r2, r3}
 800c152:	b503      	push	{r0, r1, lr}
 800c154:	4601      	mov	r1, r0
 800c156:	ab03      	add	r3, sp, #12
 800c158:	4805      	ldr	r0, [pc, #20]	; (800c170 <fiprintf+0x20>)
 800c15a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c15e:	6800      	ldr	r0, [r0, #0]
 800c160:	9301      	str	r3, [sp, #4]
 800c162:	f000 f885 	bl	800c270 <_vfiprintf_r>
 800c166:	b002      	add	sp, #8
 800c168:	f85d eb04 	ldr.w	lr, [sp], #4
 800c16c:	b003      	add	sp, #12
 800c16e:	4770      	bx	lr
 800c170:	20000030 	.word	0x20000030

0800c174 <memmove>:
 800c174:	4288      	cmp	r0, r1
 800c176:	b510      	push	{r4, lr}
 800c178:	eb01 0402 	add.w	r4, r1, r2
 800c17c:	d902      	bls.n	800c184 <memmove+0x10>
 800c17e:	4284      	cmp	r4, r0
 800c180:	4623      	mov	r3, r4
 800c182:	d807      	bhi.n	800c194 <memmove+0x20>
 800c184:	1e43      	subs	r3, r0, #1
 800c186:	42a1      	cmp	r1, r4
 800c188:	d008      	beq.n	800c19c <memmove+0x28>
 800c18a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c18e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c192:	e7f8      	b.n	800c186 <memmove+0x12>
 800c194:	4402      	add	r2, r0
 800c196:	4601      	mov	r1, r0
 800c198:	428a      	cmp	r2, r1
 800c19a:	d100      	bne.n	800c19e <memmove+0x2a>
 800c19c:	bd10      	pop	{r4, pc}
 800c19e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1a6:	e7f7      	b.n	800c198 <memmove+0x24>

0800c1a8 <__malloc_lock>:
 800c1a8:	4801      	ldr	r0, [pc, #4]	; (800c1b0 <__malloc_lock+0x8>)
 800c1aa:	f000 bc11 	b.w	800c9d0 <__retarget_lock_acquire_recursive>
 800c1ae:	bf00      	nop
 800c1b0:	20004cd4 	.word	0x20004cd4

0800c1b4 <__malloc_unlock>:
 800c1b4:	4801      	ldr	r0, [pc, #4]	; (800c1bc <__malloc_unlock+0x8>)
 800c1b6:	f000 bc0c 	b.w	800c9d2 <__retarget_lock_release_recursive>
 800c1ba:	bf00      	nop
 800c1bc:	20004cd4 	.word	0x20004cd4

0800c1c0 <_realloc_r>:
 800c1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c4:	4680      	mov	r8, r0
 800c1c6:	4614      	mov	r4, r2
 800c1c8:	460e      	mov	r6, r1
 800c1ca:	b921      	cbnz	r1, 800c1d6 <_realloc_r+0x16>
 800c1cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d0:	4611      	mov	r1, r2
 800c1d2:	f7ff bd95 	b.w	800bd00 <_malloc_r>
 800c1d6:	b92a      	cbnz	r2, 800c1e4 <_realloc_r+0x24>
 800c1d8:	f7ff fd26 	bl	800bc28 <_free_r>
 800c1dc:	4625      	mov	r5, r4
 800c1de:	4628      	mov	r0, r5
 800c1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1e4:	f000 fc5c 	bl	800caa0 <_malloc_usable_size_r>
 800c1e8:	4284      	cmp	r4, r0
 800c1ea:	4607      	mov	r7, r0
 800c1ec:	d802      	bhi.n	800c1f4 <_realloc_r+0x34>
 800c1ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1f2:	d812      	bhi.n	800c21a <_realloc_r+0x5a>
 800c1f4:	4621      	mov	r1, r4
 800c1f6:	4640      	mov	r0, r8
 800c1f8:	f7ff fd82 	bl	800bd00 <_malloc_r>
 800c1fc:	4605      	mov	r5, r0
 800c1fe:	2800      	cmp	r0, #0
 800c200:	d0ed      	beq.n	800c1de <_realloc_r+0x1e>
 800c202:	42bc      	cmp	r4, r7
 800c204:	4622      	mov	r2, r4
 800c206:	4631      	mov	r1, r6
 800c208:	bf28      	it	cs
 800c20a:	463a      	movcs	r2, r7
 800c20c:	f7fc f8c8 	bl	80083a0 <memcpy>
 800c210:	4631      	mov	r1, r6
 800c212:	4640      	mov	r0, r8
 800c214:	f7ff fd08 	bl	800bc28 <_free_r>
 800c218:	e7e1      	b.n	800c1de <_realloc_r+0x1e>
 800c21a:	4635      	mov	r5, r6
 800c21c:	e7df      	b.n	800c1de <_realloc_r+0x1e>

0800c21e <__sfputc_r>:
 800c21e:	6893      	ldr	r3, [r2, #8]
 800c220:	3b01      	subs	r3, #1
 800c222:	2b00      	cmp	r3, #0
 800c224:	b410      	push	{r4}
 800c226:	6093      	str	r3, [r2, #8]
 800c228:	da08      	bge.n	800c23c <__sfputc_r+0x1e>
 800c22a:	6994      	ldr	r4, [r2, #24]
 800c22c:	42a3      	cmp	r3, r4
 800c22e:	db01      	blt.n	800c234 <__sfputc_r+0x16>
 800c230:	290a      	cmp	r1, #10
 800c232:	d103      	bne.n	800c23c <__sfputc_r+0x1e>
 800c234:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c238:	f000 b94a 	b.w	800c4d0 <__swbuf_r>
 800c23c:	6813      	ldr	r3, [r2, #0]
 800c23e:	1c58      	adds	r0, r3, #1
 800c240:	6010      	str	r0, [r2, #0]
 800c242:	7019      	strb	r1, [r3, #0]
 800c244:	4608      	mov	r0, r1
 800c246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <__sfputs_r>:
 800c24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24e:	4606      	mov	r6, r0
 800c250:	460f      	mov	r7, r1
 800c252:	4614      	mov	r4, r2
 800c254:	18d5      	adds	r5, r2, r3
 800c256:	42ac      	cmp	r4, r5
 800c258:	d101      	bne.n	800c25e <__sfputs_r+0x12>
 800c25a:	2000      	movs	r0, #0
 800c25c:	e007      	b.n	800c26e <__sfputs_r+0x22>
 800c25e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c262:	463a      	mov	r2, r7
 800c264:	4630      	mov	r0, r6
 800c266:	f7ff ffda 	bl	800c21e <__sfputc_r>
 800c26a:	1c43      	adds	r3, r0, #1
 800c26c:	d1f3      	bne.n	800c256 <__sfputs_r+0xa>
 800c26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c270 <_vfiprintf_r>:
 800c270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c274:	460d      	mov	r5, r1
 800c276:	b09d      	sub	sp, #116	; 0x74
 800c278:	4614      	mov	r4, r2
 800c27a:	4698      	mov	r8, r3
 800c27c:	4606      	mov	r6, r0
 800c27e:	b118      	cbz	r0, 800c288 <_vfiprintf_r+0x18>
 800c280:	6983      	ldr	r3, [r0, #24]
 800c282:	b90b      	cbnz	r3, 800c288 <_vfiprintf_r+0x18>
 800c284:	f000 fb06 	bl	800c894 <__sinit>
 800c288:	4b89      	ldr	r3, [pc, #548]	; (800c4b0 <_vfiprintf_r+0x240>)
 800c28a:	429d      	cmp	r5, r3
 800c28c:	d11b      	bne.n	800c2c6 <_vfiprintf_r+0x56>
 800c28e:	6875      	ldr	r5, [r6, #4]
 800c290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c292:	07d9      	lsls	r1, r3, #31
 800c294:	d405      	bmi.n	800c2a2 <_vfiprintf_r+0x32>
 800c296:	89ab      	ldrh	r3, [r5, #12]
 800c298:	059a      	lsls	r2, r3, #22
 800c29a:	d402      	bmi.n	800c2a2 <_vfiprintf_r+0x32>
 800c29c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c29e:	f000 fb97 	bl	800c9d0 <__retarget_lock_acquire_recursive>
 800c2a2:	89ab      	ldrh	r3, [r5, #12]
 800c2a4:	071b      	lsls	r3, r3, #28
 800c2a6:	d501      	bpl.n	800c2ac <_vfiprintf_r+0x3c>
 800c2a8:	692b      	ldr	r3, [r5, #16]
 800c2aa:	b9eb      	cbnz	r3, 800c2e8 <_vfiprintf_r+0x78>
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	f000 f960 	bl	800c574 <__swsetup_r>
 800c2b4:	b1c0      	cbz	r0, 800c2e8 <_vfiprintf_r+0x78>
 800c2b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2b8:	07dc      	lsls	r4, r3, #31
 800c2ba:	d50e      	bpl.n	800c2da <_vfiprintf_r+0x6a>
 800c2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c0:	b01d      	add	sp, #116	; 0x74
 800c2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c6:	4b7b      	ldr	r3, [pc, #492]	; (800c4b4 <_vfiprintf_r+0x244>)
 800c2c8:	429d      	cmp	r5, r3
 800c2ca:	d101      	bne.n	800c2d0 <_vfiprintf_r+0x60>
 800c2cc:	68b5      	ldr	r5, [r6, #8]
 800c2ce:	e7df      	b.n	800c290 <_vfiprintf_r+0x20>
 800c2d0:	4b79      	ldr	r3, [pc, #484]	; (800c4b8 <_vfiprintf_r+0x248>)
 800c2d2:	429d      	cmp	r5, r3
 800c2d4:	bf08      	it	eq
 800c2d6:	68f5      	ldreq	r5, [r6, #12]
 800c2d8:	e7da      	b.n	800c290 <_vfiprintf_r+0x20>
 800c2da:	89ab      	ldrh	r3, [r5, #12]
 800c2dc:	0598      	lsls	r0, r3, #22
 800c2de:	d4ed      	bmi.n	800c2bc <_vfiprintf_r+0x4c>
 800c2e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2e2:	f000 fb76 	bl	800c9d2 <__retarget_lock_release_recursive>
 800c2e6:	e7e9      	b.n	800c2bc <_vfiprintf_r+0x4c>
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c2ec:	2320      	movs	r3, #32
 800c2ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2f6:	2330      	movs	r3, #48	; 0x30
 800c2f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c4bc <_vfiprintf_r+0x24c>
 800c2fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c300:	f04f 0901 	mov.w	r9, #1
 800c304:	4623      	mov	r3, r4
 800c306:	469a      	mov	sl, r3
 800c308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c30c:	b10a      	cbz	r2, 800c312 <_vfiprintf_r+0xa2>
 800c30e:	2a25      	cmp	r2, #37	; 0x25
 800c310:	d1f9      	bne.n	800c306 <_vfiprintf_r+0x96>
 800c312:	ebba 0b04 	subs.w	fp, sl, r4
 800c316:	d00b      	beq.n	800c330 <_vfiprintf_r+0xc0>
 800c318:	465b      	mov	r3, fp
 800c31a:	4622      	mov	r2, r4
 800c31c:	4629      	mov	r1, r5
 800c31e:	4630      	mov	r0, r6
 800c320:	f7ff ff94 	bl	800c24c <__sfputs_r>
 800c324:	3001      	adds	r0, #1
 800c326:	f000 80aa 	beq.w	800c47e <_vfiprintf_r+0x20e>
 800c32a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c32c:	445a      	add	r2, fp
 800c32e:	9209      	str	r2, [sp, #36]	; 0x24
 800c330:	f89a 3000 	ldrb.w	r3, [sl]
 800c334:	2b00      	cmp	r3, #0
 800c336:	f000 80a2 	beq.w	800c47e <_vfiprintf_r+0x20e>
 800c33a:	2300      	movs	r3, #0
 800c33c:	f04f 32ff 	mov.w	r2, #4294967295
 800c340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c344:	f10a 0a01 	add.w	sl, sl, #1
 800c348:	9304      	str	r3, [sp, #16]
 800c34a:	9307      	str	r3, [sp, #28]
 800c34c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c350:	931a      	str	r3, [sp, #104]	; 0x68
 800c352:	4654      	mov	r4, sl
 800c354:	2205      	movs	r2, #5
 800c356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c35a:	4858      	ldr	r0, [pc, #352]	; (800c4bc <_vfiprintf_r+0x24c>)
 800c35c:	f7f3 ff48 	bl	80001f0 <memchr>
 800c360:	9a04      	ldr	r2, [sp, #16]
 800c362:	b9d8      	cbnz	r0, 800c39c <_vfiprintf_r+0x12c>
 800c364:	06d1      	lsls	r1, r2, #27
 800c366:	bf44      	itt	mi
 800c368:	2320      	movmi	r3, #32
 800c36a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c36e:	0713      	lsls	r3, r2, #28
 800c370:	bf44      	itt	mi
 800c372:	232b      	movmi	r3, #43	; 0x2b
 800c374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c378:	f89a 3000 	ldrb.w	r3, [sl]
 800c37c:	2b2a      	cmp	r3, #42	; 0x2a
 800c37e:	d015      	beq.n	800c3ac <_vfiprintf_r+0x13c>
 800c380:	9a07      	ldr	r2, [sp, #28]
 800c382:	4654      	mov	r4, sl
 800c384:	2000      	movs	r0, #0
 800c386:	f04f 0c0a 	mov.w	ip, #10
 800c38a:	4621      	mov	r1, r4
 800c38c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c390:	3b30      	subs	r3, #48	; 0x30
 800c392:	2b09      	cmp	r3, #9
 800c394:	d94e      	bls.n	800c434 <_vfiprintf_r+0x1c4>
 800c396:	b1b0      	cbz	r0, 800c3c6 <_vfiprintf_r+0x156>
 800c398:	9207      	str	r2, [sp, #28]
 800c39a:	e014      	b.n	800c3c6 <_vfiprintf_r+0x156>
 800c39c:	eba0 0308 	sub.w	r3, r0, r8
 800c3a0:	fa09 f303 	lsl.w	r3, r9, r3
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	9304      	str	r3, [sp, #16]
 800c3a8:	46a2      	mov	sl, r4
 800c3aa:	e7d2      	b.n	800c352 <_vfiprintf_r+0xe2>
 800c3ac:	9b03      	ldr	r3, [sp, #12]
 800c3ae:	1d19      	adds	r1, r3, #4
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	9103      	str	r1, [sp, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	bfbb      	ittet	lt
 800c3b8:	425b      	neglt	r3, r3
 800c3ba:	f042 0202 	orrlt.w	r2, r2, #2
 800c3be:	9307      	strge	r3, [sp, #28]
 800c3c0:	9307      	strlt	r3, [sp, #28]
 800c3c2:	bfb8      	it	lt
 800c3c4:	9204      	strlt	r2, [sp, #16]
 800c3c6:	7823      	ldrb	r3, [r4, #0]
 800c3c8:	2b2e      	cmp	r3, #46	; 0x2e
 800c3ca:	d10c      	bne.n	800c3e6 <_vfiprintf_r+0x176>
 800c3cc:	7863      	ldrb	r3, [r4, #1]
 800c3ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c3d0:	d135      	bne.n	800c43e <_vfiprintf_r+0x1ce>
 800c3d2:	9b03      	ldr	r3, [sp, #12]
 800c3d4:	1d1a      	adds	r2, r3, #4
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	9203      	str	r2, [sp, #12]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	bfb8      	it	lt
 800c3de:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3e2:	3402      	adds	r4, #2
 800c3e4:	9305      	str	r3, [sp, #20]
 800c3e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c4cc <_vfiprintf_r+0x25c>
 800c3ea:	7821      	ldrb	r1, [r4, #0]
 800c3ec:	2203      	movs	r2, #3
 800c3ee:	4650      	mov	r0, sl
 800c3f0:	f7f3 fefe 	bl	80001f0 <memchr>
 800c3f4:	b140      	cbz	r0, 800c408 <_vfiprintf_r+0x198>
 800c3f6:	2340      	movs	r3, #64	; 0x40
 800c3f8:	eba0 000a 	sub.w	r0, r0, sl
 800c3fc:	fa03 f000 	lsl.w	r0, r3, r0
 800c400:	9b04      	ldr	r3, [sp, #16]
 800c402:	4303      	orrs	r3, r0
 800c404:	3401      	adds	r4, #1
 800c406:	9304      	str	r3, [sp, #16]
 800c408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c40c:	482c      	ldr	r0, [pc, #176]	; (800c4c0 <_vfiprintf_r+0x250>)
 800c40e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c412:	2206      	movs	r2, #6
 800c414:	f7f3 feec 	bl	80001f0 <memchr>
 800c418:	2800      	cmp	r0, #0
 800c41a:	d03f      	beq.n	800c49c <_vfiprintf_r+0x22c>
 800c41c:	4b29      	ldr	r3, [pc, #164]	; (800c4c4 <_vfiprintf_r+0x254>)
 800c41e:	bb1b      	cbnz	r3, 800c468 <_vfiprintf_r+0x1f8>
 800c420:	9b03      	ldr	r3, [sp, #12]
 800c422:	3307      	adds	r3, #7
 800c424:	f023 0307 	bic.w	r3, r3, #7
 800c428:	3308      	adds	r3, #8
 800c42a:	9303      	str	r3, [sp, #12]
 800c42c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c42e:	443b      	add	r3, r7
 800c430:	9309      	str	r3, [sp, #36]	; 0x24
 800c432:	e767      	b.n	800c304 <_vfiprintf_r+0x94>
 800c434:	fb0c 3202 	mla	r2, ip, r2, r3
 800c438:	460c      	mov	r4, r1
 800c43a:	2001      	movs	r0, #1
 800c43c:	e7a5      	b.n	800c38a <_vfiprintf_r+0x11a>
 800c43e:	2300      	movs	r3, #0
 800c440:	3401      	adds	r4, #1
 800c442:	9305      	str	r3, [sp, #20]
 800c444:	4619      	mov	r1, r3
 800c446:	f04f 0c0a 	mov.w	ip, #10
 800c44a:	4620      	mov	r0, r4
 800c44c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c450:	3a30      	subs	r2, #48	; 0x30
 800c452:	2a09      	cmp	r2, #9
 800c454:	d903      	bls.n	800c45e <_vfiprintf_r+0x1ee>
 800c456:	2b00      	cmp	r3, #0
 800c458:	d0c5      	beq.n	800c3e6 <_vfiprintf_r+0x176>
 800c45a:	9105      	str	r1, [sp, #20]
 800c45c:	e7c3      	b.n	800c3e6 <_vfiprintf_r+0x176>
 800c45e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c462:	4604      	mov	r4, r0
 800c464:	2301      	movs	r3, #1
 800c466:	e7f0      	b.n	800c44a <_vfiprintf_r+0x1da>
 800c468:	ab03      	add	r3, sp, #12
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	462a      	mov	r2, r5
 800c46e:	4b16      	ldr	r3, [pc, #88]	; (800c4c8 <_vfiprintf_r+0x258>)
 800c470:	a904      	add	r1, sp, #16
 800c472:	4630      	mov	r0, r6
 800c474:	f7fc f84a 	bl	800850c <_printf_float>
 800c478:	4607      	mov	r7, r0
 800c47a:	1c78      	adds	r0, r7, #1
 800c47c:	d1d6      	bne.n	800c42c <_vfiprintf_r+0x1bc>
 800c47e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c480:	07d9      	lsls	r1, r3, #31
 800c482:	d405      	bmi.n	800c490 <_vfiprintf_r+0x220>
 800c484:	89ab      	ldrh	r3, [r5, #12]
 800c486:	059a      	lsls	r2, r3, #22
 800c488:	d402      	bmi.n	800c490 <_vfiprintf_r+0x220>
 800c48a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c48c:	f000 faa1 	bl	800c9d2 <__retarget_lock_release_recursive>
 800c490:	89ab      	ldrh	r3, [r5, #12]
 800c492:	065b      	lsls	r3, r3, #25
 800c494:	f53f af12 	bmi.w	800c2bc <_vfiprintf_r+0x4c>
 800c498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c49a:	e711      	b.n	800c2c0 <_vfiprintf_r+0x50>
 800c49c:	ab03      	add	r3, sp, #12
 800c49e:	9300      	str	r3, [sp, #0]
 800c4a0:	462a      	mov	r2, r5
 800c4a2:	4b09      	ldr	r3, [pc, #36]	; (800c4c8 <_vfiprintf_r+0x258>)
 800c4a4:	a904      	add	r1, sp, #16
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	f7fc fad4 	bl	8008a54 <_printf_i>
 800c4ac:	e7e4      	b.n	800c478 <_vfiprintf_r+0x208>
 800c4ae:	bf00      	nop
 800c4b0:	0800d1ac 	.word	0x0800d1ac
 800c4b4:	0800d1cc 	.word	0x0800d1cc
 800c4b8:	0800d18c 	.word	0x0800d18c
 800c4bc:	0800d13c 	.word	0x0800d13c
 800c4c0:	0800d146 	.word	0x0800d146
 800c4c4:	0800850d 	.word	0x0800850d
 800c4c8:	0800c24d 	.word	0x0800c24d
 800c4cc:	0800d142 	.word	0x0800d142

0800c4d0 <__swbuf_r>:
 800c4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d2:	460e      	mov	r6, r1
 800c4d4:	4614      	mov	r4, r2
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	b118      	cbz	r0, 800c4e2 <__swbuf_r+0x12>
 800c4da:	6983      	ldr	r3, [r0, #24]
 800c4dc:	b90b      	cbnz	r3, 800c4e2 <__swbuf_r+0x12>
 800c4de:	f000 f9d9 	bl	800c894 <__sinit>
 800c4e2:	4b21      	ldr	r3, [pc, #132]	; (800c568 <__swbuf_r+0x98>)
 800c4e4:	429c      	cmp	r4, r3
 800c4e6:	d12b      	bne.n	800c540 <__swbuf_r+0x70>
 800c4e8:	686c      	ldr	r4, [r5, #4]
 800c4ea:	69a3      	ldr	r3, [r4, #24]
 800c4ec:	60a3      	str	r3, [r4, #8]
 800c4ee:	89a3      	ldrh	r3, [r4, #12]
 800c4f0:	071a      	lsls	r2, r3, #28
 800c4f2:	d52f      	bpl.n	800c554 <__swbuf_r+0x84>
 800c4f4:	6923      	ldr	r3, [r4, #16]
 800c4f6:	b36b      	cbz	r3, 800c554 <__swbuf_r+0x84>
 800c4f8:	6923      	ldr	r3, [r4, #16]
 800c4fa:	6820      	ldr	r0, [r4, #0]
 800c4fc:	1ac0      	subs	r0, r0, r3
 800c4fe:	6963      	ldr	r3, [r4, #20]
 800c500:	b2f6      	uxtb	r6, r6
 800c502:	4283      	cmp	r3, r0
 800c504:	4637      	mov	r7, r6
 800c506:	dc04      	bgt.n	800c512 <__swbuf_r+0x42>
 800c508:	4621      	mov	r1, r4
 800c50a:	4628      	mov	r0, r5
 800c50c:	f000 f92e 	bl	800c76c <_fflush_r>
 800c510:	bb30      	cbnz	r0, 800c560 <__swbuf_r+0x90>
 800c512:	68a3      	ldr	r3, [r4, #8]
 800c514:	3b01      	subs	r3, #1
 800c516:	60a3      	str	r3, [r4, #8]
 800c518:	6823      	ldr	r3, [r4, #0]
 800c51a:	1c5a      	adds	r2, r3, #1
 800c51c:	6022      	str	r2, [r4, #0]
 800c51e:	701e      	strb	r6, [r3, #0]
 800c520:	6963      	ldr	r3, [r4, #20]
 800c522:	3001      	adds	r0, #1
 800c524:	4283      	cmp	r3, r0
 800c526:	d004      	beq.n	800c532 <__swbuf_r+0x62>
 800c528:	89a3      	ldrh	r3, [r4, #12]
 800c52a:	07db      	lsls	r3, r3, #31
 800c52c:	d506      	bpl.n	800c53c <__swbuf_r+0x6c>
 800c52e:	2e0a      	cmp	r6, #10
 800c530:	d104      	bne.n	800c53c <__swbuf_r+0x6c>
 800c532:	4621      	mov	r1, r4
 800c534:	4628      	mov	r0, r5
 800c536:	f000 f919 	bl	800c76c <_fflush_r>
 800c53a:	b988      	cbnz	r0, 800c560 <__swbuf_r+0x90>
 800c53c:	4638      	mov	r0, r7
 800c53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c540:	4b0a      	ldr	r3, [pc, #40]	; (800c56c <__swbuf_r+0x9c>)
 800c542:	429c      	cmp	r4, r3
 800c544:	d101      	bne.n	800c54a <__swbuf_r+0x7a>
 800c546:	68ac      	ldr	r4, [r5, #8]
 800c548:	e7cf      	b.n	800c4ea <__swbuf_r+0x1a>
 800c54a:	4b09      	ldr	r3, [pc, #36]	; (800c570 <__swbuf_r+0xa0>)
 800c54c:	429c      	cmp	r4, r3
 800c54e:	bf08      	it	eq
 800c550:	68ec      	ldreq	r4, [r5, #12]
 800c552:	e7ca      	b.n	800c4ea <__swbuf_r+0x1a>
 800c554:	4621      	mov	r1, r4
 800c556:	4628      	mov	r0, r5
 800c558:	f000 f80c 	bl	800c574 <__swsetup_r>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	d0cb      	beq.n	800c4f8 <__swbuf_r+0x28>
 800c560:	f04f 37ff 	mov.w	r7, #4294967295
 800c564:	e7ea      	b.n	800c53c <__swbuf_r+0x6c>
 800c566:	bf00      	nop
 800c568:	0800d1ac 	.word	0x0800d1ac
 800c56c:	0800d1cc 	.word	0x0800d1cc
 800c570:	0800d18c 	.word	0x0800d18c

0800c574 <__swsetup_r>:
 800c574:	4b32      	ldr	r3, [pc, #200]	; (800c640 <__swsetup_r+0xcc>)
 800c576:	b570      	push	{r4, r5, r6, lr}
 800c578:	681d      	ldr	r5, [r3, #0]
 800c57a:	4606      	mov	r6, r0
 800c57c:	460c      	mov	r4, r1
 800c57e:	b125      	cbz	r5, 800c58a <__swsetup_r+0x16>
 800c580:	69ab      	ldr	r3, [r5, #24]
 800c582:	b913      	cbnz	r3, 800c58a <__swsetup_r+0x16>
 800c584:	4628      	mov	r0, r5
 800c586:	f000 f985 	bl	800c894 <__sinit>
 800c58a:	4b2e      	ldr	r3, [pc, #184]	; (800c644 <__swsetup_r+0xd0>)
 800c58c:	429c      	cmp	r4, r3
 800c58e:	d10f      	bne.n	800c5b0 <__swsetup_r+0x3c>
 800c590:	686c      	ldr	r4, [r5, #4]
 800c592:	89a3      	ldrh	r3, [r4, #12]
 800c594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c598:	0719      	lsls	r1, r3, #28
 800c59a:	d42c      	bmi.n	800c5f6 <__swsetup_r+0x82>
 800c59c:	06dd      	lsls	r5, r3, #27
 800c59e:	d411      	bmi.n	800c5c4 <__swsetup_r+0x50>
 800c5a0:	2309      	movs	r3, #9
 800c5a2:	6033      	str	r3, [r6, #0]
 800c5a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c5a8:	81a3      	strh	r3, [r4, #12]
 800c5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ae:	e03e      	b.n	800c62e <__swsetup_r+0xba>
 800c5b0:	4b25      	ldr	r3, [pc, #148]	; (800c648 <__swsetup_r+0xd4>)
 800c5b2:	429c      	cmp	r4, r3
 800c5b4:	d101      	bne.n	800c5ba <__swsetup_r+0x46>
 800c5b6:	68ac      	ldr	r4, [r5, #8]
 800c5b8:	e7eb      	b.n	800c592 <__swsetup_r+0x1e>
 800c5ba:	4b24      	ldr	r3, [pc, #144]	; (800c64c <__swsetup_r+0xd8>)
 800c5bc:	429c      	cmp	r4, r3
 800c5be:	bf08      	it	eq
 800c5c0:	68ec      	ldreq	r4, [r5, #12]
 800c5c2:	e7e6      	b.n	800c592 <__swsetup_r+0x1e>
 800c5c4:	0758      	lsls	r0, r3, #29
 800c5c6:	d512      	bpl.n	800c5ee <__swsetup_r+0x7a>
 800c5c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5ca:	b141      	cbz	r1, 800c5de <__swsetup_r+0x6a>
 800c5cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5d0:	4299      	cmp	r1, r3
 800c5d2:	d002      	beq.n	800c5da <__swsetup_r+0x66>
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	f7ff fb27 	bl	800bc28 <_free_r>
 800c5da:	2300      	movs	r3, #0
 800c5dc:	6363      	str	r3, [r4, #52]	; 0x34
 800c5de:	89a3      	ldrh	r3, [r4, #12]
 800c5e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c5e4:	81a3      	strh	r3, [r4, #12]
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	6063      	str	r3, [r4, #4]
 800c5ea:	6923      	ldr	r3, [r4, #16]
 800c5ec:	6023      	str	r3, [r4, #0]
 800c5ee:	89a3      	ldrh	r3, [r4, #12]
 800c5f0:	f043 0308 	orr.w	r3, r3, #8
 800c5f4:	81a3      	strh	r3, [r4, #12]
 800c5f6:	6923      	ldr	r3, [r4, #16]
 800c5f8:	b94b      	cbnz	r3, 800c60e <__swsetup_r+0x9a>
 800c5fa:	89a3      	ldrh	r3, [r4, #12]
 800c5fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c604:	d003      	beq.n	800c60e <__swsetup_r+0x9a>
 800c606:	4621      	mov	r1, r4
 800c608:	4630      	mov	r0, r6
 800c60a:	f000 fa09 	bl	800ca20 <__smakebuf_r>
 800c60e:	89a0      	ldrh	r0, [r4, #12]
 800c610:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c614:	f010 0301 	ands.w	r3, r0, #1
 800c618:	d00a      	beq.n	800c630 <__swsetup_r+0xbc>
 800c61a:	2300      	movs	r3, #0
 800c61c:	60a3      	str	r3, [r4, #8]
 800c61e:	6963      	ldr	r3, [r4, #20]
 800c620:	425b      	negs	r3, r3
 800c622:	61a3      	str	r3, [r4, #24]
 800c624:	6923      	ldr	r3, [r4, #16]
 800c626:	b943      	cbnz	r3, 800c63a <__swsetup_r+0xc6>
 800c628:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c62c:	d1ba      	bne.n	800c5a4 <__swsetup_r+0x30>
 800c62e:	bd70      	pop	{r4, r5, r6, pc}
 800c630:	0781      	lsls	r1, r0, #30
 800c632:	bf58      	it	pl
 800c634:	6963      	ldrpl	r3, [r4, #20]
 800c636:	60a3      	str	r3, [r4, #8]
 800c638:	e7f4      	b.n	800c624 <__swsetup_r+0xb0>
 800c63a:	2000      	movs	r0, #0
 800c63c:	e7f7      	b.n	800c62e <__swsetup_r+0xba>
 800c63e:	bf00      	nop
 800c640:	20000030 	.word	0x20000030
 800c644:	0800d1ac 	.word	0x0800d1ac
 800c648:	0800d1cc 	.word	0x0800d1cc
 800c64c:	0800d18c 	.word	0x0800d18c

0800c650 <abort>:
 800c650:	b508      	push	{r3, lr}
 800c652:	2006      	movs	r0, #6
 800c654:	f000 fa54 	bl	800cb00 <raise>
 800c658:	2001      	movs	r0, #1
 800c65a:	f7f6 f891 	bl	8002780 <_exit>
	...

0800c660 <__sflush_r>:
 800c660:	898a      	ldrh	r2, [r1, #12]
 800c662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c666:	4605      	mov	r5, r0
 800c668:	0710      	lsls	r0, r2, #28
 800c66a:	460c      	mov	r4, r1
 800c66c:	d458      	bmi.n	800c720 <__sflush_r+0xc0>
 800c66e:	684b      	ldr	r3, [r1, #4]
 800c670:	2b00      	cmp	r3, #0
 800c672:	dc05      	bgt.n	800c680 <__sflush_r+0x20>
 800c674:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c676:	2b00      	cmp	r3, #0
 800c678:	dc02      	bgt.n	800c680 <__sflush_r+0x20>
 800c67a:	2000      	movs	r0, #0
 800c67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c682:	2e00      	cmp	r6, #0
 800c684:	d0f9      	beq.n	800c67a <__sflush_r+0x1a>
 800c686:	2300      	movs	r3, #0
 800c688:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c68c:	682f      	ldr	r7, [r5, #0]
 800c68e:	602b      	str	r3, [r5, #0]
 800c690:	d032      	beq.n	800c6f8 <__sflush_r+0x98>
 800c692:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c694:	89a3      	ldrh	r3, [r4, #12]
 800c696:	075a      	lsls	r2, r3, #29
 800c698:	d505      	bpl.n	800c6a6 <__sflush_r+0x46>
 800c69a:	6863      	ldr	r3, [r4, #4]
 800c69c:	1ac0      	subs	r0, r0, r3
 800c69e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6a0:	b10b      	cbz	r3, 800c6a6 <__sflush_r+0x46>
 800c6a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6a4:	1ac0      	subs	r0, r0, r3
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6ac:	6a21      	ldr	r1, [r4, #32]
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	47b0      	blx	r6
 800c6b2:	1c43      	adds	r3, r0, #1
 800c6b4:	89a3      	ldrh	r3, [r4, #12]
 800c6b6:	d106      	bne.n	800c6c6 <__sflush_r+0x66>
 800c6b8:	6829      	ldr	r1, [r5, #0]
 800c6ba:	291d      	cmp	r1, #29
 800c6bc:	d82c      	bhi.n	800c718 <__sflush_r+0xb8>
 800c6be:	4a2a      	ldr	r2, [pc, #168]	; (800c768 <__sflush_r+0x108>)
 800c6c0:	40ca      	lsrs	r2, r1
 800c6c2:	07d6      	lsls	r6, r2, #31
 800c6c4:	d528      	bpl.n	800c718 <__sflush_r+0xb8>
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	6062      	str	r2, [r4, #4]
 800c6ca:	04d9      	lsls	r1, r3, #19
 800c6cc:	6922      	ldr	r2, [r4, #16]
 800c6ce:	6022      	str	r2, [r4, #0]
 800c6d0:	d504      	bpl.n	800c6dc <__sflush_r+0x7c>
 800c6d2:	1c42      	adds	r2, r0, #1
 800c6d4:	d101      	bne.n	800c6da <__sflush_r+0x7a>
 800c6d6:	682b      	ldr	r3, [r5, #0]
 800c6d8:	b903      	cbnz	r3, 800c6dc <__sflush_r+0x7c>
 800c6da:	6560      	str	r0, [r4, #84]	; 0x54
 800c6dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6de:	602f      	str	r7, [r5, #0]
 800c6e0:	2900      	cmp	r1, #0
 800c6e2:	d0ca      	beq.n	800c67a <__sflush_r+0x1a>
 800c6e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6e8:	4299      	cmp	r1, r3
 800c6ea:	d002      	beq.n	800c6f2 <__sflush_r+0x92>
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	f7ff fa9b 	bl	800bc28 <_free_r>
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	6360      	str	r0, [r4, #52]	; 0x34
 800c6f6:	e7c1      	b.n	800c67c <__sflush_r+0x1c>
 800c6f8:	6a21      	ldr	r1, [r4, #32]
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	4628      	mov	r0, r5
 800c6fe:	47b0      	blx	r6
 800c700:	1c41      	adds	r1, r0, #1
 800c702:	d1c7      	bne.n	800c694 <__sflush_r+0x34>
 800c704:	682b      	ldr	r3, [r5, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d0c4      	beq.n	800c694 <__sflush_r+0x34>
 800c70a:	2b1d      	cmp	r3, #29
 800c70c:	d001      	beq.n	800c712 <__sflush_r+0xb2>
 800c70e:	2b16      	cmp	r3, #22
 800c710:	d101      	bne.n	800c716 <__sflush_r+0xb6>
 800c712:	602f      	str	r7, [r5, #0]
 800c714:	e7b1      	b.n	800c67a <__sflush_r+0x1a>
 800c716:	89a3      	ldrh	r3, [r4, #12]
 800c718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c71c:	81a3      	strh	r3, [r4, #12]
 800c71e:	e7ad      	b.n	800c67c <__sflush_r+0x1c>
 800c720:	690f      	ldr	r7, [r1, #16]
 800c722:	2f00      	cmp	r7, #0
 800c724:	d0a9      	beq.n	800c67a <__sflush_r+0x1a>
 800c726:	0793      	lsls	r3, r2, #30
 800c728:	680e      	ldr	r6, [r1, #0]
 800c72a:	bf08      	it	eq
 800c72c:	694b      	ldreq	r3, [r1, #20]
 800c72e:	600f      	str	r7, [r1, #0]
 800c730:	bf18      	it	ne
 800c732:	2300      	movne	r3, #0
 800c734:	eba6 0807 	sub.w	r8, r6, r7
 800c738:	608b      	str	r3, [r1, #8]
 800c73a:	f1b8 0f00 	cmp.w	r8, #0
 800c73e:	dd9c      	ble.n	800c67a <__sflush_r+0x1a>
 800c740:	6a21      	ldr	r1, [r4, #32]
 800c742:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c744:	4643      	mov	r3, r8
 800c746:	463a      	mov	r2, r7
 800c748:	4628      	mov	r0, r5
 800c74a:	47b0      	blx	r6
 800c74c:	2800      	cmp	r0, #0
 800c74e:	dc06      	bgt.n	800c75e <__sflush_r+0xfe>
 800c750:	89a3      	ldrh	r3, [r4, #12]
 800c752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c756:	81a3      	strh	r3, [r4, #12]
 800c758:	f04f 30ff 	mov.w	r0, #4294967295
 800c75c:	e78e      	b.n	800c67c <__sflush_r+0x1c>
 800c75e:	4407      	add	r7, r0
 800c760:	eba8 0800 	sub.w	r8, r8, r0
 800c764:	e7e9      	b.n	800c73a <__sflush_r+0xda>
 800c766:	bf00      	nop
 800c768:	20400001 	.word	0x20400001

0800c76c <_fflush_r>:
 800c76c:	b538      	push	{r3, r4, r5, lr}
 800c76e:	690b      	ldr	r3, [r1, #16]
 800c770:	4605      	mov	r5, r0
 800c772:	460c      	mov	r4, r1
 800c774:	b913      	cbnz	r3, 800c77c <_fflush_r+0x10>
 800c776:	2500      	movs	r5, #0
 800c778:	4628      	mov	r0, r5
 800c77a:	bd38      	pop	{r3, r4, r5, pc}
 800c77c:	b118      	cbz	r0, 800c786 <_fflush_r+0x1a>
 800c77e:	6983      	ldr	r3, [r0, #24]
 800c780:	b90b      	cbnz	r3, 800c786 <_fflush_r+0x1a>
 800c782:	f000 f887 	bl	800c894 <__sinit>
 800c786:	4b14      	ldr	r3, [pc, #80]	; (800c7d8 <_fflush_r+0x6c>)
 800c788:	429c      	cmp	r4, r3
 800c78a:	d11b      	bne.n	800c7c4 <_fflush_r+0x58>
 800c78c:	686c      	ldr	r4, [r5, #4]
 800c78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d0ef      	beq.n	800c776 <_fflush_r+0xa>
 800c796:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c798:	07d0      	lsls	r0, r2, #31
 800c79a:	d404      	bmi.n	800c7a6 <_fflush_r+0x3a>
 800c79c:	0599      	lsls	r1, r3, #22
 800c79e:	d402      	bmi.n	800c7a6 <_fflush_r+0x3a>
 800c7a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7a2:	f000 f915 	bl	800c9d0 <__retarget_lock_acquire_recursive>
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	f7ff ff59 	bl	800c660 <__sflush_r>
 800c7ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7b0:	07da      	lsls	r2, r3, #31
 800c7b2:	4605      	mov	r5, r0
 800c7b4:	d4e0      	bmi.n	800c778 <_fflush_r+0xc>
 800c7b6:	89a3      	ldrh	r3, [r4, #12]
 800c7b8:	059b      	lsls	r3, r3, #22
 800c7ba:	d4dd      	bmi.n	800c778 <_fflush_r+0xc>
 800c7bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7be:	f000 f908 	bl	800c9d2 <__retarget_lock_release_recursive>
 800c7c2:	e7d9      	b.n	800c778 <_fflush_r+0xc>
 800c7c4:	4b05      	ldr	r3, [pc, #20]	; (800c7dc <_fflush_r+0x70>)
 800c7c6:	429c      	cmp	r4, r3
 800c7c8:	d101      	bne.n	800c7ce <_fflush_r+0x62>
 800c7ca:	68ac      	ldr	r4, [r5, #8]
 800c7cc:	e7df      	b.n	800c78e <_fflush_r+0x22>
 800c7ce:	4b04      	ldr	r3, [pc, #16]	; (800c7e0 <_fflush_r+0x74>)
 800c7d0:	429c      	cmp	r4, r3
 800c7d2:	bf08      	it	eq
 800c7d4:	68ec      	ldreq	r4, [r5, #12]
 800c7d6:	e7da      	b.n	800c78e <_fflush_r+0x22>
 800c7d8:	0800d1ac 	.word	0x0800d1ac
 800c7dc:	0800d1cc 	.word	0x0800d1cc
 800c7e0:	0800d18c 	.word	0x0800d18c

0800c7e4 <std>:
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	b510      	push	{r4, lr}
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	e9c0 3300 	strd	r3, r3, [r0]
 800c7ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7f2:	6083      	str	r3, [r0, #8]
 800c7f4:	8181      	strh	r1, [r0, #12]
 800c7f6:	6643      	str	r3, [r0, #100]	; 0x64
 800c7f8:	81c2      	strh	r2, [r0, #14]
 800c7fa:	6183      	str	r3, [r0, #24]
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	2208      	movs	r2, #8
 800c800:	305c      	adds	r0, #92	; 0x5c
 800c802:	f7fb fddb 	bl	80083bc <memset>
 800c806:	4b05      	ldr	r3, [pc, #20]	; (800c81c <std+0x38>)
 800c808:	6263      	str	r3, [r4, #36]	; 0x24
 800c80a:	4b05      	ldr	r3, [pc, #20]	; (800c820 <std+0x3c>)
 800c80c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c80e:	4b05      	ldr	r3, [pc, #20]	; (800c824 <std+0x40>)
 800c810:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c812:	4b05      	ldr	r3, [pc, #20]	; (800c828 <std+0x44>)
 800c814:	6224      	str	r4, [r4, #32]
 800c816:	6323      	str	r3, [r4, #48]	; 0x30
 800c818:	bd10      	pop	{r4, pc}
 800c81a:	bf00      	nop
 800c81c:	0800cb39 	.word	0x0800cb39
 800c820:	0800cb5b 	.word	0x0800cb5b
 800c824:	0800cb93 	.word	0x0800cb93
 800c828:	0800cbb7 	.word	0x0800cbb7

0800c82c <_cleanup_r>:
 800c82c:	4901      	ldr	r1, [pc, #4]	; (800c834 <_cleanup_r+0x8>)
 800c82e:	f000 b8af 	b.w	800c990 <_fwalk_reent>
 800c832:	bf00      	nop
 800c834:	0800c76d 	.word	0x0800c76d

0800c838 <__sfmoreglue>:
 800c838:	b570      	push	{r4, r5, r6, lr}
 800c83a:	2268      	movs	r2, #104	; 0x68
 800c83c:	1e4d      	subs	r5, r1, #1
 800c83e:	4355      	muls	r5, r2
 800c840:	460e      	mov	r6, r1
 800c842:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c846:	f7ff fa5b 	bl	800bd00 <_malloc_r>
 800c84a:	4604      	mov	r4, r0
 800c84c:	b140      	cbz	r0, 800c860 <__sfmoreglue+0x28>
 800c84e:	2100      	movs	r1, #0
 800c850:	e9c0 1600 	strd	r1, r6, [r0]
 800c854:	300c      	adds	r0, #12
 800c856:	60a0      	str	r0, [r4, #8]
 800c858:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c85c:	f7fb fdae 	bl	80083bc <memset>
 800c860:	4620      	mov	r0, r4
 800c862:	bd70      	pop	{r4, r5, r6, pc}

0800c864 <__sfp_lock_acquire>:
 800c864:	4801      	ldr	r0, [pc, #4]	; (800c86c <__sfp_lock_acquire+0x8>)
 800c866:	f000 b8b3 	b.w	800c9d0 <__retarget_lock_acquire_recursive>
 800c86a:	bf00      	nop
 800c86c:	20004cd5 	.word	0x20004cd5

0800c870 <__sfp_lock_release>:
 800c870:	4801      	ldr	r0, [pc, #4]	; (800c878 <__sfp_lock_release+0x8>)
 800c872:	f000 b8ae 	b.w	800c9d2 <__retarget_lock_release_recursive>
 800c876:	bf00      	nop
 800c878:	20004cd5 	.word	0x20004cd5

0800c87c <__sinit_lock_acquire>:
 800c87c:	4801      	ldr	r0, [pc, #4]	; (800c884 <__sinit_lock_acquire+0x8>)
 800c87e:	f000 b8a7 	b.w	800c9d0 <__retarget_lock_acquire_recursive>
 800c882:	bf00      	nop
 800c884:	20004cd6 	.word	0x20004cd6

0800c888 <__sinit_lock_release>:
 800c888:	4801      	ldr	r0, [pc, #4]	; (800c890 <__sinit_lock_release+0x8>)
 800c88a:	f000 b8a2 	b.w	800c9d2 <__retarget_lock_release_recursive>
 800c88e:	bf00      	nop
 800c890:	20004cd6 	.word	0x20004cd6

0800c894 <__sinit>:
 800c894:	b510      	push	{r4, lr}
 800c896:	4604      	mov	r4, r0
 800c898:	f7ff fff0 	bl	800c87c <__sinit_lock_acquire>
 800c89c:	69a3      	ldr	r3, [r4, #24]
 800c89e:	b11b      	cbz	r3, 800c8a8 <__sinit+0x14>
 800c8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8a4:	f7ff bff0 	b.w	800c888 <__sinit_lock_release>
 800c8a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c8ac:	6523      	str	r3, [r4, #80]	; 0x50
 800c8ae:	4b13      	ldr	r3, [pc, #76]	; (800c8fc <__sinit+0x68>)
 800c8b0:	4a13      	ldr	r2, [pc, #76]	; (800c900 <__sinit+0x6c>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c8b6:	42a3      	cmp	r3, r4
 800c8b8:	bf04      	itt	eq
 800c8ba:	2301      	moveq	r3, #1
 800c8bc:	61a3      	streq	r3, [r4, #24]
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f000 f820 	bl	800c904 <__sfp>
 800c8c4:	6060      	str	r0, [r4, #4]
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	f000 f81c 	bl	800c904 <__sfp>
 800c8cc:	60a0      	str	r0, [r4, #8]
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f000 f818 	bl	800c904 <__sfp>
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	60e0      	str	r0, [r4, #12]
 800c8d8:	2104      	movs	r1, #4
 800c8da:	6860      	ldr	r0, [r4, #4]
 800c8dc:	f7ff ff82 	bl	800c7e4 <std>
 800c8e0:	68a0      	ldr	r0, [r4, #8]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	2109      	movs	r1, #9
 800c8e6:	f7ff ff7d 	bl	800c7e4 <std>
 800c8ea:	68e0      	ldr	r0, [r4, #12]
 800c8ec:	2202      	movs	r2, #2
 800c8ee:	2112      	movs	r1, #18
 800c8f0:	f7ff ff78 	bl	800c7e4 <std>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	61a3      	str	r3, [r4, #24]
 800c8f8:	e7d2      	b.n	800c8a0 <__sinit+0xc>
 800c8fa:	bf00      	nop
 800c8fc:	0800cd48 	.word	0x0800cd48
 800c900:	0800c82d 	.word	0x0800c82d

0800c904 <__sfp>:
 800c904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c906:	4607      	mov	r7, r0
 800c908:	f7ff ffac 	bl	800c864 <__sfp_lock_acquire>
 800c90c:	4b1e      	ldr	r3, [pc, #120]	; (800c988 <__sfp+0x84>)
 800c90e:	681e      	ldr	r6, [r3, #0]
 800c910:	69b3      	ldr	r3, [r6, #24]
 800c912:	b913      	cbnz	r3, 800c91a <__sfp+0x16>
 800c914:	4630      	mov	r0, r6
 800c916:	f7ff ffbd 	bl	800c894 <__sinit>
 800c91a:	3648      	adds	r6, #72	; 0x48
 800c91c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c920:	3b01      	subs	r3, #1
 800c922:	d503      	bpl.n	800c92c <__sfp+0x28>
 800c924:	6833      	ldr	r3, [r6, #0]
 800c926:	b30b      	cbz	r3, 800c96c <__sfp+0x68>
 800c928:	6836      	ldr	r6, [r6, #0]
 800c92a:	e7f7      	b.n	800c91c <__sfp+0x18>
 800c92c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c930:	b9d5      	cbnz	r5, 800c968 <__sfp+0x64>
 800c932:	4b16      	ldr	r3, [pc, #88]	; (800c98c <__sfp+0x88>)
 800c934:	60e3      	str	r3, [r4, #12]
 800c936:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c93a:	6665      	str	r5, [r4, #100]	; 0x64
 800c93c:	f000 f847 	bl	800c9ce <__retarget_lock_init_recursive>
 800c940:	f7ff ff96 	bl	800c870 <__sfp_lock_release>
 800c944:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c948:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c94c:	6025      	str	r5, [r4, #0]
 800c94e:	61a5      	str	r5, [r4, #24]
 800c950:	2208      	movs	r2, #8
 800c952:	4629      	mov	r1, r5
 800c954:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c958:	f7fb fd30 	bl	80083bc <memset>
 800c95c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c960:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c964:	4620      	mov	r0, r4
 800c966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c968:	3468      	adds	r4, #104	; 0x68
 800c96a:	e7d9      	b.n	800c920 <__sfp+0x1c>
 800c96c:	2104      	movs	r1, #4
 800c96e:	4638      	mov	r0, r7
 800c970:	f7ff ff62 	bl	800c838 <__sfmoreglue>
 800c974:	4604      	mov	r4, r0
 800c976:	6030      	str	r0, [r6, #0]
 800c978:	2800      	cmp	r0, #0
 800c97a:	d1d5      	bne.n	800c928 <__sfp+0x24>
 800c97c:	f7ff ff78 	bl	800c870 <__sfp_lock_release>
 800c980:	230c      	movs	r3, #12
 800c982:	603b      	str	r3, [r7, #0]
 800c984:	e7ee      	b.n	800c964 <__sfp+0x60>
 800c986:	bf00      	nop
 800c988:	0800cd48 	.word	0x0800cd48
 800c98c:	ffff0001 	.word	0xffff0001

0800c990 <_fwalk_reent>:
 800c990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c994:	4606      	mov	r6, r0
 800c996:	4688      	mov	r8, r1
 800c998:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c99c:	2700      	movs	r7, #0
 800c99e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9a2:	f1b9 0901 	subs.w	r9, r9, #1
 800c9a6:	d505      	bpl.n	800c9b4 <_fwalk_reent+0x24>
 800c9a8:	6824      	ldr	r4, [r4, #0]
 800c9aa:	2c00      	cmp	r4, #0
 800c9ac:	d1f7      	bne.n	800c99e <_fwalk_reent+0xe>
 800c9ae:	4638      	mov	r0, r7
 800c9b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9b4:	89ab      	ldrh	r3, [r5, #12]
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d907      	bls.n	800c9ca <_fwalk_reent+0x3a>
 800c9ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	d003      	beq.n	800c9ca <_fwalk_reent+0x3a>
 800c9c2:	4629      	mov	r1, r5
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	47c0      	blx	r8
 800c9c8:	4307      	orrs	r7, r0
 800c9ca:	3568      	adds	r5, #104	; 0x68
 800c9cc:	e7e9      	b.n	800c9a2 <_fwalk_reent+0x12>

0800c9ce <__retarget_lock_init_recursive>:
 800c9ce:	4770      	bx	lr

0800c9d0 <__retarget_lock_acquire_recursive>:
 800c9d0:	4770      	bx	lr

0800c9d2 <__retarget_lock_release_recursive>:
 800c9d2:	4770      	bx	lr

0800c9d4 <__swhatbuf_r>:
 800c9d4:	b570      	push	{r4, r5, r6, lr}
 800c9d6:	460e      	mov	r6, r1
 800c9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9dc:	2900      	cmp	r1, #0
 800c9de:	b096      	sub	sp, #88	; 0x58
 800c9e0:	4614      	mov	r4, r2
 800c9e2:	461d      	mov	r5, r3
 800c9e4:	da08      	bge.n	800c9f8 <__swhatbuf_r+0x24>
 800c9e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	602a      	str	r2, [r5, #0]
 800c9ee:	061a      	lsls	r2, r3, #24
 800c9f0:	d410      	bmi.n	800ca14 <__swhatbuf_r+0x40>
 800c9f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9f6:	e00e      	b.n	800ca16 <__swhatbuf_r+0x42>
 800c9f8:	466a      	mov	r2, sp
 800c9fa:	f000 f903 	bl	800cc04 <_fstat_r>
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	dbf1      	blt.n	800c9e6 <__swhatbuf_r+0x12>
 800ca02:	9a01      	ldr	r2, [sp, #4]
 800ca04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca0c:	425a      	negs	r2, r3
 800ca0e:	415a      	adcs	r2, r3
 800ca10:	602a      	str	r2, [r5, #0]
 800ca12:	e7ee      	b.n	800c9f2 <__swhatbuf_r+0x1e>
 800ca14:	2340      	movs	r3, #64	; 0x40
 800ca16:	2000      	movs	r0, #0
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	b016      	add	sp, #88	; 0x58
 800ca1c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ca20 <__smakebuf_r>:
 800ca20:	898b      	ldrh	r3, [r1, #12]
 800ca22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca24:	079d      	lsls	r5, r3, #30
 800ca26:	4606      	mov	r6, r0
 800ca28:	460c      	mov	r4, r1
 800ca2a:	d507      	bpl.n	800ca3c <__smakebuf_r+0x1c>
 800ca2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	6123      	str	r3, [r4, #16]
 800ca34:	2301      	movs	r3, #1
 800ca36:	6163      	str	r3, [r4, #20]
 800ca38:	b002      	add	sp, #8
 800ca3a:	bd70      	pop	{r4, r5, r6, pc}
 800ca3c:	ab01      	add	r3, sp, #4
 800ca3e:	466a      	mov	r2, sp
 800ca40:	f7ff ffc8 	bl	800c9d4 <__swhatbuf_r>
 800ca44:	9900      	ldr	r1, [sp, #0]
 800ca46:	4605      	mov	r5, r0
 800ca48:	4630      	mov	r0, r6
 800ca4a:	f7ff f959 	bl	800bd00 <_malloc_r>
 800ca4e:	b948      	cbnz	r0, 800ca64 <__smakebuf_r+0x44>
 800ca50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca54:	059a      	lsls	r2, r3, #22
 800ca56:	d4ef      	bmi.n	800ca38 <__smakebuf_r+0x18>
 800ca58:	f023 0303 	bic.w	r3, r3, #3
 800ca5c:	f043 0302 	orr.w	r3, r3, #2
 800ca60:	81a3      	strh	r3, [r4, #12]
 800ca62:	e7e3      	b.n	800ca2c <__smakebuf_r+0xc>
 800ca64:	4b0d      	ldr	r3, [pc, #52]	; (800ca9c <__smakebuf_r+0x7c>)
 800ca66:	62b3      	str	r3, [r6, #40]	; 0x28
 800ca68:	89a3      	ldrh	r3, [r4, #12]
 800ca6a:	6020      	str	r0, [r4, #0]
 800ca6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca70:	81a3      	strh	r3, [r4, #12]
 800ca72:	9b00      	ldr	r3, [sp, #0]
 800ca74:	6163      	str	r3, [r4, #20]
 800ca76:	9b01      	ldr	r3, [sp, #4]
 800ca78:	6120      	str	r0, [r4, #16]
 800ca7a:	b15b      	cbz	r3, 800ca94 <__smakebuf_r+0x74>
 800ca7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca80:	4630      	mov	r0, r6
 800ca82:	f000 f8d1 	bl	800cc28 <_isatty_r>
 800ca86:	b128      	cbz	r0, 800ca94 <__smakebuf_r+0x74>
 800ca88:	89a3      	ldrh	r3, [r4, #12]
 800ca8a:	f023 0303 	bic.w	r3, r3, #3
 800ca8e:	f043 0301 	orr.w	r3, r3, #1
 800ca92:	81a3      	strh	r3, [r4, #12]
 800ca94:	89a0      	ldrh	r0, [r4, #12]
 800ca96:	4305      	orrs	r5, r0
 800ca98:	81a5      	strh	r5, [r4, #12]
 800ca9a:	e7cd      	b.n	800ca38 <__smakebuf_r+0x18>
 800ca9c:	0800c82d 	.word	0x0800c82d

0800caa0 <_malloc_usable_size_r>:
 800caa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800caa4:	1f18      	subs	r0, r3, #4
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	bfbc      	itt	lt
 800caaa:	580b      	ldrlt	r3, [r1, r0]
 800caac:	18c0      	addlt	r0, r0, r3
 800caae:	4770      	bx	lr

0800cab0 <_raise_r>:
 800cab0:	291f      	cmp	r1, #31
 800cab2:	b538      	push	{r3, r4, r5, lr}
 800cab4:	4604      	mov	r4, r0
 800cab6:	460d      	mov	r5, r1
 800cab8:	d904      	bls.n	800cac4 <_raise_r+0x14>
 800caba:	2316      	movs	r3, #22
 800cabc:	6003      	str	r3, [r0, #0]
 800cabe:	f04f 30ff 	mov.w	r0, #4294967295
 800cac2:	bd38      	pop	{r3, r4, r5, pc}
 800cac4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cac6:	b112      	cbz	r2, 800cace <_raise_r+0x1e>
 800cac8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cacc:	b94b      	cbnz	r3, 800cae2 <_raise_r+0x32>
 800cace:	4620      	mov	r0, r4
 800cad0:	f000 f830 	bl	800cb34 <_getpid_r>
 800cad4:	462a      	mov	r2, r5
 800cad6:	4601      	mov	r1, r0
 800cad8:	4620      	mov	r0, r4
 800cada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cade:	f000 b817 	b.w	800cb10 <_kill_r>
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d00a      	beq.n	800cafc <_raise_r+0x4c>
 800cae6:	1c59      	adds	r1, r3, #1
 800cae8:	d103      	bne.n	800caf2 <_raise_r+0x42>
 800caea:	2316      	movs	r3, #22
 800caec:	6003      	str	r3, [r0, #0]
 800caee:	2001      	movs	r0, #1
 800caf0:	e7e7      	b.n	800cac2 <_raise_r+0x12>
 800caf2:	2400      	movs	r4, #0
 800caf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800caf8:	4628      	mov	r0, r5
 800cafa:	4798      	blx	r3
 800cafc:	2000      	movs	r0, #0
 800cafe:	e7e0      	b.n	800cac2 <_raise_r+0x12>

0800cb00 <raise>:
 800cb00:	4b02      	ldr	r3, [pc, #8]	; (800cb0c <raise+0xc>)
 800cb02:	4601      	mov	r1, r0
 800cb04:	6818      	ldr	r0, [r3, #0]
 800cb06:	f7ff bfd3 	b.w	800cab0 <_raise_r>
 800cb0a:	bf00      	nop
 800cb0c:	20000030 	.word	0x20000030

0800cb10 <_kill_r>:
 800cb10:	b538      	push	{r3, r4, r5, lr}
 800cb12:	4d07      	ldr	r5, [pc, #28]	; (800cb30 <_kill_r+0x20>)
 800cb14:	2300      	movs	r3, #0
 800cb16:	4604      	mov	r4, r0
 800cb18:	4608      	mov	r0, r1
 800cb1a:	4611      	mov	r1, r2
 800cb1c:	602b      	str	r3, [r5, #0]
 800cb1e:	f7f5 fe1f 	bl	8002760 <_kill>
 800cb22:	1c43      	adds	r3, r0, #1
 800cb24:	d102      	bne.n	800cb2c <_kill_r+0x1c>
 800cb26:	682b      	ldr	r3, [r5, #0]
 800cb28:	b103      	cbz	r3, 800cb2c <_kill_r+0x1c>
 800cb2a:	6023      	str	r3, [r4, #0]
 800cb2c:	bd38      	pop	{r3, r4, r5, pc}
 800cb2e:	bf00      	nop
 800cb30:	20004cd0 	.word	0x20004cd0

0800cb34 <_getpid_r>:
 800cb34:	f7f5 be0c 	b.w	8002750 <_getpid>

0800cb38 <__sread>:
 800cb38:	b510      	push	{r4, lr}
 800cb3a:	460c      	mov	r4, r1
 800cb3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb40:	f000 f894 	bl	800cc6c <_read_r>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	bfab      	itete	ge
 800cb48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cb4a:	89a3      	ldrhlt	r3, [r4, #12]
 800cb4c:	181b      	addge	r3, r3, r0
 800cb4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb52:	bfac      	ite	ge
 800cb54:	6563      	strge	r3, [r4, #84]	; 0x54
 800cb56:	81a3      	strhlt	r3, [r4, #12]
 800cb58:	bd10      	pop	{r4, pc}

0800cb5a <__swrite>:
 800cb5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb5e:	461f      	mov	r7, r3
 800cb60:	898b      	ldrh	r3, [r1, #12]
 800cb62:	05db      	lsls	r3, r3, #23
 800cb64:	4605      	mov	r5, r0
 800cb66:	460c      	mov	r4, r1
 800cb68:	4616      	mov	r6, r2
 800cb6a:	d505      	bpl.n	800cb78 <__swrite+0x1e>
 800cb6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb70:	2302      	movs	r3, #2
 800cb72:	2200      	movs	r2, #0
 800cb74:	f000 f868 	bl	800cc48 <_lseek_r>
 800cb78:	89a3      	ldrh	r3, [r4, #12]
 800cb7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb82:	81a3      	strh	r3, [r4, #12]
 800cb84:	4632      	mov	r2, r6
 800cb86:	463b      	mov	r3, r7
 800cb88:	4628      	mov	r0, r5
 800cb8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb8e:	f000 b817 	b.w	800cbc0 <_write_r>

0800cb92 <__sseek>:
 800cb92:	b510      	push	{r4, lr}
 800cb94:	460c      	mov	r4, r1
 800cb96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb9a:	f000 f855 	bl	800cc48 <_lseek_r>
 800cb9e:	1c43      	adds	r3, r0, #1
 800cba0:	89a3      	ldrh	r3, [r4, #12]
 800cba2:	bf15      	itete	ne
 800cba4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cbaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cbae:	81a3      	strheq	r3, [r4, #12]
 800cbb0:	bf18      	it	ne
 800cbb2:	81a3      	strhne	r3, [r4, #12]
 800cbb4:	bd10      	pop	{r4, pc}

0800cbb6 <__sclose>:
 800cbb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbba:	f000 b813 	b.w	800cbe4 <_close_r>
	...

0800cbc0 <_write_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	4d07      	ldr	r5, [pc, #28]	; (800cbe0 <_write_r+0x20>)
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	4608      	mov	r0, r1
 800cbc8:	4611      	mov	r1, r2
 800cbca:	2200      	movs	r2, #0
 800cbcc:	602a      	str	r2, [r5, #0]
 800cbce:	461a      	mov	r2, r3
 800cbd0:	f7f5 fdfd 	bl	80027ce <_write>
 800cbd4:	1c43      	adds	r3, r0, #1
 800cbd6:	d102      	bne.n	800cbde <_write_r+0x1e>
 800cbd8:	682b      	ldr	r3, [r5, #0]
 800cbda:	b103      	cbz	r3, 800cbde <_write_r+0x1e>
 800cbdc:	6023      	str	r3, [r4, #0]
 800cbde:	bd38      	pop	{r3, r4, r5, pc}
 800cbe0:	20004cd0 	.word	0x20004cd0

0800cbe4 <_close_r>:
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	4d06      	ldr	r5, [pc, #24]	; (800cc00 <_close_r+0x1c>)
 800cbe8:	2300      	movs	r3, #0
 800cbea:	4604      	mov	r4, r0
 800cbec:	4608      	mov	r0, r1
 800cbee:	602b      	str	r3, [r5, #0]
 800cbf0:	f7f5 fe09 	bl	8002806 <_close>
 800cbf4:	1c43      	adds	r3, r0, #1
 800cbf6:	d102      	bne.n	800cbfe <_close_r+0x1a>
 800cbf8:	682b      	ldr	r3, [r5, #0]
 800cbfa:	b103      	cbz	r3, 800cbfe <_close_r+0x1a>
 800cbfc:	6023      	str	r3, [r4, #0]
 800cbfe:	bd38      	pop	{r3, r4, r5, pc}
 800cc00:	20004cd0 	.word	0x20004cd0

0800cc04 <_fstat_r>:
 800cc04:	b538      	push	{r3, r4, r5, lr}
 800cc06:	4d07      	ldr	r5, [pc, #28]	; (800cc24 <_fstat_r+0x20>)
 800cc08:	2300      	movs	r3, #0
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	4608      	mov	r0, r1
 800cc0e:	4611      	mov	r1, r2
 800cc10:	602b      	str	r3, [r5, #0]
 800cc12:	f7f5 fe04 	bl	800281e <_fstat>
 800cc16:	1c43      	adds	r3, r0, #1
 800cc18:	d102      	bne.n	800cc20 <_fstat_r+0x1c>
 800cc1a:	682b      	ldr	r3, [r5, #0]
 800cc1c:	b103      	cbz	r3, 800cc20 <_fstat_r+0x1c>
 800cc1e:	6023      	str	r3, [r4, #0]
 800cc20:	bd38      	pop	{r3, r4, r5, pc}
 800cc22:	bf00      	nop
 800cc24:	20004cd0 	.word	0x20004cd0

0800cc28 <_isatty_r>:
 800cc28:	b538      	push	{r3, r4, r5, lr}
 800cc2a:	4d06      	ldr	r5, [pc, #24]	; (800cc44 <_isatty_r+0x1c>)
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	4604      	mov	r4, r0
 800cc30:	4608      	mov	r0, r1
 800cc32:	602b      	str	r3, [r5, #0]
 800cc34:	f7f5 fe03 	bl	800283e <_isatty>
 800cc38:	1c43      	adds	r3, r0, #1
 800cc3a:	d102      	bne.n	800cc42 <_isatty_r+0x1a>
 800cc3c:	682b      	ldr	r3, [r5, #0]
 800cc3e:	b103      	cbz	r3, 800cc42 <_isatty_r+0x1a>
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	bd38      	pop	{r3, r4, r5, pc}
 800cc44:	20004cd0 	.word	0x20004cd0

0800cc48 <_lseek_r>:
 800cc48:	b538      	push	{r3, r4, r5, lr}
 800cc4a:	4d07      	ldr	r5, [pc, #28]	; (800cc68 <_lseek_r+0x20>)
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	4608      	mov	r0, r1
 800cc50:	4611      	mov	r1, r2
 800cc52:	2200      	movs	r2, #0
 800cc54:	602a      	str	r2, [r5, #0]
 800cc56:	461a      	mov	r2, r3
 800cc58:	f7f5 fdfc 	bl	8002854 <_lseek>
 800cc5c:	1c43      	adds	r3, r0, #1
 800cc5e:	d102      	bne.n	800cc66 <_lseek_r+0x1e>
 800cc60:	682b      	ldr	r3, [r5, #0]
 800cc62:	b103      	cbz	r3, 800cc66 <_lseek_r+0x1e>
 800cc64:	6023      	str	r3, [r4, #0]
 800cc66:	bd38      	pop	{r3, r4, r5, pc}
 800cc68:	20004cd0 	.word	0x20004cd0

0800cc6c <_read_r>:
 800cc6c:	b538      	push	{r3, r4, r5, lr}
 800cc6e:	4d07      	ldr	r5, [pc, #28]	; (800cc8c <_read_r+0x20>)
 800cc70:	4604      	mov	r4, r0
 800cc72:	4608      	mov	r0, r1
 800cc74:	4611      	mov	r1, r2
 800cc76:	2200      	movs	r2, #0
 800cc78:	602a      	str	r2, [r5, #0]
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	f7f5 fd8a 	bl	8002794 <_read>
 800cc80:	1c43      	adds	r3, r0, #1
 800cc82:	d102      	bne.n	800cc8a <_read_r+0x1e>
 800cc84:	682b      	ldr	r3, [r5, #0]
 800cc86:	b103      	cbz	r3, 800cc8a <_read_r+0x1e>
 800cc88:	6023      	str	r3, [r4, #0]
 800cc8a:	bd38      	pop	{r3, r4, r5, pc}
 800cc8c:	20004cd0 	.word	0x20004cd0

0800cc90 <_init>:
 800cc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc92:	bf00      	nop
 800cc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc96:	bc08      	pop	{r3}
 800cc98:	469e      	mov	lr, r3
 800cc9a:	4770      	bx	lr

0800cc9c <_fini>:
 800cc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc9e:	bf00      	nop
 800cca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cca2:	bc08      	pop	{r3}
 800cca4:	469e      	mov	lr, r3
 800cca6:	4770      	bx	lr
