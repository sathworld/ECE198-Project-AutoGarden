
ece198.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a410  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800a5b0  0800a5b0  0001a5b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaa4  0800aaa4  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800aaa4  0800aaa4  0001aaa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaac  0800aaac  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaac  0800aaac  0001aaac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aab0  0800aab0  0001aab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800aab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000210  0800acc4  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  0800acc4  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010277  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000254e  00000000  00000000  000304b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00032a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00033840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a41  00000000  00000000  00034588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001246e  00000000  00000000  0004cfc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097cfb  00000000  00000000  0005f437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7132  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005038  00000000  00000000  000f7184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a598 	.word	0x0800a598

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	0800a598 	.word	0x0800a598

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9f5 	b.w	80010a4 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9aa 	b.w	80010a4 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	4604      	mov	r4, r0
 8000ddc:	468e      	mov	lr, r1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d14d      	bne.n	8000e7e <__udivmoddi4+0xaa>
 8000de2:	428a      	cmp	r2, r1
 8000de4:	4694      	mov	ip, r2
 8000de6:	d969      	bls.n	8000ebc <__udivmoddi4+0xe8>
 8000de8:	fab2 f282 	clz	r2, r2
 8000dec:	b152      	cbz	r2, 8000e04 <__udivmoddi4+0x30>
 8000dee:	fa01 f302 	lsl.w	r3, r1, r2
 8000df2:	f1c2 0120 	rsb	r1, r2, #32
 8000df6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000e02:	4094      	lsls	r4, r2
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	0c21      	lsrs	r1, r4, #16
 8000e0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e0e:	fa1f f78c 	uxth.w	r7, ip
 8000e12:	fb08 e316 	mls	r3, r8, r6, lr
 8000e16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1a:	fb06 f107 	mul.w	r1, r6, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x64>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2a:	f080 811f 	bcs.w	800106c <__udivmoddi4+0x298>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 811c 	bls.w	800106c <__udivmoddi4+0x298>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb00 f707 	mul.w	r7, r0, r7
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	d90a      	bls.n	8000e66 <__udivmoddi4+0x92>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	f080 810a 	bcs.w	8001070 <__udivmoddi4+0x29c>
 8000e5c:	42a7      	cmp	r7, r4
 8000e5e:	f240 8107 	bls.w	8001070 <__udivmoddi4+0x29c>
 8000e62:	4464      	add	r4, ip
 8000e64:	3802      	subs	r0, #2
 8000e66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6a:	1be4      	subs	r4, r4, r7
 8000e6c:	2600      	movs	r6, #0
 8000e6e:	b11d      	cbz	r5, 8000e78 <__udivmoddi4+0xa4>
 8000e70:	40d4      	lsrs	r4, r2
 8000e72:	2300      	movs	r3, #0
 8000e74:	e9c5 4300 	strd	r4, r3, [r5]
 8000e78:	4631      	mov	r1, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d909      	bls.n	8000e96 <__udivmoddi4+0xc2>
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	f000 80ef 	beq.w	8001066 <__udivmoddi4+0x292>
 8000e88:	2600      	movs	r6, #0
 8000e8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8e:	4630      	mov	r0, r6
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	fab3 f683 	clz	r6, r3
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d14a      	bne.n	8000f34 <__udivmoddi4+0x160>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0xd4>
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	f200 80f9 	bhi.w	800109a <__udivmoddi4+0x2c6>
 8000ea8:	1a84      	subs	r4, r0, r2
 8000eaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	469e      	mov	lr, r3
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d0e0      	beq.n	8000e78 <__udivmoddi4+0xa4>
 8000eb6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eba:	e7dd      	b.n	8000e78 <__udivmoddi4+0xa4>
 8000ebc:	b902      	cbnz	r2, 8000ec0 <__udivmoddi4+0xec>
 8000ebe:	deff      	udf	#255	; 0xff
 8000ec0:	fab2 f282 	clz	r2, r2
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	f040 8092 	bne.w	8000fee <__udivmoddi4+0x21a>
 8000eca:	eba1 010c 	sub.w	r1, r1, ip
 8000ece:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	2601      	movs	r6, #1
 8000ed8:	0c20      	lsrs	r0, r4, #16
 8000eda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ede:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee6:	fb0e f003 	mul.w	r0, lr, r3
 8000eea:	4288      	cmp	r0, r1
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x12c>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x12a>
 8000ef8:	4288      	cmp	r0, r1
 8000efa:	f200 80cb 	bhi.w	8001094 <__udivmoddi4+0x2c0>
 8000efe:	4643      	mov	r3, r8
 8000f00:	1a09      	subs	r1, r1, r0
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1110 	mls	r1, r7, r0, r1
 8000f0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f10:	fb0e fe00 	mul.w	lr, lr, r0
 8000f14:	45a6      	cmp	lr, r4
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x156>
 8000f18:	eb1c 0404 	adds.w	r4, ip, r4
 8000f1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f20:	d202      	bcs.n	8000f28 <__udivmoddi4+0x154>
 8000f22:	45a6      	cmp	lr, r4
 8000f24:	f200 80bb 	bhi.w	800109e <__udivmoddi4+0x2ca>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	eba4 040e 	sub.w	r4, r4, lr
 8000f2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f32:	e79c      	b.n	8000e6e <__udivmoddi4+0x9a>
 8000f34:	f1c6 0720 	rsb	r7, r6, #32
 8000f38:	40b3      	lsls	r3, r6
 8000f3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f42:	fa20 f407 	lsr.w	r4, r0, r7
 8000f46:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	40f9      	lsrs	r1, r7
 8000f4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f52:	fa00 f306 	lsl.w	r3, r0, r6
 8000f56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5a:	0c20      	lsrs	r0, r4, #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fb09 1118 	mls	r1, r9, r8, r1
 8000f64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f68:	fb08 f00e 	mul.w	r0, r8, lr
 8000f6c:	4288      	cmp	r0, r1
 8000f6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f72:	d90b      	bls.n	8000f8c <__udivmoddi4+0x1b8>
 8000f74:	eb1c 0101 	adds.w	r1, ip, r1
 8000f78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f7c:	f080 8088 	bcs.w	8001090 <__udivmoddi4+0x2bc>
 8000f80:	4288      	cmp	r0, r1
 8000f82:	f240 8085 	bls.w	8001090 <__udivmoddi4+0x2bc>
 8000f86:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1a09      	subs	r1, r1, r0
 8000f8e:	b2a4      	uxth	r4, r4
 8000f90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f94:	fb09 1110 	mls	r1, r9, r0, r1
 8000f98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa0:	458e      	cmp	lr, r1
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x1e2>
 8000fa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fac:	d26c      	bcs.n	8001088 <__udivmoddi4+0x2b4>
 8000fae:	458e      	cmp	lr, r1
 8000fb0:	d96a      	bls.n	8001088 <__udivmoddi4+0x2b4>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	4461      	add	r1, ip
 8000fb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fba:	fba0 9402 	umull	r9, r4, r0, r2
 8000fbe:	eba1 010e 	sub.w	r1, r1, lr
 8000fc2:	42a1      	cmp	r1, r4
 8000fc4:	46c8      	mov	r8, r9
 8000fc6:	46a6      	mov	lr, r4
 8000fc8:	d356      	bcc.n	8001078 <__udivmoddi4+0x2a4>
 8000fca:	d053      	beq.n	8001074 <__udivmoddi4+0x2a0>
 8000fcc:	b15d      	cbz	r5, 8000fe6 <__udivmoddi4+0x212>
 8000fce:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fda:	fa22 f306 	lsr.w	r3, r2, r6
 8000fde:	40f1      	lsrs	r1, r6
 8000fe0:	431f      	orrs	r7, r3
 8000fe2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fe6:	2600      	movs	r6, #0
 8000fe8:	4631      	mov	r1, r6
 8000fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fee:	f1c2 0320 	rsb	r3, r2, #32
 8000ff2:	40d8      	lsrs	r0, r3
 8000ff4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff8:	fa21 f303 	lsr.w	r3, r1, r3
 8000ffc:	4091      	lsls	r1, r2
 8000ffe:	4301      	orrs	r1, r0
 8001000:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001004:	fa1f fe8c 	uxth.w	lr, ip
 8001008:	fbb3 f0f7 	udiv	r0, r3, r7
 800100c:	fb07 3610 	mls	r6, r7, r0, r3
 8001010:	0c0b      	lsrs	r3, r1, #16
 8001012:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001016:	fb00 f60e 	mul.w	r6, r0, lr
 800101a:	429e      	cmp	r6, r3
 800101c:	fa04 f402 	lsl.w	r4, r4, r2
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x260>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f100 38ff 	add.w	r8, r0, #4294967295
 800102a:	d22f      	bcs.n	800108c <__udivmoddi4+0x2b8>
 800102c:	429e      	cmp	r6, r3
 800102e:	d92d      	bls.n	800108c <__udivmoddi4+0x2b8>
 8001030:	3802      	subs	r0, #2
 8001032:	4463      	add	r3, ip
 8001034:	1b9b      	subs	r3, r3, r6
 8001036:	b289      	uxth	r1, r1
 8001038:	fbb3 f6f7 	udiv	r6, r3, r7
 800103c:	fb07 3316 	mls	r3, r7, r6, r3
 8001040:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001044:	fb06 f30e 	mul.w	r3, r6, lr
 8001048:	428b      	cmp	r3, r1
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x28a>
 800104c:	eb1c 0101 	adds.w	r1, ip, r1
 8001050:	f106 38ff 	add.w	r8, r6, #4294967295
 8001054:	d216      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001056:	428b      	cmp	r3, r1
 8001058:	d914      	bls.n	8001084 <__udivmoddi4+0x2b0>
 800105a:	3e02      	subs	r6, #2
 800105c:	4461      	add	r1, ip
 800105e:	1ac9      	subs	r1, r1, r3
 8001060:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001064:	e738      	b.n	8000ed8 <__udivmoddi4+0x104>
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e705      	b.n	8000e78 <__udivmoddi4+0xa4>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e3      	b.n	8000e38 <__udivmoddi4+0x64>
 8001070:	4618      	mov	r0, r3
 8001072:	e6f8      	b.n	8000e66 <__udivmoddi4+0x92>
 8001074:	454b      	cmp	r3, r9
 8001076:	d2a9      	bcs.n	8000fcc <__udivmoddi4+0x1f8>
 8001078:	ebb9 0802 	subs.w	r8, r9, r2
 800107c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001080:	3801      	subs	r0, #1
 8001082:	e7a3      	b.n	8000fcc <__udivmoddi4+0x1f8>
 8001084:	4646      	mov	r6, r8
 8001086:	e7ea      	b.n	800105e <__udivmoddi4+0x28a>
 8001088:	4620      	mov	r0, r4
 800108a:	e794      	b.n	8000fb6 <__udivmoddi4+0x1e2>
 800108c:	4640      	mov	r0, r8
 800108e:	e7d1      	b.n	8001034 <__udivmoddi4+0x260>
 8001090:	46d0      	mov	r8, sl
 8001092:	e77b      	b.n	8000f8c <__udivmoddi4+0x1b8>
 8001094:	3b02      	subs	r3, #2
 8001096:	4461      	add	r1, ip
 8001098:	e732      	b.n	8000f00 <__udivmoddi4+0x12c>
 800109a:	4630      	mov	r0, r6
 800109c:	e709      	b.n	8000eb2 <__udivmoddi4+0xde>
 800109e:	4464      	add	r4, ip
 80010a0:	3802      	subs	r0, #2
 80010a2:	e742      	b.n	8000f2a <__udivmoddi4+0x156>

080010a4 <__aeabi_idiv0>:
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2319      	movs	r3, #25
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	463b      	mov	r3, r7
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2301      	movs	r3, #1
 80010be:	2288      	movs	r2, #136	; 0x88
 80010c0:	21ec      	movs	r1, #236	; 0xec
 80010c2:	4857      	ldr	r0, [pc, #348]	; (8001220 <TrimRead+0x178>)
 80010c4:	f002 ff18 	bl	8003ef8 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010c8:	463b      	mov	r3, r7
 80010ca:	3319      	adds	r3, #25
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	9202      	str	r2, [sp, #8]
 80010d2:	2207      	movs	r2, #7
 80010d4:	9201      	str	r2, [sp, #4]
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	22e1      	movs	r2, #225	; 0xe1
 80010dc:	21ec      	movs	r1, #236	; 0xec
 80010de:	4850      	ldr	r0, [pc, #320]	; (8001220 <TrimRead+0x178>)
 80010e0:	f002 ff0a 	bl	8003ef8 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	783b      	ldrb	r3, [r7, #0]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <TrimRead+0x17c>)
 80010f6:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b48      	ldr	r3, [pc, #288]	; (8001228 <TrimRead+0x180>)
 8001108:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800110a:	797b      	ldrb	r3, [r7, #5]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	b21b      	sxth	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b21a      	sxth	r2, r3
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <TrimRead+0x184>)
 800111a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	797b      	ldrb	r3, [r7, #5]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21b      	sxth	r3, r3
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b40      	ldr	r3, [pc, #256]	; (8001230 <TrimRead+0x188>)
 800112e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001130:	7a7b      	ldrb	r3, [r7, #9]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21a      	sxth	r2, r3
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <TrimRead+0x18c>)
 8001140:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001142:	7afb      	ldrb	r3, [r7, #11]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	7abb      	ldrb	r3, [r7, #10]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b39      	ldr	r3, [pc, #228]	; (8001238 <TrimRead+0x190>)
 8001152:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001154:	7b7b      	ldrb	r3, [r7, #13]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	7b3b      	ldrb	r3, [r7, #12]
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <TrimRead+0x194>)
 8001164:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b21a      	sxth	r2, r3
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b32      	ldr	r3, [pc, #200]	; (8001240 <TrimRead+0x198>)
 8001176:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001178:	7c7b      	ldrb	r3, [r7, #17]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b21a      	sxth	r2, r3
 800117e:	7c3b      	ldrb	r3, [r7, #16]
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21a      	sxth	r2, r3
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <TrimRead+0x19c>)
 8001188:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 800118a:	7cfb      	ldrb	r3, [r7, #19]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21a      	sxth	r2, r3
 8001190:	7cbb      	ldrb	r3, [r7, #18]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21a      	sxth	r2, r3
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <TrimRead+0x1a0>)
 800119a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 800119c:	7d7b      	ldrb	r3, [r7, #21]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7d3b      	ldrb	r3, [r7, #20]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <TrimRead+0x1a4>)
 80011ac:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	7dbb      	ldrb	r3, [r7, #22]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <TrimRead+0x1a8>)
 80011be:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011c0:	7e3b      	ldrb	r3, [r7, #24]
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <TrimRead+0x1ac>)
 80011c6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011c8:	7ebb      	ldrb	r3, [r7, #26]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	7e7b      	ldrb	r3, [r7, #25]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <TrimRead+0x1b0>)
 80011d8:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80011da:	7efb      	ldrb	r3, [r7, #27]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <TrimRead+0x1b4>)
 80011e0:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80011e2:	7f3b      	ldrb	r3, [r7, #28]
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	7f7b      	ldrb	r3, [r7, #29]
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <TrimRead+0x1b8>)
 80011f8:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80011fa:	7fbb      	ldrb	r3, [r7, #30]
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	b21a      	sxth	r2, r3
 8001200:	7f7b      	ldrb	r3, [r7, #29]
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	b2db      	uxtb	r3, r3
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <TrimRead+0x1bc>)
 800120e:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001210:	7ffb      	ldrb	r3, [r7, #31]
 8001212:	b21a      	sxth	r2, r3
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <TrimRead+0x1c0>)
 8001216:	801a      	strh	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200002ac 	.word	0x200002ac
 8001224:	2000023c 	.word	0x2000023c
 8001228:	20000244 	.word	0x20000244
 800122c:	20000246 	.word	0x20000246
 8001230:	2000023e 	.word	0x2000023e
 8001234:	20000248 	.word	0x20000248
 8001238:	2000024a 	.word	0x2000024a
 800123c:	2000024c 	.word	0x2000024c
 8001240:	2000024e 	.word	0x2000024e
 8001244:	20000250 	.word	0x20000250
 8001248:	20000252 	.word	0x20000252
 800124c:	20000254 	.word	0x20000254
 8001250:	20000256 	.word	0x20000256
 8001254:	20000240 	.word	0x20000240
 8001258:	20000258 	.word	0x20000258
 800125c:	20000242 	.word	0x20000242
 8001260:	2000025a 	.word	0x2000025a
 8001264:	2000025c 	.word	0x2000025c
 8001268:	2000025e 	.word	0x2000025e

0800126c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af04      	add	r7, sp, #16
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	4611      	mov	r1, r2
 8001278:	461a      	mov	r2, r3
 800127a:	4623      	mov	r3, r4
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	4603      	mov	r3, r0
 8001280:	71bb      	strb	r3, [r7, #6]
 8001282:	460b      	mov	r3, r1
 8001284:	717b      	strb	r3, [r7, #5]
 8001286:	4613      	mov	r3, r2
 8001288:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 800128a:	f7ff ff0d 	bl	80010a8 <TrimRead>


	uint8_t datatowrite = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001296:	23b6      	movs	r3, #182	; 0xb6
 8001298:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 030f 	add.w	r3, r7, #15
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	22e0      	movs	r2, #224	; 0xe0
 80012ae:	21ec      	movs	r1, #236	; 0xec
 80012b0:	4858      	ldr	r0, [pc, #352]	; (8001414 <BME280_Config+0x1a8>)
 80012b2:	f002 fd27 	bl	8003d04 <HAL_I2C_Mem_Write>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <BME280_Config+0x56>
	{
		return -1;
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	e0a3      	b.n	800140a <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80012c2:	2064      	movs	r0, #100	; 0x64
 80012c4:	f001 fc3a 	bl	8002b3c <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80012c8:	797b      	ldrb	r3, [r7, #5]
 80012ca:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d0:	9302      	str	r3, [sp, #8]
 80012d2:	2301      	movs	r3, #1
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	f107 030f 	add.w	r3, r7, #15
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2301      	movs	r3, #1
 80012de:	22f2      	movs	r2, #242	; 0xf2
 80012e0:	21ec      	movs	r1, #236	; 0xec
 80012e2:	484c      	ldr	r0, [pc, #304]	; (8001414 <BME280_Config+0x1a8>)
 80012e4:	f002 fd0e 	bl	8003d04 <HAL_I2C_Mem_Write>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <BME280_Config+0x88>
	{
		return -1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e08a      	b.n	800140a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012f4:	2064      	movs	r0, #100	; 0x64
 80012f6:	f001 fc21 	bl	8002b3c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	f107 030e 	add.w	r3, r7, #14
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	22f2      	movs	r2, #242	; 0xf2
 800130e:	21ec      	movs	r1, #236	; 0xec
 8001310:	4840      	ldr	r0, [pc, #256]	; (8001414 <BME280_Config+0x1a8>)
 8001312:	f002 fdf1 	bl	8003ef8 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001316:	7bba      	ldrb	r2, [r7, #14]
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	429a      	cmp	r2, r3
 800131c:	d002      	beq.n	8001324 <BME280_Config+0xb8>
	{
		return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e072      	b.n	800140a <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001324:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001328:	015b      	lsls	r3, r3, #5
 800132a:	b25a      	sxtb	r2, r3
 800132c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	b25b      	sxtb	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b25b      	sxtb	r3, r3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800133c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f107 030f 	add.w	r3, r7, #15
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	22f5      	movs	r2, #245	; 0xf5
 8001350:	21ec      	movs	r1, #236	; 0xec
 8001352:	4830      	ldr	r0, [pc, #192]	; (8001414 <BME280_Config+0x1a8>)
 8001354:	f002 fcd6 	bl	8003d04 <HAL_I2C_Mem_Write>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d002      	beq.n	8001364 <BME280_Config+0xf8>
	{
		return -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e052      	b.n	800140a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001364:	2064      	movs	r0, #100	; 0x64
 8001366:	f001 fbe9 	bl	8002b3c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	2301      	movs	r3, #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	f107 030e 	add.w	r3, r7, #14
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	22f5      	movs	r2, #245	; 0xf5
 800137e:	21ec      	movs	r1, #236	; 0xec
 8001380:	4824      	ldr	r0, [pc, #144]	; (8001414 <BME280_Config+0x1a8>)
 8001382:	f002 fdb9 	bl	8003ef8 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001386:	7bba      	ldrb	r2, [r7, #14]
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	429a      	cmp	r2, r3
 800138c:	d002      	beq.n	8001394 <BME280_Config+0x128>
	{
		return -1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	e03a      	b.n	800140a <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	015b      	lsls	r3, r3, #5
 8001398:	b25a      	sxtb	r2, r3
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b25a      	sxtb	r2, r3
 80013a4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	2301      	movs	r3, #1
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	f107 030f 	add.w	r3, r7, #15
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2301      	movs	r3, #1
 80013c2:	22f4      	movs	r2, #244	; 0xf4
 80013c4:	21ec      	movs	r1, #236	; 0xec
 80013c6:	4813      	ldr	r0, [pc, #76]	; (8001414 <BME280_Config+0x1a8>)
 80013c8:	f002 fc9c 	bl	8003d04 <HAL_I2C_Mem_Write>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <BME280_Config+0x16c>
	{
		return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e018      	b.n	800140a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013d8:	2064      	movs	r0, #100	; 0x64
 80013da:	f001 fbaf 	bl	8002b3c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2301      	movs	r3, #1
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	f107 030e 	add.w	r3, r7, #14
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	22f4      	movs	r2, #244	; 0xf4
 80013f2:	21ec      	movs	r1, #236	; 0xec
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <BME280_Config+0x1a8>)
 80013f6:	f002 fd7f 	bl	8003ef8 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013fa:	7bba      	ldrb	r2, [r7, #14]
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d002      	beq.n	8001408 <BME280_Config+0x19c>
	{
		return -1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e000      	b.n	800140a <BME280_Config+0x19e>
	}

	return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	bf00      	nop
 8001414:	200002ac 	.word	0x200002ac

08001418 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	2301      	movs	r3, #1
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <BMEReadRaw+0x8c>)
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2301      	movs	r3, #1
 800142e:	22d0      	movs	r2, #208	; 0xd0
 8001430:	21ec      	movs	r1, #236	; 0xec
 8001432:	481d      	ldr	r0, [pc, #116]	; (80014a8 <BMEReadRaw+0x90>)
 8001434:	f002 fd60 	bl	8003ef8 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <BMEReadRaw+0x8c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b60      	cmp	r3, #96	; 0x60
 800143e:	d12a      	bne.n	8001496 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	2308      	movs	r3, #8
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	463b      	mov	r3, r7
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	22f7      	movs	r2, #247	; 0xf7
 8001452:	21ec      	movs	r1, #236	; 0xec
 8001454:	4814      	ldr	r0, [pc, #80]	; (80014a8 <BMEReadRaw+0x90>)
 8001456:	f002 fd4f 	bl	8003ef8 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800145a:	783b      	ldrb	r3, [r7, #0]
 800145c:	031a      	lsls	r2, r3, #12
 800145e:	787b      	ldrb	r3, [r7, #1]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4313      	orrs	r3, r2
 8001464:	78ba      	ldrb	r2, [r7, #2]
 8001466:	0912      	lsrs	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	4313      	orrs	r3, r2
 800146c:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <BMEReadRaw+0x94>)
 800146e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	031a      	lsls	r2, r3, #12
 8001474:	793b      	ldrb	r3, [r7, #4]
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	4313      	orrs	r3, r2
 800147a:	797a      	ldrb	r2, [r7, #5]
 800147c:	0912      	lsrs	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	4313      	orrs	r3, r2
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <BMEReadRaw+0x98>)
 8001484:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	4313      	orrs	r3, r2
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <BMEReadRaw+0x9c>)
 8001490:	6013      	str	r3, [r2, #0]

		return 0;
 8001492:	2300      	movs	r3, #0
 8001494:	e001      	b.n	800149a <BMEReadRaw+0x82>
	}

	else return -1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000022c 	.word	0x2000022c
 80014a8:	200002ac 	.word	0x200002ac
 80014ac:	20000234 	.word	0x20000234
 80014b0:	20000230 	.word	0x20000230
 80014b4:	20000238 	.word	0x20000238

080014b8 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	10da      	asrs	r2, r3, #3
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <BME280_compensate_T_int32+0x74>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	4a18      	ldr	r2, [pc, #96]	; (8001530 <BME280_compensate_T_int32+0x78>)
 80014ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	12db      	asrs	r3, r3, #11
 80014d8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	111b      	asrs	r3, r3, #4
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <BME280_compensate_T_int32+0x74>)
 80014e0:	8812      	ldrh	r2, [r2, #0]
 80014e2:	1a9b      	subs	r3, r3, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	1112      	asrs	r2, r2, #4
 80014e8:	4910      	ldr	r1, [pc, #64]	; (800152c <BME280_compensate_T_int32+0x74>)
 80014ea:	8809      	ldrh	r1, [r1, #0]
 80014ec:	1a52      	subs	r2, r2, r1
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	131b      	asrs	r3, r3, #12
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <BME280_compensate_T_int32+0x7c>)
 80014f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	139b      	asrs	r3, r3, #14
 8001500:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4413      	add	r3, r2
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <BME280_compensate_T_int32+0x80>)
 800150a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <BME280_compensate_T_int32+0x80>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	3380      	adds	r3, #128	; 0x80
 8001518:	121b      	asrs	r3, r3, #8
 800151a:	60fb      	str	r3, [r7, #12]
	return T;
 800151c:	68fb      	ldr	r3, [r7, #12]
}
 800151e:	4618      	mov	r0, r3
 8001520:	371c      	adds	r7, #28
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	2000023c 	.word	0x2000023c
 8001530:	20000244 	.word	0x20000244
 8001534:	20000246 	.word	0x20000246
 8001538:	20000260 	.word	0x20000260

0800153c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800153c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001540:	b0ca      	sub	sp, #296	; 0x128
 8001542:	af00      	add	r7, sp, #0
 8001544:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001548:	4baf      	ldr	r3, [pc, #700]	; (8001808 <BME280_compensate_P_int64+0x2cc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	17da      	asrs	r2, r3, #31
 800154e:	461c      	mov	r4, r3
 8001550:	4615      	mov	r5, r2
 8001552:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001556:	f145 3bff 	adc.w	fp, r5, #4294967295
 800155a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800155e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001562:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001566:	fb03 f102 	mul.w	r1, r3, r2
 800156a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800156e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	18ca      	adds	r2, r1, r3
 8001578:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800157c:	fba3 8903 	umull	r8, r9, r3, r3
 8001580:	eb02 0309 	add.w	r3, r2, r9
 8001584:	4699      	mov	r9, r3
 8001586:	4ba1      	ldr	r3, [pc, #644]	; (800180c <BME280_compensate_P_int64+0x2d0>)
 8001588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158c:	b21b      	sxth	r3, r3
 800158e:	17da      	asrs	r2, r3, #31
 8001590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001594:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001598:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800159c:	4603      	mov	r3, r0
 800159e:	fb03 f209 	mul.w	r2, r3, r9
 80015a2:	460b      	mov	r3, r1
 80015a4:	fb08 f303 	mul.w	r3, r8, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	4602      	mov	r2, r0
 80015ac:	fba8 1202 	umull	r1, r2, r8, r2
 80015b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015b4:	460a      	mov	r2, r1
 80015b6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015be:	4413      	add	r3, r2
 80015c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015c4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015c8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015cc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015d0:	4b8f      	ldr	r3, [pc, #572]	; (8001810 <BME280_compensate_P_int64+0x2d4>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	17da      	asrs	r2, r3, #31
 80015da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015de:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80015e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015e6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80015ea:	462a      	mov	r2, r5
 80015ec:	fb02 f203 	mul.w	r2, r2, r3
 80015f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015f4:	4621      	mov	r1, r4
 80015f6:	fb01 f303 	mul.w	r3, r1, r3
 80015fa:	441a      	add	r2, r3
 80015fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001600:	4621      	mov	r1, r4
 8001602:	fba3 1301 	umull	r1, r3, r3, r1
 8001606:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800160a:	460b      	mov	r3, r1
 800160c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001614:	18d3      	adds	r3, r2, r3
 8001616:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800161a:	f04f 0000 	mov.w	r0, #0
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001626:	462b      	mov	r3, r5
 8001628:	0459      	lsls	r1, r3, #17
 800162a:	4623      	mov	r3, r4
 800162c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001630:	4623      	mov	r3, r4
 8001632:	0458      	lsls	r0, r3, #17
 8001634:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001638:	1814      	adds	r4, r2, r0
 800163a:	643c      	str	r4, [r7, #64]	; 0x40
 800163c:	414b      	adcs	r3, r1
 800163e:	647b      	str	r3, [r7, #68]	; 0x44
 8001640:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001644:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001648:	4b72      	ldr	r3, [pc, #456]	; (8001814 <BME280_compensate_P_int64+0x2d8>)
 800164a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164e:	b21b      	sxth	r3, r3
 8001650:	17da      	asrs	r2, r3, #31
 8001652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001656:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800165a:	f04f 0000 	mov.w	r0, #0
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001666:	00d9      	lsls	r1, r3, #3
 8001668:	2000      	movs	r0, #0
 800166a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800166e:	1814      	adds	r4, r2, r0
 8001670:	63bc      	str	r4, [r7, #56]	; 0x38
 8001672:	414b      	adcs	r3, r1
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001676:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800167a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800167e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001682:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001686:	fb03 f102 	mul.w	r1, r3, r2
 800168a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800168e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	18ca      	adds	r2, r1, r3
 8001698:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800169c:	fba3 1303 	umull	r1, r3, r3, r3
 80016a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016a4:	460b      	mov	r3, r1
 80016a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80016aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016ae:	18d3      	adds	r3, r2, r3
 80016b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016b4:	4b58      	ldr	r3, [pc, #352]	; (8001818 <BME280_compensate_P_int64+0x2dc>)
 80016b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	17da      	asrs	r2, r3, #31
 80016be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016c6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016ca:	462b      	mov	r3, r5
 80016cc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016d0:	4642      	mov	r2, r8
 80016d2:	fb02 f203 	mul.w	r2, r2, r3
 80016d6:	464b      	mov	r3, r9
 80016d8:	4621      	mov	r1, r4
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4413      	add	r3, r2
 80016e0:	4622      	mov	r2, r4
 80016e2:	4641      	mov	r1, r8
 80016e4:	fba2 1201 	umull	r1, r2, r2, r1
 80016e8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80016ec:	460a      	mov	r2, r1
 80016ee:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80016f2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80016f6:	4413      	add	r3, r2
 80016f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016fc:	f04f 0000 	mov.w	r0, #0
 8001700:	f04f 0100 	mov.w	r1, #0
 8001704:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001708:	4623      	mov	r3, r4
 800170a:	0a18      	lsrs	r0, r3, #8
 800170c:	462b      	mov	r3, r5
 800170e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001712:	462b      	mov	r3, r5
 8001714:	1219      	asrs	r1, r3, #8
 8001716:	4b41      	ldr	r3, [pc, #260]	; (800181c <BME280_compensate_P_int64+0x2e0>)
 8001718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171c:	b21b      	sxth	r3, r3
 800171e:	17da      	asrs	r2, r3, #31
 8001720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001724:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001728:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800172c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001730:	464a      	mov	r2, r9
 8001732:	fb02 f203 	mul.w	r2, r2, r3
 8001736:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800173a:	4644      	mov	r4, r8
 800173c:	fb04 f303 	mul.w	r3, r4, r3
 8001740:	441a      	add	r2, r3
 8001742:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001746:	4644      	mov	r4, r8
 8001748:	fba3 4304 	umull	r4, r3, r3, r4
 800174c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001750:	4623      	mov	r3, r4
 8001752:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001756:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800175a:	18d3      	adds	r3, r2, r3
 800175c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800176c:	464c      	mov	r4, r9
 800176e:	0323      	lsls	r3, r4, #12
 8001770:	4644      	mov	r4, r8
 8001772:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001776:	4644      	mov	r4, r8
 8001778:	0322      	lsls	r2, r4, #12
 800177a:	1884      	adds	r4, r0, r2
 800177c:	633c      	str	r4, [r7, #48]	; 0x30
 800177e:	eb41 0303 	adc.w	r3, r1, r3
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
 8001784:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001788:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800178c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001790:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001794:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001798:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <BME280_compensate_P_int64+0x2e4>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	2200      	movs	r2, #0
 80017a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017ac:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017b0:	462b      	mov	r3, r5
 80017b2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017b6:	4642      	mov	r2, r8
 80017b8:	fb02 f203 	mul.w	r2, r2, r3
 80017bc:	464b      	mov	r3, r9
 80017be:	4621      	mov	r1, r4
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	4622      	mov	r2, r4
 80017c8:	4641      	mov	r1, r8
 80017ca:	fba2 1201 	umull	r1, r2, r2, r1
 80017ce:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017d2:	460a      	mov	r2, r1
 80017d4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017d8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017dc:	4413      	add	r3, r2
 80017de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80017ee:	4629      	mov	r1, r5
 80017f0:	104a      	asrs	r2, r1, #1
 80017f2:	4629      	mov	r1, r5
 80017f4:	17cb      	asrs	r3, r1, #31
 80017f6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80017fa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017fe:	4313      	orrs	r3, r2
 8001800:	d110      	bne.n	8001824 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001802:	2300      	movs	r3, #0
 8001804:	e154      	b.n	8001ab0 <BME280_compensate_P_int64+0x574>
 8001806:	bf00      	nop
 8001808:	20000260 	.word	0x20000260
 800180c:	20000250 	.word	0x20000250
 8001810:	2000024e 	.word	0x2000024e
 8001814:	2000024c 	.word	0x2000024c
 8001818:	2000024a 	.word	0x2000024a
 800181c:	20000248 	.word	0x20000248
 8001820:	2000023e 	.word	0x2000023e
	}
	p = 1048576-adc_P;
 8001824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001828:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800182c:	17da      	asrs	r2, r3, #31
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001830:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001832:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001836:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800183a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800183e:	105b      	asrs	r3, r3, #1
 8001840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001844:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001848:	07db      	lsls	r3, r3, #31
 800184a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800184e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001852:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001856:	4621      	mov	r1, r4
 8001858:	1a89      	subs	r1, r1, r2
 800185a:	67b9      	str	r1, [r7, #120]	; 0x78
 800185c:	4629      	mov	r1, r5
 800185e:	eb61 0303 	sbc.w	r3, r1, r3
 8001862:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001864:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001868:	4622      	mov	r2, r4
 800186a:	462b      	mov	r3, r5
 800186c:	1891      	adds	r1, r2, r2
 800186e:	6239      	str	r1, [r7, #32]
 8001870:	415b      	adcs	r3, r3
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
 8001874:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001878:	4621      	mov	r1, r4
 800187a:	1851      	adds	r1, r2, r1
 800187c:	61b9      	str	r1, [r7, #24]
 800187e:	4629      	mov	r1, r5
 8001880:	414b      	adcs	r3, r1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001890:	4649      	mov	r1, r9
 8001892:	018b      	lsls	r3, r1, #6
 8001894:	4641      	mov	r1, r8
 8001896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800189a:	4641      	mov	r1, r8
 800189c:	018a      	lsls	r2, r1, #6
 800189e:	4641      	mov	r1, r8
 80018a0:	1889      	adds	r1, r1, r2
 80018a2:	6139      	str	r1, [r7, #16]
 80018a4:	4649      	mov	r1, r9
 80018a6:	eb43 0101 	adc.w	r1, r3, r1
 80018aa:	6179      	str	r1, [r7, #20]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018b8:	4649      	mov	r1, r9
 80018ba:	008b      	lsls	r3, r1, #2
 80018bc:	4641      	mov	r1, r8
 80018be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018c2:	4641      	mov	r1, r8
 80018c4:	008a      	lsls	r2, r1, #2
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	4622      	mov	r2, r4
 80018ce:	189b      	adds	r3, r3, r2
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	460b      	mov	r3, r1
 80018d4:	462a      	mov	r2, r5
 80018d6:	eb42 0303 	adc.w	r3, r2, r3
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018e8:	4649      	mov	r1, r9
 80018ea:	008b      	lsls	r3, r1, #2
 80018ec:	4641      	mov	r1, r8
 80018ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018f2:	4641      	mov	r1, r8
 80018f4:	008a      	lsls	r2, r1, #2
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	4603      	mov	r3, r0
 80018fc:	4622      	mov	r2, r4
 80018fe:	189b      	adds	r3, r3, r2
 8001900:	673b      	str	r3, [r7, #112]	; 0x70
 8001902:	462b      	mov	r3, r5
 8001904:	460a      	mov	r2, r1
 8001906:	eb42 0303 	adc.w	r3, r2, r3
 800190a:	677b      	str	r3, [r7, #116]	; 0x74
 800190c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001910:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001914:	f7ff f9c0 	bl	8000c98 <__aeabi_ldivmod>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001920:	4b66      	ldr	r3, [pc, #408]	; (8001abc <BME280_compensate_P_int64+0x580>)
 8001922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001926:	b21b      	sxth	r3, r3
 8001928:	17da      	asrs	r2, r3, #31
 800192a:	66bb      	str	r3, [r7, #104]	; 0x68
 800192c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800192e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001932:	f04f 0000 	mov.w	r0, #0
 8001936:	f04f 0100 	mov.w	r1, #0
 800193a:	0b50      	lsrs	r0, r2, #13
 800193c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001940:	1359      	asrs	r1, r3, #13
 8001942:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001946:	462b      	mov	r3, r5
 8001948:	fb00 f203 	mul.w	r2, r0, r3
 800194c:	4623      	mov	r3, r4
 800194e:	fb03 f301 	mul.w	r3, r3, r1
 8001952:	4413      	add	r3, r2
 8001954:	4622      	mov	r2, r4
 8001956:	fba2 1200 	umull	r1, r2, r2, r0
 800195a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800195e:	460a      	mov	r2, r1
 8001960:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001964:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001968:	4413      	add	r3, r2
 800196a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800196e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001972:	f04f 0000 	mov.w	r0, #0
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	0b50      	lsrs	r0, r2, #13
 800197c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001980:	1359      	asrs	r1, r3, #13
 8001982:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001986:	462b      	mov	r3, r5
 8001988:	fb00 f203 	mul.w	r2, r0, r3
 800198c:	4623      	mov	r3, r4
 800198e:	fb03 f301 	mul.w	r3, r3, r1
 8001992:	4413      	add	r3, r2
 8001994:	4622      	mov	r2, r4
 8001996:	fba2 1200 	umull	r1, r2, r2, r0
 800199a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800199e:	460a      	mov	r2, r1
 80019a0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80019a4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019a8:	4413      	add	r3, r2
 80019aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019ba:	4621      	mov	r1, r4
 80019bc:	0e4a      	lsrs	r2, r1, #25
 80019be:	4629      	mov	r1, r5
 80019c0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019c4:	4629      	mov	r1, r5
 80019c6:	164b      	asrs	r3, r1, #25
 80019c8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019cc:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <BME280_compensate_P_int64+0x584>)
 80019ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	17da      	asrs	r2, r3, #31
 80019d6:	663b      	str	r3, [r7, #96]	; 0x60
 80019d8:	667a      	str	r2, [r7, #100]	; 0x64
 80019da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019de:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019e2:	462a      	mov	r2, r5
 80019e4:	fb02 f203 	mul.w	r2, r2, r3
 80019e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019ec:	4621      	mov	r1, r4
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80019f8:	4621      	mov	r1, r4
 80019fa:	fba2 1201 	umull	r1, r2, r2, r1
 80019fe:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a02:	460a      	mov	r2, r1
 8001a04:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a08:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a1e:	4621      	mov	r1, r4
 8001a20:	0cca      	lsrs	r2, r1, #19
 8001a22:	4629      	mov	r1, r5
 8001a24:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a28:	4629      	mov	r1, r5
 8001a2a:	14cb      	asrs	r3, r1, #19
 8001a2c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a30:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a34:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a38:	1884      	adds	r4, r0, r2
 8001a3a:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a3c:	eb41 0303 	adc.w	r3, r1, r3
 8001a40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a42:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a46:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	1889      	adds	r1, r1, r2
 8001a4e:	6539      	str	r1, [r7, #80]	; 0x50
 8001a50:	4629      	mov	r1, r5
 8001a52:	eb43 0101 	adc.w	r1, r3, r1
 8001a56:	6579      	str	r1, [r7, #84]	; 0x54
 8001a58:	f04f 0000 	mov.w	r0, #0
 8001a5c:	f04f 0100 	mov.w	r1, #0
 8001a60:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a64:	4623      	mov	r3, r4
 8001a66:	0a18      	lsrs	r0, r3, #8
 8001a68:	462b      	mov	r3, r5
 8001a6a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a6e:	462b      	mov	r3, r5
 8001a70:	1219      	asrs	r1, r3, #8
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <BME280_compensate_P_int64+0x588>)
 8001a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	17da      	asrs	r2, r3, #31
 8001a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a7e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001a8c:	464c      	mov	r4, r9
 8001a8e:	0123      	lsls	r3, r4, #4
 8001a90:	4644      	mov	r4, r8
 8001a92:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a96:	4644      	mov	r4, r8
 8001a98:	0122      	lsls	r2, r4, #4
 8001a9a:	1884      	adds	r4, r0, r2
 8001a9c:	603c      	str	r4, [r7, #0]
 8001a9e:	eb41 0303 	adc.w	r3, r1, r3
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001aa8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001aac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001abc:	20000256 	.word	0x20000256
 8001ac0:	20000254 	.word	0x20000254
 8001ac4:	20000252 	.word	0x20000252

08001ac8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <bme280_compensate_H_int32+0xbc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001ad8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	039a      	lsls	r2, r3, #14
 8001ade:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <bme280_compensate_H_int32+0xc0>)
 8001ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae4:	051b      	lsls	r3, r3, #20
 8001ae6:	1ad2      	subs	r2, r2, r3
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <bme280_compensate_H_int32+0xc4>)
 8001aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aee:	4619      	mov	r1, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001af8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001afc:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001afe:	4a24      	ldr	r2, [pc, #144]	; (8001b90 <bme280_compensate_H_int32+0xc8>)
 8001b00:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b04:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b0c:	1292      	asrs	r2, r2, #10
 8001b0e:	4921      	ldr	r1, [pc, #132]	; (8001b94 <bme280_compensate_H_int32+0xcc>)
 8001b10:	8809      	ldrh	r1, [r1, #0]
 8001b12:	4608      	mov	r0, r1
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	fb00 f101 	mul.w	r1, r0, r1
 8001b1a:	12c9      	asrs	r1, r1, #11
 8001b1c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b20:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b24:	1292      	asrs	r2, r2, #10
 8001b26:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b2a:	491b      	ldr	r1, [pc, #108]	; (8001b98 <bme280_compensate_H_int32+0xd0>)
 8001b2c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b30:	fb01 f202 	mul.w	r2, r1, r2
 8001b34:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b38:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	13db      	asrs	r3, r3, #15
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	13d2      	asrs	r2, r2, #15
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001b4e:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <bme280_compensate_H_int32+0xd4>)
 8001b50:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001b56:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b64:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b6c:	bfa8      	it	ge
 8001b6e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b72:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	131b      	asrs	r3, r3, #12
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	20000260 	.word	0x20000260
 8001b88:	2000025a 	.word	0x2000025a
 8001b8c:	2000025c 	.word	0x2000025c
 8001b90:	2000025e 	.word	0x2000025e
 8001b94:	20000242 	.word	0x20000242
 8001b98:	20000258 	.word	0x20000258
 8001b9c:	20000240 	.word	0x20000240

08001ba0 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001ba4:	f7ff fc38 	bl	8001418 <BMEReadRaw>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d163      	bne.n	8001c76 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001bae:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <BME280_Measure+0xf4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bb6:	d104      	bne.n	8001bc2 <BME280_Measure+0x22>
 8001bb8:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <BME280_Measure+0xf8>)
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e016      	b.n	8001bf0 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001bc2:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <BME280_Measure+0xf4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fc76 	bl	80014b8 <BME280_compensate_T_int32>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fcb0 	bl	8000534 <__aeabi_i2d>
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <BME280_Measure+0xfc>)
 8001bda:	f7fe fe3f 	bl	800085c <__aeabi_ddiv>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7ff f807 	bl	8000bf8 <__aeabi_d2f>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4a2a      	ldr	r2, [pc, #168]	; (8001c98 <BME280_Measure+0xf8>)
 8001bee:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <BME280_Measure+0x100>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bf8:	d104      	bne.n	8001c04 <BME280_Measure+0x64>
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <BME280_Measure+0x104>)
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	e016      	b.n	8001c32 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001c04:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <BME280_Measure+0x100>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fc97 	bl	800153c <BME280_compensate_P_int64>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc7f 	bl	8000514 <__aeabi_ui2d>
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <BME280_Measure+0x108>)
 8001c1c:	f7fe fe1e 	bl	800085c <__aeabi_ddiv>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7fe ffe6 	bl	8000bf8 <__aeabi_d2f>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <BME280_Measure+0x104>)
 8001c30:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <BME280_Measure+0x10c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c3a:	d104      	bne.n	8001c46 <BME280_Measure+0xa6>
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <BME280_Measure+0x110>)
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001c44:	e023      	b.n	8001c8e <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <BME280_Measure+0x10c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff3c 	bl	8001ac8 <bme280_compensate_H_int32>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc5e 	bl	8000514 <__aeabi_ui2d>
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <BME280_Measure+0x114>)
 8001c5e:	f7fe fdfd 	bl	800085c <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ffc5 	bl	8000bf8 <__aeabi_d2f>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <BME280_Measure+0x110>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	e00b      	b.n	8001c8e <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <BME280_Measure+0x110>)
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <BME280_Measure+0x110>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <BME280_Measure+0x104>)
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <BME280_Measure+0x104>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <BME280_Measure+0xf8>)
 8001c8c:	6013      	str	r3, [r2, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000230 	.word	0x20000230
 8001c98:	2000039c 	.word	0x2000039c
 8001c9c:	40590000 	.word	0x40590000
 8001ca0:	20000234 	.word	0x20000234
 8001ca4:	200003a0 	.word	0x200003a0
 8001ca8:	40700000 	.word	0x40700000
 8001cac:	20000238 	.word	0x20000238
 8001cb0:	200003a4 	.word	0x200003a4
 8001cb4:	40900000 	.word	0x40900000

08001cb8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f023 030f 	bic.w	r3, r3, #15
 8001cc8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	f043 030c 	orr.w	r3, r3, #12
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001ce4:	7bbb      	ldrb	r3, [r7, #14]
 8001ce6:	f043 030c 	orr.w	r3, r3, #12
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001cee:	7bbb      	ldrb	r3, [r7, #14]
 8001cf0:	f043 0308 	orr.w	r3, r3, #8
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cf8:	f107 0208 	add.w	r2, r7, #8
 8001cfc:	2364      	movs	r3, #100	; 0x64
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2304      	movs	r3, #4
 8001d02:	214e      	movs	r1, #78	; 0x4e
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <lcd_send_cmd+0x5c>)
 8001d06:	f001 feff 	bl	8003b08 <HAL_I2C_Master_Transmit>
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200002ac 	.word	0x200002ac

08001d18 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f023 030f 	bic.w	r3, r3, #15
 8001d28:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	f043 030d 	orr.w	r3, r3, #13
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	f043 0309 	orr.w	r3, r3, #9
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001d44:	7bbb      	ldrb	r3, [r7, #14]
 8001d46:	f043 030d 	orr.w	r3, r3, #13
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001d4e:	7bbb      	ldrb	r3, [r7, #14]
 8001d50:	f043 0309 	orr.w	r3, r3, #9
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d58:	f107 0208 	add.w	r2, r7, #8
 8001d5c:	2364      	movs	r3, #100	; 0x64
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2304      	movs	r3, #4
 8001d62:	214e      	movs	r1, #78	; 0x4e
 8001d64:	4803      	ldr	r0, [pc, #12]	; (8001d74 <lcd_send_data+0x5c>)
 8001d66:	f001 fecf 	bl	8003b08 <HAL_I2C_Master_Transmit>
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200002ac 	.word	0x200002ac

08001d78 <lcd_clear>:

void lcd_clear (void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	lcd_send_cmd (LCD_CLEARDISPLAY);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff ff9b 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(2);
 8001d82:	2002      	movs	r0, #2
 8001d84:	f000 feda 	bl	8002b3c <HAL_Delay>
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <lcd_init>:

void lcd_init (void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001d90:	2032      	movs	r0, #50	; 0x32
 8001d92:	f000 fed3 	bl	8002b3c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001d96:	2030      	movs	r0, #48	; 0x30
 8001d98:	f7ff ff8e 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001d9c:	2005      	movs	r0, #5
 8001d9e:	f000 fecd 	bl	8002b3c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001da2:	2030      	movs	r0, #48	; 0x30
 8001da4:	f7ff ff88 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001da8:	2001      	movs	r0, #1
 8001daa:	f000 fec7 	bl	8002b3c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001dae:	2030      	movs	r0, #48	; 0x30
 8001db0:	f7ff ff82 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(10);
 8001db4:	200a      	movs	r0, #10
 8001db6:	f000 fec1 	bl	8002b3c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001dba:	2020      	movs	r0, #32
 8001dbc:	f7ff ff7c 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(10);
 8001dc0:	200a      	movs	r0, #10
 8001dc2:	f000 febb 	bl	8002b3c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001dc6:	2028      	movs	r0, #40	; 0x28
 8001dc8:	f7ff ff76 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(1);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f000 feb5 	bl	8002b3c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001dd2:	2008      	movs	r0, #8
 8001dd4:	f7ff ff70 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(1);
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f000 feaf 	bl	8002b3c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001dde:	2001      	movs	r0, #1
 8001de0:	f7ff ff6a 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(1);
 8001de4:	2001      	movs	r0, #1
 8001de6:	f000 fea9 	bl	8002b3c <HAL_Delay>
	HAL_Delay(1);
 8001dea:	2001      	movs	r0, #1
 8001dec:	f000 fea6 	bl	8002b3c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001df0:	2006      	movs	r0, #6
 8001df2:	f7ff ff61 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(1);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f000 fea0 	bl	8002b3c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001dfc:	200c      	movs	r0, #12
 8001dfe:	f7ff ff5b 	bl	8001cb8 <lcd_send_cmd>
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001e0e:	e006      	b.n	8001e1e <lcd_send_string+0x18>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff7d 	bl	8001d18 <lcd_send_data>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f4      	bne.n	8001e10 <lcd_send_string+0xa>
}
 8001e26:	bf00      	nop
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <lcd_home>:

void lcd_home(){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	lcd_send_cmd (LCD_RETURNHOME);
 8001e34:	2002      	movs	r0, #2
 8001e36:	f7ff ff3f 	bl	8001cb8 <lcd_send_cmd>
	//HAL_Delay(2);
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <lcd_create_char>:
}
void lcd_no_autoscroll(){
    _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
    lcd_send_cmd(LCD_ENTRYMODESET | _displaymode);
}
void lcd_create_char(uint8_t location, uint8_t charmap[]){
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	6039      	str	r1, [r7, #0]
 8001e48:	71fb      	strb	r3, [r7, #7]
    location &= 0x7; // we only have 8 locations 0-7
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(LCD_SETCGRAMADDR | (location << 3));
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e5c:	b25b      	sxtb	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff29 	bl	8001cb8 <lcd_send_cmd>
    for (uint8_t i = 0; i != 8; i++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	e009      	b.n	8001e80 <lcd_create_char+0x42>
    	lcd_send_data(charmap[i]);
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff4f 	bl	8001d18 <lcd_send_data>
    for (uint8_t i = 0; i != 8; i++)
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d1f2      	bne.n	8001e6c <lcd_create_char+0x2e>
}
 8001e86:	bf00      	nop
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <lcd_set_cursor>:
void lcd_set_cursor(uint8_t col, uint8_t row){
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	460a      	mov	r2, r1
 8001e9a:	71fb      	strb	r3, [r7, #7]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	71bb      	strb	r3, [r7, #6]
    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <lcd_set_cursor+0x54>)
 8001ea2:	f107 0408 	add.w	r4, r7, #8
 8001ea6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ea8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (row > 4)
 8001eac:	79bb      	ldrb	r3, [r7, #6]
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d901      	bls.n	8001eb6 <lcd_set_cursor+0x26>
        row = 4 - 1; // we count rows starting w/0
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	71bb      	strb	r3, [r7, #6]
    lcd_send_cmd(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001eb6:	79bb      	ldrb	r3, [r7, #6]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	3318      	adds	r3, #24
 8001ebc:	443b      	add	r3, r7
 8001ebe:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	b25b      	sxtb	r3, r3
 8001ecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ed0:	b25b      	sxtb	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff feef 	bl	8001cb8 <lcd_send_cmd>
}
 8001eda:	bf00      	nop
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd90      	pop	{r4, r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	0800a5b0 	.word	0x0800a5b0

08001ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ee8:	b5b0      	push	{r4, r5, r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eee:	f000 fdb3 	bl	8002a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ef2:	f000 f8af 	bl	8002054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef6:	f000 f9f7 	bl	80022e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001efa:	f000 f915 	bl	8002128 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001efe:	f000 f965 	bl	80021cc <MX_I2C1_Init>
  MX_SPI1_Init();
 8001f02:	f000 f991 	bl	8002228 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001f06:	f003 fddd 	bl	8005ac4 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8001f0a:	f000 f9c3 	bl	8002294 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize the BME280 sensor
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001f0e:	2304      	movs	r3, #4
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	2300      	movs	r3, #0
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2303      	movs	r3, #3
 8001f18:	2201      	movs	r2, #1
 8001f1a:	2105      	movs	r1, #5
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f7ff f9a5 	bl	800126c <BME280_Config>
  // Initialize the LCD display
  lcd_init();
 8001f22:	f7ff ff33 	bl	8001d8c <lcd_init>
  lcd_clear();
 8001f26:	f7ff ff27 	bl	8001d78 <lcd_clear>
  // Load custom characters into memory
  lcd_create_char(0,thermometer);
 8001f2a:	493d      	ldr	r1, [pc, #244]	; (8002020 <main+0x138>)
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f7ff ff86 	bl	8001e3e <lcd_create_char>
  lcd_create_char(1,droplet);
 8001f32:	493c      	ldr	r1, [pc, #240]	; (8002024 <main+0x13c>)
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7ff ff82 	bl	8001e3e <lcd_create_char>
  lcd_create_char(2,wifi);
 8001f3a:	493b      	ldr	r1, [pc, #236]	; (8002028 <main+0x140>)
 8001f3c:	2002      	movs	r0, #2
 8001f3e:	f7ff ff7e 	bl	8001e3e <lcd_create_char>
  lcd_home();
 8001f42:	f7ff ff75 	bl	8001e30 <lcd_home>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Update current time
	  current_time=HAL_GetTick();
 8001f46:	f000 fded 	bl	8002b24 <HAL_GetTick>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4a37      	ldr	r2, [pc, #220]	; (800202c <main+0x144>)
 8001f4e:	6013      	str	r3, [r2, #0]
	  // Update sensor readings every 500ms
	  if (current_time-event_sensor>500){
 8001f50:	4b36      	ldr	r3, [pc, #216]	; (800202c <main+0x144>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b36      	ldr	r3, [pc, #216]	; (8002030 <main+0x148>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f5e:	d93b      	bls.n	8001fd8 <main+0xf0>
		  BME280_Measure();
 8001f60:	f7ff fe1e 	bl	8001ba0 <BME280_Measure>
		  HAL_ADC_Start(&hadc1);
 8001f64:	4833      	ldr	r0, [pc, #204]	; (8002034 <main+0x14c>)
 8001f66:	f000 fe51 	bl	8002c0c <HAL_ADC_Start>
		  if(HAL_ADC_PollForConversion(&hadc1,12)==HAL_OK){
 8001f6a:	210c      	movs	r1, #12
 8001f6c:	4831      	ldr	r0, [pc, #196]	; (8002034 <main+0x14c>)
 8001f6e:	f000 ff34 	bl	8002dda <HAL_ADC_PollForConversion>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d127      	bne.n	8001fc8 <main+0xe0>
			  //SoilMoisture = HAL_ADC_GetValue(&hadc1);
			  SoilMoisture=((moisture_air-HAL_ADC_GetValue(&hadc1)) * 100.0 / (moisture_air-moisture_water));
 8001f78:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <main+0x150>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	461c      	mov	r4, r3
 8001f7e:	482d      	ldr	r0, [pc, #180]	; (8002034 <main+0x14c>)
 8001f80:	f000 ffb6 	bl	8002ef0 <HAL_ADC_GetValue>
 8001f84:	4603      	mov	r3, r0
 8001f86:	1ae3      	subs	r3, r4, r3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fac3 	bl	8000514 <__aeabi_ui2d>
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	4b2a      	ldr	r3, [pc, #168]	; (800203c <main+0x154>)
 8001f94:	f7fe fb38 	bl	8000608 <__aeabi_dmul>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4614      	mov	r4, r2
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	4b25      	ldr	r3, [pc, #148]	; (8002038 <main+0x150>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b26      	ldr	r3, [pc, #152]	; (8002040 <main+0x158>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fac1 	bl	8000534 <__aeabi_i2d>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	4629      	mov	r1, r5
 8001fba:	f7fe fc4f 	bl	800085c <__aeabi_ddiv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4920      	ldr	r1, [pc, #128]	; (8002044 <main+0x15c>)
 8001fc4:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  HAL_ADC_Stop(&hadc1);
 8001fc8:	481a      	ldr	r0, [pc, #104]	; (8002034 <main+0x14c>)
 8001fca:	f000 fed3 	bl	8002d74 <HAL_ADC_Stop>
		  event_sensor=HAL_GetTick();
 8001fce:	f000 fda9 	bl	8002b24 <HAL_GetTick>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4a16      	ldr	r2, [pc, #88]	; (8002030 <main+0x148>)
 8001fd6:	6013      	str	r3, [r2, #0]
	  }


	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_1))
 8001fd8:	2102      	movs	r1, #2
 8001fda:	481b      	ldr	r0, [pc, #108]	; (8002048 <main+0x160>)
 8001fdc:	f001 fc1e 	bl	800381c <HAL_GPIO_ReadPin>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <main+0x10c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fec:	4817      	ldr	r0, [pc, #92]	; (800204c <main+0x164>)
 8001fee:	f001 fc2d 	bl	800384c <HAL_GPIO_WritePin>
 8001ff2:	e005      	b.n	8002000 <main+0x118>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ffa:	4814      	ldr	r0, [pc, #80]	; (800204c <main+0x164>)
 8001ffc:	f001 fc26 	bl	800384c <HAL_GPIO_WritePin>
	  }
	  // Update the display every 1000 ms
	  if (current_time-event_lcd>1000){
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <main+0x144>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <main+0x168>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800200e:	d99a      	bls.n	8001f46 <main+0x5e>
		  Print_LCD();
 8002010:	f000 f9ee 	bl	80023f0 <Print_LCD>
		  event_lcd=HAL_GetTick();
 8002014:	f000 fd86 	bl	8002b24 <HAL_GetTick>
 8002018:	4603      	mov	r3, r0
 800201a:	4a0d      	ldr	r2, [pc, #52]	; (8002050 <main+0x168>)
 800201c:	6013      	str	r3, [r2, #0]
	  current_time=HAL_GetTick();
 800201e:	e792      	b.n	8001f46 <main+0x5e>
 8002020:	20000008 	.word	0x20000008
 8002024:	20000000 	.word	0x20000000
 8002028:	20000010 	.word	0x20000010
 800202c:	200003c0 	.word	0x200003c0
 8002030:	200003bc 	.word	0x200003bc
 8002034:	20000264 	.word	0x20000264
 8002038:	2000001a 	.word	0x2000001a
 800203c:	40590000 	.word	0x40590000
 8002040:	20000018 	.word	0x20000018
 8002044:	200003a8 	.word	0x200003a8
 8002048:	40020400 	.word	0x40020400
 800204c:	40020000 	.word	0x40020000
 8002050:	200003b8 	.word	0x200003b8

08002054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b094      	sub	sp, #80	; 0x50
 8002058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800205a:	f107 0320 	add.w	r3, r7, #32
 800205e:	2230      	movs	r2, #48	; 0x30
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f003 fe1e 	bl	8005ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	4b28      	ldr	r3, [pc, #160]	; (8002120 <SystemClock_Config+0xcc>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	4a27      	ldr	r2, [pc, #156]	; (8002120 <SystemClock_Config+0xcc>)
 8002082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002086:	6413      	str	r3, [r2, #64]	; 0x40
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <SystemClock_Config+0xcc>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002094:	2300      	movs	r3, #0
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	4b22      	ldr	r3, [pc, #136]	; (8002124 <SystemClock_Config+0xd0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020a0:	4a20      	ldr	r2, [pc, #128]	; (8002124 <SystemClock_Config+0xd0>)
 80020a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <SystemClock_Config+0xd0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020b4:	2301      	movs	r3, #1
 80020b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020be:	2302      	movs	r3, #2
 80020c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020c8:	2304      	movs	r3, #4
 80020ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80020cc:	2354      	movs	r3, #84	; 0x54
 80020ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020d0:	2302      	movs	r3, #2
 80020d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020d4:	2304      	movs	r3, #4
 80020d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020d8:	f107 0320 	add.w	r3, r7, #32
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 fd0f 	bl	8004b00 <HAL_RCC_OscConfig>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80020e8:	f000 fa08 	bl	80024fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ec:	230f      	movs	r3, #15
 80020ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020f0:	2302      	movs	r3, #2
 80020f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002102:	f107 030c 	add.w	r3, r7, #12
 8002106:	2102      	movs	r1, #2
 8002108:	4618      	mov	r0, r3
 800210a:	f002 ff71 	bl	8004ff0 <HAL_RCC_ClockConfig>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002114:	f000 f9f2 	bl	80024fc <Error_Handler>
  }
}
 8002118:	bf00      	nop
 800211a:	3750      	adds	r7, #80	; 0x50
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40023800 	.word	0x40023800
 8002124:	40007000 	.word	0x40007000

08002128 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800212e:	463b      	mov	r3, r7
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <MX_ADC1_Init+0x98>)
 800213c:	4a21      	ldr	r2, [pc, #132]	; (80021c4 <MX_ADC1_Init+0x9c>)
 800213e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002140:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <MX_ADC1_Init+0x98>)
 8002142:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002146:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <MX_ADC1_Init+0x98>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800214e:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <MX_ADC1_Init+0x98>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <MX_ADC1_Init+0x98>)
 8002156:	2200      	movs	r2, #0
 8002158:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800215a:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <MX_ADC1_Init+0x98>)
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002162:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <MX_ADC1_Init+0x98>)
 8002164:	2200      	movs	r2, #0
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002168:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <MX_ADC1_Init+0x98>)
 800216a:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <MX_ADC1_Init+0xa0>)
 800216c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800216e:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <MX_ADC1_Init+0x98>)
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <MX_ADC1_Init+0x98>)
 8002176:	2201      	movs	r2, #1
 8002178:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <MX_ADC1_Init+0x98>)
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002182:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <MX_ADC1_Init+0x98>)
 8002184:	2201      	movs	r2, #1
 8002186:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002188:	480d      	ldr	r0, [pc, #52]	; (80021c0 <MX_ADC1_Init+0x98>)
 800218a:	f000 fcfb 	bl	8002b84 <HAL_ADC_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002194:	f000 f9b2 	bl	80024fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002198:	230a      	movs	r3, #10
 800219a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800219c:	2301      	movs	r3, #1
 800219e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021a4:	463b      	mov	r3, r7
 80021a6:	4619      	mov	r1, r3
 80021a8:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_ADC1_Init+0x98>)
 80021aa:	f000 feaf 	bl	8002f0c <HAL_ADC_ConfigChannel>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80021b4:	f000 f9a2 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021b8:	bf00      	nop
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000264 	.word	0x20000264
 80021c4:	40012000 	.word	0x40012000
 80021c8:	0f000001 	.word	0x0f000001

080021cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <MX_I2C1_Init+0x50>)
 80021d2:	4a13      	ldr	r2, [pc, #76]	; (8002220 <MX_I2C1_Init+0x54>)
 80021d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <MX_I2C1_Init+0x50>)
 80021d8:	4a12      	ldr	r2, [pc, #72]	; (8002224 <MX_I2C1_Init+0x58>)
 80021da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <MX_I2C1_Init+0x50>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <MX_I2C1_Init+0x50>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <MX_I2C1_Init+0x50>)
 80021ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <MX_I2C1_Init+0x50>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <MX_I2C1_Init+0x50>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <MX_I2C1_Init+0x50>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <MX_I2C1_Init+0x50>)
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002208:	4804      	ldr	r0, [pc, #16]	; (800221c <MX_I2C1_Init+0x50>)
 800220a:	f001 fb39 	bl	8003880 <HAL_I2C_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002214:	f000 f972 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	200002ac 	.word	0x200002ac
 8002220:	40005400 	.word	0x40005400
 8002224:	000186a0 	.word	0x000186a0

08002228 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <MX_SPI1_Init+0x64>)
 800222e:	4a18      	ldr	r2, [pc, #96]	; (8002290 <MX_SPI1_Init+0x68>)
 8002230:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <MX_SPI1_Init+0x64>)
 8002234:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002238:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <MX_SPI1_Init+0x64>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <MX_SPI1_Init+0x64>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <MX_SPI1_Init+0x64>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800224c:	4b0f      	ldr	r3, [pc, #60]	; (800228c <MX_SPI1_Init+0x64>)
 800224e:	2200      	movs	r2, #0
 8002250:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002252:	4b0e      	ldr	r3, [pc, #56]	; (800228c <MX_SPI1_Init+0x64>)
 8002254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002258:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <MX_SPI1_Init+0x64>)
 800225c:	2200      	movs	r2, #0
 800225e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <MX_SPI1_Init+0x64>)
 8002262:	2200      	movs	r2, #0
 8002264:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <MX_SPI1_Init+0x64>)
 8002268:	2200      	movs	r2, #0
 800226a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800226c:	4b07      	ldr	r3, [pc, #28]	; (800228c <MX_SPI1_Init+0x64>)
 800226e:	2200      	movs	r2, #0
 8002270:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <MX_SPI1_Init+0x64>)
 8002274:	220a      	movs	r2, #10
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002278:	4804      	ldr	r0, [pc, #16]	; (800228c <MX_SPI1_Init+0x64>)
 800227a:	f003 f8d9 	bl	8005430 <HAL_SPI_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002284:	f000 f93a 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000300 	.word	0x20000300
 8002290:	40013000 	.word	0x40013000

08002294 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <MX_USART1_UART_Init+0x50>)
 800229c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022cc:	f003 f939 	bl	8005542 <HAL_UART_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022d6:	f000 f911 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000358 	.word	0x20000358
 80022e4:	40011000 	.word	0x40011000

080022e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
 80022fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a37      	ldr	r2, [pc, #220]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b35      	ldr	r3, [pc, #212]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a30      	ldr	r2, [pc, #192]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002324:	f043 0304 	orr.w	r3, r3, #4
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <MX_GPIO_Init+0xfc>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <MX_GPIO_Init+0xfc>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a29      	ldr	r2, [pc, #164]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a22      	ldr	r2, [pc, #136]	; (80023e4 <MX_GPIO_Init+0xfc>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_MicroSD_GPIO_Port, CS_MicroSD_Pin, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002374:	481c      	ldr	r0, [pc, #112]	; (80023e8 <MX_GPIO_Init+0x100>)
 8002376:	f001 fa69 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800237a:	2200      	movs	r2, #0
 800237c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002380:	481a      	ldr	r0, [pc, #104]	; (80023ec <MX_GPIO_Init+0x104>)
 8002382:	f001 fa63 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8002386:	2302      	movs	r3, #2
 8002388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	4813      	ldr	r0, [pc, #76]	; (80023e8 <MX_GPIO_Init+0x100>)
 800239a:	f001 f8bb 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_MicroSD_Pin */
  GPIO_InitStruct.Pin = CS_MicroSD_Pin;
 800239e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a4:	2301      	movs	r3, #1
 80023a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_MicroSD_GPIO_Port, &GPIO_InitStruct);
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	4619      	mov	r1, r3
 80023b6:	480c      	ldr	r0, [pc, #48]	; (80023e8 <MX_GPIO_Init+0x100>)
 80023b8:	f001 f8ac 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80023bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c2:	2301      	movs	r3, #1
 80023c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ca:	2300      	movs	r3, #0
 80023cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	4619      	mov	r1, r3
 80023d4:	4805      	ldr	r0, [pc, #20]	; (80023ec <MX_GPIO_Init+0x104>)
 80023d6:	f001 f89d 	bl	8003514 <HAL_GPIO_Init>

}
 80023da:	bf00      	nop
 80023dc:	3728      	adds	r7, #40	; 0x28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020400 	.word	0x40020400
 80023ec:	40020000 	.word	0x40020000

080023f0 <Print_LCD>:

/* USER CODE BEGIN 4 */
void Print_LCD(){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	lcd_clear();
 80023f4:	f7ff fcc0 	bl	8001d78 <lcd_clear>
	lcd_set_cursor(0, 0);
 80023f8:	2100      	movs	r1, #0
 80023fa:	2000      	movs	r0, #0
 80023fc:	f7ff fd48 	bl	8001e90 <lcd_set_cursor>
	lcd_send_data(1);
 8002400:	2001      	movs	r0, #1
 8002402:	f7ff fc89 	bl	8001d18 <lcd_send_data>
	sprintf(text,"%.2f",SoilMoisture);
 8002406:	4b31      	ldr	r3, [pc, #196]	; (80024cc <Print_LCD+0xdc>)
 8002408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240c:	4930      	ldr	r1, [pc, #192]	; (80024d0 <Print_LCD+0xe0>)
 800240e:	4831      	ldr	r0, [pc, #196]	; (80024d4 <Print_LCD+0xe4>)
 8002410:	f004 fad0 	bl	80069b4 <siprintf>
	lcd_send_string(text);
 8002414:	482f      	ldr	r0, [pc, #188]	; (80024d4 <Print_LCD+0xe4>)
 8002416:	f7ff fcf6 	bl	8001e06 <lcd_send_string>
	lcd_send_string("%");
 800241a:	482f      	ldr	r0, [pc, #188]	; (80024d8 <Print_LCD+0xe8>)
 800241c:	f7ff fcf3 	bl	8001e06 <lcd_send_string>
	lcd_set_cursor(0, 1);
 8002420:	2101      	movs	r1, #1
 8002422:	2000      	movs	r0, #0
 8002424:	f7ff fd34 	bl	8001e90 <lcd_set_cursor>
	lcd_send_data(0);
 8002428:	2000      	movs	r0, #0
 800242a:	f7ff fc75 	bl	8001d18 <lcd_send_data>
	sprintf(text,"%.2f",Temperature);
 800242e:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <Print_LCD+0xec>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe f890 	bl	8000558 <__aeabi_f2d>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4924      	ldr	r1, [pc, #144]	; (80024d0 <Print_LCD+0xe0>)
 800243e:	4825      	ldr	r0, [pc, #148]	; (80024d4 <Print_LCD+0xe4>)
 8002440:	f004 fab8 	bl	80069b4 <siprintf>
	lcd_send_string(text);
 8002444:	4823      	ldr	r0, [pc, #140]	; (80024d4 <Print_LCD+0xe4>)
 8002446:	f7ff fcde 	bl	8001e06 <lcd_send_string>
	lcd_send_data(0b11011111);
 800244a:	20df      	movs	r0, #223	; 0xdf
 800244c:	f7ff fc64 	bl	8001d18 <lcd_send_data>
	lcd_send_string("C");
 8002450:	4823      	ldr	r0, [pc, #140]	; (80024e0 <Print_LCD+0xf0>)
 8002452:	f7ff fcd8 	bl	8001e06 <lcd_send_string>
	lcd_set_cursor(0, 2);
 8002456:	2102      	movs	r1, #2
 8002458:	2000      	movs	r0, #0
 800245a:	f7ff fd19 	bl	8001e90 <lcd_set_cursor>
	lcd_send_data(1);
 800245e:	2001      	movs	r0, #1
 8002460:	f7ff fc5a 	bl	8001d18 <lcd_send_data>
	sprintf(text,"%.2f",Humidity);
 8002464:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <Print_LCD+0xf4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f875 	bl	8000558 <__aeabi_f2d>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4917      	ldr	r1, [pc, #92]	; (80024d0 <Print_LCD+0xe0>)
 8002474:	4817      	ldr	r0, [pc, #92]	; (80024d4 <Print_LCD+0xe4>)
 8002476:	f004 fa9d 	bl	80069b4 <siprintf>
	lcd_send_string(text);
 800247a:	4816      	ldr	r0, [pc, #88]	; (80024d4 <Print_LCD+0xe4>)
 800247c:	f7ff fcc3 	bl	8001e06 <lcd_send_string>
	lcd_send_string("%");
 8002480:	4815      	ldr	r0, [pc, #84]	; (80024d8 <Print_LCD+0xe8>)
 8002482:	f7ff fcc0 	bl	8001e06 <lcd_send_string>
	lcd_set_cursor(0, 3);
 8002486:	2103      	movs	r1, #3
 8002488:	2000      	movs	r0, #0
 800248a:	f7ff fd01 	bl	8001e90 <lcd_set_cursor>
	lcd_send_string("Pres:");
 800248e:	4816      	ldr	r0, [pc, #88]	; (80024e8 <Print_LCD+0xf8>)
 8002490:	f7ff fcb9 	bl	8001e06 <lcd_send_string>
	sprintf(text,"%4.1f",Pressure/100);
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <Print_LCD+0xfc>)
 8002496:	edd3 7a00 	vldr	s15, [r3]
 800249a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80024f0 <Print_LCD+0x100>
 800249e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024a2:	ee16 0a90 	vmov	r0, s13
 80024a6:	f7fe f857 	bl	8000558 <__aeabi_f2d>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4911      	ldr	r1, [pc, #68]	; (80024f4 <Print_LCD+0x104>)
 80024b0:	4808      	ldr	r0, [pc, #32]	; (80024d4 <Print_LCD+0xe4>)
 80024b2:	f004 fa7f 	bl	80069b4 <siprintf>
	lcd_send_string(text);
 80024b6:	4807      	ldr	r0, [pc, #28]	; (80024d4 <Print_LCD+0xe4>)
 80024b8:	f7ff fca5 	bl	8001e06 <lcd_send_string>
	lcd_send_string("hPa");
 80024bc:	480e      	ldr	r0, [pc, #56]	; (80024f8 <Print_LCD+0x108>)
 80024be:	f7ff fca2 	bl	8001e06 <lcd_send_string>
	lcd_home();
 80024c2:	f7ff fcb5 	bl	8001e30 <lcd_home>
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200003a8 	.word	0x200003a8
 80024d0:	0800a5c0 	.word	0x0800a5c0
 80024d4:	200003b0 	.word	0x200003b0
 80024d8:	0800a5c8 	.word	0x0800a5c8
 80024dc:	2000039c 	.word	0x2000039c
 80024e0:	0800a5cc 	.word	0x0800a5cc
 80024e4:	200003a4 	.word	0x200003a4
 80024e8:	0800a5d0 	.word	0x0800a5d0
 80024ec:	200003a0 	.word	0x200003a0
 80024f0:	42c80000 	.word	0x42c80000
 80024f4:	0800a5d8 	.word	0x0800a5d8
 80024f8:	0800a5e0 	.word	0x0800a5e0

080024fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002500:	b672      	cpsid	i
}
 8002502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002504:	e7fe      	b.n	8002504 <Error_Handler+0x8>
	...

08002508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_MspInit+0x4c>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	4a0f      	ldr	r2, [pc, #60]	; (8002554 <HAL_MspInit+0x4c>)
 8002518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800251c:	6453      	str	r3, [r2, #68]	; 0x44
 800251e:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <HAL_MspInit+0x4c>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	603b      	str	r3, [r7, #0]
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_MspInit+0x4c>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a08      	ldr	r2, [pc, #32]	; (8002554 <HAL_MspInit+0x4c>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_MspInit+0x4c>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800

08002558 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <HAL_ADC_MspInit+0x7c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d127      	bne.n	80025ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <HAL_ADC_MspInit+0x80>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a15      	ldr	r2, [pc, #84]	; (80025d8 <HAL_ADC_MspInit+0x80>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <HAL_ADC_MspInit+0x80>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_ADC_MspInit+0x80>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a0e      	ldr	r2, [pc, #56]	; (80025d8 <HAL_ADC_MspInit+0x80>)
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <HAL_ADC_MspInit+0x80>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = SOIL_MOIST_Pin;
 80025b2:	2301      	movs	r3, #1
 80025b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025b6:	2303      	movs	r3, #3
 80025b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOIL_MOIST_GPIO_Port, &GPIO_InitStruct);
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	4619      	mov	r1, r3
 80025c4:	4805      	ldr	r0, [pc, #20]	; (80025dc <HAL_ADC_MspInit+0x84>)
 80025c6:	f000 ffa5 	bl	8003514 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	; 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40012000 	.word	0x40012000
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020800 	.word	0x40020800

080025e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a19      	ldr	r2, [pc, #100]	; (8002664 <HAL_I2C_MspInit+0x84>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d12c      	bne.n	800265c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <HAL_I2C_MspInit+0x88>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a17      	ldr	r2, [pc, #92]	; (8002668 <HAL_I2C_MspInit+0x88>)
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b15      	ldr	r3, [pc, #84]	; (8002668 <HAL_I2C_MspInit+0x88>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800261e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002624:	2312      	movs	r3, #18
 8002626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002628:	2301      	movs	r3, #1
 800262a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262c:	2303      	movs	r3, #3
 800262e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002630:	2304      	movs	r3, #4
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4619      	mov	r1, r3
 800263a:	480c      	ldr	r0, [pc, #48]	; (800266c <HAL_I2C_MspInit+0x8c>)
 800263c:	f000 ff6a 	bl	8003514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <HAL_I2C_MspInit+0x88>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	4a07      	ldr	r2, [pc, #28]	; (8002668 <HAL_I2C_MspInit+0x88>)
 800264a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800264e:	6413      	str	r3, [r2, #64]	; 0x40
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_I2C_MspInit+0x88>)
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800265c:	bf00      	nop
 800265e:	3728      	adds	r7, #40	; 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40005400 	.word	0x40005400
 8002668:	40023800 	.word	0x40023800
 800266c:	40020400 	.word	0x40020400

08002670 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a19      	ldr	r2, [pc, #100]	; (80026f4 <HAL_SPI_MspInit+0x84>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d12b      	bne.n	80026ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_SPI_MspInit+0x88>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	4a17      	ldr	r2, [pc, #92]	; (80026f8 <HAL_SPI_MspInit+0x88>)
 800269c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026a0:	6453      	str	r3, [r2, #68]	; 0x44
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_SPI_MspInit+0x88>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_SPI_MspInit+0x88>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	4a10      	ldr	r2, [pc, #64]	; (80026f8 <HAL_SPI_MspInit+0x88>)
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_SPI_MspInit+0x88>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80026ca:	2338      	movs	r3, #56	; 0x38
 80026cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d6:	2303      	movs	r3, #3
 80026d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026da:	2305      	movs	r3, #5
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	4805      	ldr	r0, [pc, #20]	; (80026fc <HAL_SPI_MspInit+0x8c>)
 80026e6:	f000 ff15 	bl	8003514 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026ea:	bf00      	nop
 80026ec:	3728      	adds	r7, #40	; 0x28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40013000 	.word	0x40013000
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020400 	.word	0x40020400

08002700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a19      	ldr	r2, [pc, #100]	; (8002784 <HAL_UART_MspInit+0x84>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d12c      	bne.n	800277c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	4b18      	ldr	r3, [pc, #96]	; (8002788 <HAL_UART_MspInit+0x88>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	4a17      	ldr	r2, [pc, #92]	; (8002788 <HAL_UART_MspInit+0x88>)
 800272c:	f043 0310 	orr.w	r3, r3, #16
 8002730:	6453      	str	r3, [r2, #68]	; 0x44
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_UART_MspInit+0x88>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_UART_MspInit+0x88>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a10      	ldr	r2, [pc, #64]	; (8002788 <HAL_UART_MspInit+0x88>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <HAL_UART_MspInit+0x88>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800275a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800275e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002768:	2303      	movs	r3, #3
 800276a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800276c:	2307      	movs	r3, #7
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4619      	mov	r1, r3
 8002776:	4805      	ldr	r0, [pc, #20]	; (800278c <HAL_UART_MspInit+0x8c>)
 8002778:	f000 fecc 	bl	8003514 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800277c:	bf00      	nop
 800277e:	3728      	adds	r7, #40	; 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40011000 	.word	0x40011000
 8002788:	40023800 	.word	0x40023800
 800278c:	40020000 	.word	0x40020000

08002790 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <SDTimer_Handler+0x40>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d006      	beq.n	80027ac <SDTimer_Handler+0x1c>
    Timer1--;
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <SDTimer_Handler+0x40>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <SDTimer_Handler+0x40>)
 80027aa:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <SDTimer_Handler+0x44>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d006      	beq.n	80027c4 <SDTimer_Handler+0x34>
    Timer2--;
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <SDTimer_Handler+0x44>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <SDTimer_Handler+0x44>)
 80027c2:	701a      	strb	r2, [r3, #0]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	200003c5 	.word	0x200003c5
 80027d4:	200003c6 	.word	0x200003c6

080027d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027dc:	e7fe      	b.n	80027dc <NMI_Handler+0x4>

080027de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e2:	e7fe      	b.n	80027e2 <HardFault_Handler+0x4>

080027e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e8:	e7fe      	b.n	80027e8 <MemManage_Handler+0x4>

080027ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ee:	e7fe      	b.n	80027ee <BusFault_Handler+0x4>

080027f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f4:	e7fe      	b.n	80027f4 <UsageFault_Handler+0x4>

080027f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <SysTick_Handler+0x30>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	3301      	adds	r3, #1
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <SysTick_Handler+0x30>)
 8002830:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <SysTick_Handler+0x30>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b09      	cmp	r3, #9
 800283a:	d904      	bls.n	8002846 <SysTick_Handler+0x26>
  {
	FatFsCnt = 0;
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <SysTick_Handler+0x30>)
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
	SDTimer_Handler();
 8002842:	f7ff ffa5 	bl	8002790 <SDTimer_Handler>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002846:	f000 f959 	bl	8002afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200003c4 	.word	0x200003c4

08002854 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
	return 1;
 8002858:	2301      	movs	r3, #1
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <_kill>:

int _kill(int pid, int sig)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800286e:	f003 f9ef 	bl	8005c50 <__errno>
 8002872:	4603      	mov	r3, r0
 8002874:	2216      	movs	r2, #22
 8002876:	601a      	str	r2, [r3, #0]
	return -1;
 8002878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800287c:	4618      	mov	r0, r3
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <_exit>:

void _exit (int status)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800288c:	f04f 31ff 	mov.w	r1, #4294967295
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ffe7 	bl	8002864 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002896:	e7fe      	b.n	8002896 <_exit+0x12>

08002898 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	e00a      	b.n	80028c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028aa:	f3af 8000 	nop.w
 80028ae:	4601      	mov	r1, r0
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	60ba      	str	r2, [r7, #8]
 80028b6:	b2ca      	uxtb	r2, r1
 80028b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	3301      	adds	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	dbf0      	blt.n	80028aa <_read+0x12>
	}

return len;
 80028c8:	687b      	ldr	r3, [r7, #4]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	e009      	b.n	80028f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	60ba      	str	r2, [r7, #8]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	3301      	adds	r3, #1
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	dbf1      	blt.n	80028e4 <_write+0x12>
	}
	return len;
 8002900:	687b      	ldr	r3, [r7, #4]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <_close>:

int _close(int file)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
	return -1;
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002932:	605a      	str	r2, [r3, #4]
	return 0;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <_isatty>:

int _isatty(int file)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
	return 1;
 800294a:	2301      	movs	r3, #1
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
	return 0;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <_sbrk+0x5c>)
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <_sbrk+0x60>)
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <_sbrk+0x64>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <_sbrk+0x64>)
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <_sbrk+0x68>)
 8002994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <_sbrk+0x64>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d207      	bcs.n	80029b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a4:	f003 f954 	bl	8005c50 <__errno>
 80029a8:	4603      	mov	r3, r0
 80029aa:	220c      	movs	r2, #12
 80029ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
 80029b2:	e009      	b.n	80029c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <_sbrk+0x64>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <_sbrk+0x64>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <_sbrk+0x64>)
 80029c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029c6:	68fb      	ldr	r3, [r7, #12]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20018000 	.word	0x20018000
 80029d4:	00000400 	.word	0x00000400
 80029d8:	200003c8 	.word	0x200003c8
 80029dc:	200003f8 	.word	0x200003f8

080029e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <SystemInit+0x20>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	4a05      	ldr	r2, [pc, #20]	; (8002a00 <SystemInit+0x20>)
 80029ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a0a:	490e      	ldr	r1, [pc, #56]	; (8002a44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a0c:	4a0e      	ldr	r2, [pc, #56]	; (8002a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a10:	e002      	b.n	8002a18 <LoopCopyDataInit>

08002a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a16:	3304      	adds	r3, #4

08002a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a1c:	d3f9      	bcc.n	8002a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a1e:	4a0b      	ldr	r2, [pc, #44]	; (8002a4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a20:	4c0b      	ldr	r4, [pc, #44]	; (8002a50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a24:	e001      	b.n	8002a2a <LoopFillZerobss>

08002a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a28:	3204      	adds	r2, #4

08002a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a2c:	d3fb      	bcc.n	8002a26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a2e:	f7ff ffd7 	bl	80029e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a32:	f003 f913 	bl	8005c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a36:	f7ff fa57 	bl	8001ee8 <main>
  bx  lr    
 8002a3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a44:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002a48:	0800aab4 	.word	0x0800aab4
  ldr r2, =_sbss
 8002a4c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002a50:	200003f4 	.word	0x200003f4

08002a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a54:	e7fe      	b.n	8002a54 <ADC_IRQHandler>
	...

08002a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_Init+0x40>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <HAL_Init+0x40>)
 8002a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_Init+0x40>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_Init+0x40>)
 8002a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <HAL_Init+0x40>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <HAL_Init+0x40>)
 8002a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a80:	2003      	movs	r0, #3
 8002a82:	f000 fd13 	bl	80034ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a86:	200f      	movs	r0, #15
 8002a88:	f000 f808 	bl	8002a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a8c:	f7ff fd3c 	bl	8002508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023c00 	.word	0x40023c00

08002a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_InitTick+0x54>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_InitTick+0x58>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	4619      	mov	r1, r3
 8002aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fd1d 	bl	80034fa <HAL_SYSTICK_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e00e      	b.n	8002ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b0f      	cmp	r3, #15
 8002ace:	d80a      	bhi.n	8002ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad8:	f000 fcf3 	bl	80034c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002adc:	4a06      	ldr	r2, [pc, #24]	; (8002af8 <HAL_InitTick+0x5c>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e000      	b.n	8002ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	2000001c 	.word	0x2000001c
 8002af4:	20000024 	.word	0x20000024
 8002af8:	20000020 	.word	0x20000020

08002afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_IncTick+0x20>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_IncTick+0x24>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <HAL_IncTick+0x24>)
 8002b0e:	6013      	str	r3, [r2, #0]
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000024 	.word	0x20000024
 8002b20:	200003cc 	.word	0x200003cc

08002b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return uwTick;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_GetTick+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	200003cc 	.word	0x200003cc

08002b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b44:	f7ff ffee 	bl	8002b24 <HAL_GetTick>
 8002b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d005      	beq.n	8002b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <HAL_Delay+0x44>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b62:	bf00      	nop
 8002b64:	f7ff ffde 	bl	8002b24 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d8f7      	bhi.n	8002b64 <HAL_Delay+0x28>
  {
  }
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000024 	.word	0x20000024

08002b84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e033      	b.n	8002c02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff fcd8 	bl	8002558 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d118      	bne.n	8002bf4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bca:	f023 0302 	bic.w	r3, r3, #2
 8002bce:	f043 0202 	orr.w	r2, r3, #2
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 faba 	bl	8003150 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f023 0303 	bic.w	r3, r3, #3
 8002bea:	f043 0201 	orr.w	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8002bf2:	e001      	b.n	8002bf8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_ADC_Start+0x1a>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e097      	b.n	8002d56 <HAL_ADC_Start+0x14a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d018      	beq.n	8002c6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c4c:	4b45      	ldr	r3, [pc, #276]	; (8002d64 <HAL_ADC_Start+0x158>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a45      	ldr	r2, [pc, #276]	; (8002d68 <HAL_ADC_Start+0x15c>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	0c9a      	lsrs	r2, r3, #18
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c60:	e002      	b.n	8002c68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f9      	bne.n	8002c62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d15f      	bne.n	8002d3c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ca6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cba:	d106      	bne.n	8002cca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	f023 0206 	bic.w	r2, r3, #6
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	645a      	str	r2, [r3, #68]	; 0x44
 8002cc8:	e002      	b.n	8002cd0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cd8:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <HAL_ADC_Start+0x160>)
 8002cda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ce4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10f      	bne.n	8002d12 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d129      	bne.n	8002d54 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	e020      	b.n	8002d54 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <HAL_ADC_Start+0x164>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d11b      	bne.n	8002d54 <HAL_ADC_Start+0x148>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d114      	bne.n	8002d54 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d38:	609a      	str	r2, [r3, #8]
 8002d3a:	e00b      	b.n	8002d54 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	f043 0210 	orr.w	r2, r3, #16
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	2000001c 	.word	0x2000001c
 8002d68:	431bde83 	.word	0x431bde83
 8002d6c:	40012300 	.word	0x40012300
 8002d70:	40012000 	.word	0x40012000

08002d74 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_ADC_Stop+0x16>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e021      	b.n	8002dce <HAL_ADC_Stop+0x5a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	f043 0201 	orr.w	r2, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df6:	d113      	bne.n	8002e20 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e06:	d10b      	bne.n	8002e20 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f043 0220 	orr.w	r2, r3, #32
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e063      	b.n	8002ee8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002e20:	f7ff fe80 	bl	8002b24 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e26:	e021      	b.n	8002e6c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2e:	d01d      	beq.n	8002e6c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <HAL_ADC_PollForConversion+0x6c>
 8002e36:	f7ff fe75 	bl	8002b24 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d212      	bcs.n	8002e6c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d00b      	beq.n	8002e6c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f043 0204 	orr.w	r2, r3, #4
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e03d      	b.n	8002ee8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d1d6      	bne.n	8002e28 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f06f 0212 	mvn.w	r2, #18
 8002e82:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d123      	bne.n	8002ee6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d11f      	bne.n	8002ee6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d006      	beq.n	8002ec2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d111      	bne.n	8002ee6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d105      	bne.n	8002ee6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f043 0201 	orr.w	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x1c>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e105      	b.n	8003134 <HAL_ADC_ConfigChannel+0x228>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b09      	cmp	r3, #9
 8002f36:	d925      	bls.n	8002f84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68d9      	ldr	r1, [r3, #12]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	4613      	mov	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3b1e      	subs	r3, #30
 8002f4e:	2207      	movs	r2, #7
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43da      	mvns	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68d9      	ldr	r1, [r3, #12]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	4618      	mov	r0, r3
 8002f70:	4603      	mov	r3, r0
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4403      	add	r3, r0
 8002f76:	3b1e      	subs	r3, #30
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	e022      	b.n	8002fca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6919      	ldr	r1, [r3, #16]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	461a      	mov	r2, r3
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	2207      	movs	r2, #7
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6919      	ldr	r1, [r3, #16]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	4618      	mov	r0, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	4403      	add	r3, r0
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d824      	bhi.n	800301c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3b05      	subs	r3, #5
 8002fe4:	221f      	movs	r2, #31
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43da      	mvns	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	400a      	ands	r2, r1
 8002ff2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	4618      	mov	r0, r3
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	3b05      	subs	r3, #5
 800300e:	fa00 f203 	lsl.w	r2, r0, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	635a      	str	r2, [r3, #52]	; 0x34
 800301a:	e04c      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b0c      	cmp	r3, #12
 8003022:	d824      	bhi.n	800306e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	3b23      	subs	r3, #35	; 0x23
 8003036:	221f      	movs	r2, #31
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43da      	mvns	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	400a      	ands	r2, r1
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	4618      	mov	r0, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	3b23      	subs	r3, #35	; 0x23
 8003060:	fa00 f203 	lsl.w	r2, r0, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
 800306c:	e023      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	3b41      	subs	r3, #65	; 0x41
 8003080:	221f      	movs	r2, #31
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43da      	mvns	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	400a      	ands	r2, r1
 800308e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	b29b      	uxth	r3, r3
 800309c:	4618      	mov	r0, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	3b41      	subs	r3, #65	; 0x41
 80030aa:	fa00 f203 	lsl.w	r2, r0, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030b6:	4b22      	ldr	r3, [pc, #136]	; (8003140 <HAL_ADC_ConfigChannel+0x234>)
 80030b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a21      	ldr	r2, [pc, #132]	; (8003144 <HAL_ADC_ConfigChannel+0x238>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d109      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x1cc>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b12      	cmp	r3, #18
 80030ca:	d105      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a19      	ldr	r2, [pc, #100]	; (8003144 <HAL_ADC_ConfigChannel+0x238>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d123      	bne.n	800312a <HAL_ADC_ConfigChannel+0x21e>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b10      	cmp	r3, #16
 80030e8:	d003      	beq.n	80030f2 <HAL_ADC_ConfigChannel+0x1e6>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b11      	cmp	r3, #17
 80030f0:	d11b      	bne.n	800312a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b10      	cmp	r3, #16
 8003104:	d111      	bne.n	800312a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <HAL_ADC_ConfigChannel+0x23c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a10      	ldr	r2, [pc, #64]	; (800314c <HAL_ADC_ConfigChannel+0x240>)
 800310c:	fba2 2303 	umull	r2, r3, r2, r3
 8003110:	0c9a      	lsrs	r2, r3, #18
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800311c:	e002      	b.n	8003124 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	3b01      	subs	r3, #1
 8003122:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f9      	bne.n	800311e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	40012300 	.word	0x40012300
 8003144:	40012000 	.word	0x40012000
 8003148:	2000001c 	.word	0x2000001c
 800314c:	431bde83 	.word	0x431bde83

08003150 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003158:	4b79      	ldr	r3, [pc, #484]	; (8003340 <ADC_Init+0x1f0>)
 800315a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	431a      	orrs	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	021a      	lsls	r2, r3, #8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6899      	ldr	r1, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	4a58      	ldr	r2, [pc, #352]	; (8003344 <ADC_Init+0x1f4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d022      	beq.n	800322e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6899      	ldr	r1, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6899      	ldr	r1, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	e00f      	b.n	800324e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800323c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800324c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0202 	bic.w	r2, r2, #2
 800325c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6899      	ldr	r1, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	7e1b      	ldrb	r3, [r3, #24]
 8003268:	005a      	lsls	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01b      	beq.n	80032b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800328a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800329a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6859      	ldr	r1, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	3b01      	subs	r3, #1
 80032a8:	035a      	lsls	r2, r3, #13
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	e007      	b.n	80032c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	3b01      	subs	r3, #1
 80032e0:	051a      	lsls	r2, r3, #20
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6899      	ldr	r1, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003306:	025a      	lsls	r2, r3, #9
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6899      	ldr	r1, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	029a      	lsls	r2, r3, #10
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	609a      	str	r2, [r3, #8]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	40012300 	.word	0x40012300
 8003344:	0f000001 	.word	0x0f000001

08003348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <__NVIC_SetPriorityGrouping+0x44>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003364:	4013      	ands	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800337a:	4a04      	ldr	r2, [pc, #16]	; (800338c <__NVIC_SetPriorityGrouping+0x44>)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	60d3      	str	r3, [r2, #12]
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 0307 	and.w	r3, r3, #7
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	6039      	str	r1, [r7, #0]
 80033b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	db0a      	blt.n	80033d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	490c      	ldr	r1, [pc, #48]	; (80033f8 <__NVIC_SetPriority+0x4c>)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	0112      	lsls	r2, r2, #4
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	440b      	add	r3, r1
 80033d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d4:	e00a      	b.n	80033ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	4908      	ldr	r1, [pc, #32]	; (80033fc <__NVIC_SetPriority+0x50>)
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	3b04      	subs	r3, #4
 80033e4:	0112      	lsls	r2, r2, #4
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	440b      	add	r3, r1
 80033ea:	761a      	strb	r2, [r3, #24]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000e100 	.word	0xe000e100
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f1c3 0307 	rsb	r3, r3, #7
 800341a:	2b04      	cmp	r3, #4
 800341c:	bf28      	it	cs
 800341e:	2304      	movcs	r3, #4
 8003420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3304      	adds	r3, #4
 8003426:	2b06      	cmp	r3, #6
 8003428:	d902      	bls.n	8003430 <NVIC_EncodePriority+0x30>
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3b03      	subs	r3, #3
 800342e:	e000      	b.n	8003432 <NVIC_EncodePriority+0x32>
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003434:	f04f 32ff 	mov.w	r2, #4294967295
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43da      	mvns	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	401a      	ands	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003448:	f04f 31ff 	mov.w	r1, #4294967295
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	43d9      	mvns	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003458:	4313      	orrs	r3, r2
         );
}
 800345a:	4618      	mov	r0, r3
 800345c:	3724      	adds	r7, #36	; 0x24
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003478:	d301      	bcc.n	800347e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800347a:	2301      	movs	r3, #1
 800347c:	e00f      	b.n	800349e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800347e:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <SysTick_Config+0x40>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3b01      	subs	r3, #1
 8003484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003486:	210f      	movs	r1, #15
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	f7ff ff8e 	bl	80033ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003490:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <SysTick_Config+0x40>)
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003496:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <SysTick_Config+0x40>)
 8003498:	2207      	movs	r2, #7
 800349a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	e000e010 	.word	0xe000e010

080034ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff47 	bl	8003348 <__NVIC_SetPriorityGrouping>
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	4603      	mov	r3, r0
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034d4:	f7ff ff5c 	bl	8003390 <__NVIC_GetPriorityGrouping>
 80034d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	6978      	ldr	r0, [r7, #20]
 80034e0:	f7ff ff8e 	bl	8003400 <NVIC_EncodePriority>
 80034e4:	4602      	mov	r2, r0
 80034e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ea:	4611      	mov	r1, r2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ff5d 	bl	80033ac <__NVIC_SetPriority>
}
 80034f2:	bf00      	nop
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff ffb0 	bl	8003468 <SysTick_Config>
 8003508:	4603      	mov	r3, r0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	; 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	e159      	b.n	80037e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003530:	2201      	movs	r2, #1
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	429a      	cmp	r2, r3
 800354a:	f040 8148 	bne.w	80037de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d005      	beq.n	8003566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003562:	2b02      	cmp	r3, #2
 8003564:	d130      	bne.n	80035c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	2203      	movs	r2, #3
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800359c:	2201      	movs	r2, #1
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 0201 	and.w	r2, r3, #1
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d017      	beq.n	8003604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2203      	movs	r2, #3
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d123      	bne.n	8003658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	08da      	lsrs	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3208      	adds	r2, #8
 8003618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	220f      	movs	r2, #15
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	08da      	lsrs	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3208      	adds	r2, #8
 8003652:	69b9      	ldr	r1, [r7, #24]
 8003654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	2203      	movs	r2, #3
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0203 	and.w	r2, r3, #3
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80a2 	beq.w	80037de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	4b57      	ldr	r3, [pc, #348]	; (80037fc <HAL_GPIO_Init+0x2e8>)
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	4a56      	ldr	r2, [pc, #344]	; (80037fc <HAL_GPIO_Init+0x2e8>)
 80036a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036a8:	6453      	str	r3, [r2, #68]	; 0x44
 80036aa:	4b54      	ldr	r3, [pc, #336]	; (80037fc <HAL_GPIO_Init+0x2e8>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036b6:	4a52      	ldr	r2, [pc, #328]	; (8003800 <HAL_GPIO_Init+0x2ec>)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	089b      	lsrs	r3, r3, #2
 80036bc:	3302      	adds	r3, #2
 80036be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	220f      	movs	r2, #15
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4013      	ands	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a49      	ldr	r2, [pc, #292]	; (8003804 <HAL_GPIO_Init+0x2f0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d019      	beq.n	8003716 <HAL_GPIO_Init+0x202>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a48      	ldr	r2, [pc, #288]	; (8003808 <HAL_GPIO_Init+0x2f4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <HAL_GPIO_Init+0x1fe>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a47      	ldr	r2, [pc, #284]	; (800380c <HAL_GPIO_Init+0x2f8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00d      	beq.n	800370e <HAL_GPIO_Init+0x1fa>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a46      	ldr	r2, [pc, #280]	; (8003810 <HAL_GPIO_Init+0x2fc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d007      	beq.n	800370a <HAL_GPIO_Init+0x1f6>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a45      	ldr	r2, [pc, #276]	; (8003814 <HAL_GPIO_Init+0x300>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d101      	bne.n	8003706 <HAL_GPIO_Init+0x1f2>
 8003702:	2304      	movs	r3, #4
 8003704:	e008      	b.n	8003718 <HAL_GPIO_Init+0x204>
 8003706:	2307      	movs	r3, #7
 8003708:	e006      	b.n	8003718 <HAL_GPIO_Init+0x204>
 800370a:	2303      	movs	r3, #3
 800370c:	e004      	b.n	8003718 <HAL_GPIO_Init+0x204>
 800370e:	2302      	movs	r3, #2
 8003710:	e002      	b.n	8003718 <HAL_GPIO_Init+0x204>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <HAL_GPIO_Init+0x204>
 8003716:	2300      	movs	r3, #0
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	f002 0203 	and.w	r2, r2, #3
 800371e:	0092      	lsls	r2, r2, #2
 8003720:	4093      	lsls	r3, r2
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4313      	orrs	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003728:	4935      	ldr	r1, [pc, #212]	; (8003800 <HAL_GPIO_Init+0x2ec>)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	089b      	lsrs	r3, r3, #2
 800372e:	3302      	adds	r3, #2
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003736:	4b38      	ldr	r3, [pc, #224]	; (8003818 <HAL_GPIO_Init+0x304>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800375a:	4a2f      	ldr	r2, [pc, #188]	; (8003818 <HAL_GPIO_Init+0x304>)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003760:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <HAL_GPIO_Init+0x304>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003784:	4a24      	ldr	r2, [pc, #144]	; (8003818 <HAL_GPIO_Init+0x304>)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800378a:	4b23      	ldr	r3, [pc, #140]	; (8003818 <HAL_GPIO_Init+0x304>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ae:	4a1a      	ldr	r2, [pc, #104]	; (8003818 <HAL_GPIO_Init+0x304>)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037b4:	4b18      	ldr	r3, [pc, #96]	; (8003818 <HAL_GPIO_Init+0x304>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037d8:	4a0f      	ldr	r2, [pc, #60]	; (8003818 <HAL_GPIO_Init+0x304>)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3301      	adds	r3, #1
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	2b0f      	cmp	r3, #15
 80037e8:	f67f aea2 	bls.w	8003530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	3724      	adds	r7, #36	; 0x24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800
 8003800:	40013800 	.word	0x40013800
 8003804:	40020000 	.word	0x40020000
 8003808:	40020400 	.word	0x40020400
 800380c:	40020800 	.word	0x40020800
 8003810:	40020c00 	.word	0x40020c00
 8003814:	40021000 	.word	0x40021000
 8003818:	40013c00 	.word	0x40013c00

0800381c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	887b      	ldrh	r3, [r7, #2]
 800382e:	4013      	ands	r3, r2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
 8003838:	e001      	b.n	800383e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800383e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	807b      	strh	r3, [r7, #2]
 8003858:	4613      	mov	r3, r2
 800385a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800385c:	787b      	ldrb	r3, [r7, #1]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003862:	887a      	ldrh	r2, [r7, #2]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003868:	e003      	b.n	8003872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800386a:	887b      	ldrh	r3, [r7, #2]
 800386c:	041a      	lsls	r2, r3, #16
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	619a      	str	r2, [r3, #24]
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e12b      	b.n	8003aea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fe fe9a 	bl	80025e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2224      	movs	r2, #36	; 0x24
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038e4:	f001 fd7c 	bl	80053e0 <HAL_RCC_GetPCLK1Freq>
 80038e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4a81      	ldr	r2, [pc, #516]	; (8003af4 <HAL_I2C_Init+0x274>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d807      	bhi.n	8003904 <HAL_I2C_Init+0x84>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a80      	ldr	r2, [pc, #512]	; (8003af8 <HAL_I2C_Init+0x278>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	bf94      	ite	ls
 80038fc:	2301      	movls	r3, #1
 80038fe:	2300      	movhi	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e006      	b.n	8003912 <HAL_I2C_Init+0x92>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a7d      	ldr	r2, [pc, #500]	; (8003afc <HAL_I2C_Init+0x27c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	bf94      	ite	ls
 800390c:	2301      	movls	r3, #1
 800390e:	2300      	movhi	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e0e7      	b.n	8003aea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a78      	ldr	r2, [pc, #480]	; (8003b00 <HAL_I2C_Init+0x280>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	0c9b      	lsrs	r3, r3, #18
 8003924:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4a6a      	ldr	r2, [pc, #424]	; (8003af4 <HAL_I2C_Init+0x274>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d802      	bhi.n	8003954 <HAL_I2C_Init+0xd4>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	3301      	adds	r3, #1
 8003952:	e009      	b.n	8003968 <HAL_I2C_Init+0xe8>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	4a69      	ldr	r2, [pc, #420]	; (8003b04 <HAL_I2C_Init+0x284>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	3301      	adds	r3, #1
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	430b      	orrs	r3, r1
 800396e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800397a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	495c      	ldr	r1, [pc, #368]	; (8003af4 <HAL_I2C_Init+0x274>)
 8003984:	428b      	cmp	r3, r1
 8003986:	d819      	bhi.n	80039bc <HAL_I2C_Init+0x13c>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e59      	subs	r1, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	fbb1 f3f3 	udiv	r3, r1, r3
 8003996:	1c59      	adds	r1, r3, #1
 8003998:	f640 73fc 	movw	r3, #4092	; 0xffc
 800399c:	400b      	ands	r3, r1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_I2C_Init+0x138>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1e59      	subs	r1, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80039b0:	3301      	adds	r3, #1
 80039b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b6:	e051      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 80039b8:	2304      	movs	r3, #4
 80039ba:	e04f      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d111      	bne.n	80039e8 <HAL_I2C_Init+0x168>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1e58      	subs	r0, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	440b      	add	r3, r1
 80039d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	e012      	b.n	8003a0e <HAL_I2C_Init+0x18e>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1e58      	subs	r0, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	0099      	lsls	r1, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fe:	3301      	adds	r3, #1
 8003a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_Init+0x196>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e022      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10e      	bne.n	8003a3c <HAL_I2C_Init+0x1bc>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1e58      	subs	r0, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	440b      	add	r3, r1
 8003a2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3a:	e00f      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1e58      	subs	r0, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	0099      	lsls	r1, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	6809      	ldr	r1, [r1, #0]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6911      	ldr	r1, [r2, #16]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68d2      	ldr	r2, [r2, #12]
 8003a96:	4311      	orrs	r1, r2
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	000186a0 	.word	0x000186a0
 8003af8:	001e847f 	.word	0x001e847f
 8003afc:	003d08ff 	.word	0x003d08ff
 8003b00:	431bde83 	.word	0x431bde83
 8003b04:	10624dd3 	.word	0x10624dd3

08003b08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	461a      	mov	r2, r3
 8003b14:	460b      	mov	r3, r1
 8003b16:	817b      	strh	r3, [r7, #10]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b1c:	f7ff f802 	bl	8002b24 <HAL_GetTick>
 8003b20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	f040 80e0 	bne.w	8003cf0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	2319      	movs	r3, #25
 8003b36:	2201      	movs	r2, #1
 8003b38:	4970      	ldr	r1, [pc, #448]	; (8003cfc <HAL_I2C_Master_Transmit+0x1f4>)
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fe02 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b46:	2302      	movs	r3, #2
 8003b48:	e0d3      	b.n	8003cf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_I2C_Master_Transmit+0x50>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e0cc      	b.n	8003cf2 <HAL_I2C_Master_Transmit+0x1ea>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d007      	beq.n	8003b7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2221      	movs	r2, #33	; 0x21
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2210      	movs	r2, #16
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	893a      	ldrh	r2, [r7, #8]
 8003bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a50      	ldr	r2, [pc, #320]	; (8003d00 <HAL_I2C_Master_Transmit+0x1f8>)
 8003bbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bc0:	8979      	ldrh	r1, [r7, #10]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	6a3a      	ldr	r2, [r7, #32]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fbbc 	bl	8004344 <I2C_MasterRequestWrite>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e08d      	b.n	8003cf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bec:	e066      	b.n	8003cbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	6a39      	ldr	r1, [r7, #32]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fe7c 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d107      	bne.n	8003c16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e06b      	b.n	8003cf2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	781a      	ldrb	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d11b      	bne.n	8003c90 <HAL_I2C_Master_Transmit+0x188>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d017      	beq.n	8003c90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	781a      	ldrb	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	6a39      	ldr	r1, [r7, #32]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fe6c 	bl	8004972 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00d      	beq.n	8003cbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d107      	bne.n	8003cb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e01a      	b.n	8003cf2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d194      	bne.n	8003bee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e000      	b.n	8003cf2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cf0:	2302      	movs	r3, #2
  }
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	00100002 	.word	0x00100002
 8003d00:	ffff0000 	.word	0xffff0000

08003d04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	4611      	mov	r1, r2
 8003d10:	461a      	mov	r2, r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	817b      	strh	r3, [r7, #10]
 8003d16:	460b      	mov	r3, r1
 8003d18:	813b      	strh	r3, [r7, #8]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d1e:	f7fe ff01 	bl	8002b24 <HAL_GetTick>
 8003d22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	f040 80d9 	bne.w	8003ee4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	2319      	movs	r3, #25
 8003d38:	2201      	movs	r2, #1
 8003d3a:	496d      	ldr	r1, [pc, #436]	; (8003ef0 <HAL_I2C_Mem_Write+0x1ec>)
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fd01 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e0cc      	b.n	8003ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_I2C_Mem_Write+0x56>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e0c5      	b.n	8003ee6 <HAL_I2C_Mem_Write+0x1e2>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d007      	beq.n	8003d80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2221      	movs	r2, #33	; 0x21
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2240      	movs	r2, #64	; 0x40
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a3a      	ldr	r2, [r7, #32]
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a4d      	ldr	r2, [pc, #308]	; (8003ef4 <HAL_I2C_Mem_Write+0x1f0>)
 8003dc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dc2:	88f8      	ldrh	r0, [r7, #6]
 8003dc4:	893a      	ldrh	r2, [r7, #8]
 8003dc6:	8979      	ldrh	r1, [r7, #10]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fb38 	bl	8004448 <I2C_RequestMemoryWrite>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d052      	beq.n	8003e84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e081      	b.n	8003ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fd82 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00d      	beq.n	8003e0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d107      	bne.n	8003e0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e06b      	b.n	8003ee6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	781a      	ldrb	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d11b      	bne.n	8003e84 <HAL_I2C_Mem_Write+0x180>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d017      	beq.n	8003e84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	781a      	ldrb	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1aa      	bne.n	8003de2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 fd6e 	bl	8004972 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00d      	beq.n	8003eb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d107      	bne.n	8003eb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e016      	b.n	8003ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e000      	b.n	8003ee6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
  }
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	00100002 	.word	0x00100002
 8003ef4:	ffff0000 	.word	0xffff0000

08003ef8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08c      	sub	sp, #48	; 0x30
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	4608      	mov	r0, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	461a      	mov	r2, r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	817b      	strh	r3, [r7, #10]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	813b      	strh	r3, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f12:	f7fe fe07 	bl	8002b24 <HAL_GetTick>
 8003f16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	f040 8208 	bne.w	8004336 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	2319      	movs	r3, #25
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	497b      	ldr	r1, [pc, #492]	; (800411c <HAL_I2C_Mem_Read+0x224>)
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fc07 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e1fb      	b.n	8004338 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_I2C_Mem_Read+0x56>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e1f4      	b.n	8004338 <HAL_I2C_Mem_Read+0x440>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d007      	beq.n	8003f74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2222      	movs	r2, #34	; 0x22
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2240      	movs	r2, #64	; 0x40
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a5b      	ldr	r2, [pc, #364]	; (8004120 <HAL_I2C_Mem_Read+0x228>)
 8003fb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fb6:	88f8      	ldrh	r0, [r7, #6]
 8003fb8:	893a      	ldrh	r2, [r7, #8]
 8003fba:	8979      	ldrh	r1, [r7, #10]
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 fad4 	bl	8004574 <I2C_RequestMemoryRead>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e1b0      	b.n	8004338 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d113      	bne.n	8004006 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	623b      	str	r3, [r7, #32]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	623b      	str	r3, [r7, #32]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	623b      	str	r3, [r7, #32]
 8003ff2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	e184      	b.n	8004310 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400a:	2b01      	cmp	r3, #1
 800400c:	d11b      	bne.n	8004046 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	61fb      	str	r3, [r7, #28]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	e164      	b.n	8004310 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404a:	2b02      	cmp	r3, #2
 800404c:	d11b      	bne.n	8004086 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800406c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406e:	2300      	movs	r3, #0
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	e144      	b.n	8004310 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800409c:	e138      	b.n	8004310 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	f200 80f1 	bhi.w	800428a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d123      	bne.n	80040f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 fc9d 	bl	80049f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e139      	b.n	8004338 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040f6:	e10b      	b.n	8004310 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d14e      	bne.n	800419e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004106:	2200      	movs	r2, #0
 8004108:	4906      	ldr	r1, [pc, #24]	; (8004124 <HAL_I2C_Mem_Read+0x22c>)
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fb1a 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d008      	beq.n	8004128 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e10e      	b.n	8004338 <HAL_I2C_Mem_Read+0x440>
 800411a:	bf00      	nop
 800411c:	00100002 	.word	0x00100002
 8004120:	ffff0000 	.word	0xffff0000
 8004124:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004136:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800419c:	e0b8      	b.n	8004310 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	2200      	movs	r2, #0
 80041a6:	4966      	ldr	r1, [pc, #408]	; (8004340 <HAL_I2C_Mem_Read+0x448>)
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 facb 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0bf      	b.n	8004338 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004200:	2200      	movs	r2, #0
 8004202:	494f      	ldr	r1, [pc, #316]	; (8004340 <HAL_I2C_Mem_Read+0x448>)
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fa9d 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e091      	b.n	8004338 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004288:	e042      	b.n	8004310 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800428a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 fbb0 	bl	80049f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e04c      	b.n	8004338 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d118      	bne.n	8004310 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004314:	2b00      	cmp	r3, #0
 8004316:	f47f aec2 	bne.w	800409e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	e000      	b.n	8004338 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004336:	2302      	movs	r3, #2
  }
}
 8004338:	4618      	mov	r0, r3
 800433a:	3728      	adds	r7, #40	; 0x28
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	00010004 	.word	0x00010004

08004344 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af02      	add	r7, sp, #8
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	607a      	str	r2, [r7, #4]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	460b      	mov	r3, r1
 8004352:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b08      	cmp	r3, #8
 800435e:	d006      	beq.n	800436e <I2C_MasterRequestWrite+0x2a>
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d003      	beq.n	800436e <I2C_MasterRequestWrite+0x2a>
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800436c:	d108      	bne.n	8004380 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e00b      	b.n	8004398 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	2b12      	cmp	r3, #18
 8004386:	d107      	bne.n	8004398 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004396:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f9cd 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00d      	beq.n	80043cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043be:	d103      	bne.n	80043c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e035      	b.n	8004438 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043d4:	d108      	bne.n	80043e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043d6:	897b      	ldrh	r3, [r7, #10]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043e4:	611a      	str	r2, [r3, #16]
 80043e6:	e01b      	b.n	8004420 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043e8:	897b      	ldrh	r3, [r7, #10]
 80043ea:	11db      	asrs	r3, r3, #7
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f003 0306 	and.w	r3, r3, #6
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f063 030f 	orn	r3, r3, #15
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	490e      	ldr	r1, [pc, #56]	; (8004440 <I2C_MasterRequestWrite+0xfc>)
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f9f3 	bl	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e010      	b.n	8004438 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004416:	897b      	ldrh	r3, [r7, #10]
 8004418:	b2da      	uxtb	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	4907      	ldr	r1, [pc, #28]	; (8004444 <I2C_MasterRequestWrite+0x100>)
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f9e3 	bl	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	00010008 	.word	0x00010008
 8004444:	00010002 	.word	0x00010002

08004448 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	4608      	mov	r0, r1
 8004452:	4611      	mov	r1, r2
 8004454:	461a      	mov	r2, r3
 8004456:	4603      	mov	r3, r0
 8004458:	817b      	strh	r3, [r7, #10]
 800445a:	460b      	mov	r3, r1
 800445c:	813b      	strh	r3, [r7, #8]
 800445e:	4613      	mov	r3, r2
 8004460:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004470:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	2200      	movs	r2, #0
 800447a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 f960 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00d      	beq.n	80044a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004498:	d103      	bne.n	80044a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e05f      	b.n	8004566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044a6:	897b      	ldrh	r3, [r7, #10]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	6a3a      	ldr	r2, [r7, #32]
 80044ba:	492d      	ldr	r1, [pc, #180]	; (8004570 <I2C_RequestMemoryWrite+0x128>)
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f998 	bl	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e04c      	b.n	8004566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e4:	6a39      	ldr	r1, [r7, #32]
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fa02 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00d      	beq.n	800450e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d107      	bne.n	800450a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004508:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e02b      	b.n	8004566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d105      	bne.n	8004520 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004514:	893b      	ldrh	r3, [r7, #8]
 8004516:	b2da      	uxtb	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	611a      	str	r2, [r3, #16]
 800451e:	e021      	b.n	8004564 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004520:	893b      	ldrh	r3, [r7, #8]
 8004522:	0a1b      	lsrs	r3, r3, #8
 8004524:	b29b      	uxth	r3, r3
 8004526:	b2da      	uxtb	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800452e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004530:	6a39      	ldr	r1, [r7, #32]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f9dc 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00d      	beq.n	800455a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	2b04      	cmp	r3, #4
 8004544:	d107      	bne.n	8004556 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004554:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e005      	b.n	8004566 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800455a:	893b      	ldrh	r3, [r7, #8]
 800455c:	b2da      	uxtb	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	00010002 	.word	0x00010002

08004574 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	4608      	mov	r0, r1
 800457e:	4611      	mov	r1, r2
 8004580:	461a      	mov	r2, r3
 8004582:	4603      	mov	r3, r0
 8004584:	817b      	strh	r3, [r7, #10]
 8004586:	460b      	mov	r3, r1
 8004588:	813b      	strh	r3, [r7, #8]
 800458a:	4613      	mov	r3, r2
 800458c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800459c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f8c2 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00d      	beq.n	80045e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d4:	d103      	bne.n	80045de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e0aa      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045e2:	897b      	ldrh	r3, [r7, #10]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	6a3a      	ldr	r2, [r7, #32]
 80045f6:	4952      	ldr	r1, [pc, #328]	; (8004740 <I2C_RequestMemoryRead+0x1cc>)
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f8fa 	bl	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e097      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	6a39      	ldr	r1, [r7, #32]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f964 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00d      	beq.n	800464a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	2b04      	cmp	r3, #4
 8004634:	d107      	bne.n	8004646 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e076      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d105      	bne.n	800465c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004650:	893b      	ldrh	r3, [r7, #8]
 8004652:	b2da      	uxtb	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	611a      	str	r2, [r3, #16]
 800465a:	e021      	b.n	80046a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800465c:	893b      	ldrh	r3, [r7, #8]
 800465e:	0a1b      	lsrs	r3, r3, #8
 8004660:	b29b      	uxth	r3, r3
 8004662:	b2da      	uxtb	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800466a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466c:	6a39      	ldr	r1, [r7, #32]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f93e 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00d      	beq.n	8004696 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	2b04      	cmp	r3, #4
 8004680:	d107      	bne.n	8004692 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e050      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004696:	893b      	ldrh	r3, [r7, #8]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a2:	6a39      	ldr	r1, [r7, #32]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f923 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00d      	beq.n	80046cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d107      	bne.n	80046c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e035      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f82b 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00d      	beq.n	8004710 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004702:	d103      	bne.n	800470c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800470a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e013      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004710:	897b      	ldrh	r3, [r7, #10]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	b2da      	uxtb	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	6a3a      	ldr	r2, [r7, #32]
 8004724:	4906      	ldr	r1, [pc, #24]	; (8004740 <I2C_RequestMemoryRead+0x1cc>)
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 f863 	bl	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	00010002 	.word	0x00010002

08004744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	603b      	str	r3, [r7, #0]
 8004750:	4613      	mov	r3, r2
 8004752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004754:	e025      	b.n	80047a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d021      	beq.n	80047a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800475e:	f7fe f9e1 	bl	8002b24 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d302      	bcc.n	8004774 <I2C_WaitOnFlagUntilTimeout+0x30>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d116      	bne.n	80047a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f043 0220 	orr.w	r2, r3, #32
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e023      	b.n	80047ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	0c1b      	lsrs	r3, r3, #16
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d10d      	bne.n	80047c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	43da      	mvns	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4013      	ands	r3, r2
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bf0c      	ite	eq
 80047be:	2301      	moveq	r3, #1
 80047c0:	2300      	movne	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	e00c      	b.n	80047e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	43da      	mvns	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4013      	ands	r3, r2
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bf0c      	ite	eq
 80047da:	2301      	moveq	r3, #1
 80047dc:	2300      	movne	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d0b6      	beq.n	8004756 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004800:	e051      	b.n	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004810:	d123      	bne.n	800485a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004820:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800482a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f043 0204 	orr.w	r2, r3, #4
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e046      	b.n	80048e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004860:	d021      	beq.n	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004862:	f7fe f95f 	bl	8002b24 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	d302      	bcc.n	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d116      	bne.n	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f043 0220 	orr.w	r2, r3, #32
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e020      	b.n	80048e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d10c      	bne.n	80048ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	43da      	mvns	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4013      	ands	r3, r2
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bf14      	ite	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	2300      	moveq	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	e00b      	b.n	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	43da      	mvns	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4013      	ands	r3, r2
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d18d      	bne.n	8004802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048fc:	e02d      	b.n	800495a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f8ce 	bl	8004aa0 <I2C_IsAcknowledgeFailed>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e02d      	b.n	800496a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d021      	beq.n	800495a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004916:	f7fe f905 	bl	8002b24 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	429a      	cmp	r2, r3
 8004924:	d302      	bcc.n	800492c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d116      	bne.n	800495a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f043 0220 	orr.w	r2, r3, #32
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e007      	b.n	800496a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004964:	2b80      	cmp	r3, #128	; 0x80
 8004966:	d1ca      	bne.n	80048fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800497e:	e02d      	b.n	80049dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f88d 	bl	8004aa0 <I2C_IsAcknowledgeFailed>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e02d      	b.n	80049ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d021      	beq.n	80049dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004998:	f7fe f8c4 	bl	8002b24 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d302      	bcc.n	80049ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d116      	bne.n	80049dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	f043 0220 	orr.w	r2, r3, #32
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e007      	b.n	80049ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d1ca      	bne.n	8004980 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a00:	e042      	b.n	8004a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	d119      	bne.n	8004a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0210 	mvn.w	r2, #16
 8004a18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e029      	b.n	8004a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a44:	f7fe f86e 	bl	8002b24 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d302      	bcc.n	8004a5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d116      	bne.n	8004a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	f043 0220 	orr.w	r2, r3, #32
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e007      	b.n	8004a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b40      	cmp	r3, #64	; 0x40
 8004a94:	d1b5      	bne.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab6:	d11b      	bne.n	8004af0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ac0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	f043 0204 	orr.w	r2, r3, #4
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
	...

08004b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e267      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d075      	beq.n	8004c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b1e:	4b88      	ldr	r3, [pc, #544]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d00c      	beq.n	8004b44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b2a:	4b85      	ldr	r3, [pc, #532]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d112      	bne.n	8004b5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b36:	4b82      	ldr	r3, [pc, #520]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b42:	d10b      	bne.n	8004b5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b44:	4b7e      	ldr	r3, [pc, #504]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d05b      	beq.n	8004c08 <HAL_RCC_OscConfig+0x108>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d157      	bne.n	8004c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e242      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b64:	d106      	bne.n	8004b74 <HAL_RCC_OscConfig+0x74>
 8004b66:	4b76      	ldr	r3, [pc, #472]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a75      	ldr	r2, [pc, #468]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e01d      	b.n	8004bb0 <HAL_RCC_OscConfig+0xb0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x98>
 8004b7e:	4b70      	ldr	r3, [pc, #448]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a6f      	ldr	r2, [pc, #444]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	4b6d      	ldr	r3, [pc, #436]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a6c      	ldr	r2, [pc, #432]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	e00b      	b.n	8004bb0 <HAL_RCC_OscConfig+0xb0>
 8004b98:	4b69      	ldr	r3, [pc, #420]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a68      	ldr	r2, [pc, #416]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	4b66      	ldr	r3, [pc, #408]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a65      	ldr	r2, [pc, #404]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d013      	beq.n	8004be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb8:	f7fd ffb4 	bl	8002b24 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc0:	f7fd ffb0 	bl	8002b24 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b64      	cmp	r3, #100	; 0x64
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e207      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd2:	4b5b      	ldr	r3, [pc, #364]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0xc0>
 8004bde:	e014      	b.n	8004c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be0:	f7fd ffa0 	bl	8002b24 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004be8:	f7fd ff9c 	bl	8002b24 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	; 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e1f3      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bfa:	4b51      	ldr	r3, [pc, #324]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0xe8>
 8004c06:	e000      	b.n	8004c0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d063      	beq.n	8004cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c16:	4b4a      	ldr	r3, [pc, #296]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c22:	4b47      	ldr	r3, [pc, #284]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d11c      	bne.n	8004c68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c2e:	4b44      	ldr	r3, [pc, #272]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d116      	bne.n	8004c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c3a:	4b41      	ldr	r3, [pc, #260]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_RCC_OscConfig+0x152>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d001      	beq.n	8004c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e1c7      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c52:	4b3b      	ldr	r3, [pc, #236]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4937      	ldr	r1, [pc, #220]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c66:	e03a      	b.n	8004cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d020      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c70:	4b34      	ldr	r3, [pc, #208]	; (8004d44 <HAL_RCC_OscConfig+0x244>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c76:	f7fd ff55 	bl	8002b24 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c7e:	f7fd ff51 	bl	8002b24 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e1a8      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c90:	4b2b      	ldr	r3, [pc, #172]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9c:	4b28      	ldr	r3, [pc, #160]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4925      	ldr	r1, [pc, #148]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]
 8004cb0:	e015      	b.n	8004cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb2:	4b24      	ldr	r3, [pc, #144]	; (8004d44 <HAL_RCC_OscConfig+0x244>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fd ff34 	bl	8002b24 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cc0:	f7fd ff30 	bl	8002b24 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e187      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d036      	beq.n	8004d58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d016      	beq.n	8004d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cf2:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <HAL_RCC_OscConfig+0x248>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf8:	f7fd ff14 	bl	8002b24 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d00:	f7fd ff10 	bl	8002b24 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e167      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d12:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x200>
 8004d1e:	e01b      	b.n	8004d58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d20:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <HAL_RCC_OscConfig+0x248>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d26:	f7fd fefd 	bl	8002b24 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d2c:	e00e      	b.n	8004d4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d2e:	f7fd fef9 	bl	8002b24 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d907      	bls.n	8004d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e150      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
 8004d40:	40023800 	.word	0x40023800
 8004d44:	42470000 	.word	0x42470000
 8004d48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d4c:	4b88      	ldr	r3, [pc, #544]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1ea      	bne.n	8004d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8097 	beq.w	8004e94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d6a:	4b81      	ldr	r3, [pc, #516]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10f      	bne.n	8004d96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	4b7d      	ldr	r3, [pc, #500]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	4a7c      	ldr	r2, [pc, #496]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d84:	6413      	str	r3, [r2, #64]	; 0x40
 8004d86:	4b7a      	ldr	r3, [pc, #488]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d92:	2301      	movs	r3, #1
 8004d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d96:	4b77      	ldr	r3, [pc, #476]	; (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d118      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004da2:	4b74      	ldr	r3, [pc, #464]	; (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a73      	ldr	r2, [pc, #460]	; (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dae:	f7fd feb9 	bl	8002b24 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db6:	f7fd feb5 	bl	8002b24 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e10c      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc8:	4b6a      	ldr	r3, [pc, #424]	; (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d106      	bne.n	8004dea <HAL_RCC_OscConfig+0x2ea>
 8004ddc:	4b64      	ldr	r3, [pc, #400]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	4a63      	ldr	r2, [pc, #396]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	6713      	str	r3, [r2, #112]	; 0x70
 8004de8:	e01c      	b.n	8004e24 <HAL_RCC_OscConfig+0x324>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b05      	cmp	r3, #5
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCC_OscConfig+0x30c>
 8004df2:	4b5f      	ldr	r3, [pc, #380]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df6:	4a5e      	ldr	r2, [pc, #376]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004df8:	f043 0304 	orr.w	r3, r3, #4
 8004dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfe:	4b5c      	ldr	r3, [pc, #368]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	4a5b      	ldr	r2, [pc, #364]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCC_OscConfig+0x324>
 8004e0c:	4b58      	ldr	r3, [pc, #352]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	4a57      	ldr	r2, [pc, #348]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	6713      	str	r3, [r2, #112]	; 0x70
 8004e18:	4b55      	ldr	r3, [pc, #340]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	4a54      	ldr	r2, [pc, #336]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e1e:	f023 0304 	bic.w	r3, r3, #4
 8004e22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d015      	beq.n	8004e58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2c:	f7fd fe7a 	bl	8002b24 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e32:	e00a      	b.n	8004e4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e34:	f7fd fe76 	bl	8002b24 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e0cb      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4a:	4b49      	ldr	r3, [pc, #292]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0ee      	beq.n	8004e34 <HAL_RCC_OscConfig+0x334>
 8004e56:	e014      	b.n	8004e82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e58:	f7fd fe64 	bl	8002b24 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5e:	e00a      	b.n	8004e76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7fd fe60 	bl	8002b24 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e0b5      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e76:	4b3e      	ldr	r3, [pc, #248]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1ee      	bne.n	8004e60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e88:	4b39      	ldr	r3, [pc, #228]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	4a38      	ldr	r2, [pc, #224]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80a1 	beq.w	8004fe0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e9e:	4b34      	ldr	r3, [pc, #208]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d05c      	beq.n	8004f64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d141      	bne.n	8004f36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb2:	4b31      	ldr	r3, [pc, #196]	; (8004f78 <HAL_RCC_OscConfig+0x478>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb8:	f7fd fe34 	bl	8002b24 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec0:	f7fd fe30 	bl	8002b24 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e087      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed2:	4b27      	ldr	r3, [pc, #156]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69da      	ldr	r2, [r3, #28]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	019b      	lsls	r3, r3, #6
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	041b      	lsls	r3, r3, #16
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	061b      	lsls	r3, r3, #24
 8004f02:	491b      	ldr	r1, [pc, #108]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f08:	4b1b      	ldr	r3, [pc, #108]	; (8004f78 <HAL_RCC_OscConfig+0x478>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0e:	f7fd fe09 	bl	8002b24 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f16:	f7fd fe05 	bl	8002b24 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e05c      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f28:	4b11      	ldr	r3, [pc, #68]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x416>
 8004f34:	e054      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f36:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <HAL_RCC_OscConfig+0x478>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fd fdf2 	bl	8002b24 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fd fdee 	bl	8002b24 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e045      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f56:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x444>
 8004f62:	e03d      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d107      	bne.n	8004f7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e038      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40007000 	.word	0x40007000
 8004f78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <HAL_RCC_OscConfig+0x4ec>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d028      	beq.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d121      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d11a      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fac:	4013      	ands	r3, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d111      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	085b      	lsrs	r3, r3, #1
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d107      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40023800 	.word	0x40023800

08004ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0cc      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005004:	4b68      	ldr	r3, [pc, #416]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d90c      	bls.n	800502c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005012:	4b65      	ldr	r3, [pc, #404]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800501a:	4b63      	ldr	r3, [pc, #396]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d001      	beq.n	800502c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0b8      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d020      	beq.n	800507a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005044:	4b59      	ldr	r3, [pc, #356]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	4a58      	ldr	r2, [pc, #352]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800504e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800505c:	4b53      	ldr	r3, [pc, #332]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a52      	ldr	r2, [pc, #328]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005068:	4b50      	ldr	r3, [pc, #320]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	494d      	ldr	r1, [pc, #308]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	4313      	orrs	r3, r2
 8005078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d044      	beq.n	8005110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508e:	4b47      	ldr	r3, [pc, #284]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d119      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e07f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d003      	beq.n	80050ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d107      	bne.n	80050be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ae:	4b3f      	ldr	r3, [pc, #252]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e06f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050be:	4b3b      	ldr	r3, [pc, #236]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e067      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ce:	4b37      	ldr	r3, [pc, #220]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f023 0203 	bic.w	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	4934      	ldr	r1, [pc, #208]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e0:	f7fd fd20 	bl	8002b24 <HAL_GetTick>
 80050e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e6:	e00a      	b.n	80050fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e8:	f7fd fd1c 	bl	8002b24 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e04f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fe:	4b2b      	ldr	r3, [pc, #172]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 020c 	and.w	r2, r3, #12
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	429a      	cmp	r2, r3
 800510e:	d1eb      	bne.n	80050e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005110:	4b25      	ldr	r3, [pc, #148]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d20c      	bcs.n	8005138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b22      	ldr	r3, [pc, #136]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005126:	4b20      	ldr	r3, [pc, #128]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d001      	beq.n	8005138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e032      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005144:	4b19      	ldr	r3, [pc, #100]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	4916      	ldr	r1, [pc, #88]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005162:	4b12      	ldr	r3, [pc, #72]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	490e      	ldr	r1, [pc, #56]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	4313      	orrs	r3, r2
 8005174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005176:	f000 f821 	bl	80051bc <HAL_RCC_GetSysClockFreq>
 800517a:	4602      	mov	r2, r0
 800517c:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	490a      	ldr	r1, [pc, #40]	; (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005188:	5ccb      	ldrb	r3, [r1, r3]
 800518a:	fa22 f303 	lsr.w	r3, r2, r3
 800518e:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005192:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7fd fc80 	bl	8002a9c <HAL_InitTick>

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40023c00 	.word	0x40023c00
 80051ac:	40023800 	.word	0x40023800
 80051b0:	0800a5e4 	.word	0x0800a5e4
 80051b4:	2000001c 	.word	0x2000001c
 80051b8:	20000020 	.word	0x20000020

080051bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c0:	b094      	sub	sp, #80	; 0x50
 80051c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	647b      	str	r3, [r7, #68]	; 0x44
 80051c8:	2300      	movs	r3, #0
 80051ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051cc:	2300      	movs	r3, #0
 80051ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d4:	4b79      	ldr	r3, [pc, #484]	; (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 030c 	and.w	r3, r3, #12
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d00d      	beq.n	80051fc <HAL_RCC_GetSysClockFreq+0x40>
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	f200 80e1 	bhi.w	80053a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <HAL_RCC_GetSysClockFreq+0x34>
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d003      	beq.n	80051f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80051ee:	e0db      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051f0:	4b73      	ldr	r3, [pc, #460]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80051f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80051f4:	e0db      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051f6:	4b73      	ldr	r3, [pc, #460]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80051f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051fa:	e0d8      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051fc:	4b6f      	ldr	r3, [pc, #444]	; (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005204:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005206:	4b6d      	ldr	r3, [pc, #436]	; (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d063      	beq.n	80052da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005212:	4b6a      	ldr	r3, [pc, #424]	; (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	099b      	lsrs	r3, r3, #6
 8005218:	2200      	movs	r2, #0
 800521a:	63bb      	str	r3, [r7, #56]	; 0x38
 800521c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800521e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005224:	633b      	str	r3, [r7, #48]	; 0x30
 8005226:	2300      	movs	r3, #0
 8005228:	637b      	str	r3, [r7, #52]	; 0x34
 800522a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800522e:	4622      	mov	r2, r4
 8005230:	462b      	mov	r3, r5
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f04f 0100 	mov.w	r1, #0
 800523a:	0159      	lsls	r1, r3, #5
 800523c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005240:	0150      	lsls	r0, r2, #5
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4621      	mov	r1, r4
 8005248:	1a51      	subs	r1, r2, r1
 800524a:	6139      	str	r1, [r7, #16]
 800524c:	4629      	mov	r1, r5
 800524e:	eb63 0301 	sbc.w	r3, r3, r1
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	f04f 0300 	mov.w	r3, #0
 800525c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005260:	4659      	mov	r1, fp
 8005262:	018b      	lsls	r3, r1, #6
 8005264:	4651      	mov	r1, sl
 8005266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800526a:	4651      	mov	r1, sl
 800526c:	018a      	lsls	r2, r1, #6
 800526e:	4651      	mov	r1, sl
 8005270:	ebb2 0801 	subs.w	r8, r2, r1
 8005274:	4659      	mov	r1, fp
 8005276:	eb63 0901 	sbc.w	r9, r3, r1
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800528a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800528e:	4690      	mov	r8, r2
 8005290:	4699      	mov	r9, r3
 8005292:	4623      	mov	r3, r4
 8005294:	eb18 0303 	adds.w	r3, r8, r3
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	462b      	mov	r3, r5
 800529c:	eb49 0303 	adc.w	r3, r9, r3
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052ae:	4629      	mov	r1, r5
 80052b0:	024b      	lsls	r3, r1, #9
 80052b2:	4621      	mov	r1, r4
 80052b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052b8:	4621      	mov	r1, r4
 80052ba:	024a      	lsls	r2, r1, #9
 80052bc:	4610      	mov	r0, r2
 80052be:	4619      	mov	r1, r3
 80052c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c2:	2200      	movs	r2, #0
 80052c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052cc:	f7fb fd34 	bl	8000d38 <__aeabi_uldivmod>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4613      	mov	r3, r2
 80052d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d8:	e058      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052da:	4b38      	ldr	r3, [pc, #224]	; (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	099b      	lsrs	r3, r3, #6
 80052e0:	2200      	movs	r2, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	4611      	mov	r1, r2
 80052e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ea:	623b      	str	r3, [r7, #32]
 80052ec:	2300      	movs	r3, #0
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
 80052f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052f4:	4642      	mov	r2, r8
 80052f6:	464b      	mov	r3, r9
 80052f8:	f04f 0000 	mov.w	r0, #0
 80052fc:	f04f 0100 	mov.w	r1, #0
 8005300:	0159      	lsls	r1, r3, #5
 8005302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005306:	0150      	lsls	r0, r2, #5
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4641      	mov	r1, r8
 800530e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005312:	4649      	mov	r1, r9
 8005314:	eb63 0b01 	sbc.w	fp, r3, r1
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005324:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005328:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800532c:	ebb2 040a 	subs.w	r4, r2, sl
 8005330:	eb63 050b 	sbc.w	r5, r3, fp
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	00eb      	lsls	r3, r5, #3
 800533e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005342:	00e2      	lsls	r2, r4, #3
 8005344:	4614      	mov	r4, r2
 8005346:	461d      	mov	r5, r3
 8005348:	4643      	mov	r3, r8
 800534a:	18e3      	adds	r3, r4, r3
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	464b      	mov	r3, r9
 8005350:	eb45 0303 	adc.w	r3, r5, r3
 8005354:	607b      	str	r3, [r7, #4]
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005362:	4629      	mov	r1, r5
 8005364:	028b      	lsls	r3, r1, #10
 8005366:	4621      	mov	r1, r4
 8005368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800536c:	4621      	mov	r1, r4
 800536e:	028a      	lsls	r2, r1, #10
 8005370:	4610      	mov	r0, r2
 8005372:	4619      	mov	r1, r3
 8005374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005376:	2200      	movs	r2, #0
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	61fa      	str	r2, [r7, #28]
 800537c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005380:	f7fb fcda 	bl	8000d38 <__aeabi_uldivmod>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4613      	mov	r3, r2
 800538a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <HAL_RCC_GetSysClockFreq+0x200>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	0c1b      	lsrs	r3, r3, #16
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	3301      	adds	r3, #1
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800539c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800539e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053a6:	e002      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053a8:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80053aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3750      	adds	r7, #80	; 0x50
 80053b4:	46bd      	mov	sp, r7
 80053b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ba:	bf00      	nop
 80053bc:	40023800 	.word	0x40023800
 80053c0:	00f42400 	.word	0x00f42400
 80053c4:	007a1200 	.word	0x007a1200

080053c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053cc:	4b03      	ldr	r3, [pc, #12]	; (80053dc <HAL_RCC_GetHCLKFreq+0x14>)
 80053ce:	681b      	ldr	r3, [r3, #0]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	2000001c 	.word	0x2000001c

080053e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053e4:	f7ff fff0 	bl	80053c8 <HAL_RCC_GetHCLKFreq>
 80053e8:	4602      	mov	r2, r0
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	0a9b      	lsrs	r3, r3, #10
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	4903      	ldr	r1, [pc, #12]	; (8005404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053f6:	5ccb      	ldrb	r3, [r1, r3]
 80053f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40023800 	.word	0x40023800
 8005404:	0800a5f4 	.word	0x0800a5f4

08005408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800540c:	f7ff ffdc 	bl	80053c8 <HAL_RCC_GetHCLKFreq>
 8005410:	4602      	mov	r2, r0
 8005412:	4b05      	ldr	r3, [pc, #20]	; (8005428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	0b5b      	lsrs	r3, r3, #13
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	4903      	ldr	r1, [pc, #12]	; (800542c <HAL_RCC_GetPCLK2Freq+0x24>)
 800541e:	5ccb      	ldrb	r3, [r1, r3]
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005424:	4618      	mov	r0, r3
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40023800 	.word	0x40023800
 800542c:	0800a5f4 	.word	0x0800a5f4

08005430 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e07b      	b.n	800553a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	d108      	bne.n	800545c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005452:	d009      	beq.n	8005468 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	61da      	str	r2, [r3, #28]
 800545a:	e005      	b.n	8005468 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fd f8f4 	bl	8002670 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ec:	ea42 0103 	orr.w	r1, r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	0c1b      	lsrs	r3, r3, #16
 8005506:	f003 0104 	and.w	r1, r3, #4
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	f003 0210 	and.w	r2, r3, #16
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005528:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e03f      	b.n	80055d4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d106      	bne.n	800556e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7fd f8c9 	bl	8002700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2224      	movs	r2, #36	; 0x24
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005584:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f828 	bl	80055dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800559a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695a      	ldr	r2, [r3, #20]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e0:	b0c0      	sub	sp, #256	; 0x100
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	68d9      	ldr	r1, [r3, #12]
 80055fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	ea40 0301 	orr.w	r3, r0, r1
 8005604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	431a      	orrs	r2, r3
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	431a      	orrs	r2, r3
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005634:	f021 010c 	bic.w	r1, r1, #12
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005642:	430b      	orrs	r3, r1
 8005644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005656:	6999      	ldr	r1, [r3, #24]
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	ea40 0301 	orr.w	r3, r0, r1
 8005662:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b8f      	ldr	r3, [pc, #572]	; (80058a8 <UART_SetConfig+0x2cc>)
 800566c:	429a      	cmp	r2, r3
 800566e:	d005      	beq.n	800567c <UART_SetConfig+0xa0>
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4b8d      	ldr	r3, [pc, #564]	; (80058ac <UART_SetConfig+0x2d0>)
 8005678:	429a      	cmp	r2, r3
 800567a:	d104      	bne.n	8005686 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800567c:	f7ff fec4 	bl	8005408 <HAL_RCC_GetPCLK2Freq>
 8005680:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005684:	e003      	b.n	800568e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005686:	f7ff feab 	bl	80053e0 <HAL_RCC_GetPCLK1Freq>
 800568a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005698:	f040 810c 	bne.w	80058b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800569c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056ae:	4622      	mov	r2, r4
 80056b0:	462b      	mov	r3, r5
 80056b2:	1891      	adds	r1, r2, r2
 80056b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80056b6:	415b      	adcs	r3, r3
 80056b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056be:	4621      	mov	r1, r4
 80056c0:	eb12 0801 	adds.w	r8, r2, r1
 80056c4:	4629      	mov	r1, r5
 80056c6:	eb43 0901 	adc.w	r9, r3, r1
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056de:	4690      	mov	r8, r2
 80056e0:	4699      	mov	r9, r3
 80056e2:	4623      	mov	r3, r4
 80056e4:	eb18 0303 	adds.w	r3, r8, r3
 80056e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056ec:	462b      	mov	r3, r5
 80056ee:	eb49 0303 	adc.w	r3, r9, r3
 80056f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005702:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800570a:	460b      	mov	r3, r1
 800570c:	18db      	adds	r3, r3, r3
 800570e:	653b      	str	r3, [r7, #80]	; 0x50
 8005710:	4613      	mov	r3, r2
 8005712:	eb42 0303 	adc.w	r3, r2, r3
 8005716:	657b      	str	r3, [r7, #84]	; 0x54
 8005718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800571c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005720:	f7fb fb0a 	bl	8000d38 <__aeabi_uldivmod>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4b61      	ldr	r3, [pc, #388]	; (80058b0 <UART_SetConfig+0x2d4>)
 800572a:	fba3 2302 	umull	r2, r3, r3, r2
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	011c      	lsls	r4, r3, #4
 8005732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005736:	2200      	movs	r2, #0
 8005738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800573c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005740:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005744:	4642      	mov	r2, r8
 8005746:	464b      	mov	r3, r9
 8005748:	1891      	adds	r1, r2, r2
 800574a:	64b9      	str	r1, [r7, #72]	; 0x48
 800574c:	415b      	adcs	r3, r3
 800574e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005754:	4641      	mov	r1, r8
 8005756:	eb12 0a01 	adds.w	sl, r2, r1
 800575a:	4649      	mov	r1, r9
 800575c:	eb43 0b01 	adc.w	fp, r3, r1
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800576c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005774:	4692      	mov	sl, r2
 8005776:	469b      	mov	fp, r3
 8005778:	4643      	mov	r3, r8
 800577a:	eb1a 0303 	adds.w	r3, sl, r3
 800577e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005782:	464b      	mov	r3, r9
 8005784:	eb4b 0303 	adc.w	r3, fp, r3
 8005788:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005798:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800579c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057a0:	460b      	mov	r3, r1
 80057a2:	18db      	adds	r3, r3, r3
 80057a4:	643b      	str	r3, [r7, #64]	; 0x40
 80057a6:	4613      	mov	r3, r2
 80057a8:	eb42 0303 	adc.w	r3, r2, r3
 80057ac:	647b      	str	r3, [r7, #68]	; 0x44
 80057ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057b6:	f7fb fabf 	bl	8000d38 <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4611      	mov	r1, r2
 80057c0:	4b3b      	ldr	r3, [pc, #236]	; (80058b0 <UART_SetConfig+0x2d4>)
 80057c2:	fba3 2301 	umull	r2, r3, r3, r1
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	2264      	movs	r2, #100	; 0x64
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
 80057ce:	1acb      	subs	r3, r1, r3
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057d6:	4b36      	ldr	r3, [pc, #216]	; (80058b0 <UART_SetConfig+0x2d4>)
 80057d8:	fba3 2302 	umull	r2, r3, r3, r2
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057e4:	441c      	add	r4, r3
 80057e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057f8:	4642      	mov	r2, r8
 80057fa:	464b      	mov	r3, r9
 80057fc:	1891      	adds	r1, r2, r2
 80057fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005800:	415b      	adcs	r3, r3
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005808:	4641      	mov	r1, r8
 800580a:	1851      	adds	r1, r2, r1
 800580c:	6339      	str	r1, [r7, #48]	; 0x30
 800580e:	4649      	mov	r1, r9
 8005810:	414b      	adcs	r3, r1
 8005812:	637b      	str	r3, [r7, #52]	; 0x34
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005820:	4659      	mov	r1, fp
 8005822:	00cb      	lsls	r3, r1, #3
 8005824:	4651      	mov	r1, sl
 8005826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800582a:	4651      	mov	r1, sl
 800582c:	00ca      	lsls	r2, r1, #3
 800582e:	4610      	mov	r0, r2
 8005830:	4619      	mov	r1, r3
 8005832:	4603      	mov	r3, r0
 8005834:	4642      	mov	r2, r8
 8005836:	189b      	adds	r3, r3, r2
 8005838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800583c:	464b      	mov	r3, r9
 800583e:	460a      	mov	r2, r1
 8005840:	eb42 0303 	adc.w	r3, r2, r3
 8005844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005854:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800585c:	460b      	mov	r3, r1
 800585e:	18db      	adds	r3, r3, r3
 8005860:	62bb      	str	r3, [r7, #40]	; 0x28
 8005862:	4613      	mov	r3, r2
 8005864:	eb42 0303 	adc.w	r3, r2, r3
 8005868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800586a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800586e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005872:	f7fb fa61 	bl	8000d38 <__aeabi_uldivmod>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4b0d      	ldr	r3, [pc, #52]	; (80058b0 <UART_SetConfig+0x2d4>)
 800587c:	fba3 1302 	umull	r1, r3, r3, r2
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	2164      	movs	r1, #100	; 0x64
 8005884:	fb01 f303 	mul.w	r3, r1, r3
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	3332      	adds	r3, #50	; 0x32
 800588e:	4a08      	ldr	r2, [pc, #32]	; (80058b0 <UART_SetConfig+0x2d4>)
 8005890:	fba2 2303 	umull	r2, r3, r2, r3
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	f003 0207 	and.w	r2, r3, #7
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4422      	add	r2, r4
 80058a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058a4:	e105      	b.n	8005ab2 <UART_SetConfig+0x4d6>
 80058a6:	bf00      	nop
 80058a8:	40011000 	.word	0x40011000
 80058ac:	40011400 	.word	0x40011400
 80058b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058c6:	4642      	mov	r2, r8
 80058c8:	464b      	mov	r3, r9
 80058ca:	1891      	adds	r1, r2, r2
 80058cc:	6239      	str	r1, [r7, #32]
 80058ce:	415b      	adcs	r3, r3
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
 80058d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058d6:	4641      	mov	r1, r8
 80058d8:	1854      	adds	r4, r2, r1
 80058da:	4649      	mov	r1, r9
 80058dc:	eb43 0501 	adc.w	r5, r3, r1
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	00eb      	lsls	r3, r5, #3
 80058ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ee:	00e2      	lsls	r2, r4, #3
 80058f0:	4614      	mov	r4, r2
 80058f2:	461d      	mov	r5, r3
 80058f4:	4643      	mov	r3, r8
 80058f6:	18e3      	adds	r3, r4, r3
 80058f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058fc:	464b      	mov	r3, r9
 80058fe:	eb45 0303 	adc.w	r3, r5, r3
 8005902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005912:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005922:	4629      	mov	r1, r5
 8005924:	008b      	lsls	r3, r1, #2
 8005926:	4621      	mov	r1, r4
 8005928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800592c:	4621      	mov	r1, r4
 800592e:	008a      	lsls	r2, r1, #2
 8005930:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005934:	f7fb fa00 	bl	8000d38 <__aeabi_uldivmod>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4b60      	ldr	r3, [pc, #384]	; (8005ac0 <UART_SetConfig+0x4e4>)
 800593e:	fba3 2302 	umull	r2, r3, r3, r2
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	011c      	lsls	r4, r3, #4
 8005946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800594a:	2200      	movs	r2, #0
 800594c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005950:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005954:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005958:	4642      	mov	r2, r8
 800595a:	464b      	mov	r3, r9
 800595c:	1891      	adds	r1, r2, r2
 800595e:	61b9      	str	r1, [r7, #24]
 8005960:	415b      	adcs	r3, r3
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005968:	4641      	mov	r1, r8
 800596a:	1851      	adds	r1, r2, r1
 800596c:	6139      	str	r1, [r7, #16]
 800596e:	4649      	mov	r1, r9
 8005970:	414b      	adcs	r3, r1
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	f04f 0300 	mov.w	r3, #0
 800597c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005980:	4659      	mov	r1, fp
 8005982:	00cb      	lsls	r3, r1, #3
 8005984:	4651      	mov	r1, sl
 8005986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800598a:	4651      	mov	r1, sl
 800598c:	00ca      	lsls	r2, r1, #3
 800598e:	4610      	mov	r0, r2
 8005990:	4619      	mov	r1, r3
 8005992:	4603      	mov	r3, r0
 8005994:	4642      	mov	r2, r8
 8005996:	189b      	adds	r3, r3, r2
 8005998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800599c:	464b      	mov	r3, r9
 800599e:	460a      	mov	r2, r1
 80059a0:	eb42 0303 	adc.w	r3, r2, r3
 80059a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80059b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059c0:	4649      	mov	r1, r9
 80059c2:	008b      	lsls	r3, r1, #2
 80059c4:	4641      	mov	r1, r8
 80059c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ca:	4641      	mov	r1, r8
 80059cc:	008a      	lsls	r2, r1, #2
 80059ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059d2:	f7fb f9b1 	bl	8000d38 <__aeabi_uldivmod>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4b39      	ldr	r3, [pc, #228]	; (8005ac0 <UART_SetConfig+0x4e4>)
 80059dc:	fba3 1302 	umull	r1, r3, r3, r2
 80059e0:	095b      	lsrs	r3, r3, #5
 80059e2:	2164      	movs	r1, #100	; 0x64
 80059e4:	fb01 f303 	mul.w	r3, r1, r3
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	3332      	adds	r3, #50	; 0x32
 80059ee:	4a34      	ldr	r2, [pc, #208]	; (8005ac0 <UART_SetConfig+0x4e4>)
 80059f0:	fba2 2303 	umull	r2, r3, r2, r3
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059fa:	441c      	add	r4, r3
 80059fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a00:	2200      	movs	r2, #0
 8005a02:	673b      	str	r3, [r7, #112]	; 0x70
 8005a04:	677a      	str	r2, [r7, #116]	; 0x74
 8005a06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a0a:	4642      	mov	r2, r8
 8005a0c:	464b      	mov	r3, r9
 8005a0e:	1891      	adds	r1, r2, r2
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	415b      	adcs	r3, r3
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a1a:	4641      	mov	r1, r8
 8005a1c:	1851      	adds	r1, r2, r1
 8005a1e:	6039      	str	r1, [r7, #0]
 8005a20:	4649      	mov	r1, r9
 8005a22:	414b      	adcs	r3, r1
 8005a24:	607b      	str	r3, [r7, #4]
 8005a26:	f04f 0200 	mov.w	r2, #0
 8005a2a:	f04f 0300 	mov.w	r3, #0
 8005a2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a32:	4659      	mov	r1, fp
 8005a34:	00cb      	lsls	r3, r1, #3
 8005a36:	4651      	mov	r1, sl
 8005a38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a3c:	4651      	mov	r1, sl
 8005a3e:	00ca      	lsls	r2, r1, #3
 8005a40:	4610      	mov	r0, r2
 8005a42:	4619      	mov	r1, r3
 8005a44:	4603      	mov	r3, r0
 8005a46:	4642      	mov	r2, r8
 8005a48:	189b      	adds	r3, r3, r2
 8005a4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a4c:	464b      	mov	r3, r9
 8005a4e:	460a      	mov	r2, r1
 8005a50:	eb42 0303 	adc.w	r3, r2, r3
 8005a54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a60:	667a      	str	r2, [r7, #100]	; 0x64
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a6e:	4649      	mov	r1, r9
 8005a70:	008b      	lsls	r3, r1, #2
 8005a72:	4641      	mov	r1, r8
 8005a74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a78:	4641      	mov	r1, r8
 8005a7a:	008a      	lsls	r2, r1, #2
 8005a7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a80:	f7fb f95a 	bl	8000d38 <__aeabi_uldivmod>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4b0d      	ldr	r3, [pc, #52]	; (8005ac0 <UART_SetConfig+0x4e4>)
 8005a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	2164      	movs	r1, #100	; 0x64
 8005a92:	fb01 f303 	mul.w	r3, r1, r3
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	3332      	adds	r3, #50	; 0x32
 8005a9c:	4a08      	ldr	r2, [pc, #32]	; (8005ac0 <UART_SetConfig+0x4e4>)
 8005a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	f003 020f 	and.w	r2, r3, #15
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4422      	add	r2, r4
 8005ab0:	609a      	str	r2, [r3, #8]
}
 8005ab2:	bf00      	nop
 8005ab4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005abe:	bf00      	nop
 8005ac0:	51eb851f 	.word	0x51eb851f

08005ac4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005ac8:	4904      	ldr	r1, [pc, #16]	; (8005adc <MX_FATFS_Init+0x18>)
 8005aca:	4805      	ldr	r0, [pc, #20]	; (8005ae0 <MX_FATFS_Init+0x1c>)
 8005acc:	f000 f8b0 	bl	8005c30 <FATFS_LinkDriver>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	4b03      	ldr	r3, [pc, #12]	; (8005ae4 <MX_FATFS_Init+0x20>)
 8005ad6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005ad8:	bf00      	nop
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	200003d4 	.word	0x200003d4
 8005ae0:	20000028 	.word	0x20000028
 8005ae4:	200003d0 	.word	0x200003d0

08005ae8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	4603      	mov	r3, r0
 8005af0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005af2:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <USER_initialize+0x24>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005af8:	4b04      	ldr	r3, [pc, #16]	; (8005b0c <USER_initialize+0x24>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000025 	.word	0x20000025

08005b10 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005b1a:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <USER_status+0x24>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005b20:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <USER_status+0x24>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	20000025 	.word	0x20000025

08005b38 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	4603      	mov	r3, r0
 8005b46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005b48:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b085      	sub	sp, #20
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
 8005b60:	603b      	str	r3, [r7, #0]
 8005b62:	4603      	mov	r3, r0
 8005b64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005b66:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	603a      	str	r2, [r7, #0]
 8005b7e:	71fb      	strb	r3, [r7, #7]
 8005b80:	460b      	mov	r3, r1
 8005b82:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	73fb      	strb	r3, [r7, #15]
    return res;
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
	...

08005b98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005bae:	4b1f      	ldr	r3, [pc, #124]	; (8005c2c <FATFS_LinkDriverEx+0x94>)
 8005bb0:	7a5b      	ldrb	r3, [r3, #9]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d131      	bne.n	8005c1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005bb8:	4b1c      	ldr	r3, [pc, #112]	; (8005c2c <FATFS_LinkDriverEx+0x94>)
 8005bba:	7a5b      	ldrb	r3, [r3, #9]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	4b1a      	ldr	r3, [pc, #104]	; (8005c2c <FATFS_LinkDriverEx+0x94>)
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005bc6:	4b19      	ldr	r3, [pc, #100]	; (8005c2c <FATFS_LinkDriverEx+0x94>)
 8005bc8:	7a5b      	ldrb	r3, [r3, #9]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	4a17      	ldr	r2, [pc, #92]	; (8005c2c <FATFS_LinkDriverEx+0x94>)
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005bd6:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <FATFS_LinkDriverEx+0x94>)
 8005bd8:	7a5b      	ldrb	r3, [r3, #9]
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	461a      	mov	r2, r3
 8005bde:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <FATFS_LinkDriverEx+0x94>)
 8005be0:	4413      	add	r3, r2
 8005be2:	79fa      	ldrb	r2, [r7, #7]
 8005be4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005be6:	4b11      	ldr	r3, [pc, #68]	; (8005c2c <FATFS_LinkDriverEx+0x94>)
 8005be8:	7a5b      	ldrb	r3, [r3, #9]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	b2d1      	uxtb	r1, r2
 8005bf0:	4a0e      	ldr	r2, [pc, #56]	; (8005c2c <FATFS_LinkDriverEx+0x94>)
 8005bf2:	7251      	strb	r1, [r2, #9]
 8005bf4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005bf6:	7dbb      	ldrb	r3, [r7, #22]
 8005bf8:	3330      	adds	r3, #48	; 0x30
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	3301      	adds	r3, #1
 8005c04:	223a      	movs	r2, #58	; 0x3a
 8005c06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	3302      	adds	r3, #2
 8005c0c:	222f      	movs	r2, #47	; 0x2f
 8005c0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	3303      	adds	r3, #3
 8005c14:	2200      	movs	r2, #0
 8005c16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	371c      	adds	r7, #28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	200003d8 	.word	0x200003d8

08005c30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	6839      	ldr	r1, [r7, #0]
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff ffaa 	bl	8005b98 <FATFS_LinkDriverEx>
 8005c44:	4603      	mov	r3, r0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <__errno>:
 8005c50:	4b01      	ldr	r3, [pc, #4]	; (8005c58 <__errno+0x8>)
 8005c52:	6818      	ldr	r0, [r3, #0]
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	2000003c 	.word	0x2000003c

08005c5c <__libc_init_array>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	4d0d      	ldr	r5, [pc, #52]	; (8005c94 <__libc_init_array+0x38>)
 8005c60:	4c0d      	ldr	r4, [pc, #52]	; (8005c98 <__libc_init_array+0x3c>)
 8005c62:	1b64      	subs	r4, r4, r5
 8005c64:	10a4      	asrs	r4, r4, #2
 8005c66:	2600      	movs	r6, #0
 8005c68:	42a6      	cmp	r6, r4
 8005c6a:	d109      	bne.n	8005c80 <__libc_init_array+0x24>
 8005c6c:	4d0b      	ldr	r5, [pc, #44]	; (8005c9c <__libc_init_array+0x40>)
 8005c6e:	4c0c      	ldr	r4, [pc, #48]	; (8005ca0 <__libc_init_array+0x44>)
 8005c70:	f004 fc92 	bl	800a598 <_init>
 8005c74:	1b64      	subs	r4, r4, r5
 8005c76:	10a4      	asrs	r4, r4, #2
 8005c78:	2600      	movs	r6, #0
 8005c7a:	42a6      	cmp	r6, r4
 8005c7c:	d105      	bne.n	8005c8a <__libc_init_array+0x2e>
 8005c7e:	bd70      	pop	{r4, r5, r6, pc}
 8005c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c84:	4798      	blx	r3
 8005c86:	3601      	adds	r6, #1
 8005c88:	e7ee      	b.n	8005c68 <__libc_init_array+0xc>
 8005c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c8e:	4798      	blx	r3
 8005c90:	3601      	adds	r6, #1
 8005c92:	e7f2      	b.n	8005c7a <__libc_init_array+0x1e>
 8005c94:	0800aaac 	.word	0x0800aaac
 8005c98:	0800aaac 	.word	0x0800aaac
 8005c9c:	0800aaac 	.word	0x0800aaac
 8005ca0:	0800aab0 	.word	0x0800aab0

08005ca4 <memset>:
 8005ca4:	4402      	add	r2, r0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d100      	bne.n	8005cae <memset+0xa>
 8005cac:	4770      	bx	lr
 8005cae:	f803 1b01 	strb.w	r1, [r3], #1
 8005cb2:	e7f9      	b.n	8005ca8 <memset+0x4>

08005cb4 <__cvt>:
 8005cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb8:	ec55 4b10 	vmov	r4, r5, d0
 8005cbc:	2d00      	cmp	r5, #0
 8005cbe:	460e      	mov	r6, r1
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	462b      	mov	r3, r5
 8005cc4:	bfbb      	ittet	lt
 8005cc6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005cca:	461d      	movlt	r5, r3
 8005ccc:	2300      	movge	r3, #0
 8005cce:	232d      	movlt	r3, #45	; 0x2d
 8005cd0:	700b      	strb	r3, [r1, #0]
 8005cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cd4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005cd8:	4691      	mov	r9, r2
 8005cda:	f023 0820 	bic.w	r8, r3, #32
 8005cde:	bfbc      	itt	lt
 8005ce0:	4622      	movlt	r2, r4
 8005ce2:	4614      	movlt	r4, r2
 8005ce4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ce8:	d005      	beq.n	8005cf6 <__cvt+0x42>
 8005cea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005cee:	d100      	bne.n	8005cf2 <__cvt+0x3e>
 8005cf0:	3601      	adds	r6, #1
 8005cf2:	2102      	movs	r1, #2
 8005cf4:	e000      	b.n	8005cf8 <__cvt+0x44>
 8005cf6:	2103      	movs	r1, #3
 8005cf8:	ab03      	add	r3, sp, #12
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	ab02      	add	r3, sp, #8
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	ec45 4b10 	vmov	d0, r4, r5
 8005d04:	4653      	mov	r3, sl
 8005d06:	4632      	mov	r2, r6
 8005d08:	f001 fdae 	bl	8007868 <_dtoa_r>
 8005d0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d10:	4607      	mov	r7, r0
 8005d12:	d102      	bne.n	8005d1a <__cvt+0x66>
 8005d14:	f019 0f01 	tst.w	r9, #1
 8005d18:	d022      	beq.n	8005d60 <__cvt+0xac>
 8005d1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d1e:	eb07 0906 	add.w	r9, r7, r6
 8005d22:	d110      	bne.n	8005d46 <__cvt+0x92>
 8005d24:	783b      	ldrb	r3, [r7, #0]
 8005d26:	2b30      	cmp	r3, #48	; 0x30
 8005d28:	d10a      	bne.n	8005d40 <__cvt+0x8c>
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4620      	mov	r0, r4
 8005d30:	4629      	mov	r1, r5
 8005d32:	f7fa fed1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d36:	b918      	cbnz	r0, 8005d40 <__cvt+0x8c>
 8005d38:	f1c6 0601 	rsb	r6, r6, #1
 8005d3c:	f8ca 6000 	str.w	r6, [sl]
 8005d40:	f8da 3000 	ldr.w	r3, [sl]
 8005d44:	4499      	add	r9, r3
 8005d46:	2200      	movs	r2, #0
 8005d48:	2300      	movs	r3, #0
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	f7fa fec3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d52:	b108      	cbz	r0, 8005d58 <__cvt+0xa4>
 8005d54:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d58:	2230      	movs	r2, #48	; 0x30
 8005d5a:	9b03      	ldr	r3, [sp, #12]
 8005d5c:	454b      	cmp	r3, r9
 8005d5e:	d307      	bcc.n	8005d70 <__cvt+0xbc>
 8005d60:	9b03      	ldr	r3, [sp, #12]
 8005d62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d64:	1bdb      	subs	r3, r3, r7
 8005d66:	4638      	mov	r0, r7
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	b004      	add	sp, #16
 8005d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d70:	1c59      	adds	r1, r3, #1
 8005d72:	9103      	str	r1, [sp, #12]
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	e7f0      	b.n	8005d5a <__cvt+0xa6>

08005d78 <__exponent>:
 8005d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2900      	cmp	r1, #0
 8005d7e:	bfb8      	it	lt
 8005d80:	4249      	neglt	r1, r1
 8005d82:	f803 2b02 	strb.w	r2, [r3], #2
 8005d86:	bfb4      	ite	lt
 8005d88:	222d      	movlt	r2, #45	; 0x2d
 8005d8a:	222b      	movge	r2, #43	; 0x2b
 8005d8c:	2909      	cmp	r1, #9
 8005d8e:	7042      	strb	r2, [r0, #1]
 8005d90:	dd2a      	ble.n	8005de8 <__exponent+0x70>
 8005d92:	f10d 0407 	add.w	r4, sp, #7
 8005d96:	46a4      	mov	ip, r4
 8005d98:	270a      	movs	r7, #10
 8005d9a:	46a6      	mov	lr, r4
 8005d9c:	460a      	mov	r2, r1
 8005d9e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005da2:	fb07 1516 	mls	r5, r7, r6, r1
 8005da6:	3530      	adds	r5, #48	; 0x30
 8005da8:	2a63      	cmp	r2, #99	; 0x63
 8005daa:	f104 34ff 	add.w	r4, r4, #4294967295
 8005dae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005db2:	4631      	mov	r1, r6
 8005db4:	dcf1      	bgt.n	8005d9a <__exponent+0x22>
 8005db6:	3130      	adds	r1, #48	; 0x30
 8005db8:	f1ae 0502 	sub.w	r5, lr, #2
 8005dbc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005dc0:	1c44      	adds	r4, r0, #1
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	4561      	cmp	r1, ip
 8005dc6:	d30a      	bcc.n	8005dde <__exponent+0x66>
 8005dc8:	f10d 0209 	add.w	r2, sp, #9
 8005dcc:	eba2 020e 	sub.w	r2, r2, lr
 8005dd0:	4565      	cmp	r5, ip
 8005dd2:	bf88      	it	hi
 8005dd4:	2200      	movhi	r2, #0
 8005dd6:	4413      	add	r3, r2
 8005dd8:	1a18      	subs	r0, r3, r0
 8005dda:	b003      	add	sp, #12
 8005ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005de2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005de6:	e7ed      	b.n	8005dc4 <__exponent+0x4c>
 8005de8:	2330      	movs	r3, #48	; 0x30
 8005dea:	3130      	adds	r1, #48	; 0x30
 8005dec:	7083      	strb	r3, [r0, #2]
 8005dee:	70c1      	strb	r1, [r0, #3]
 8005df0:	1d03      	adds	r3, r0, #4
 8005df2:	e7f1      	b.n	8005dd8 <__exponent+0x60>

08005df4 <_printf_float>:
 8005df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df8:	ed2d 8b02 	vpush	{d8}
 8005dfc:	b08d      	sub	sp, #52	; 0x34
 8005dfe:	460c      	mov	r4, r1
 8005e00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e04:	4616      	mov	r6, r2
 8005e06:	461f      	mov	r7, r3
 8005e08:	4605      	mov	r5, r0
 8005e0a:	f002 fe8b 	bl	8008b24 <_localeconv_r>
 8005e0e:	f8d0 a000 	ldr.w	sl, [r0]
 8005e12:	4650      	mov	r0, sl
 8005e14:	f7fa f9e4 	bl	80001e0 <strlen>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	9305      	str	r3, [sp, #20]
 8005e20:	f8d8 3000 	ldr.w	r3, [r8]
 8005e24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e28:	3307      	adds	r3, #7
 8005e2a:	f023 0307 	bic.w	r3, r3, #7
 8005e2e:	f103 0208 	add.w	r2, r3, #8
 8005e32:	f8c8 2000 	str.w	r2, [r8]
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e3e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e46:	9307      	str	r3, [sp, #28]
 8005e48:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e4c:	ee08 0a10 	vmov	s16, r0
 8005e50:	4b9f      	ldr	r3, [pc, #636]	; (80060d0 <_printf_float+0x2dc>)
 8005e52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e56:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5a:	f7fa fe6f 	bl	8000b3c <__aeabi_dcmpun>
 8005e5e:	bb88      	cbnz	r0, 8005ec4 <_printf_float+0xd0>
 8005e60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e64:	4b9a      	ldr	r3, [pc, #616]	; (80060d0 <_printf_float+0x2dc>)
 8005e66:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6a:	f7fa fe49 	bl	8000b00 <__aeabi_dcmple>
 8005e6e:	bb48      	cbnz	r0, 8005ec4 <_printf_float+0xd0>
 8005e70:	2200      	movs	r2, #0
 8005e72:	2300      	movs	r3, #0
 8005e74:	4640      	mov	r0, r8
 8005e76:	4649      	mov	r1, r9
 8005e78:	f7fa fe38 	bl	8000aec <__aeabi_dcmplt>
 8005e7c:	b110      	cbz	r0, 8005e84 <_printf_float+0x90>
 8005e7e:	232d      	movs	r3, #45	; 0x2d
 8005e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e84:	4b93      	ldr	r3, [pc, #588]	; (80060d4 <_printf_float+0x2e0>)
 8005e86:	4894      	ldr	r0, [pc, #592]	; (80060d8 <_printf_float+0x2e4>)
 8005e88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e8c:	bf94      	ite	ls
 8005e8e:	4698      	movls	r8, r3
 8005e90:	4680      	movhi	r8, r0
 8005e92:	2303      	movs	r3, #3
 8005e94:	6123      	str	r3, [r4, #16]
 8005e96:	9b05      	ldr	r3, [sp, #20]
 8005e98:	f023 0204 	bic.w	r2, r3, #4
 8005e9c:	6022      	str	r2, [r4, #0]
 8005e9e:	f04f 0900 	mov.w	r9, #0
 8005ea2:	9700      	str	r7, [sp, #0]
 8005ea4:	4633      	mov	r3, r6
 8005ea6:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f000 f9d8 	bl	8006260 <_printf_common>
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	f040 8090 	bne.w	8005fd6 <_printf_float+0x1e2>
 8005eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eba:	b00d      	add	sp, #52	; 0x34
 8005ebc:	ecbd 8b02 	vpop	{d8}
 8005ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	4640      	mov	r0, r8
 8005eca:	4649      	mov	r1, r9
 8005ecc:	f7fa fe36 	bl	8000b3c <__aeabi_dcmpun>
 8005ed0:	b140      	cbz	r0, 8005ee4 <_printf_float+0xf0>
 8005ed2:	464b      	mov	r3, r9
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	bfbc      	itt	lt
 8005ed8:	232d      	movlt	r3, #45	; 0x2d
 8005eda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ede:	487f      	ldr	r0, [pc, #508]	; (80060dc <_printf_float+0x2e8>)
 8005ee0:	4b7f      	ldr	r3, [pc, #508]	; (80060e0 <_printf_float+0x2ec>)
 8005ee2:	e7d1      	b.n	8005e88 <_printf_float+0x94>
 8005ee4:	6863      	ldr	r3, [r4, #4]
 8005ee6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005eea:	9206      	str	r2, [sp, #24]
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	d13f      	bne.n	8005f70 <_printf_float+0x17c>
 8005ef0:	2306      	movs	r3, #6
 8005ef2:	6063      	str	r3, [r4, #4]
 8005ef4:	9b05      	ldr	r3, [sp, #20]
 8005ef6:	6861      	ldr	r1, [r4, #4]
 8005ef8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005efc:	2300      	movs	r3, #0
 8005efe:	9303      	str	r3, [sp, #12]
 8005f00:	ab0a      	add	r3, sp, #40	; 0x28
 8005f02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f06:	ab09      	add	r3, sp, #36	; 0x24
 8005f08:	ec49 8b10 	vmov	d0, r8, r9
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	6022      	str	r2, [r4, #0]
 8005f10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f14:	4628      	mov	r0, r5
 8005f16:	f7ff fecd 	bl	8005cb4 <__cvt>
 8005f1a:	9b06      	ldr	r3, [sp, #24]
 8005f1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f1e:	2b47      	cmp	r3, #71	; 0x47
 8005f20:	4680      	mov	r8, r0
 8005f22:	d108      	bne.n	8005f36 <_printf_float+0x142>
 8005f24:	1cc8      	adds	r0, r1, #3
 8005f26:	db02      	blt.n	8005f2e <_printf_float+0x13a>
 8005f28:	6863      	ldr	r3, [r4, #4]
 8005f2a:	4299      	cmp	r1, r3
 8005f2c:	dd41      	ble.n	8005fb2 <_printf_float+0x1be>
 8005f2e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005f32:	fa5f fb8b 	uxtb.w	fp, fp
 8005f36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f3a:	d820      	bhi.n	8005f7e <_printf_float+0x18a>
 8005f3c:	3901      	subs	r1, #1
 8005f3e:	465a      	mov	r2, fp
 8005f40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f44:	9109      	str	r1, [sp, #36]	; 0x24
 8005f46:	f7ff ff17 	bl	8005d78 <__exponent>
 8005f4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f4c:	1813      	adds	r3, r2, r0
 8005f4e:	2a01      	cmp	r2, #1
 8005f50:	4681      	mov	r9, r0
 8005f52:	6123      	str	r3, [r4, #16]
 8005f54:	dc02      	bgt.n	8005f5c <_printf_float+0x168>
 8005f56:	6822      	ldr	r2, [r4, #0]
 8005f58:	07d2      	lsls	r2, r2, #31
 8005f5a:	d501      	bpl.n	8005f60 <_printf_float+0x16c>
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	6123      	str	r3, [r4, #16]
 8005f60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d09c      	beq.n	8005ea2 <_printf_float+0xae>
 8005f68:	232d      	movs	r3, #45	; 0x2d
 8005f6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f6e:	e798      	b.n	8005ea2 <_printf_float+0xae>
 8005f70:	9a06      	ldr	r2, [sp, #24]
 8005f72:	2a47      	cmp	r2, #71	; 0x47
 8005f74:	d1be      	bne.n	8005ef4 <_printf_float+0x100>
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1bc      	bne.n	8005ef4 <_printf_float+0x100>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e7b9      	b.n	8005ef2 <_printf_float+0xfe>
 8005f7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f82:	d118      	bne.n	8005fb6 <_printf_float+0x1c2>
 8005f84:	2900      	cmp	r1, #0
 8005f86:	6863      	ldr	r3, [r4, #4]
 8005f88:	dd0b      	ble.n	8005fa2 <_printf_float+0x1ae>
 8005f8a:	6121      	str	r1, [r4, #16]
 8005f8c:	b913      	cbnz	r3, 8005f94 <_printf_float+0x1a0>
 8005f8e:	6822      	ldr	r2, [r4, #0]
 8005f90:	07d0      	lsls	r0, r2, #31
 8005f92:	d502      	bpl.n	8005f9a <_printf_float+0x1a6>
 8005f94:	3301      	adds	r3, #1
 8005f96:	440b      	add	r3, r1
 8005f98:	6123      	str	r3, [r4, #16]
 8005f9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f9c:	f04f 0900 	mov.w	r9, #0
 8005fa0:	e7de      	b.n	8005f60 <_printf_float+0x16c>
 8005fa2:	b913      	cbnz	r3, 8005faa <_printf_float+0x1b6>
 8005fa4:	6822      	ldr	r2, [r4, #0]
 8005fa6:	07d2      	lsls	r2, r2, #31
 8005fa8:	d501      	bpl.n	8005fae <_printf_float+0x1ba>
 8005faa:	3302      	adds	r3, #2
 8005fac:	e7f4      	b.n	8005f98 <_printf_float+0x1a4>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e7f2      	b.n	8005f98 <_printf_float+0x1a4>
 8005fb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fb8:	4299      	cmp	r1, r3
 8005fba:	db05      	blt.n	8005fc8 <_printf_float+0x1d4>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	6121      	str	r1, [r4, #16]
 8005fc0:	07d8      	lsls	r0, r3, #31
 8005fc2:	d5ea      	bpl.n	8005f9a <_printf_float+0x1a6>
 8005fc4:	1c4b      	adds	r3, r1, #1
 8005fc6:	e7e7      	b.n	8005f98 <_printf_float+0x1a4>
 8005fc8:	2900      	cmp	r1, #0
 8005fca:	bfd4      	ite	le
 8005fcc:	f1c1 0202 	rsble	r2, r1, #2
 8005fd0:	2201      	movgt	r2, #1
 8005fd2:	4413      	add	r3, r2
 8005fd4:	e7e0      	b.n	8005f98 <_printf_float+0x1a4>
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	055a      	lsls	r2, r3, #21
 8005fda:	d407      	bmi.n	8005fec <_printf_float+0x1f8>
 8005fdc:	6923      	ldr	r3, [r4, #16]
 8005fde:	4642      	mov	r2, r8
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	47b8      	blx	r7
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	d12c      	bne.n	8006044 <_printf_float+0x250>
 8005fea:	e764      	b.n	8005eb6 <_printf_float+0xc2>
 8005fec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ff0:	f240 80e0 	bls.w	80061b4 <_printf_float+0x3c0>
 8005ff4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f7fa fd6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006000:	2800      	cmp	r0, #0
 8006002:	d034      	beq.n	800606e <_printf_float+0x27a>
 8006004:	4a37      	ldr	r2, [pc, #220]	; (80060e4 <_printf_float+0x2f0>)
 8006006:	2301      	movs	r3, #1
 8006008:	4631      	mov	r1, r6
 800600a:	4628      	mov	r0, r5
 800600c:	47b8      	blx	r7
 800600e:	3001      	adds	r0, #1
 8006010:	f43f af51 	beq.w	8005eb6 <_printf_float+0xc2>
 8006014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006018:	429a      	cmp	r2, r3
 800601a:	db02      	blt.n	8006022 <_printf_float+0x22e>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	07d8      	lsls	r0, r3, #31
 8006020:	d510      	bpl.n	8006044 <_printf_float+0x250>
 8006022:	ee18 3a10 	vmov	r3, s16
 8006026:	4652      	mov	r2, sl
 8006028:	4631      	mov	r1, r6
 800602a:	4628      	mov	r0, r5
 800602c:	47b8      	blx	r7
 800602e:	3001      	adds	r0, #1
 8006030:	f43f af41 	beq.w	8005eb6 <_printf_float+0xc2>
 8006034:	f04f 0800 	mov.w	r8, #0
 8006038:	f104 091a 	add.w	r9, r4, #26
 800603c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800603e:	3b01      	subs	r3, #1
 8006040:	4543      	cmp	r3, r8
 8006042:	dc09      	bgt.n	8006058 <_printf_float+0x264>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	079b      	lsls	r3, r3, #30
 8006048:	f100 8105 	bmi.w	8006256 <_printf_float+0x462>
 800604c:	68e0      	ldr	r0, [r4, #12]
 800604e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006050:	4298      	cmp	r0, r3
 8006052:	bfb8      	it	lt
 8006054:	4618      	movlt	r0, r3
 8006056:	e730      	b.n	8005eba <_printf_float+0xc6>
 8006058:	2301      	movs	r3, #1
 800605a:	464a      	mov	r2, r9
 800605c:	4631      	mov	r1, r6
 800605e:	4628      	mov	r0, r5
 8006060:	47b8      	blx	r7
 8006062:	3001      	adds	r0, #1
 8006064:	f43f af27 	beq.w	8005eb6 <_printf_float+0xc2>
 8006068:	f108 0801 	add.w	r8, r8, #1
 800606c:	e7e6      	b.n	800603c <_printf_float+0x248>
 800606e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006070:	2b00      	cmp	r3, #0
 8006072:	dc39      	bgt.n	80060e8 <_printf_float+0x2f4>
 8006074:	4a1b      	ldr	r2, [pc, #108]	; (80060e4 <_printf_float+0x2f0>)
 8006076:	2301      	movs	r3, #1
 8006078:	4631      	mov	r1, r6
 800607a:	4628      	mov	r0, r5
 800607c:	47b8      	blx	r7
 800607e:	3001      	adds	r0, #1
 8006080:	f43f af19 	beq.w	8005eb6 <_printf_float+0xc2>
 8006084:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006088:	4313      	orrs	r3, r2
 800608a:	d102      	bne.n	8006092 <_printf_float+0x29e>
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	07d9      	lsls	r1, r3, #31
 8006090:	d5d8      	bpl.n	8006044 <_printf_float+0x250>
 8006092:	ee18 3a10 	vmov	r3, s16
 8006096:	4652      	mov	r2, sl
 8006098:	4631      	mov	r1, r6
 800609a:	4628      	mov	r0, r5
 800609c:	47b8      	blx	r7
 800609e:	3001      	adds	r0, #1
 80060a0:	f43f af09 	beq.w	8005eb6 <_printf_float+0xc2>
 80060a4:	f04f 0900 	mov.w	r9, #0
 80060a8:	f104 0a1a 	add.w	sl, r4, #26
 80060ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ae:	425b      	negs	r3, r3
 80060b0:	454b      	cmp	r3, r9
 80060b2:	dc01      	bgt.n	80060b8 <_printf_float+0x2c4>
 80060b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b6:	e792      	b.n	8005fde <_printf_float+0x1ea>
 80060b8:	2301      	movs	r3, #1
 80060ba:	4652      	mov	r2, sl
 80060bc:	4631      	mov	r1, r6
 80060be:	4628      	mov	r0, r5
 80060c0:	47b8      	blx	r7
 80060c2:	3001      	adds	r0, #1
 80060c4:	f43f aef7 	beq.w	8005eb6 <_printf_float+0xc2>
 80060c8:	f109 0901 	add.w	r9, r9, #1
 80060cc:	e7ee      	b.n	80060ac <_printf_float+0x2b8>
 80060ce:	bf00      	nop
 80060d0:	7fefffff 	.word	0x7fefffff
 80060d4:	0800a600 	.word	0x0800a600
 80060d8:	0800a604 	.word	0x0800a604
 80060dc:	0800a60c 	.word	0x0800a60c
 80060e0:	0800a608 	.word	0x0800a608
 80060e4:	0800a610 	.word	0x0800a610
 80060e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060ec:	429a      	cmp	r2, r3
 80060ee:	bfa8      	it	ge
 80060f0:	461a      	movge	r2, r3
 80060f2:	2a00      	cmp	r2, #0
 80060f4:	4691      	mov	r9, r2
 80060f6:	dc37      	bgt.n	8006168 <_printf_float+0x374>
 80060f8:	f04f 0b00 	mov.w	fp, #0
 80060fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006100:	f104 021a 	add.w	r2, r4, #26
 8006104:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006106:	9305      	str	r3, [sp, #20]
 8006108:	eba3 0309 	sub.w	r3, r3, r9
 800610c:	455b      	cmp	r3, fp
 800610e:	dc33      	bgt.n	8006178 <_printf_float+0x384>
 8006110:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006114:	429a      	cmp	r2, r3
 8006116:	db3b      	blt.n	8006190 <_printf_float+0x39c>
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	07da      	lsls	r2, r3, #31
 800611c:	d438      	bmi.n	8006190 <_printf_float+0x39c>
 800611e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006120:	9a05      	ldr	r2, [sp, #20]
 8006122:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006124:	1a9a      	subs	r2, r3, r2
 8006126:	eba3 0901 	sub.w	r9, r3, r1
 800612a:	4591      	cmp	r9, r2
 800612c:	bfa8      	it	ge
 800612e:	4691      	movge	r9, r2
 8006130:	f1b9 0f00 	cmp.w	r9, #0
 8006134:	dc35      	bgt.n	80061a2 <_printf_float+0x3ae>
 8006136:	f04f 0800 	mov.w	r8, #0
 800613a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800613e:	f104 0a1a 	add.w	sl, r4, #26
 8006142:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	eba3 0309 	sub.w	r3, r3, r9
 800614c:	4543      	cmp	r3, r8
 800614e:	f77f af79 	ble.w	8006044 <_printf_float+0x250>
 8006152:	2301      	movs	r3, #1
 8006154:	4652      	mov	r2, sl
 8006156:	4631      	mov	r1, r6
 8006158:	4628      	mov	r0, r5
 800615a:	47b8      	blx	r7
 800615c:	3001      	adds	r0, #1
 800615e:	f43f aeaa 	beq.w	8005eb6 <_printf_float+0xc2>
 8006162:	f108 0801 	add.w	r8, r8, #1
 8006166:	e7ec      	b.n	8006142 <_printf_float+0x34e>
 8006168:	4613      	mov	r3, r2
 800616a:	4631      	mov	r1, r6
 800616c:	4642      	mov	r2, r8
 800616e:	4628      	mov	r0, r5
 8006170:	47b8      	blx	r7
 8006172:	3001      	adds	r0, #1
 8006174:	d1c0      	bne.n	80060f8 <_printf_float+0x304>
 8006176:	e69e      	b.n	8005eb6 <_printf_float+0xc2>
 8006178:	2301      	movs	r3, #1
 800617a:	4631      	mov	r1, r6
 800617c:	4628      	mov	r0, r5
 800617e:	9205      	str	r2, [sp, #20]
 8006180:	47b8      	blx	r7
 8006182:	3001      	adds	r0, #1
 8006184:	f43f ae97 	beq.w	8005eb6 <_printf_float+0xc2>
 8006188:	9a05      	ldr	r2, [sp, #20]
 800618a:	f10b 0b01 	add.w	fp, fp, #1
 800618e:	e7b9      	b.n	8006104 <_printf_float+0x310>
 8006190:	ee18 3a10 	vmov	r3, s16
 8006194:	4652      	mov	r2, sl
 8006196:	4631      	mov	r1, r6
 8006198:	4628      	mov	r0, r5
 800619a:	47b8      	blx	r7
 800619c:	3001      	adds	r0, #1
 800619e:	d1be      	bne.n	800611e <_printf_float+0x32a>
 80061a0:	e689      	b.n	8005eb6 <_printf_float+0xc2>
 80061a2:	9a05      	ldr	r2, [sp, #20]
 80061a4:	464b      	mov	r3, r9
 80061a6:	4442      	add	r2, r8
 80061a8:	4631      	mov	r1, r6
 80061aa:	4628      	mov	r0, r5
 80061ac:	47b8      	blx	r7
 80061ae:	3001      	adds	r0, #1
 80061b0:	d1c1      	bne.n	8006136 <_printf_float+0x342>
 80061b2:	e680      	b.n	8005eb6 <_printf_float+0xc2>
 80061b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061b6:	2a01      	cmp	r2, #1
 80061b8:	dc01      	bgt.n	80061be <_printf_float+0x3ca>
 80061ba:	07db      	lsls	r3, r3, #31
 80061bc:	d538      	bpl.n	8006230 <_printf_float+0x43c>
 80061be:	2301      	movs	r3, #1
 80061c0:	4642      	mov	r2, r8
 80061c2:	4631      	mov	r1, r6
 80061c4:	4628      	mov	r0, r5
 80061c6:	47b8      	blx	r7
 80061c8:	3001      	adds	r0, #1
 80061ca:	f43f ae74 	beq.w	8005eb6 <_printf_float+0xc2>
 80061ce:	ee18 3a10 	vmov	r3, s16
 80061d2:	4652      	mov	r2, sl
 80061d4:	4631      	mov	r1, r6
 80061d6:	4628      	mov	r0, r5
 80061d8:	47b8      	blx	r7
 80061da:	3001      	adds	r0, #1
 80061dc:	f43f ae6b 	beq.w	8005eb6 <_printf_float+0xc2>
 80061e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061e4:	2200      	movs	r2, #0
 80061e6:	2300      	movs	r3, #0
 80061e8:	f7fa fc76 	bl	8000ad8 <__aeabi_dcmpeq>
 80061ec:	b9d8      	cbnz	r0, 8006226 <_printf_float+0x432>
 80061ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f0:	f108 0201 	add.w	r2, r8, #1
 80061f4:	3b01      	subs	r3, #1
 80061f6:	4631      	mov	r1, r6
 80061f8:	4628      	mov	r0, r5
 80061fa:	47b8      	blx	r7
 80061fc:	3001      	adds	r0, #1
 80061fe:	d10e      	bne.n	800621e <_printf_float+0x42a>
 8006200:	e659      	b.n	8005eb6 <_printf_float+0xc2>
 8006202:	2301      	movs	r3, #1
 8006204:	4652      	mov	r2, sl
 8006206:	4631      	mov	r1, r6
 8006208:	4628      	mov	r0, r5
 800620a:	47b8      	blx	r7
 800620c:	3001      	adds	r0, #1
 800620e:	f43f ae52 	beq.w	8005eb6 <_printf_float+0xc2>
 8006212:	f108 0801 	add.w	r8, r8, #1
 8006216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006218:	3b01      	subs	r3, #1
 800621a:	4543      	cmp	r3, r8
 800621c:	dcf1      	bgt.n	8006202 <_printf_float+0x40e>
 800621e:	464b      	mov	r3, r9
 8006220:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006224:	e6dc      	b.n	8005fe0 <_printf_float+0x1ec>
 8006226:	f04f 0800 	mov.w	r8, #0
 800622a:	f104 0a1a 	add.w	sl, r4, #26
 800622e:	e7f2      	b.n	8006216 <_printf_float+0x422>
 8006230:	2301      	movs	r3, #1
 8006232:	4642      	mov	r2, r8
 8006234:	e7df      	b.n	80061f6 <_printf_float+0x402>
 8006236:	2301      	movs	r3, #1
 8006238:	464a      	mov	r2, r9
 800623a:	4631      	mov	r1, r6
 800623c:	4628      	mov	r0, r5
 800623e:	47b8      	blx	r7
 8006240:	3001      	adds	r0, #1
 8006242:	f43f ae38 	beq.w	8005eb6 <_printf_float+0xc2>
 8006246:	f108 0801 	add.w	r8, r8, #1
 800624a:	68e3      	ldr	r3, [r4, #12]
 800624c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800624e:	1a5b      	subs	r3, r3, r1
 8006250:	4543      	cmp	r3, r8
 8006252:	dcf0      	bgt.n	8006236 <_printf_float+0x442>
 8006254:	e6fa      	b.n	800604c <_printf_float+0x258>
 8006256:	f04f 0800 	mov.w	r8, #0
 800625a:	f104 0919 	add.w	r9, r4, #25
 800625e:	e7f4      	b.n	800624a <_printf_float+0x456>

08006260 <_printf_common>:
 8006260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006264:	4616      	mov	r6, r2
 8006266:	4699      	mov	r9, r3
 8006268:	688a      	ldr	r2, [r1, #8]
 800626a:	690b      	ldr	r3, [r1, #16]
 800626c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006270:	4293      	cmp	r3, r2
 8006272:	bfb8      	it	lt
 8006274:	4613      	movlt	r3, r2
 8006276:	6033      	str	r3, [r6, #0]
 8006278:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800627c:	4607      	mov	r7, r0
 800627e:	460c      	mov	r4, r1
 8006280:	b10a      	cbz	r2, 8006286 <_printf_common+0x26>
 8006282:	3301      	adds	r3, #1
 8006284:	6033      	str	r3, [r6, #0]
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	0699      	lsls	r1, r3, #26
 800628a:	bf42      	ittt	mi
 800628c:	6833      	ldrmi	r3, [r6, #0]
 800628e:	3302      	addmi	r3, #2
 8006290:	6033      	strmi	r3, [r6, #0]
 8006292:	6825      	ldr	r5, [r4, #0]
 8006294:	f015 0506 	ands.w	r5, r5, #6
 8006298:	d106      	bne.n	80062a8 <_printf_common+0x48>
 800629a:	f104 0a19 	add.w	sl, r4, #25
 800629e:	68e3      	ldr	r3, [r4, #12]
 80062a0:	6832      	ldr	r2, [r6, #0]
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	42ab      	cmp	r3, r5
 80062a6:	dc26      	bgt.n	80062f6 <_printf_common+0x96>
 80062a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062ac:	1e13      	subs	r3, r2, #0
 80062ae:	6822      	ldr	r2, [r4, #0]
 80062b0:	bf18      	it	ne
 80062b2:	2301      	movne	r3, #1
 80062b4:	0692      	lsls	r2, r2, #26
 80062b6:	d42b      	bmi.n	8006310 <_printf_common+0xb0>
 80062b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062bc:	4649      	mov	r1, r9
 80062be:	4638      	mov	r0, r7
 80062c0:	47c0      	blx	r8
 80062c2:	3001      	adds	r0, #1
 80062c4:	d01e      	beq.n	8006304 <_printf_common+0xa4>
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	68e5      	ldr	r5, [r4, #12]
 80062ca:	6832      	ldr	r2, [r6, #0]
 80062cc:	f003 0306 	and.w	r3, r3, #6
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	bf08      	it	eq
 80062d4:	1aad      	subeq	r5, r5, r2
 80062d6:	68a3      	ldr	r3, [r4, #8]
 80062d8:	6922      	ldr	r2, [r4, #16]
 80062da:	bf0c      	ite	eq
 80062dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062e0:	2500      	movne	r5, #0
 80062e2:	4293      	cmp	r3, r2
 80062e4:	bfc4      	itt	gt
 80062e6:	1a9b      	subgt	r3, r3, r2
 80062e8:	18ed      	addgt	r5, r5, r3
 80062ea:	2600      	movs	r6, #0
 80062ec:	341a      	adds	r4, #26
 80062ee:	42b5      	cmp	r5, r6
 80062f0:	d11a      	bne.n	8006328 <_printf_common+0xc8>
 80062f2:	2000      	movs	r0, #0
 80062f4:	e008      	b.n	8006308 <_printf_common+0xa8>
 80062f6:	2301      	movs	r3, #1
 80062f8:	4652      	mov	r2, sl
 80062fa:	4649      	mov	r1, r9
 80062fc:	4638      	mov	r0, r7
 80062fe:	47c0      	blx	r8
 8006300:	3001      	adds	r0, #1
 8006302:	d103      	bne.n	800630c <_printf_common+0xac>
 8006304:	f04f 30ff 	mov.w	r0, #4294967295
 8006308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630c:	3501      	adds	r5, #1
 800630e:	e7c6      	b.n	800629e <_printf_common+0x3e>
 8006310:	18e1      	adds	r1, r4, r3
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	2030      	movs	r0, #48	; 0x30
 8006316:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800631a:	4422      	add	r2, r4
 800631c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006320:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006324:	3302      	adds	r3, #2
 8006326:	e7c7      	b.n	80062b8 <_printf_common+0x58>
 8006328:	2301      	movs	r3, #1
 800632a:	4622      	mov	r2, r4
 800632c:	4649      	mov	r1, r9
 800632e:	4638      	mov	r0, r7
 8006330:	47c0      	blx	r8
 8006332:	3001      	adds	r0, #1
 8006334:	d0e6      	beq.n	8006304 <_printf_common+0xa4>
 8006336:	3601      	adds	r6, #1
 8006338:	e7d9      	b.n	80062ee <_printf_common+0x8e>
	...

0800633c <_printf_i>:
 800633c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006340:	7e0f      	ldrb	r7, [r1, #24]
 8006342:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006344:	2f78      	cmp	r7, #120	; 0x78
 8006346:	4691      	mov	r9, r2
 8006348:	4680      	mov	r8, r0
 800634a:	460c      	mov	r4, r1
 800634c:	469a      	mov	sl, r3
 800634e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006352:	d807      	bhi.n	8006364 <_printf_i+0x28>
 8006354:	2f62      	cmp	r7, #98	; 0x62
 8006356:	d80a      	bhi.n	800636e <_printf_i+0x32>
 8006358:	2f00      	cmp	r7, #0
 800635a:	f000 80d8 	beq.w	800650e <_printf_i+0x1d2>
 800635e:	2f58      	cmp	r7, #88	; 0x58
 8006360:	f000 80a3 	beq.w	80064aa <_printf_i+0x16e>
 8006364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800636c:	e03a      	b.n	80063e4 <_printf_i+0xa8>
 800636e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006372:	2b15      	cmp	r3, #21
 8006374:	d8f6      	bhi.n	8006364 <_printf_i+0x28>
 8006376:	a101      	add	r1, pc, #4	; (adr r1, 800637c <_printf_i+0x40>)
 8006378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800637c:	080063d5 	.word	0x080063d5
 8006380:	080063e9 	.word	0x080063e9
 8006384:	08006365 	.word	0x08006365
 8006388:	08006365 	.word	0x08006365
 800638c:	08006365 	.word	0x08006365
 8006390:	08006365 	.word	0x08006365
 8006394:	080063e9 	.word	0x080063e9
 8006398:	08006365 	.word	0x08006365
 800639c:	08006365 	.word	0x08006365
 80063a0:	08006365 	.word	0x08006365
 80063a4:	08006365 	.word	0x08006365
 80063a8:	080064f5 	.word	0x080064f5
 80063ac:	08006419 	.word	0x08006419
 80063b0:	080064d7 	.word	0x080064d7
 80063b4:	08006365 	.word	0x08006365
 80063b8:	08006365 	.word	0x08006365
 80063bc:	08006517 	.word	0x08006517
 80063c0:	08006365 	.word	0x08006365
 80063c4:	08006419 	.word	0x08006419
 80063c8:	08006365 	.word	0x08006365
 80063cc:	08006365 	.word	0x08006365
 80063d0:	080064df 	.word	0x080064df
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	1d1a      	adds	r2, r3, #4
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	602a      	str	r2, [r5, #0]
 80063dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063e4:	2301      	movs	r3, #1
 80063e6:	e0a3      	b.n	8006530 <_printf_i+0x1f4>
 80063e8:	6820      	ldr	r0, [r4, #0]
 80063ea:	6829      	ldr	r1, [r5, #0]
 80063ec:	0606      	lsls	r6, r0, #24
 80063ee:	f101 0304 	add.w	r3, r1, #4
 80063f2:	d50a      	bpl.n	800640a <_printf_i+0xce>
 80063f4:	680e      	ldr	r6, [r1, #0]
 80063f6:	602b      	str	r3, [r5, #0]
 80063f8:	2e00      	cmp	r6, #0
 80063fa:	da03      	bge.n	8006404 <_printf_i+0xc8>
 80063fc:	232d      	movs	r3, #45	; 0x2d
 80063fe:	4276      	negs	r6, r6
 8006400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006404:	485e      	ldr	r0, [pc, #376]	; (8006580 <_printf_i+0x244>)
 8006406:	230a      	movs	r3, #10
 8006408:	e019      	b.n	800643e <_printf_i+0x102>
 800640a:	680e      	ldr	r6, [r1, #0]
 800640c:	602b      	str	r3, [r5, #0]
 800640e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006412:	bf18      	it	ne
 8006414:	b236      	sxthne	r6, r6
 8006416:	e7ef      	b.n	80063f8 <_printf_i+0xbc>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	6820      	ldr	r0, [r4, #0]
 800641c:	1d19      	adds	r1, r3, #4
 800641e:	6029      	str	r1, [r5, #0]
 8006420:	0601      	lsls	r1, r0, #24
 8006422:	d501      	bpl.n	8006428 <_printf_i+0xec>
 8006424:	681e      	ldr	r6, [r3, #0]
 8006426:	e002      	b.n	800642e <_printf_i+0xf2>
 8006428:	0646      	lsls	r6, r0, #25
 800642a:	d5fb      	bpl.n	8006424 <_printf_i+0xe8>
 800642c:	881e      	ldrh	r6, [r3, #0]
 800642e:	4854      	ldr	r0, [pc, #336]	; (8006580 <_printf_i+0x244>)
 8006430:	2f6f      	cmp	r7, #111	; 0x6f
 8006432:	bf0c      	ite	eq
 8006434:	2308      	moveq	r3, #8
 8006436:	230a      	movne	r3, #10
 8006438:	2100      	movs	r1, #0
 800643a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800643e:	6865      	ldr	r5, [r4, #4]
 8006440:	60a5      	str	r5, [r4, #8]
 8006442:	2d00      	cmp	r5, #0
 8006444:	bfa2      	ittt	ge
 8006446:	6821      	ldrge	r1, [r4, #0]
 8006448:	f021 0104 	bicge.w	r1, r1, #4
 800644c:	6021      	strge	r1, [r4, #0]
 800644e:	b90e      	cbnz	r6, 8006454 <_printf_i+0x118>
 8006450:	2d00      	cmp	r5, #0
 8006452:	d04d      	beq.n	80064f0 <_printf_i+0x1b4>
 8006454:	4615      	mov	r5, r2
 8006456:	fbb6 f1f3 	udiv	r1, r6, r3
 800645a:	fb03 6711 	mls	r7, r3, r1, r6
 800645e:	5dc7      	ldrb	r7, [r0, r7]
 8006460:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006464:	4637      	mov	r7, r6
 8006466:	42bb      	cmp	r3, r7
 8006468:	460e      	mov	r6, r1
 800646a:	d9f4      	bls.n	8006456 <_printf_i+0x11a>
 800646c:	2b08      	cmp	r3, #8
 800646e:	d10b      	bne.n	8006488 <_printf_i+0x14c>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	07de      	lsls	r6, r3, #31
 8006474:	d508      	bpl.n	8006488 <_printf_i+0x14c>
 8006476:	6923      	ldr	r3, [r4, #16]
 8006478:	6861      	ldr	r1, [r4, #4]
 800647a:	4299      	cmp	r1, r3
 800647c:	bfde      	ittt	le
 800647e:	2330      	movle	r3, #48	; 0x30
 8006480:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006484:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006488:	1b52      	subs	r2, r2, r5
 800648a:	6122      	str	r2, [r4, #16]
 800648c:	f8cd a000 	str.w	sl, [sp]
 8006490:	464b      	mov	r3, r9
 8006492:	aa03      	add	r2, sp, #12
 8006494:	4621      	mov	r1, r4
 8006496:	4640      	mov	r0, r8
 8006498:	f7ff fee2 	bl	8006260 <_printf_common>
 800649c:	3001      	adds	r0, #1
 800649e:	d14c      	bne.n	800653a <_printf_i+0x1fe>
 80064a0:	f04f 30ff 	mov.w	r0, #4294967295
 80064a4:	b004      	add	sp, #16
 80064a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064aa:	4835      	ldr	r0, [pc, #212]	; (8006580 <_printf_i+0x244>)
 80064ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064b0:	6829      	ldr	r1, [r5, #0]
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80064b8:	6029      	str	r1, [r5, #0]
 80064ba:	061d      	lsls	r5, r3, #24
 80064bc:	d514      	bpl.n	80064e8 <_printf_i+0x1ac>
 80064be:	07df      	lsls	r7, r3, #31
 80064c0:	bf44      	itt	mi
 80064c2:	f043 0320 	orrmi.w	r3, r3, #32
 80064c6:	6023      	strmi	r3, [r4, #0]
 80064c8:	b91e      	cbnz	r6, 80064d2 <_printf_i+0x196>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	f023 0320 	bic.w	r3, r3, #32
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	2310      	movs	r3, #16
 80064d4:	e7b0      	b.n	8006438 <_printf_i+0xfc>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	f043 0320 	orr.w	r3, r3, #32
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	2378      	movs	r3, #120	; 0x78
 80064e0:	4828      	ldr	r0, [pc, #160]	; (8006584 <_printf_i+0x248>)
 80064e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064e6:	e7e3      	b.n	80064b0 <_printf_i+0x174>
 80064e8:	0659      	lsls	r1, r3, #25
 80064ea:	bf48      	it	mi
 80064ec:	b2b6      	uxthmi	r6, r6
 80064ee:	e7e6      	b.n	80064be <_printf_i+0x182>
 80064f0:	4615      	mov	r5, r2
 80064f2:	e7bb      	b.n	800646c <_printf_i+0x130>
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	6826      	ldr	r6, [r4, #0]
 80064f8:	6961      	ldr	r1, [r4, #20]
 80064fa:	1d18      	adds	r0, r3, #4
 80064fc:	6028      	str	r0, [r5, #0]
 80064fe:	0635      	lsls	r5, r6, #24
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	d501      	bpl.n	8006508 <_printf_i+0x1cc>
 8006504:	6019      	str	r1, [r3, #0]
 8006506:	e002      	b.n	800650e <_printf_i+0x1d2>
 8006508:	0670      	lsls	r0, r6, #25
 800650a:	d5fb      	bpl.n	8006504 <_printf_i+0x1c8>
 800650c:	8019      	strh	r1, [r3, #0]
 800650e:	2300      	movs	r3, #0
 8006510:	6123      	str	r3, [r4, #16]
 8006512:	4615      	mov	r5, r2
 8006514:	e7ba      	b.n	800648c <_printf_i+0x150>
 8006516:	682b      	ldr	r3, [r5, #0]
 8006518:	1d1a      	adds	r2, r3, #4
 800651a:	602a      	str	r2, [r5, #0]
 800651c:	681d      	ldr	r5, [r3, #0]
 800651e:	6862      	ldr	r2, [r4, #4]
 8006520:	2100      	movs	r1, #0
 8006522:	4628      	mov	r0, r5
 8006524:	f7f9 fe64 	bl	80001f0 <memchr>
 8006528:	b108      	cbz	r0, 800652e <_printf_i+0x1f2>
 800652a:	1b40      	subs	r0, r0, r5
 800652c:	6060      	str	r0, [r4, #4]
 800652e:	6863      	ldr	r3, [r4, #4]
 8006530:	6123      	str	r3, [r4, #16]
 8006532:	2300      	movs	r3, #0
 8006534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006538:	e7a8      	b.n	800648c <_printf_i+0x150>
 800653a:	6923      	ldr	r3, [r4, #16]
 800653c:	462a      	mov	r2, r5
 800653e:	4649      	mov	r1, r9
 8006540:	4640      	mov	r0, r8
 8006542:	47d0      	blx	sl
 8006544:	3001      	adds	r0, #1
 8006546:	d0ab      	beq.n	80064a0 <_printf_i+0x164>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	079b      	lsls	r3, r3, #30
 800654c:	d413      	bmi.n	8006576 <_printf_i+0x23a>
 800654e:	68e0      	ldr	r0, [r4, #12]
 8006550:	9b03      	ldr	r3, [sp, #12]
 8006552:	4298      	cmp	r0, r3
 8006554:	bfb8      	it	lt
 8006556:	4618      	movlt	r0, r3
 8006558:	e7a4      	b.n	80064a4 <_printf_i+0x168>
 800655a:	2301      	movs	r3, #1
 800655c:	4632      	mov	r2, r6
 800655e:	4649      	mov	r1, r9
 8006560:	4640      	mov	r0, r8
 8006562:	47d0      	blx	sl
 8006564:	3001      	adds	r0, #1
 8006566:	d09b      	beq.n	80064a0 <_printf_i+0x164>
 8006568:	3501      	adds	r5, #1
 800656a:	68e3      	ldr	r3, [r4, #12]
 800656c:	9903      	ldr	r1, [sp, #12]
 800656e:	1a5b      	subs	r3, r3, r1
 8006570:	42ab      	cmp	r3, r5
 8006572:	dcf2      	bgt.n	800655a <_printf_i+0x21e>
 8006574:	e7eb      	b.n	800654e <_printf_i+0x212>
 8006576:	2500      	movs	r5, #0
 8006578:	f104 0619 	add.w	r6, r4, #25
 800657c:	e7f5      	b.n	800656a <_printf_i+0x22e>
 800657e:	bf00      	nop
 8006580:	0800a612 	.word	0x0800a612
 8006584:	0800a623 	.word	0x0800a623

08006588 <_scanf_float>:
 8006588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658c:	b087      	sub	sp, #28
 800658e:	4617      	mov	r7, r2
 8006590:	9303      	str	r3, [sp, #12]
 8006592:	688b      	ldr	r3, [r1, #8]
 8006594:	1e5a      	subs	r2, r3, #1
 8006596:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800659a:	bf83      	ittte	hi
 800659c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80065a0:	195b      	addhi	r3, r3, r5
 80065a2:	9302      	strhi	r3, [sp, #8]
 80065a4:	2300      	movls	r3, #0
 80065a6:	bf86      	itte	hi
 80065a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80065ac:	608b      	strhi	r3, [r1, #8]
 80065ae:	9302      	strls	r3, [sp, #8]
 80065b0:	680b      	ldr	r3, [r1, #0]
 80065b2:	468b      	mov	fp, r1
 80065b4:	2500      	movs	r5, #0
 80065b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80065ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80065be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80065c2:	4680      	mov	r8, r0
 80065c4:	460c      	mov	r4, r1
 80065c6:	465e      	mov	r6, fp
 80065c8:	46aa      	mov	sl, r5
 80065ca:	46a9      	mov	r9, r5
 80065cc:	9501      	str	r5, [sp, #4]
 80065ce:	68a2      	ldr	r2, [r4, #8]
 80065d0:	b152      	cbz	r2, 80065e8 <_scanf_float+0x60>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b4e      	cmp	r3, #78	; 0x4e
 80065d8:	d864      	bhi.n	80066a4 <_scanf_float+0x11c>
 80065da:	2b40      	cmp	r3, #64	; 0x40
 80065dc:	d83c      	bhi.n	8006658 <_scanf_float+0xd0>
 80065de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80065e2:	b2c8      	uxtb	r0, r1
 80065e4:	280e      	cmp	r0, #14
 80065e6:	d93a      	bls.n	800665e <_scanf_float+0xd6>
 80065e8:	f1b9 0f00 	cmp.w	r9, #0
 80065ec:	d003      	beq.n	80065f6 <_scanf_float+0x6e>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065fa:	f1ba 0f01 	cmp.w	sl, #1
 80065fe:	f200 8113 	bhi.w	8006828 <_scanf_float+0x2a0>
 8006602:	455e      	cmp	r6, fp
 8006604:	f200 8105 	bhi.w	8006812 <_scanf_float+0x28a>
 8006608:	2501      	movs	r5, #1
 800660a:	4628      	mov	r0, r5
 800660c:	b007      	add	sp, #28
 800660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006612:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006616:	2a0d      	cmp	r2, #13
 8006618:	d8e6      	bhi.n	80065e8 <_scanf_float+0x60>
 800661a:	a101      	add	r1, pc, #4	; (adr r1, 8006620 <_scanf_float+0x98>)
 800661c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006620:	0800675f 	.word	0x0800675f
 8006624:	080065e9 	.word	0x080065e9
 8006628:	080065e9 	.word	0x080065e9
 800662c:	080065e9 	.word	0x080065e9
 8006630:	080067bf 	.word	0x080067bf
 8006634:	08006797 	.word	0x08006797
 8006638:	080065e9 	.word	0x080065e9
 800663c:	080065e9 	.word	0x080065e9
 8006640:	0800676d 	.word	0x0800676d
 8006644:	080065e9 	.word	0x080065e9
 8006648:	080065e9 	.word	0x080065e9
 800664c:	080065e9 	.word	0x080065e9
 8006650:	080065e9 	.word	0x080065e9
 8006654:	08006725 	.word	0x08006725
 8006658:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800665c:	e7db      	b.n	8006616 <_scanf_float+0x8e>
 800665e:	290e      	cmp	r1, #14
 8006660:	d8c2      	bhi.n	80065e8 <_scanf_float+0x60>
 8006662:	a001      	add	r0, pc, #4	; (adr r0, 8006668 <_scanf_float+0xe0>)
 8006664:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006668:	08006717 	.word	0x08006717
 800666c:	080065e9 	.word	0x080065e9
 8006670:	08006717 	.word	0x08006717
 8006674:	080067ab 	.word	0x080067ab
 8006678:	080065e9 	.word	0x080065e9
 800667c:	080066c5 	.word	0x080066c5
 8006680:	08006701 	.word	0x08006701
 8006684:	08006701 	.word	0x08006701
 8006688:	08006701 	.word	0x08006701
 800668c:	08006701 	.word	0x08006701
 8006690:	08006701 	.word	0x08006701
 8006694:	08006701 	.word	0x08006701
 8006698:	08006701 	.word	0x08006701
 800669c:	08006701 	.word	0x08006701
 80066a0:	08006701 	.word	0x08006701
 80066a4:	2b6e      	cmp	r3, #110	; 0x6e
 80066a6:	d809      	bhi.n	80066bc <_scanf_float+0x134>
 80066a8:	2b60      	cmp	r3, #96	; 0x60
 80066aa:	d8b2      	bhi.n	8006612 <_scanf_float+0x8a>
 80066ac:	2b54      	cmp	r3, #84	; 0x54
 80066ae:	d077      	beq.n	80067a0 <_scanf_float+0x218>
 80066b0:	2b59      	cmp	r3, #89	; 0x59
 80066b2:	d199      	bne.n	80065e8 <_scanf_float+0x60>
 80066b4:	2d07      	cmp	r5, #7
 80066b6:	d197      	bne.n	80065e8 <_scanf_float+0x60>
 80066b8:	2508      	movs	r5, #8
 80066ba:	e029      	b.n	8006710 <_scanf_float+0x188>
 80066bc:	2b74      	cmp	r3, #116	; 0x74
 80066be:	d06f      	beq.n	80067a0 <_scanf_float+0x218>
 80066c0:	2b79      	cmp	r3, #121	; 0x79
 80066c2:	e7f6      	b.n	80066b2 <_scanf_float+0x12a>
 80066c4:	6821      	ldr	r1, [r4, #0]
 80066c6:	05c8      	lsls	r0, r1, #23
 80066c8:	d51a      	bpl.n	8006700 <_scanf_float+0x178>
 80066ca:	9b02      	ldr	r3, [sp, #8]
 80066cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80066d0:	6021      	str	r1, [r4, #0]
 80066d2:	f109 0901 	add.w	r9, r9, #1
 80066d6:	b11b      	cbz	r3, 80066e0 <_scanf_float+0x158>
 80066d8:	3b01      	subs	r3, #1
 80066da:	3201      	adds	r2, #1
 80066dc:	9302      	str	r3, [sp, #8]
 80066de:	60a2      	str	r2, [r4, #8]
 80066e0:	68a3      	ldr	r3, [r4, #8]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	60a3      	str	r3, [r4, #8]
 80066e6:	6923      	ldr	r3, [r4, #16]
 80066e8:	3301      	adds	r3, #1
 80066ea:	6123      	str	r3, [r4, #16]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	607b      	str	r3, [r7, #4]
 80066f4:	f340 8084 	ble.w	8006800 <_scanf_float+0x278>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	3301      	adds	r3, #1
 80066fc:	603b      	str	r3, [r7, #0]
 80066fe:	e766      	b.n	80065ce <_scanf_float+0x46>
 8006700:	eb1a 0f05 	cmn.w	sl, r5
 8006704:	f47f af70 	bne.w	80065e8 <_scanf_float+0x60>
 8006708:	6822      	ldr	r2, [r4, #0]
 800670a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800670e:	6022      	str	r2, [r4, #0]
 8006710:	f806 3b01 	strb.w	r3, [r6], #1
 8006714:	e7e4      	b.n	80066e0 <_scanf_float+0x158>
 8006716:	6822      	ldr	r2, [r4, #0]
 8006718:	0610      	lsls	r0, r2, #24
 800671a:	f57f af65 	bpl.w	80065e8 <_scanf_float+0x60>
 800671e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006722:	e7f4      	b.n	800670e <_scanf_float+0x186>
 8006724:	f1ba 0f00 	cmp.w	sl, #0
 8006728:	d10e      	bne.n	8006748 <_scanf_float+0x1c0>
 800672a:	f1b9 0f00 	cmp.w	r9, #0
 800672e:	d10e      	bne.n	800674e <_scanf_float+0x1c6>
 8006730:	6822      	ldr	r2, [r4, #0]
 8006732:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006736:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800673a:	d108      	bne.n	800674e <_scanf_float+0x1c6>
 800673c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006740:	6022      	str	r2, [r4, #0]
 8006742:	f04f 0a01 	mov.w	sl, #1
 8006746:	e7e3      	b.n	8006710 <_scanf_float+0x188>
 8006748:	f1ba 0f02 	cmp.w	sl, #2
 800674c:	d055      	beq.n	80067fa <_scanf_float+0x272>
 800674e:	2d01      	cmp	r5, #1
 8006750:	d002      	beq.n	8006758 <_scanf_float+0x1d0>
 8006752:	2d04      	cmp	r5, #4
 8006754:	f47f af48 	bne.w	80065e8 <_scanf_float+0x60>
 8006758:	3501      	adds	r5, #1
 800675a:	b2ed      	uxtb	r5, r5
 800675c:	e7d8      	b.n	8006710 <_scanf_float+0x188>
 800675e:	f1ba 0f01 	cmp.w	sl, #1
 8006762:	f47f af41 	bne.w	80065e8 <_scanf_float+0x60>
 8006766:	f04f 0a02 	mov.w	sl, #2
 800676a:	e7d1      	b.n	8006710 <_scanf_float+0x188>
 800676c:	b97d      	cbnz	r5, 800678e <_scanf_float+0x206>
 800676e:	f1b9 0f00 	cmp.w	r9, #0
 8006772:	f47f af3c 	bne.w	80065ee <_scanf_float+0x66>
 8006776:	6822      	ldr	r2, [r4, #0]
 8006778:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800677c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006780:	f47f af39 	bne.w	80065f6 <_scanf_float+0x6e>
 8006784:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006788:	6022      	str	r2, [r4, #0]
 800678a:	2501      	movs	r5, #1
 800678c:	e7c0      	b.n	8006710 <_scanf_float+0x188>
 800678e:	2d03      	cmp	r5, #3
 8006790:	d0e2      	beq.n	8006758 <_scanf_float+0x1d0>
 8006792:	2d05      	cmp	r5, #5
 8006794:	e7de      	b.n	8006754 <_scanf_float+0x1cc>
 8006796:	2d02      	cmp	r5, #2
 8006798:	f47f af26 	bne.w	80065e8 <_scanf_float+0x60>
 800679c:	2503      	movs	r5, #3
 800679e:	e7b7      	b.n	8006710 <_scanf_float+0x188>
 80067a0:	2d06      	cmp	r5, #6
 80067a2:	f47f af21 	bne.w	80065e8 <_scanf_float+0x60>
 80067a6:	2507      	movs	r5, #7
 80067a8:	e7b2      	b.n	8006710 <_scanf_float+0x188>
 80067aa:	6822      	ldr	r2, [r4, #0]
 80067ac:	0591      	lsls	r1, r2, #22
 80067ae:	f57f af1b 	bpl.w	80065e8 <_scanf_float+0x60>
 80067b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80067b6:	6022      	str	r2, [r4, #0]
 80067b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80067bc:	e7a8      	b.n	8006710 <_scanf_float+0x188>
 80067be:	6822      	ldr	r2, [r4, #0]
 80067c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80067c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80067c8:	d006      	beq.n	80067d8 <_scanf_float+0x250>
 80067ca:	0550      	lsls	r0, r2, #21
 80067cc:	f57f af0c 	bpl.w	80065e8 <_scanf_float+0x60>
 80067d0:	f1b9 0f00 	cmp.w	r9, #0
 80067d4:	f43f af0f 	beq.w	80065f6 <_scanf_float+0x6e>
 80067d8:	0591      	lsls	r1, r2, #22
 80067da:	bf58      	it	pl
 80067dc:	9901      	ldrpl	r1, [sp, #4]
 80067de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80067e2:	bf58      	it	pl
 80067e4:	eba9 0101 	subpl.w	r1, r9, r1
 80067e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80067ec:	bf58      	it	pl
 80067ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80067f2:	6022      	str	r2, [r4, #0]
 80067f4:	f04f 0900 	mov.w	r9, #0
 80067f8:	e78a      	b.n	8006710 <_scanf_float+0x188>
 80067fa:	f04f 0a03 	mov.w	sl, #3
 80067fe:	e787      	b.n	8006710 <_scanf_float+0x188>
 8006800:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006804:	4639      	mov	r1, r7
 8006806:	4640      	mov	r0, r8
 8006808:	4798      	blx	r3
 800680a:	2800      	cmp	r0, #0
 800680c:	f43f aedf 	beq.w	80065ce <_scanf_float+0x46>
 8006810:	e6ea      	b.n	80065e8 <_scanf_float+0x60>
 8006812:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006816:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800681a:	463a      	mov	r2, r7
 800681c:	4640      	mov	r0, r8
 800681e:	4798      	blx	r3
 8006820:	6923      	ldr	r3, [r4, #16]
 8006822:	3b01      	subs	r3, #1
 8006824:	6123      	str	r3, [r4, #16]
 8006826:	e6ec      	b.n	8006602 <_scanf_float+0x7a>
 8006828:	1e6b      	subs	r3, r5, #1
 800682a:	2b06      	cmp	r3, #6
 800682c:	d825      	bhi.n	800687a <_scanf_float+0x2f2>
 800682e:	2d02      	cmp	r5, #2
 8006830:	d836      	bhi.n	80068a0 <_scanf_float+0x318>
 8006832:	455e      	cmp	r6, fp
 8006834:	f67f aee8 	bls.w	8006608 <_scanf_float+0x80>
 8006838:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800683c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006840:	463a      	mov	r2, r7
 8006842:	4640      	mov	r0, r8
 8006844:	4798      	blx	r3
 8006846:	6923      	ldr	r3, [r4, #16]
 8006848:	3b01      	subs	r3, #1
 800684a:	6123      	str	r3, [r4, #16]
 800684c:	e7f1      	b.n	8006832 <_scanf_float+0x2aa>
 800684e:	9802      	ldr	r0, [sp, #8]
 8006850:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006854:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006858:	9002      	str	r0, [sp, #8]
 800685a:	463a      	mov	r2, r7
 800685c:	4640      	mov	r0, r8
 800685e:	4798      	blx	r3
 8006860:	6923      	ldr	r3, [r4, #16]
 8006862:	3b01      	subs	r3, #1
 8006864:	6123      	str	r3, [r4, #16]
 8006866:	f10a 3aff 	add.w	sl, sl, #4294967295
 800686a:	fa5f fa8a 	uxtb.w	sl, sl
 800686e:	f1ba 0f02 	cmp.w	sl, #2
 8006872:	d1ec      	bne.n	800684e <_scanf_float+0x2c6>
 8006874:	3d03      	subs	r5, #3
 8006876:	b2ed      	uxtb	r5, r5
 8006878:	1b76      	subs	r6, r6, r5
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	05da      	lsls	r2, r3, #23
 800687e:	d52f      	bpl.n	80068e0 <_scanf_float+0x358>
 8006880:	055b      	lsls	r3, r3, #21
 8006882:	d510      	bpl.n	80068a6 <_scanf_float+0x31e>
 8006884:	455e      	cmp	r6, fp
 8006886:	f67f aebf 	bls.w	8006608 <_scanf_float+0x80>
 800688a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800688e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006892:	463a      	mov	r2, r7
 8006894:	4640      	mov	r0, r8
 8006896:	4798      	blx	r3
 8006898:	6923      	ldr	r3, [r4, #16]
 800689a:	3b01      	subs	r3, #1
 800689c:	6123      	str	r3, [r4, #16]
 800689e:	e7f1      	b.n	8006884 <_scanf_float+0x2fc>
 80068a0:	46aa      	mov	sl, r5
 80068a2:	9602      	str	r6, [sp, #8]
 80068a4:	e7df      	b.n	8006866 <_scanf_float+0x2de>
 80068a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80068aa:	6923      	ldr	r3, [r4, #16]
 80068ac:	2965      	cmp	r1, #101	; 0x65
 80068ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80068b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80068b6:	6123      	str	r3, [r4, #16]
 80068b8:	d00c      	beq.n	80068d4 <_scanf_float+0x34c>
 80068ba:	2945      	cmp	r1, #69	; 0x45
 80068bc:	d00a      	beq.n	80068d4 <_scanf_float+0x34c>
 80068be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068c2:	463a      	mov	r2, r7
 80068c4:	4640      	mov	r0, r8
 80068c6:	4798      	blx	r3
 80068c8:	6923      	ldr	r3, [r4, #16]
 80068ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	1eb5      	subs	r5, r6, #2
 80068d2:	6123      	str	r3, [r4, #16]
 80068d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068d8:	463a      	mov	r2, r7
 80068da:	4640      	mov	r0, r8
 80068dc:	4798      	blx	r3
 80068de:	462e      	mov	r6, r5
 80068e0:	6825      	ldr	r5, [r4, #0]
 80068e2:	f015 0510 	ands.w	r5, r5, #16
 80068e6:	d159      	bne.n	800699c <_scanf_float+0x414>
 80068e8:	7035      	strb	r5, [r6, #0]
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f4:	d11b      	bne.n	800692e <_scanf_float+0x3a6>
 80068f6:	9b01      	ldr	r3, [sp, #4]
 80068f8:	454b      	cmp	r3, r9
 80068fa:	eba3 0209 	sub.w	r2, r3, r9
 80068fe:	d123      	bne.n	8006948 <_scanf_float+0x3c0>
 8006900:	2200      	movs	r2, #0
 8006902:	4659      	mov	r1, fp
 8006904:	4640      	mov	r0, r8
 8006906:	f000 fe99 	bl	800763c <_strtod_r>
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	9b03      	ldr	r3, [sp, #12]
 800690e:	f012 0f02 	tst.w	r2, #2
 8006912:	ec57 6b10 	vmov	r6, r7, d0
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	d021      	beq.n	800695e <_scanf_float+0x3d6>
 800691a:	9903      	ldr	r1, [sp, #12]
 800691c:	1d1a      	adds	r2, r3, #4
 800691e:	600a      	str	r2, [r1, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	e9c3 6700 	strd	r6, r7, [r3]
 8006926:	68e3      	ldr	r3, [r4, #12]
 8006928:	3301      	adds	r3, #1
 800692a:	60e3      	str	r3, [r4, #12]
 800692c:	e66d      	b.n	800660a <_scanf_float+0x82>
 800692e:	9b04      	ldr	r3, [sp, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0e5      	beq.n	8006900 <_scanf_float+0x378>
 8006934:	9905      	ldr	r1, [sp, #20]
 8006936:	230a      	movs	r3, #10
 8006938:	462a      	mov	r2, r5
 800693a:	3101      	adds	r1, #1
 800693c:	4640      	mov	r0, r8
 800693e:	f000 ff05 	bl	800774c <_strtol_r>
 8006942:	9b04      	ldr	r3, [sp, #16]
 8006944:	9e05      	ldr	r6, [sp, #20]
 8006946:	1ac2      	subs	r2, r0, r3
 8006948:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800694c:	429e      	cmp	r6, r3
 800694e:	bf28      	it	cs
 8006950:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006954:	4912      	ldr	r1, [pc, #72]	; (80069a0 <_scanf_float+0x418>)
 8006956:	4630      	mov	r0, r6
 8006958:	f000 f82c 	bl	80069b4 <siprintf>
 800695c:	e7d0      	b.n	8006900 <_scanf_float+0x378>
 800695e:	9903      	ldr	r1, [sp, #12]
 8006960:	f012 0f04 	tst.w	r2, #4
 8006964:	f103 0204 	add.w	r2, r3, #4
 8006968:	600a      	str	r2, [r1, #0]
 800696a:	d1d9      	bne.n	8006920 <_scanf_float+0x398>
 800696c:	f8d3 8000 	ldr.w	r8, [r3]
 8006970:	ee10 2a10 	vmov	r2, s0
 8006974:	ee10 0a10 	vmov	r0, s0
 8006978:	463b      	mov	r3, r7
 800697a:	4639      	mov	r1, r7
 800697c:	f7fa f8de 	bl	8000b3c <__aeabi_dcmpun>
 8006980:	b128      	cbz	r0, 800698e <_scanf_float+0x406>
 8006982:	4808      	ldr	r0, [pc, #32]	; (80069a4 <_scanf_float+0x41c>)
 8006984:	f000 f810 	bl	80069a8 <nanf>
 8006988:	ed88 0a00 	vstr	s0, [r8]
 800698c:	e7cb      	b.n	8006926 <_scanf_float+0x39e>
 800698e:	4630      	mov	r0, r6
 8006990:	4639      	mov	r1, r7
 8006992:	f7fa f931 	bl	8000bf8 <__aeabi_d2f>
 8006996:	f8c8 0000 	str.w	r0, [r8]
 800699a:	e7c4      	b.n	8006926 <_scanf_float+0x39e>
 800699c:	2500      	movs	r5, #0
 800699e:	e634      	b.n	800660a <_scanf_float+0x82>
 80069a0:	0800a634 	.word	0x0800a634
 80069a4:	0800aa40 	.word	0x0800aa40

080069a8 <nanf>:
 80069a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80069b0 <nanf+0x8>
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	7fc00000 	.word	0x7fc00000

080069b4 <siprintf>:
 80069b4:	b40e      	push	{r1, r2, r3}
 80069b6:	b500      	push	{lr}
 80069b8:	b09c      	sub	sp, #112	; 0x70
 80069ba:	ab1d      	add	r3, sp, #116	; 0x74
 80069bc:	9002      	str	r0, [sp, #8]
 80069be:	9006      	str	r0, [sp, #24]
 80069c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069c4:	4809      	ldr	r0, [pc, #36]	; (80069ec <siprintf+0x38>)
 80069c6:	9107      	str	r1, [sp, #28]
 80069c8:	9104      	str	r1, [sp, #16]
 80069ca:	4909      	ldr	r1, [pc, #36]	; (80069f0 <siprintf+0x3c>)
 80069cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80069d0:	9105      	str	r1, [sp, #20]
 80069d2:	6800      	ldr	r0, [r0, #0]
 80069d4:	9301      	str	r3, [sp, #4]
 80069d6:	a902      	add	r1, sp, #8
 80069d8:	f002 fee4 	bl	80097a4 <_svfiprintf_r>
 80069dc:	9b02      	ldr	r3, [sp, #8]
 80069de:	2200      	movs	r2, #0
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	b01c      	add	sp, #112	; 0x70
 80069e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069e8:	b003      	add	sp, #12
 80069ea:	4770      	bx	lr
 80069ec:	2000003c 	.word	0x2000003c
 80069f0:	ffff0208 	.word	0xffff0208

080069f4 <sulp>:
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	4604      	mov	r4, r0
 80069f8:	460d      	mov	r5, r1
 80069fa:	ec45 4b10 	vmov	d0, r4, r5
 80069fe:	4616      	mov	r6, r2
 8006a00:	f002 fc2e 	bl	8009260 <__ulp>
 8006a04:	ec51 0b10 	vmov	r0, r1, d0
 8006a08:	b17e      	cbz	r6, 8006a2a <sulp+0x36>
 8006a0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006a0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	dd09      	ble.n	8006a2a <sulp+0x36>
 8006a16:	051b      	lsls	r3, r3, #20
 8006a18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006a1c:	2400      	movs	r4, #0
 8006a1e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006a22:	4622      	mov	r2, r4
 8006a24:	462b      	mov	r3, r5
 8006a26:	f7f9 fdef 	bl	8000608 <__aeabi_dmul>
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	0000      	movs	r0, r0
	...

08006a30 <_strtod_l>:
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	ed2d 8b02 	vpush	{d8}
 8006a38:	b09d      	sub	sp, #116	; 0x74
 8006a3a:	461f      	mov	r7, r3
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9318      	str	r3, [sp, #96]	; 0x60
 8006a40:	4ba2      	ldr	r3, [pc, #648]	; (8006ccc <_strtod_l+0x29c>)
 8006a42:	9213      	str	r2, [sp, #76]	; 0x4c
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	9305      	str	r3, [sp, #20]
 8006a48:	4604      	mov	r4, r0
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	4688      	mov	r8, r1
 8006a4e:	f7f9 fbc7 	bl	80001e0 <strlen>
 8006a52:	f04f 0a00 	mov.w	sl, #0
 8006a56:	4605      	mov	r5, r0
 8006a58:	f04f 0b00 	mov.w	fp, #0
 8006a5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006a60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a62:	781a      	ldrb	r2, [r3, #0]
 8006a64:	2a2b      	cmp	r2, #43	; 0x2b
 8006a66:	d04e      	beq.n	8006b06 <_strtod_l+0xd6>
 8006a68:	d83b      	bhi.n	8006ae2 <_strtod_l+0xb2>
 8006a6a:	2a0d      	cmp	r2, #13
 8006a6c:	d834      	bhi.n	8006ad8 <_strtod_l+0xa8>
 8006a6e:	2a08      	cmp	r2, #8
 8006a70:	d834      	bhi.n	8006adc <_strtod_l+0xac>
 8006a72:	2a00      	cmp	r2, #0
 8006a74:	d03e      	beq.n	8006af4 <_strtod_l+0xc4>
 8006a76:	2300      	movs	r3, #0
 8006a78:	930a      	str	r3, [sp, #40]	; 0x28
 8006a7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006a7c:	7833      	ldrb	r3, [r6, #0]
 8006a7e:	2b30      	cmp	r3, #48	; 0x30
 8006a80:	f040 80b0 	bne.w	8006be4 <_strtod_l+0x1b4>
 8006a84:	7873      	ldrb	r3, [r6, #1]
 8006a86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a8a:	2b58      	cmp	r3, #88	; 0x58
 8006a8c:	d168      	bne.n	8006b60 <_strtod_l+0x130>
 8006a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	ab18      	add	r3, sp, #96	; 0x60
 8006a94:	9702      	str	r7, [sp, #8]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	4a8d      	ldr	r2, [pc, #564]	; (8006cd0 <_strtod_l+0x2a0>)
 8006a9a:	ab19      	add	r3, sp, #100	; 0x64
 8006a9c:	a917      	add	r1, sp, #92	; 0x5c
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f001 fd38 	bl	8008514 <__gethex>
 8006aa4:	f010 0707 	ands.w	r7, r0, #7
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	d005      	beq.n	8006ab8 <_strtod_l+0x88>
 8006aac:	2f06      	cmp	r7, #6
 8006aae:	d12c      	bne.n	8006b0a <_strtod_l+0xda>
 8006ab0:	3601      	adds	r6, #1
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	9617      	str	r6, [sp, #92]	; 0x5c
 8006ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ab8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f040 8590 	bne.w	80075e0 <_strtod_l+0xbb0>
 8006ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac2:	b1eb      	cbz	r3, 8006b00 <_strtod_l+0xd0>
 8006ac4:	4652      	mov	r2, sl
 8006ac6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006aca:	ec43 2b10 	vmov	d0, r2, r3
 8006ace:	b01d      	add	sp, #116	; 0x74
 8006ad0:	ecbd 8b02 	vpop	{d8}
 8006ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad8:	2a20      	cmp	r2, #32
 8006ada:	d1cc      	bne.n	8006a76 <_strtod_l+0x46>
 8006adc:	3301      	adds	r3, #1
 8006ade:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ae0:	e7be      	b.n	8006a60 <_strtod_l+0x30>
 8006ae2:	2a2d      	cmp	r2, #45	; 0x2d
 8006ae4:	d1c7      	bne.n	8006a76 <_strtod_l+0x46>
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	920a      	str	r2, [sp, #40]	; 0x28
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	9217      	str	r2, [sp, #92]	; 0x5c
 8006aee:	785b      	ldrb	r3, [r3, #1]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1c2      	bne.n	8006a7a <_strtod_l+0x4a>
 8006af4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006af6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f040 856e 	bne.w	80075dc <_strtod_l+0xbac>
 8006b00:	4652      	mov	r2, sl
 8006b02:	465b      	mov	r3, fp
 8006b04:	e7e1      	b.n	8006aca <_strtod_l+0x9a>
 8006b06:	2200      	movs	r2, #0
 8006b08:	e7ee      	b.n	8006ae8 <_strtod_l+0xb8>
 8006b0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006b0c:	b13a      	cbz	r2, 8006b1e <_strtod_l+0xee>
 8006b0e:	2135      	movs	r1, #53	; 0x35
 8006b10:	a81a      	add	r0, sp, #104	; 0x68
 8006b12:	f002 fcb0 	bl	8009476 <__copybits>
 8006b16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f002 f86f 	bl	8008bfc <_Bfree>
 8006b1e:	3f01      	subs	r7, #1
 8006b20:	2f04      	cmp	r7, #4
 8006b22:	d806      	bhi.n	8006b32 <_strtod_l+0x102>
 8006b24:	e8df f007 	tbb	[pc, r7]
 8006b28:	1714030a 	.word	0x1714030a
 8006b2c:	0a          	.byte	0x0a
 8006b2d:	00          	.byte	0x00
 8006b2e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006b32:	0728      	lsls	r0, r5, #28
 8006b34:	d5c0      	bpl.n	8006ab8 <_strtod_l+0x88>
 8006b36:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006b3a:	e7bd      	b.n	8006ab8 <_strtod_l+0x88>
 8006b3c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006b40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006b4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006b4e:	e7f0      	b.n	8006b32 <_strtod_l+0x102>
 8006b50:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006cd4 <_strtod_l+0x2a4>
 8006b54:	e7ed      	b.n	8006b32 <_strtod_l+0x102>
 8006b56:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006b5a:	f04f 3aff 	mov.w	sl, #4294967295
 8006b5e:	e7e8      	b.n	8006b32 <_strtod_l+0x102>
 8006b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b66:	785b      	ldrb	r3, [r3, #1]
 8006b68:	2b30      	cmp	r3, #48	; 0x30
 8006b6a:	d0f9      	beq.n	8006b60 <_strtod_l+0x130>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0a3      	beq.n	8006ab8 <_strtod_l+0x88>
 8006b70:	2301      	movs	r3, #1
 8006b72:	f04f 0900 	mov.w	r9, #0
 8006b76:	9304      	str	r3, [sp, #16]
 8006b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b7a:	9308      	str	r3, [sp, #32]
 8006b7c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006b80:	464f      	mov	r7, r9
 8006b82:	220a      	movs	r2, #10
 8006b84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006b86:	7806      	ldrb	r6, [r0, #0]
 8006b88:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006b8c:	b2d9      	uxtb	r1, r3
 8006b8e:	2909      	cmp	r1, #9
 8006b90:	d92a      	bls.n	8006be8 <_strtod_l+0x1b8>
 8006b92:	9905      	ldr	r1, [sp, #20]
 8006b94:	462a      	mov	r2, r5
 8006b96:	f002 ff1f 	bl	80099d8 <strncmp>
 8006b9a:	b398      	cbz	r0, 8006c04 <_strtod_l+0x1d4>
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	4632      	mov	r2, r6
 8006ba0:	463d      	mov	r5, r7
 8006ba2:	9005      	str	r0, [sp, #20]
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2a65      	cmp	r2, #101	; 0x65
 8006ba8:	d001      	beq.n	8006bae <_strtod_l+0x17e>
 8006baa:	2a45      	cmp	r2, #69	; 0x45
 8006bac:	d118      	bne.n	8006be0 <_strtod_l+0x1b0>
 8006bae:	b91d      	cbnz	r5, 8006bb8 <_strtod_l+0x188>
 8006bb0:	9a04      	ldr	r2, [sp, #16]
 8006bb2:	4302      	orrs	r2, r0
 8006bb4:	d09e      	beq.n	8006af4 <_strtod_l+0xc4>
 8006bb6:	2500      	movs	r5, #0
 8006bb8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006bbc:	f108 0201 	add.w	r2, r8, #1
 8006bc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8006bc2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006bc6:	2a2b      	cmp	r2, #43	; 0x2b
 8006bc8:	d075      	beq.n	8006cb6 <_strtod_l+0x286>
 8006bca:	2a2d      	cmp	r2, #45	; 0x2d
 8006bcc:	d07b      	beq.n	8006cc6 <_strtod_l+0x296>
 8006bce:	f04f 0c00 	mov.w	ip, #0
 8006bd2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006bd6:	2909      	cmp	r1, #9
 8006bd8:	f240 8082 	bls.w	8006ce0 <_strtod_l+0x2b0>
 8006bdc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006be0:	2600      	movs	r6, #0
 8006be2:	e09d      	b.n	8006d20 <_strtod_l+0x2f0>
 8006be4:	2300      	movs	r3, #0
 8006be6:	e7c4      	b.n	8006b72 <_strtod_l+0x142>
 8006be8:	2f08      	cmp	r7, #8
 8006bea:	bfd8      	it	le
 8006bec:	9907      	ldrle	r1, [sp, #28]
 8006bee:	f100 0001 	add.w	r0, r0, #1
 8006bf2:	bfda      	itte	le
 8006bf4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006bf8:	9307      	strle	r3, [sp, #28]
 8006bfa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006bfe:	3701      	adds	r7, #1
 8006c00:	9017      	str	r0, [sp, #92]	; 0x5c
 8006c02:	e7bf      	b.n	8006b84 <_strtod_l+0x154>
 8006c04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c06:	195a      	adds	r2, r3, r5
 8006c08:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c0a:	5d5a      	ldrb	r2, [r3, r5]
 8006c0c:	2f00      	cmp	r7, #0
 8006c0e:	d037      	beq.n	8006c80 <_strtod_l+0x250>
 8006c10:	9005      	str	r0, [sp, #20]
 8006c12:	463d      	mov	r5, r7
 8006c14:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006c18:	2b09      	cmp	r3, #9
 8006c1a:	d912      	bls.n	8006c42 <_strtod_l+0x212>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e7c2      	b.n	8006ba6 <_strtod_l+0x176>
 8006c20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c26:	785a      	ldrb	r2, [r3, #1]
 8006c28:	3001      	adds	r0, #1
 8006c2a:	2a30      	cmp	r2, #48	; 0x30
 8006c2c:	d0f8      	beq.n	8006c20 <_strtod_l+0x1f0>
 8006c2e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006c32:	2b08      	cmp	r3, #8
 8006c34:	f200 84d9 	bhi.w	80075ea <_strtod_l+0xbba>
 8006c38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c3a:	9005      	str	r0, [sp, #20]
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	9308      	str	r3, [sp, #32]
 8006c40:	4605      	mov	r5, r0
 8006c42:	3a30      	subs	r2, #48	; 0x30
 8006c44:	f100 0301 	add.w	r3, r0, #1
 8006c48:	d014      	beq.n	8006c74 <_strtod_l+0x244>
 8006c4a:	9905      	ldr	r1, [sp, #20]
 8006c4c:	4419      	add	r1, r3
 8006c4e:	9105      	str	r1, [sp, #20]
 8006c50:	462b      	mov	r3, r5
 8006c52:	eb00 0e05 	add.w	lr, r0, r5
 8006c56:	210a      	movs	r1, #10
 8006c58:	4573      	cmp	r3, lr
 8006c5a:	d113      	bne.n	8006c84 <_strtod_l+0x254>
 8006c5c:	182b      	adds	r3, r5, r0
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	f105 0501 	add.w	r5, r5, #1
 8006c64:	4405      	add	r5, r0
 8006c66:	dc1c      	bgt.n	8006ca2 <_strtod_l+0x272>
 8006c68:	9907      	ldr	r1, [sp, #28]
 8006c6a:	230a      	movs	r3, #10
 8006c6c:	fb03 2301 	mla	r3, r3, r1, r2
 8006c70:	9307      	str	r3, [sp, #28]
 8006c72:	2300      	movs	r3, #0
 8006c74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c76:	1c51      	adds	r1, r2, #1
 8006c78:	9117      	str	r1, [sp, #92]	; 0x5c
 8006c7a:	7852      	ldrb	r2, [r2, #1]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	e7c9      	b.n	8006c14 <_strtod_l+0x1e4>
 8006c80:	4638      	mov	r0, r7
 8006c82:	e7d2      	b.n	8006c2a <_strtod_l+0x1fa>
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	dc04      	bgt.n	8006c92 <_strtod_l+0x262>
 8006c88:	9e07      	ldr	r6, [sp, #28]
 8006c8a:	434e      	muls	r6, r1
 8006c8c:	9607      	str	r6, [sp, #28]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	e7e2      	b.n	8006c58 <_strtod_l+0x228>
 8006c92:	f103 0c01 	add.w	ip, r3, #1
 8006c96:	f1bc 0f10 	cmp.w	ip, #16
 8006c9a:	bfd8      	it	le
 8006c9c:	fb01 f909 	mulle.w	r9, r1, r9
 8006ca0:	e7f5      	b.n	8006c8e <_strtod_l+0x25e>
 8006ca2:	2d10      	cmp	r5, #16
 8006ca4:	bfdc      	itt	le
 8006ca6:	230a      	movle	r3, #10
 8006ca8:	fb03 2909 	mlale	r9, r3, r9, r2
 8006cac:	e7e1      	b.n	8006c72 <_strtod_l+0x242>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	9305      	str	r3, [sp, #20]
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e77c      	b.n	8006bb0 <_strtod_l+0x180>
 8006cb6:	f04f 0c00 	mov.w	ip, #0
 8006cba:	f108 0202 	add.w	r2, r8, #2
 8006cbe:	9217      	str	r2, [sp, #92]	; 0x5c
 8006cc0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006cc4:	e785      	b.n	8006bd2 <_strtod_l+0x1a2>
 8006cc6:	f04f 0c01 	mov.w	ip, #1
 8006cca:	e7f6      	b.n	8006cba <_strtod_l+0x28a>
 8006ccc:	0800a888 	.word	0x0800a888
 8006cd0:	0800a63c 	.word	0x0800a63c
 8006cd4:	7ff00000 	.word	0x7ff00000
 8006cd8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006cda:	1c51      	adds	r1, r2, #1
 8006cdc:	9117      	str	r1, [sp, #92]	; 0x5c
 8006cde:	7852      	ldrb	r2, [r2, #1]
 8006ce0:	2a30      	cmp	r2, #48	; 0x30
 8006ce2:	d0f9      	beq.n	8006cd8 <_strtod_l+0x2a8>
 8006ce4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006ce8:	2908      	cmp	r1, #8
 8006cea:	f63f af79 	bhi.w	8006be0 <_strtod_l+0x1b0>
 8006cee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006cf2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006cf4:	9206      	str	r2, [sp, #24]
 8006cf6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006cf8:	1c51      	adds	r1, r2, #1
 8006cfa:	9117      	str	r1, [sp, #92]	; 0x5c
 8006cfc:	7852      	ldrb	r2, [r2, #1]
 8006cfe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006d02:	2e09      	cmp	r6, #9
 8006d04:	d937      	bls.n	8006d76 <_strtod_l+0x346>
 8006d06:	9e06      	ldr	r6, [sp, #24]
 8006d08:	1b89      	subs	r1, r1, r6
 8006d0a:	2908      	cmp	r1, #8
 8006d0c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006d10:	dc02      	bgt.n	8006d18 <_strtod_l+0x2e8>
 8006d12:	4576      	cmp	r6, lr
 8006d14:	bfa8      	it	ge
 8006d16:	4676      	movge	r6, lr
 8006d18:	f1bc 0f00 	cmp.w	ip, #0
 8006d1c:	d000      	beq.n	8006d20 <_strtod_l+0x2f0>
 8006d1e:	4276      	negs	r6, r6
 8006d20:	2d00      	cmp	r5, #0
 8006d22:	d14d      	bne.n	8006dc0 <_strtod_l+0x390>
 8006d24:	9904      	ldr	r1, [sp, #16]
 8006d26:	4301      	orrs	r1, r0
 8006d28:	f47f aec6 	bne.w	8006ab8 <_strtod_l+0x88>
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f47f aee1 	bne.w	8006af4 <_strtod_l+0xc4>
 8006d32:	2a69      	cmp	r2, #105	; 0x69
 8006d34:	d027      	beq.n	8006d86 <_strtod_l+0x356>
 8006d36:	dc24      	bgt.n	8006d82 <_strtod_l+0x352>
 8006d38:	2a49      	cmp	r2, #73	; 0x49
 8006d3a:	d024      	beq.n	8006d86 <_strtod_l+0x356>
 8006d3c:	2a4e      	cmp	r2, #78	; 0x4e
 8006d3e:	f47f aed9 	bne.w	8006af4 <_strtod_l+0xc4>
 8006d42:	499f      	ldr	r1, [pc, #636]	; (8006fc0 <_strtod_l+0x590>)
 8006d44:	a817      	add	r0, sp, #92	; 0x5c
 8006d46:	f001 fe3d 	bl	80089c4 <__match>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	f43f aed2 	beq.w	8006af4 <_strtod_l+0xc4>
 8006d50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b28      	cmp	r3, #40	; 0x28
 8006d56:	d12d      	bne.n	8006db4 <_strtod_l+0x384>
 8006d58:	499a      	ldr	r1, [pc, #616]	; (8006fc4 <_strtod_l+0x594>)
 8006d5a:	aa1a      	add	r2, sp, #104	; 0x68
 8006d5c:	a817      	add	r0, sp, #92	; 0x5c
 8006d5e:	f001 fe45 	bl	80089ec <__hexnan>
 8006d62:	2805      	cmp	r0, #5
 8006d64:	d126      	bne.n	8006db4 <_strtod_l+0x384>
 8006d66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d68:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006d6c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006d70:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006d74:	e6a0      	b.n	8006ab8 <_strtod_l+0x88>
 8006d76:	210a      	movs	r1, #10
 8006d78:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006d7c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006d80:	e7b9      	b.n	8006cf6 <_strtod_l+0x2c6>
 8006d82:	2a6e      	cmp	r2, #110	; 0x6e
 8006d84:	e7db      	b.n	8006d3e <_strtod_l+0x30e>
 8006d86:	4990      	ldr	r1, [pc, #576]	; (8006fc8 <_strtod_l+0x598>)
 8006d88:	a817      	add	r0, sp, #92	; 0x5c
 8006d8a:	f001 fe1b 	bl	80089c4 <__match>
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	f43f aeb0 	beq.w	8006af4 <_strtod_l+0xc4>
 8006d94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d96:	498d      	ldr	r1, [pc, #564]	; (8006fcc <_strtod_l+0x59c>)
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	a817      	add	r0, sp, #92	; 0x5c
 8006d9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8006d9e:	f001 fe11 	bl	80089c4 <__match>
 8006da2:	b910      	cbnz	r0, 8006daa <_strtod_l+0x37a>
 8006da4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006da6:	3301      	adds	r3, #1
 8006da8:	9317      	str	r3, [sp, #92]	; 0x5c
 8006daa:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006fdc <_strtod_l+0x5ac>
 8006dae:	f04f 0a00 	mov.w	sl, #0
 8006db2:	e681      	b.n	8006ab8 <_strtod_l+0x88>
 8006db4:	4886      	ldr	r0, [pc, #536]	; (8006fd0 <_strtod_l+0x5a0>)
 8006db6:	f002 fdf7 	bl	80099a8 <nan>
 8006dba:	ec5b ab10 	vmov	sl, fp, d0
 8006dbe:	e67b      	b.n	8006ab8 <_strtod_l+0x88>
 8006dc0:	9b05      	ldr	r3, [sp, #20]
 8006dc2:	9807      	ldr	r0, [sp, #28]
 8006dc4:	1af3      	subs	r3, r6, r3
 8006dc6:	2f00      	cmp	r7, #0
 8006dc8:	bf08      	it	eq
 8006dca:	462f      	moveq	r7, r5
 8006dcc:	2d10      	cmp	r5, #16
 8006dce:	9306      	str	r3, [sp, #24]
 8006dd0:	46a8      	mov	r8, r5
 8006dd2:	bfa8      	it	ge
 8006dd4:	f04f 0810 	movge.w	r8, #16
 8006dd8:	f7f9 fb9c 	bl	8000514 <__aeabi_ui2d>
 8006ddc:	2d09      	cmp	r5, #9
 8006dde:	4682      	mov	sl, r0
 8006de0:	468b      	mov	fp, r1
 8006de2:	dd13      	ble.n	8006e0c <_strtod_l+0x3dc>
 8006de4:	4b7b      	ldr	r3, [pc, #492]	; (8006fd4 <_strtod_l+0x5a4>)
 8006de6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006dea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006dee:	f7f9 fc0b 	bl	8000608 <__aeabi_dmul>
 8006df2:	4682      	mov	sl, r0
 8006df4:	4648      	mov	r0, r9
 8006df6:	468b      	mov	fp, r1
 8006df8:	f7f9 fb8c 	bl	8000514 <__aeabi_ui2d>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4650      	mov	r0, sl
 8006e02:	4659      	mov	r1, fp
 8006e04:	f7f9 fa4a 	bl	800029c <__adddf3>
 8006e08:	4682      	mov	sl, r0
 8006e0a:	468b      	mov	fp, r1
 8006e0c:	2d0f      	cmp	r5, #15
 8006e0e:	dc38      	bgt.n	8006e82 <_strtod_l+0x452>
 8006e10:	9b06      	ldr	r3, [sp, #24]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f43f ae50 	beq.w	8006ab8 <_strtod_l+0x88>
 8006e18:	dd24      	ble.n	8006e64 <_strtod_l+0x434>
 8006e1a:	2b16      	cmp	r3, #22
 8006e1c:	dc0b      	bgt.n	8006e36 <_strtod_l+0x406>
 8006e1e:	496d      	ldr	r1, [pc, #436]	; (8006fd4 <_strtod_l+0x5a4>)
 8006e20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e28:	4652      	mov	r2, sl
 8006e2a:	465b      	mov	r3, fp
 8006e2c:	f7f9 fbec 	bl	8000608 <__aeabi_dmul>
 8006e30:	4682      	mov	sl, r0
 8006e32:	468b      	mov	fp, r1
 8006e34:	e640      	b.n	8006ab8 <_strtod_l+0x88>
 8006e36:	9a06      	ldr	r2, [sp, #24]
 8006e38:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	db20      	blt.n	8006e82 <_strtod_l+0x452>
 8006e40:	4c64      	ldr	r4, [pc, #400]	; (8006fd4 <_strtod_l+0x5a4>)
 8006e42:	f1c5 050f 	rsb	r5, r5, #15
 8006e46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006e4a:	4652      	mov	r2, sl
 8006e4c:	465b      	mov	r3, fp
 8006e4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e52:	f7f9 fbd9 	bl	8000608 <__aeabi_dmul>
 8006e56:	9b06      	ldr	r3, [sp, #24]
 8006e58:	1b5d      	subs	r5, r3, r5
 8006e5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006e5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006e62:	e7e3      	b.n	8006e2c <_strtod_l+0x3fc>
 8006e64:	9b06      	ldr	r3, [sp, #24]
 8006e66:	3316      	adds	r3, #22
 8006e68:	db0b      	blt.n	8006e82 <_strtod_l+0x452>
 8006e6a:	9b05      	ldr	r3, [sp, #20]
 8006e6c:	1b9e      	subs	r6, r3, r6
 8006e6e:	4b59      	ldr	r3, [pc, #356]	; (8006fd4 <_strtod_l+0x5a4>)
 8006e70:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006e74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e78:	4650      	mov	r0, sl
 8006e7a:	4659      	mov	r1, fp
 8006e7c:	f7f9 fcee 	bl	800085c <__aeabi_ddiv>
 8006e80:	e7d6      	b.n	8006e30 <_strtod_l+0x400>
 8006e82:	9b06      	ldr	r3, [sp, #24]
 8006e84:	eba5 0808 	sub.w	r8, r5, r8
 8006e88:	4498      	add	r8, r3
 8006e8a:	f1b8 0f00 	cmp.w	r8, #0
 8006e8e:	dd74      	ble.n	8006f7a <_strtod_l+0x54a>
 8006e90:	f018 030f 	ands.w	r3, r8, #15
 8006e94:	d00a      	beq.n	8006eac <_strtod_l+0x47c>
 8006e96:	494f      	ldr	r1, [pc, #316]	; (8006fd4 <_strtod_l+0x5a4>)
 8006e98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e9c:	4652      	mov	r2, sl
 8006e9e:	465b      	mov	r3, fp
 8006ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ea4:	f7f9 fbb0 	bl	8000608 <__aeabi_dmul>
 8006ea8:	4682      	mov	sl, r0
 8006eaa:	468b      	mov	fp, r1
 8006eac:	f038 080f 	bics.w	r8, r8, #15
 8006eb0:	d04f      	beq.n	8006f52 <_strtod_l+0x522>
 8006eb2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006eb6:	dd22      	ble.n	8006efe <_strtod_l+0x4ce>
 8006eb8:	2500      	movs	r5, #0
 8006eba:	462e      	mov	r6, r5
 8006ebc:	9507      	str	r5, [sp, #28]
 8006ebe:	9505      	str	r5, [sp, #20]
 8006ec0:	2322      	movs	r3, #34	; 0x22
 8006ec2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006fdc <_strtod_l+0x5ac>
 8006ec6:	6023      	str	r3, [r4, #0]
 8006ec8:	f04f 0a00 	mov.w	sl, #0
 8006ecc:	9b07      	ldr	r3, [sp, #28]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f43f adf2 	beq.w	8006ab8 <_strtod_l+0x88>
 8006ed4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f001 fe90 	bl	8008bfc <_Bfree>
 8006edc:	9905      	ldr	r1, [sp, #20]
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f001 fe8c 	bl	8008bfc <_Bfree>
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f001 fe88 	bl	8008bfc <_Bfree>
 8006eec:	9907      	ldr	r1, [sp, #28]
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f001 fe84 	bl	8008bfc <_Bfree>
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f001 fe80 	bl	8008bfc <_Bfree>
 8006efc:	e5dc      	b.n	8006ab8 <_strtod_l+0x88>
 8006efe:	4b36      	ldr	r3, [pc, #216]	; (8006fd8 <_strtod_l+0x5a8>)
 8006f00:	9304      	str	r3, [sp, #16]
 8006f02:	2300      	movs	r3, #0
 8006f04:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006f08:	4650      	mov	r0, sl
 8006f0a:	4659      	mov	r1, fp
 8006f0c:	4699      	mov	r9, r3
 8006f0e:	f1b8 0f01 	cmp.w	r8, #1
 8006f12:	dc21      	bgt.n	8006f58 <_strtod_l+0x528>
 8006f14:	b10b      	cbz	r3, 8006f1a <_strtod_l+0x4ea>
 8006f16:	4682      	mov	sl, r0
 8006f18:	468b      	mov	fp, r1
 8006f1a:	4b2f      	ldr	r3, [pc, #188]	; (8006fd8 <_strtod_l+0x5a8>)
 8006f1c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006f20:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006f24:	4652      	mov	r2, sl
 8006f26:	465b      	mov	r3, fp
 8006f28:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006f2c:	f7f9 fb6c 	bl	8000608 <__aeabi_dmul>
 8006f30:	4b2a      	ldr	r3, [pc, #168]	; (8006fdc <_strtod_l+0x5ac>)
 8006f32:	460a      	mov	r2, r1
 8006f34:	400b      	ands	r3, r1
 8006f36:	492a      	ldr	r1, [pc, #168]	; (8006fe0 <_strtod_l+0x5b0>)
 8006f38:	428b      	cmp	r3, r1
 8006f3a:	4682      	mov	sl, r0
 8006f3c:	d8bc      	bhi.n	8006eb8 <_strtod_l+0x488>
 8006f3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006f42:	428b      	cmp	r3, r1
 8006f44:	bf86      	itte	hi
 8006f46:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006fe4 <_strtod_l+0x5b4>
 8006f4a:	f04f 3aff 	movhi.w	sl, #4294967295
 8006f4e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006f52:	2300      	movs	r3, #0
 8006f54:	9304      	str	r3, [sp, #16]
 8006f56:	e084      	b.n	8007062 <_strtod_l+0x632>
 8006f58:	f018 0f01 	tst.w	r8, #1
 8006f5c:	d005      	beq.n	8006f6a <_strtod_l+0x53a>
 8006f5e:	9b04      	ldr	r3, [sp, #16]
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	f7f9 fb50 	bl	8000608 <__aeabi_dmul>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	9a04      	ldr	r2, [sp, #16]
 8006f6c:	3208      	adds	r2, #8
 8006f6e:	f109 0901 	add.w	r9, r9, #1
 8006f72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006f76:	9204      	str	r2, [sp, #16]
 8006f78:	e7c9      	b.n	8006f0e <_strtod_l+0x4de>
 8006f7a:	d0ea      	beq.n	8006f52 <_strtod_l+0x522>
 8006f7c:	f1c8 0800 	rsb	r8, r8, #0
 8006f80:	f018 020f 	ands.w	r2, r8, #15
 8006f84:	d00a      	beq.n	8006f9c <_strtod_l+0x56c>
 8006f86:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <_strtod_l+0x5a4>)
 8006f88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f8c:	4650      	mov	r0, sl
 8006f8e:	4659      	mov	r1, fp
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	f7f9 fc62 	bl	800085c <__aeabi_ddiv>
 8006f98:	4682      	mov	sl, r0
 8006f9a:	468b      	mov	fp, r1
 8006f9c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006fa0:	d0d7      	beq.n	8006f52 <_strtod_l+0x522>
 8006fa2:	f1b8 0f1f 	cmp.w	r8, #31
 8006fa6:	dd1f      	ble.n	8006fe8 <_strtod_l+0x5b8>
 8006fa8:	2500      	movs	r5, #0
 8006faa:	462e      	mov	r6, r5
 8006fac:	9507      	str	r5, [sp, #28]
 8006fae:	9505      	str	r5, [sp, #20]
 8006fb0:	2322      	movs	r3, #34	; 0x22
 8006fb2:	f04f 0a00 	mov.w	sl, #0
 8006fb6:	f04f 0b00 	mov.w	fp, #0
 8006fba:	6023      	str	r3, [r4, #0]
 8006fbc:	e786      	b.n	8006ecc <_strtod_l+0x49c>
 8006fbe:	bf00      	nop
 8006fc0:	0800a60d 	.word	0x0800a60d
 8006fc4:	0800a650 	.word	0x0800a650
 8006fc8:	0800a605 	.word	0x0800a605
 8006fcc:	0800a794 	.word	0x0800a794
 8006fd0:	0800aa40 	.word	0x0800aa40
 8006fd4:	0800a920 	.word	0x0800a920
 8006fd8:	0800a8f8 	.word	0x0800a8f8
 8006fdc:	7ff00000 	.word	0x7ff00000
 8006fe0:	7ca00000 	.word	0x7ca00000
 8006fe4:	7fefffff 	.word	0x7fefffff
 8006fe8:	f018 0310 	ands.w	r3, r8, #16
 8006fec:	bf18      	it	ne
 8006fee:	236a      	movne	r3, #106	; 0x6a
 8006ff0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80073a0 <_strtod_l+0x970>
 8006ff4:	9304      	str	r3, [sp, #16]
 8006ff6:	4650      	mov	r0, sl
 8006ff8:	4659      	mov	r1, fp
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	f018 0f01 	tst.w	r8, #1
 8007000:	d004      	beq.n	800700c <_strtod_l+0x5dc>
 8007002:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007006:	f7f9 faff 	bl	8000608 <__aeabi_dmul>
 800700a:	2301      	movs	r3, #1
 800700c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007010:	f109 0908 	add.w	r9, r9, #8
 8007014:	d1f2      	bne.n	8006ffc <_strtod_l+0x5cc>
 8007016:	b10b      	cbz	r3, 800701c <_strtod_l+0x5ec>
 8007018:	4682      	mov	sl, r0
 800701a:	468b      	mov	fp, r1
 800701c:	9b04      	ldr	r3, [sp, #16]
 800701e:	b1c3      	cbz	r3, 8007052 <_strtod_l+0x622>
 8007020:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007024:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007028:	2b00      	cmp	r3, #0
 800702a:	4659      	mov	r1, fp
 800702c:	dd11      	ble.n	8007052 <_strtod_l+0x622>
 800702e:	2b1f      	cmp	r3, #31
 8007030:	f340 8124 	ble.w	800727c <_strtod_l+0x84c>
 8007034:	2b34      	cmp	r3, #52	; 0x34
 8007036:	bfde      	ittt	le
 8007038:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800703c:	f04f 33ff 	movle.w	r3, #4294967295
 8007040:	fa03 f202 	lslle.w	r2, r3, r2
 8007044:	f04f 0a00 	mov.w	sl, #0
 8007048:	bfcc      	ite	gt
 800704a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800704e:	ea02 0b01 	andle.w	fp, r2, r1
 8007052:	2200      	movs	r2, #0
 8007054:	2300      	movs	r3, #0
 8007056:	4650      	mov	r0, sl
 8007058:	4659      	mov	r1, fp
 800705a:	f7f9 fd3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800705e:	2800      	cmp	r0, #0
 8007060:	d1a2      	bne.n	8006fa8 <_strtod_l+0x578>
 8007062:	9b07      	ldr	r3, [sp, #28]
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	9908      	ldr	r1, [sp, #32]
 8007068:	462b      	mov	r3, r5
 800706a:	463a      	mov	r2, r7
 800706c:	4620      	mov	r0, r4
 800706e:	f001 fe2d 	bl	8008ccc <__s2b>
 8007072:	9007      	str	r0, [sp, #28]
 8007074:	2800      	cmp	r0, #0
 8007076:	f43f af1f 	beq.w	8006eb8 <_strtod_l+0x488>
 800707a:	9b05      	ldr	r3, [sp, #20]
 800707c:	1b9e      	subs	r6, r3, r6
 800707e:	9b06      	ldr	r3, [sp, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	bfb4      	ite	lt
 8007084:	4633      	movlt	r3, r6
 8007086:	2300      	movge	r3, #0
 8007088:	930c      	str	r3, [sp, #48]	; 0x30
 800708a:	9b06      	ldr	r3, [sp, #24]
 800708c:	2500      	movs	r5, #0
 800708e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007092:	9312      	str	r3, [sp, #72]	; 0x48
 8007094:	462e      	mov	r6, r5
 8007096:	9b07      	ldr	r3, [sp, #28]
 8007098:	4620      	mov	r0, r4
 800709a:	6859      	ldr	r1, [r3, #4]
 800709c:	f001 fd6e 	bl	8008b7c <_Balloc>
 80070a0:	9005      	str	r0, [sp, #20]
 80070a2:	2800      	cmp	r0, #0
 80070a4:	f43f af0c 	beq.w	8006ec0 <_strtod_l+0x490>
 80070a8:	9b07      	ldr	r3, [sp, #28]
 80070aa:	691a      	ldr	r2, [r3, #16]
 80070ac:	3202      	adds	r2, #2
 80070ae:	f103 010c 	add.w	r1, r3, #12
 80070b2:	0092      	lsls	r2, r2, #2
 80070b4:	300c      	adds	r0, #12
 80070b6:	f001 fd53 	bl	8008b60 <memcpy>
 80070ba:	ec4b ab10 	vmov	d0, sl, fp
 80070be:	aa1a      	add	r2, sp, #104	; 0x68
 80070c0:	a919      	add	r1, sp, #100	; 0x64
 80070c2:	4620      	mov	r0, r4
 80070c4:	f002 f948 	bl	8009358 <__d2b>
 80070c8:	ec4b ab18 	vmov	d8, sl, fp
 80070cc:	9018      	str	r0, [sp, #96]	; 0x60
 80070ce:	2800      	cmp	r0, #0
 80070d0:	f43f aef6 	beq.w	8006ec0 <_strtod_l+0x490>
 80070d4:	2101      	movs	r1, #1
 80070d6:	4620      	mov	r0, r4
 80070d8:	f001 fe92 	bl	8008e00 <__i2b>
 80070dc:	4606      	mov	r6, r0
 80070de:	2800      	cmp	r0, #0
 80070e0:	f43f aeee 	beq.w	8006ec0 <_strtod_l+0x490>
 80070e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070e6:	9904      	ldr	r1, [sp, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	bfab      	itete	ge
 80070ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80070ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80070f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80070f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80070f6:	bfac      	ite	ge
 80070f8:	eb03 0902 	addge.w	r9, r3, r2
 80070fc:	1ad7      	sublt	r7, r2, r3
 80070fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007100:	eba3 0801 	sub.w	r8, r3, r1
 8007104:	4490      	add	r8, r2
 8007106:	4ba1      	ldr	r3, [pc, #644]	; (800738c <_strtod_l+0x95c>)
 8007108:	f108 38ff 	add.w	r8, r8, #4294967295
 800710c:	4598      	cmp	r8, r3
 800710e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007112:	f280 80c7 	bge.w	80072a4 <_strtod_l+0x874>
 8007116:	eba3 0308 	sub.w	r3, r3, r8
 800711a:	2b1f      	cmp	r3, #31
 800711c:	eba2 0203 	sub.w	r2, r2, r3
 8007120:	f04f 0101 	mov.w	r1, #1
 8007124:	f300 80b1 	bgt.w	800728a <_strtod_l+0x85a>
 8007128:	fa01 f303 	lsl.w	r3, r1, r3
 800712c:	930d      	str	r3, [sp, #52]	; 0x34
 800712e:	2300      	movs	r3, #0
 8007130:	9308      	str	r3, [sp, #32]
 8007132:	eb09 0802 	add.w	r8, r9, r2
 8007136:	9b04      	ldr	r3, [sp, #16]
 8007138:	45c1      	cmp	r9, r8
 800713a:	4417      	add	r7, r2
 800713c:	441f      	add	r7, r3
 800713e:	464b      	mov	r3, r9
 8007140:	bfa8      	it	ge
 8007142:	4643      	movge	r3, r8
 8007144:	42bb      	cmp	r3, r7
 8007146:	bfa8      	it	ge
 8007148:	463b      	movge	r3, r7
 800714a:	2b00      	cmp	r3, #0
 800714c:	bfc2      	ittt	gt
 800714e:	eba8 0803 	subgt.w	r8, r8, r3
 8007152:	1aff      	subgt	r7, r7, r3
 8007154:	eba9 0903 	subgt.w	r9, r9, r3
 8007158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800715a:	2b00      	cmp	r3, #0
 800715c:	dd17      	ble.n	800718e <_strtod_l+0x75e>
 800715e:	4631      	mov	r1, r6
 8007160:	461a      	mov	r2, r3
 8007162:	4620      	mov	r0, r4
 8007164:	f001 ff0c 	bl	8008f80 <__pow5mult>
 8007168:	4606      	mov	r6, r0
 800716a:	2800      	cmp	r0, #0
 800716c:	f43f aea8 	beq.w	8006ec0 <_strtod_l+0x490>
 8007170:	4601      	mov	r1, r0
 8007172:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007174:	4620      	mov	r0, r4
 8007176:	f001 fe59 	bl	8008e2c <__multiply>
 800717a:	900b      	str	r0, [sp, #44]	; 0x2c
 800717c:	2800      	cmp	r0, #0
 800717e:	f43f ae9f 	beq.w	8006ec0 <_strtod_l+0x490>
 8007182:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007184:	4620      	mov	r0, r4
 8007186:	f001 fd39 	bl	8008bfc <_Bfree>
 800718a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800718c:	9318      	str	r3, [sp, #96]	; 0x60
 800718e:	f1b8 0f00 	cmp.w	r8, #0
 8007192:	f300 808c 	bgt.w	80072ae <_strtod_l+0x87e>
 8007196:	9b06      	ldr	r3, [sp, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	dd08      	ble.n	80071ae <_strtod_l+0x77e>
 800719c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800719e:	9905      	ldr	r1, [sp, #20]
 80071a0:	4620      	mov	r0, r4
 80071a2:	f001 feed 	bl	8008f80 <__pow5mult>
 80071a6:	9005      	str	r0, [sp, #20]
 80071a8:	2800      	cmp	r0, #0
 80071aa:	f43f ae89 	beq.w	8006ec0 <_strtod_l+0x490>
 80071ae:	2f00      	cmp	r7, #0
 80071b0:	dd08      	ble.n	80071c4 <_strtod_l+0x794>
 80071b2:	9905      	ldr	r1, [sp, #20]
 80071b4:	463a      	mov	r2, r7
 80071b6:	4620      	mov	r0, r4
 80071b8:	f001 ff3c 	bl	8009034 <__lshift>
 80071bc:	9005      	str	r0, [sp, #20]
 80071be:	2800      	cmp	r0, #0
 80071c0:	f43f ae7e 	beq.w	8006ec0 <_strtod_l+0x490>
 80071c4:	f1b9 0f00 	cmp.w	r9, #0
 80071c8:	dd08      	ble.n	80071dc <_strtod_l+0x7ac>
 80071ca:	4631      	mov	r1, r6
 80071cc:	464a      	mov	r2, r9
 80071ce:	4620      	mov	r0, r4
 80071d0:	f001 ff30 	bl	8009034 <__lshift>
 80071d4:	4606      	mov	r6, r0
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f43f ae72 	beq.w	8006ec0 <_strtod_l+0x490>
 80071dc:	9a05      	ldr	r2, [sp, #20]
 80071de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071e0:	4620      	mov	r0, r4
 80071e2:	f001 ffb3 	bl	800914c <__mdiff>
 80071e6:	4605      	mov	r5, r0
 80071e8:	2800      	cmp	r0, #0
 80071ea:	f43f ae69 	beq.w	8006ec0 <_strtod_l+0x490>
 80071ee:	68c3      	ldr	r3, [r0, #12]
 80071f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80071f2:	2300      	movs	r3, #0
 80071f4:	60c3      	str	r3, [r0, #12]
 80071f6:	4631      	mov	r1, r6
 80071f8:	f001 ff8c 	bl	8009114 <__mcmp>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	da60      	bge.n	80072c2 <_strtod_l+0x892>
 8007200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007202:	ea53 030a 	orrs.w	r3, r3, sl
 8007206:	f040 8082 	bne.w	800730e <_strtod_l+0x8de>
 800720a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800720e:	2b00      	cmp	r3, #0
 8007210:	d17d      	bne.n	800730e <_strtod_l+0x8de>
 8007212:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007216:	0d1b      	lsrs	r3, r3, #20
 8007218:	051b      	lsls	r3, r3, #20
 800721a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800721e:	d976      	bls.n	800730e <_strtod_l+0x8de>
 8007220:	696b      	ldr	r3, [r5, #20]
 8007222:	b913      	cbnz	r3, 800722a <_strtod_l+0x7fa>
 8007224:	692b      	ldr	r3, [r5, #16]
 8007226:	2b01      	cmp	r3, #1
 8007228:	dd71      	ble.n	800730e <_strtod_l+0x8de>
 800722a:	4629      	mov	r1, r5
 800722c:	2201      	movs	r2, #1
 800722e:	4620      	mov	r0, r4
 8007230:	f001 ff00 	bl	8009034 <__lshift>
 8007234:	4631      	mov	r1, r6
 8007236:	4605      	mov	r5, r0
 8007238:	f001 ff6c 	bl	8009114 <__mcmp>
 800723c:	2800      	cmp	r0, #0
 800723e:	dd66      	ble.n	800730e <_strtod_l+0x8de>
 8007240:	9904      	ldr	r1, [sp, #16]
 8007242:	4a53      	ldr	r2, [pc, #332]	; (8007390 <_strtod_l+0x960>)
 8007244:	465b      	mov	r3, fp
 8007246:	2900      	cmp	r1, #0
 8007248:	f000 8081 	beq.w	800734e <_strtod_l+0x91e>
 800724c:	ea02 010b 	and.w	r1, r2, fp
 8007250:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007254:	dc7b      	bgt.n	800734e <_strtod_l+0x91e>
 8007256:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800725a:	f77f aea9 	ble.w	8006fb0 <_strtod_l+0x580>
 800725e:	4b4d      	ldr	r3, [pc, #308]	; (8007394 <_strtod_l+0x964>)
 8007260:	4650      	mov	r0, sl
 8007262:	4659      	mov	r1, fp
 8007264:	2200      	movs	r2, #0
 8007266:	f7f9 f9cf 	bl	8000608 <__aeabi_dmul>
 800726a:	460b      	mov	r3, r1
 800726c:	4303      	orrs	r3, r0
 800726e:	bf08      	it	eq
 8007270:	2322      	moveq	r3, #34	; 0x22
 8007272:	4682      	mov	sl, r0
 8007274:	468b      	mov	fp, r1
 8007276:	bf08      	it	eq
 8007278:	6023      	streq	r3, [r4, #0]
 800727a:	e62b      	b.n	8006ed4 <_strtod_l+0x4a4>
 800727c:	f04f 32ff 	mov.w	r2, #4294967295
 8007280:	fa02 f303 	lsl.w	r3, r2, r3
 8007284:	ea03 0a0a 	and.w	sl, r3, sl
 8007288:	e6e3      	b.n	8007052 <_strtod_l+0x622>
 800728a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800728e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007292:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007296:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800729a:	fa01 f308 	lsl.w	r3, r1, r8
 800729e:	9308      	str	r3, [sp, #32]
 80072a0:	910d      	str	r1, [sp, #52]	; 0x34
 80072a2:	e746      	b.n	8007132 <_strtod_l+0x702>
 80072a4:	2300      	movs	r3, #0
 80072a6:	9308      	str	r3, [sp, #32]
 80072a8:	2301      	movs	r3, #1
 80072aa:	930d      	str	r3, [sp, #52]	; 0x34
 80072ac:	e741      	b.n	8007132 <_strtod_l+0x702>
 80072ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80072b0:	4642      	mov	r2, r8
 80072b2:	4620      	mov	r0, r4
 80072b4:	f001 febe 	bl	8009034 <__lshift>
 80072b8:	9018      	str	r0, [sp, #96]	; 0x60
 80072ba:	2800      	cmp	r0, #0
 80072bc:	f47f af6b 	bne.w	8007196 <_strtod_l+0x766>
 80072c0:	e5fe      	b.n	8006ec0 <_strtod_l+0x490>
 80072c2:	465f      	mov	r7, fp
 80072c4:	d16e      	bne.n	80073a4 <_strtod_l+0x974>
 80072c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072cc:	b342      	cbz	r2, 8007320 <_strtod_l+0x8f0>
 80072ce:	4a32      	ldr	r2, [pc, #200]	; (8007398 <_strtod_l+0x968>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d128      	bne.n	8007326 <_strtod_l+0x8f6>
 80072d4:	9b04      	ldr	r3, [sp, #16]
 80072d6:	4651      	mov	r1, sl
 80072d8:	b1eb      	cbz	r3, 8007316 <_strtod_l+0x8e6>
 80072da:	4b2d      	ldr	r3, [pc, #180]	; (8007390 <_strtod_l+0x960>)
 80072dc:	403b      	ands	r3, r7
 80072de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80072e2:	f04f 32ff 	mov.w	r2, #4294967295
 80072e6:	d819      	bhi.n	800731c <_strtod_l+0x8ec>
 80072e8:	0d1b      	lsrs	r3, r3, #20
 80072ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072ee:	fa02 f303 	lsl.w	r3, r2, r3
 80072f2:	4299      	cmp	r1, r3
 80072f4:	d117      	bne.n	8007326 <_strtod_l+0x8f6>
 80072f6:	4b29      	ldr	r3, [pc, #164]	; (800739c <_strtod_l+0x96c>)
 80072f8:	429f      	cmp	r7, r3
 80072fa:	d102      	bne.n	8007302 <_strtod_l+0x8d2>
 80072fc:	3101      	adds	r1, #1
 80072fe:	f43f addf 	beq.w	8006ec0 <_strtod_l+0x490>
 8007302:	4b23      	ldr	r3, [pc, #140]	; (8007390 <_strtod_l+0x960>)
 8007304:	403b      	ands	r3, r7
 8007306:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800730a:	f04f 0a00 	mov.w	sl, #0
 800730e:	9b04      	ldr	r3, [sp, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1a4      	bne.n	800725e <_strtod_l+0x82e>
 8007314:	e5de      	b.n	8006ed4 <_strtod_l+0x4a4>
 8007316:	f04f 33ff 	mov.w	r3, #4294967295
 800731a:	e7ea      	b.n	80072f2 <_strtod_l+0x8c2>
 800731c:	4613      	mov	r3, r2
 800731e:	e7e8      	b.n	80072f2 <_strtod_l+0x8c2>
 8007320:	ea53 030a 	orrs.w	r3, r3, sl
 8007324:	d08c      	beq.n	8007240 <_strtod_l+0x810>
 8007326:	9b08      	ldr	r3, [sp, #32]
 8007328:	b1db      	cbz	r3, 8007362 <_strtod_l+0x932>
 800732a:	423b      	tst	r3, r7
 800732c:	d0ef      	beq.n	800730e <_strtod_l+0x8de>
 800732e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007330:	9a04      	ldr	r2, [sp, #16]
 8007332:	4650      	mov	r0, sl
 8007334:	4659      	mov	r1, fp
 8007336:	b1c3      	cbz	r3, 800736a <_strtod_l+0x93a>
 8007338:	f7ff fb5c 	bl	80069f4 <sulp>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	ec51 0b18 	vmov	r0, r1, d8
 8007344:	f7f8 ffaa 	bl	800029c <__adddf3>
 8007348:	4682      	mov	sl, r0
 800734a:	468b      	mov	fp, r1
 800734c:	e7df      	b.n	800730e <_strtod_l+0x8de>
 800734e:	4013      	ands	r3, r2
 8007350:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007354:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007358:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800735c:	f04f 3aff 	mov.w	sl, #4294967295
 8007360:	e7d5      	b.n	800730e <_strtod_l+0x8de>
 8007362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007364:	ea13 0f0a 	tst.w	r3, sl
 8007368:	e7e0      	b.n	800732c <_strtod_l+0x8fc>
 800736a:	f7ff fb43 	bl	80069f4 <sulp>
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	ec51 0b18 	vmov	r0, r1, d8
 8007376:	f7f8 ff8f 	bl	8000298 <__aeabi_dsub>
 800737a:	2200      	movs	r2, #0
 800737c:	2300      	movs	r3, #0
 800737e:	4682      	mov	sl, r0
 8007380:	468b      	mov	fp, r1
 8007382:	f7f9 fba9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007386:	2800      	cmp	r0, #0
 8007388:	d0c1      	beq.n	800730e <_strtod_l+0x8de>
 800738a:	e611      	b.n	8006fb0 <_strtod_l+0x580>
 800738c:	fffffc02 	.word	0xfffffc02
 8007390:	7ff00000 	.word	0x7ff00000
 8007394:	39500000 	.word	0x39500000
 8007398:	000fffff 	.word	0x000fffff
 800739c:	7fefffff 	.word	0x7fefffff
 80073a0:	0800a668 	.word	0x0800a668
 80073a4:	4631      	mov	r1, r6
 80073a6:	4628      	mov	r0, r5
 80073a8:	f002 f832 	bl	8009410 <__ratio>
 80073ac:	ec59 8b10 	vmov	r8, r9, d0
 80073b0:	ee10 0a10 	vmov	r0, s0
 80073b4:	2200      	movs	r2, #0
 80073b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073ba:	4649      	mov	r1, r9
 80073bc:	f7f9 fba0 	bl	8000b00 <__aeabi_dcmple>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d07a      	beq.n	80074ba <_strtod_l+0xa8a>
 80073c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d04a      	beq.n	8007460 <_strtod_l+0xa30>
 80073ca:	4b95      	ldr	r3, [pc, #596]	; (8007620 <_strtod_l+0xbf0>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80073d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007620 <_strtod_l+0xbf0>
 80073d6:	f04f 0800 	mov.w	r8, #0
 80073da:	4b92      	ldr	r3, [pc, #584]	; (8007624 <_strtod_l+0xbf4>)
 80073dc:	403b      	ands	r3, r7
 80073de:	930d      	str	r3, [sp, #52]	; 0x34
 80073e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073e2:	4b91      	ldr	r3, [pc, #580]	; (8007628 <_strtod_l+0xbf8>)
 80073e4:	429a      	cmp	r2, r3
 80073e6:	f040 80b0 	bne.w	800754a <_strtod_l+0xb1a>
 80073ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80073ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80073f2:	ec4b ab10 	vmov	d0, sl, fp
 80073f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80073fa:	f001 ff31 	bl	8009260 <__ulp>
 80073fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007402:	ec53 2b10 	vmov	r2, r3, d0
 8007406:	f7f9 f8ff 	bl	8000608 <__aeabi_dmul>
 800740a:	4652      	mov	r2, sl
 800740c:	465b      	mov	r3, fp
 800740e:	f7f8 ff45 	bl	800029c <__adddf3>
 8007412:	460b      	mov	r3, r1
 8007414:	4983      	ldr	r1, [pc, #524]	; (8007624 <_strtod_l+0xbf4>)
 8007416:	4a85      	ldr	r2, [pc, #532]	; (800762c <_strtod_l+0xbfc>)
 8007418:	4019      	ands	r1, r3
 800741a:	4291      	cmp	r1, r2
 800741c:	4682      	mov	sl, r0
 800741e:	d960      	bls.n	80074e2 <_strtod_l+0xab2>
 8007420:	ee18 3a90 	vmov	r3, s17
 8007424:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007428:	4293      	cmp	r3, r2
 800742a:	d104      	bne.n	8007436 <_strtod_l+0xa06>
 800742c:	ee18 3a10 	vmov	r3, s16
 8007430:	3301      	adds	r3, #1
 8007432:	f43f ad45 	beq.w	8006ec0 <_strtod_l+0x490>
 8007436:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007638 <_strtod_l+0xc08>
 800743a:	f04f 3aff 	mov.w	sl, #4294967295
 800743e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007440:	4620      	mov	r0, r4
 8007442:	f001 fbdb 	bl	8008bfc <_Bfree>
 8007446:	9905      	ldr	r1, [sp, #20]
 8007448:	4620      	mov	r0, r4
 800744a:	f001 fbd7 	bl	8008bfc <_Bfree>
 800744e:	4631      	mov	r1, r6
 8007450:	4620      	mov	r0, r4
 8007452:	f001 fbd3 	bl	8008bfc <_Bfree>
 8007456:	4629      	mov	r1, r5
 8007458:	4620      	mov	r0, r4
 800745a:	f001 fbcf 	bl	8008bfc <_Bfree>
 800745e:	e61a      	b.n	8007096 <_strtod_l+0x666>
 8007460:	f1ba 0f00 	cmp.w	sl, #0
 8007464:	d11b      	bne.n	800749e <_strtod_l+0xa6e>
 8007466:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800746a:	b9f3      	cbnz	r3, 80074aa <_strtod_l+0xa7a>
 800746c:	4b6c      	ldr	r3, [pc, #432]	; (8007620 <_strtod_l+0xbf0>)
 800746e:	2200      	movs	r2, #0
 8007470:	4640      	mov	r0, r8
 8007472:	4649      	mov	r1, r9
 8007474:	f7f9 fb3a 	bl	8000aec <__aeabi_dcmplt>
 8007478:	b9d0      	cbnz	r0, 80074b0 <_strtod_l+0xa80>
 800747a:	4640      	mov	r0, r8
 800747c:	4649      	mov	r1, r9
 800747e:	4b6c      	ldr	r3, [pc, #432]	; (8007630 <_strtod_l+0xc00>)
 8007480:	2200      	movs	r2, #0
 8007482:	f7f9 f8c1 	bl	8000608 <__aeabi_dmul>
 8007486:	4680      	mov	r8, r0
 8007488:	4689      	mov	r9, r1
 800748a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800748e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007492:	9315      	str	r3, [sp, #84]	; 0x54
 8007494:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007498:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800749c:	e79d      	b.n	80073da <_strtod_l+0x9aa>
 800749e:	f1ba 0f01 	cmp.w	sl, #1
 80074a2:	d102      	bne.n	80074aa <_strtod_l+0xa7a>
 80074a4:	2f00      	cmp	r7, #0
 80074a6:	f43f ad83 	beq.w	8006fb0 <_strtod_l+0x580>
 80074aa:	4b62      	ldr	r3, [pc, #392]	; (8007634 <_strtod_l+0xc04>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	e78e      	b.n	80073ce <_strtod_l+0x99e>
 80074b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007630 <_strtod_l+0xc00>
 80074b4:	f04f 0800 	mov.w	r8, #0
 80074b8:	e7e7      	b.n	800748a <_strtod_l+0xa5a>
 80074ba:	4b5d      	ldr	r3, [pc, #372]	; (8007630 <_strtod_l+0xc00>)
 80074bc:	4640      	mov	r0, r8
 80074be:	4649      	mov	r1, r9
 80074c0:	2200      	movs	r2, #0
 80074c2:	f7f9 f8a1 	bl	8000608 <__aeabi_dmul>
 80074c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074c8:	4680      	mov	r8, r0
 80074ca:	4689      	mov	r9, r1
 80074cc:	b933      	cbnz	r3, 80074dc <_strtod_l+0xaac>
 80074ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074d2:	900e      	str	r0, [sp, #56]	; 0x38
 80074d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80074d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80074da:	e7dd      	b.n	8007498 <_strtod_l+0xa68>
 80074dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80074e0:	e7f9      	b.n	80074d6 <_strtod_l+0xaa6>
 80074e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80074e6:	9b04      	ldr	r3, [sp, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1a8      	bne.n	800743e <_strtod_l+0xa0e>
 80074ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074f2:	0d1b      	lsrs	r3, r3, #20
 80074f4:	051b      	lsls	r3, r3, #20
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d1a1      	bne.n	800743e <_strtod_l+0xa0e>
 80074fa:	4640      	mov	r0, r8
 80074fc:	4649      	mov	r1, r9
 80074fe:	f7f9 fc33 	bl	8000d68 <__aeabi_d2lz>
 8007502:	f7f9 f853 	bl	80005ac <__aeabi_l2d>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	4640      	mov	r0, r8
 800750c:	4649      	mov	r1, r9
 800750e:	f7f8 fec3 	bl	8000298 <__aeabi_dsub>
 8007512:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007514:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007518:	ea43 030a 	orr.w	r3, r3, sl
 800751c:	4313      	orrs	r3, r2
 800751e:	4680      	mov	r8, r0
 8007520:	4689      	mov	r9, r1
 8007522:	d055      	beq.n	80075d0 <_strtod_l+0xba0>
 8007524:	a336      	add	r3, pc, #216	; (adr r3, 8007600 <_strtod_l+0xbd0>)
 8007526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752a:	f7f9 fadf 	bl	8000aec <__aeabi_dcmplt>
 800752e:	2800      	cmp	r0, #0
 8007530:	f47f acd0 	bne.w	8006ed4 <_strtod_l+0x4a4>
 8007534:	a334      	add	r3, pc, #208	; (adr r3, 8007608 <_strtod_l+0xbd8>)
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	4640      	mov	r0, r8
 800753c:	4649      	mov	r1, r9
 800753e:	f7f9 faf3 	bl	8000b28 <__aeabi_dcmpgt>
 8007542:	2800      	cmp	r0, #0
 8007544:	f43f af7b 	beq.w	800743e <_strtod_l+0xa0e>
 8007548:	e4c4      	b.n	8006ed4 <_strtod_l+0x4a4>
 800754a:	9b04      	ldr	r3, [sp, #16]
 800754c:	b333      	cbz	r3, 800759c <_strtod_l+0xb6c>
 800754e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007550:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007554:	d822      	bhi.n	800759c <_strtod_l+0xb6c>
 8007556:	a32e      	add	r3, pc, #184	; (adr r3, 8007610 <_strtod_l+0xbe0>)
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	4640      	mov	r0, r8
 800755e:	4649      	mov	r1, r9
 8007560:	f7f9 face 	bl	8000b00 <__aeabi_dcmple>
 8007564:	b1a0      	cbz	r0, 8007590 <_strtod_l+0xb60>
 8007566:	4649      	mov	r1, r9
 8007568:	4640      	mov	r0, r8
 800756a:	f7f9 fb25 	bl	8000bb8 <__aeabi_d2uiz>
 800756e:	2801      	cmp	r0, #1
 8007570:	bf38      	it	cc
 8007572:	2001      	movcc	r0, #1
 8007574:	f7f8 ffce 	bl	8000514 <__aeabi_ui2d>
 8007578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800757a:	4680      	mov	r8, r0
 800757c:	4689      	mov	r9, r1
 800757e:	bb23      	cbnz	r3, 80075ca <_strtod_l+0xb9a>
 8007580:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007584:	9010      	str	r0, [sp, #64]	; 0x40
 8007586:	9311      	str	r3, [sp, #68]	; 0x44
 8007588:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800758c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007592:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007594:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007598:	1a9b      	subs	r3, r3, r2
 800759a:	9309      	str	r3, [sp, #36]	; 0x24
 800759c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80075a0:	eeb0 0a48 	vmov.f32	s0, s16
 80075a4:	eef0 0a68 	vmov.f32	s1, s17
 80075a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80075ac:	f001 fe58 	bl	8009260 <__ulp>
 80075b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80075b4:	ec53 2b10 	vmov	r2, r3, d0
 80075b8:	f7f9 f826 	bl	8000608 <__aeabi_dmul>
 80075bc:	ec53 2b18 	vmov	r2, r3, d8
 80075c0:	f7f8 fe6c 	bl	800029c <__adddf3>
 80075c4:	4682      	mov	sl, r0
 80075c6:	468b      	mov	fp, r1
 80075c8:	e78d      	b.n	80074e6 <_strtod_l+0xab6>
 80075ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80075ce:	e7db      	b.n	8007588 <_strtod_l+0xb58>
 80075d0:	a311      	add	r3, pc, #68	; (adr r3, 8007618 <_strtod_l+0xbe8>)
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	f7f9 fa89 	bl	8000aec <__aeabi_dcmplt>
 80075da:	e7b2      	b.n	8007542 <_strtod_l+0xb12>
 80075dc:	2300      	movs	r3, #0
 80075de:	930a      	str	r3, [sp, #40]	; 0x28
 80075e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80075e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075e4:	6013      	str	r3, [r2, #0]
 80075e6:	f7ff ba6b 	b.w	8006ac0 <_strtod_l+0x90>
 80075ea:	2a65      	cmp	r2, #101	; 0x65
 80075ec:	f43f ab5f 	beq.w	8006cae <_strtod_l+0x27e>
 80075f0:	2a45      	cmp	r2, #69	; 0x45
 80075f2:	f43f ab5c 	beq.w	8006cae <_strtod_l+0x27e>
 80075f6:	2301      	movs	r3, #1
 80075f8:	f7ff bb94 	b.w	8006d24 <_strtod_l+0x2f4>
 80075fc:	f3af 8000 	nop.w
 8007600:	94a03595 	.word	0x94a03595
 8007604:	3fdfffff 	.word	0x3fdfffff
 8007608:	35afe535 	.word	0x35afe535
 800760c:	3fe00000 	.word	0x3fe00000
 8007610:	ffc00000 	.word	0xffc00000
 8007614:	41dfffff 	.word	0x41dfffff
 8007618:	94a03595 	.word	0x94a03595
 800761c:	3fcfffff 	.word	0x3fcfffff
 8007620:	3ff00000 	.word	0x3ff00000
 8007624:	7ff00000 	.word	0x7ff00000
 8007628:	7fe00000 	.word	0x7fe00000
 800762c:	7c9fffff 	.word	0x7c9fffff
 8007630:	3fe00000 	.word	0x3fe00000
 8007634:	bff00000 	.word	0xbff00000
 8007638:	7fefffff 	.word	0x7fefffff

0800763c <_strtod_r>:
 800763c:	4b01      	ldr	r3, [pc, #4]	; (8007644 <_strtod_r+0x8>)
 800763e:	f7ff b9f7 	b.w	8006a30 <_strtod_l>
 8007642:	bf00      	nop
 8007644:	200000a4 	.word	0x200000a4

08007648 <_strtol_l.constprop.0>:
 8007648:	2b01      	cmp	r3, #1
 800764a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800764e:	d001      	beq.n	8007654 <_strtol_l.constprop.0+0xc>
 8007650:	2b24      	cmp	r3, #36	; 0x24
 8007652:	d906      	bls.n	8007662 <_strtol_l.constprop.0+0x1a>
 8007654:	f7fe fafc 	bl	8005c50 <__errno>
 8007658:	2316      	movs	r3, #22
 800765a:	6003      	str	r3, [r0, #0]
 800765c:	2000      	movs	r0, #0
 800765e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007662:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007748 <_strtol_l.constprop.0+0x100>
 8007666:	460d      	mov	r5, r1
 8007668:	462e      	mov	r6, r5
 800766a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800766e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007672:	f017 0708 	ands.w	r7, r7, #8
 8007676:	d1f7      	bne.n	8007668 <_strtol_l.constprop.0+0x20>
 8007678:	2c2d      	cmp	r4, #45	; 0x2d
 800767a:	d132      	bne.n	80076e2 <_strtol_l.constprop.0+0x9a>
 800767c:	782c      	ldrb	r4, [r5, #0]
 800767e:	2701      	movs	r7, #1
 8007680:	1cb5      	adds	r5, r6, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d05b      	beq.n	800773e <_strtol_l.constprop.0+0xf6>
 8007686:	2b10      	cmp	r3, #16
 8007688:	d109      	bne.n	800769e <_strtol_l.constprop.0+0x56>
 800768a:	2c30      	cmp	r4, #48	; 0x30
 800768c:	d107      	bne.n	800769e <_strtol_l.constprop.0+0x56>
 800768e:	782c      	ldrb	r4, [r5, #0]
 8007690:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007694:	2c58      	cmp	r4, #88	; 0x58
 8007696:	d14d      	bne.n	8007734 <_strtol_l.constprop.0+0xec>
 8007698:	786c      	ldrb	r4, [r5, #1]
 800769a:	2310      	movs	r3, #16
 800769c:	3502      	adds	r5, #2
 800769e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80076a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80076a6:	f04f 0c00 	mov.w	ip, #0
 80076aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80076ae:	4666      	mov	r6, ip
 80076b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80076b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80076b8:	f1be 0f09 	cmp.w	lr, #9
 80076bc:	d816      	bhi.n	80076ec <_strtol_l.constprop.0+0xa4>
 80076be:	4674      	mov	r4, lr
 80076c0:	42a3      	cmp	r3, r4
 80076c2:	dd24      	ble.n	800770e <_strtol_l.constprop.0+0xc6>
 80076c4:	f1bc 0f00 	cmp.w	ip, #0
 80076c8:	db1e      	blt.n	8007708 <_strtol_l.constprop.0+0xc0>
 80076ca:	45b1      	cmp	r9, r6
 80076cc:	d31c      	bcc.n	8007708 <_strtol_l.constprop.0+0xc0>
 80076ce:	d101      	bne.n	80076d4 <_strtol_l.constprop.0+0x8c>
 80076d0:	45a2      	cmp	sl, r4
 80076d2:	db19      	blt.n	8007708 <_strtol_l.constprop.0+0xc0>
 80076d4:	fb06 4603 	mla	r6, r6, r3, r4
 80076d8:	f04f 0c01 	mov.w	ip, #1
 80076dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076e0:	e7e8      	b.n	80076b4 <_strtol_l.constprop.0+0x6c>
 80076e2:	2c2b      	cmp	r4, #43	; 0x2b
 80076e4:	bf04      	itt	eq
 80076e6:	782c      	ldrbeq	r4, [r5, #0]
 80076e8:	1cb5      	addeq	r5, r6, #2
 80076ea:	e7ca      	b.n	8007682 <_strtol_l.constprop.0+0x3a>
 80076ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80076f0:	f1be 0f19 	cmp.w	lr, #25
 80076f4:	d801      	bhi.n	80076fa <_strtol_l.constprop.0+0xb2>
 80076f6:	3c37      	subs	r4, #55	; 0x37
 80076f8:	e7e2      	b.n	80076c0 <_strtol_l.constprop.0+0x78>
 80076fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80076fe:	f1be 0f19 	cmp.w	lr, #25
 8007702:	d804      	bhi.n	800770e <_strtol_l.constprop.0+0xc6>
 8007704:	3c57      	subs	r4, #87	; 0x57
 8007706:	e7db      	b.n	80076c0 <_strtol_l.constprop.0+0x78>
 8007708:	f04f 3cff 	mov.w	ip, #4294967295
 800770c:	e7e6      	b.n	80076dc <_strtol_l.constprop.0+0x94>
 800770e:	f1bc 0f00 	cmp.w	ip, #0
 8007712:	da05      	bge.n	8007720 <_strtol_l.constprop.0+0xd8>
 8007714:	2322      	movs	r3, #34	; 0x22
 8007716:	6003      	str	r3, [r0, #0]
 8007718:	4646      	mov	r6, r8
 800771a:	b942      	cbnz	r2, 800772e <_strtol_l.constprop.0+0xe6>
 800771c:	4630      	mov	r0, r6
 800771e:	e79e      	b.n	800765e <_strtol_l.constprop.0+0x16>
 8007720:	b107      	cbz	r7, 8007724 <_strtol_l.constprop.0+0xdc>
 8007722:	4276      	negs	r6, r6
 8007724:	2a00      	cmp	r2, #0
 8007726:	d0f9      	beq.n	800771c <_strtol_l.constprop.0+0xd4>
 8007728:	f1bc 0f00 	cmp.w	ip, #0
 800772c:	d000      	beq.n	8007730 <_strtol_l.constprop.0+0xe8>
 800772e:	1e69      	subs	r1, r5, #1
 8007730:	6011      	str	r1, [r2, #0]
 8007732:	e7f3      	b.n	800771c <_strtol_l.constprop.0+0xd4>
 8007734:	2430      	movs	r4, #48	; 0x30
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1b1      	bne.n	800769e <_strtol_l.constprop.0+0x56>
 800773a:	2308      	movs	r3, #8
 800773c:	e7af      	b.n	800769e <_strtol_l.constprop.0+0x56>
 800773e:	2c30      	cmp	r4, #48	; 0x30
 8007740:	d0a5      	beq.n	800768e <_strtol_l.constprop.0+0x46>
 8007742:	230a      	movs	r3, #10
 8007744:	e7ab      	b.n	800769e <_strtol_l.constprop.0+0x56>
 8007746:	bf00      	nop
 8007748:	0800a691 	.word	0x0800a691

0800774c <_strtol_r>:
 800774c:	f7ff bf7c 	b.w	8007648 <_strtol_l.constprop.0>

08007750 <quorem>:
 8007750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	6903      	ldr	r3, [r0, #16]
 8007756:	690c      	ldr	r4, [r1, #16]
 8007758:	42a3      	cmp	r3, r4
 800775a:	4607      	mov	r7, r0
 800775c:	f2c0 8081 	blt.w	8007862 <quorem+0x112>
 8007760:	3c01      	subs	r4, #1
 8007762:	f101 0814 	add.w	r8, r1, #20
 8007766:	f100 0514 	add.w	r5, r0, #20
 800776a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800776e:	9301      	str	r3, [sp, #4]
 8007770:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007774:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007778:	3301      	adds	r3, #1
 800777a:	429a      	cmp	r2, r3
 800777c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007780:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007784:	fbb2 f6f3 	udiv	r6, r2, r3
 8007788:	d331      	bcc.n	80077ee <quorem+0x9e>
 800778a:	f04f 0e00 	mov.w	lr, #0
 800778e:	4640      	mov	r0, r8
 8007790:	46ac      	mov	ip, r5
 8007792:	46f2      	mov	sl, lr
 8007794:	f850 2b04 	ldr.w	r2, [r0], #4
 8007798:	b293      	uxth	r3, r2
 800779a:	fb06 e303 	mla	r3, r6, r3, lr
 800779e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	ebaa 0303 	sub.w	r3, sl, r3
 80077a8:	f8dc a000 	ldr.w	sl, [ip]
 80077ac:	0c12      	lsrs	r2, r2, #16
 80077ae:	fa13 f38a 	uxtah	r3, r3, sl
 80077b2:	fb06 e202 	mla	r2, r6, r2, lr
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	9b00      	ldr	r3, [sp, #0]
 80077ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077be:	b292      	uxth	r2, r2
 80077c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80077c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80077cc:	4581      	cmp	r9, r0
 80077ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077d2:	f84c 3b04 	str.w	r3, [ip], #4
 80077d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077da:	d2db      	bcs.n	8007794 <quorem+0x44>
 80077dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80077e0:	b92b      	cbnz	r3, 80077ee <quorem+0x9e>
 80077e2:	9b01      	ldr	r3, [sp, #4]
 80077e4:	3b04      	subs	r3, #4
 80077e6:	429d      	cmp	r5, r3
 80077e8:	461a      	mov	r2, r3
 80077ea:	d32e      	bcc.n	800784a <quorem+0xfa>
 80077ec:	613c      	str	r4, [r7, #16]
 80077ee:	4638      	mov	r0, r7
 80077f0:	f001 fc90 	bl	8009114 <__mcmp>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	db24      	blt.n	8007842 <quorem+0xf2>
 80077f8:	3601      	adds	r6, #1
 80077fa:	4628      	mov	r0, r5
 80077fc:	f04f 0c00 	mov.w	ip, #0
 8007800:	f858 2b04 	ldr.w	r2, [r8], #4
 8007804:	f8d0 e000 	ldr.w	lr, [r0]
 8007808:	b293      	uxth	r3, r2
 800780a:	ebac 0303 	sub.w	r3, ip, r3
 800780e:	0c12      	lsrs	r2, r2, #16
 8007810:	fa13 f38e 	uxtah	r3, r3, lr
 8007814:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007818:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800781c:	b29b      	uxth	r3, r3
 800781e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007822:	45c1      	cmp	r9, r8
 8007824:	f840 3b04 	str.w	r3, [r0], #4
 8007828:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800782c:	d2e8      	bcs.n	8007800 <quorem+0xb0>
 800782e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007836:	b922      	cbnz	r2, 8007842 <quorem+0xf2>
 8007838:	3b04      	subs	r3, #4
 800783a:	429d      	cmp	r5, r3
 800783c:	461a      	mov	r2, r3
 800783e:	d30a      	bcc.n	8007856 <quorem+0x106>
 8007840:	613c      	str	r4, [r7, #16]
 8007842:	4630      	mov	r0, r6
 8007844:	b003      	add	sp, #12
 8007846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800784a:	6812      	ldr	r2, [r2, #0]
 800784c:	3b04      	subs	r3, #4
 800784e:	2a00      	cmp	r2, #0
 8007850:	d1cc      	bne.n	80077ec <quorem+0x9c>
 8007852:	3c01      	subs	r4, #1
 8007854:	e7c7      	b.n	80077e6 <quorem+0x96>
 8007856:	6812      	ldr	r2, [r2, #0]
 8007858:	3b04      	subs	r3, #4
 800785a:	2a00      	cmp	r2, #0
 800785c:	d1f0      	bne.n	8007840 <quorem+0xf0>
 800785e:	3c01      	subs	r4, #1
 8007860:	e7eb      	b.n	800783a <quorem+0xea>
 8007862:	2000      	movs	r0, #0
 8007864:	e7ee      	b.n	8007844 <quorem+0xf4>
	...

08007868 <_dtoa_r>:
 8007868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786c:	ed2d 8b04 	vpush	{d8-d9}
 8007870:	ec57 6b10 	vmov	r6, r7, d0
 8007874:	b093      	sub	sp, #76	; 0x4c
 8007876:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007878:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800787c:	9106      	str	r1, [sp, #24]
 800787e:	ee10 aa10 	vmov	sl, s0
 8007882:	4604      	mov	r4, r0
 8007884:	9209      	str	r2, [sp, #36]	; 0x24
 8007886:	930c      	str	r3, [sp, #48]	; 0x30
 8007888:	46bb      	mov	fp, r7
 800788a:	b975      	cbnz	r5, 80078aa <_dtoa_r+0x42>
 800788c:	2010      	movs	r0, #16
 800788e:	f001 f94d 	bl	8008b2c <malloc>
 8007892:	4602      	mov	r2, r0
 8007894:	6260      	str	r0, [r4, #36]	; 0x24
 8007896:	b920      	cbnz	r0, 80078a2 <_dtoa_r+0x3a>
 8007898:	4ba7      	ldr	r3, [pc, #668]	; (8007b38 <_dtoa_r+0x2d0>)
 800789a:	21ea      	movs	r1, #234	; 0xea
 800789c:	48a7      	ldr	r0, [pc, #668]	; (8007b3c <_dtoa_r+0x2d4>)
 800789e:	f002 f8bd 	bl	8009a1c <__assert_func>
 80078a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80078a6:	6005      	str	r5, [r0, #0]
 80078a8:	60c5      	str	r5, [r0, #12]
 80078aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078ac:	6819      	ldr	r1, [r3, #0]
 80078ae:	b151      	cbz	r1, 80078c6 <_dtoa_r+0x5e>
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	604a      	str	r2, [r1, #4]
 80078b4:	2301      	movs	r3, #1
 80078b6:	4093      	lsls	r3, r2
 80078b8:	608b      	str	r3, [r1, #8]
 80078ba:	4620      	mov	r0, r4
 80078bc:	f001 f99e 	bl	8008bfc <_Bfree>
 80078c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	1e3b      	subs	r3, r7, #0
 80078c8:	bfaa      	itet	ge
 80078ca:	2300      	movge	r3, #0
 80078cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80078d0:	f8c8 3000 	strge.w	r3, [r8]
 80078d4:	4b9a      	ldr	r3, [pc, #616]	; (8007b40 <_dtoa_r+0x2d8>)
 80078d6:	bfbc      	itt	lt
 80078d8:	2201      	movlt	r2, #1
 80078da:	f8c8 2000 	strlt.w	r2, [r8]
 80078de:	ea33 030b 	bics.w	r3, r3, fp
 80078e2:	d11b      	bne.n	800791c <_dtoa_r+0xb4>
 80078e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078f0:	4333      	orrs	r3, r6
 80078f2:	f000 8592 	beq.w	800841a <_dtoa_r+0xbb2>
 80078f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078f8:	b963      	cbnz	r3, 8007914 <_dtoa_r+0xac>
 80078fa:	4b92      	ldr	r3, [pc, #584]	; (8007b44 <_dtoa_r+0x2dc>)
 80078fc:	e022      	b.n	8007944 <_dtoa_r+0xdc>
 80078fe:	4b92      	ldr	r3, [pc, #584]	; (8007b48 <_dtoa_r+0x2e0>)
 8007900:	9301      	str	r3, [sp, #4]
 8007902:	3308      	adds	r3, #8
 8007904:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007906:	6013      	str	r3, [r2, #0]
 8007908:	9801      	ldr	r0, [sp, #4]
 800790a:	b013      	add	sp, #76	; 0x4c
 800790c:	ecbd 8b04 	vpop	{d8-d9}
 8007910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007914:	4b8b      	ldr	r3, [pc, #556]	; (8007b44 <_dtoa_r+0x2dc>)
 8007916:	9301      	str	r3, [sp, #4]
 8007918:	3303      	adds	r3, #3
 800791a:	e7f3      	b.n	8007904 <_dtoa_r+0x9c>
 800791c:	2200      	movs	r2, #0
 800791e:	2300      	movs	r3, #0
 8007920:	4650      	mov	r0, sl
 8007922:	4659      	mov	r1, fp
 8007924:	f7f9 f8d8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007928:	ec4b ab19 	vmov	d9, sl, fp
 800792c:	4680      	mov	r8, r0
 800792e:	b158      	cbz	r0, 8007948 <_dtoa_r+0xe0>
 8007930:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007932:	2301      	movs	r3, #1
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 856b 	beq.w	8008414 <_dtoa_r+0xbac>
 800793e:	4883      	ldr	r0, [pc, #524]	; (8007b4c <_dtoa_r+0x2e4>)
 8007940:	6018      	str	r0, [r3, #0]
 8007942:	1e43      	subs	r3, r0, #1
 8007944:	9301      	str	r3, [sp, #4]
 8007946:	e7df      	b.n	8007908 <_dtoa_r+0xa0>
 8007948:	ec4b ab10 	vmov	d0, sl, fp
 800794c:	aa10      	add	r2, sp, #64	; 0x40
 800794e:	a911      	add	r1, sp, #68	; 0x44
 8007950:	4620      	mov	r0, r4
 8007952:	f001 fd01 	bl	8009358 <__d2b>
 8007956:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800795a:	ee08 0a10 	vmov	s16, r0
 800795e:	2d00      	cmp	r5, #0
 8007960:	f000 8084 	beq.w	8007a6c <_dtoa_r+0x204>
 8007964:	ee19 3a90 	vmov	r3, s19
 8007968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800796c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007970:	4656      	mov	r6, sl
 8007972:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007976:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800797a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800797e:	4b74      	ldr	r3, [pc, #464]	; (8007b50 <_dtoa_r+0x2e8>)
 8007980:	2200      	movs	r2, #0
 8007982:	4630      	mov	r0, r6
 8007984:	4639      	mov	r1, r7
 8007986:	f7f8 fc87 	bl	8000298 <__aeabi_dsub>
 800798a:	a365      	add	r3, pc, #404	; (adr r3, 8007b20 <_dtoa_r+0x2b8>)
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f7f8 fe3a 	bl	8000608 <__aeabi_dmul>
 8007994:	a364      	add	r3, pc, #400	; (adr r3, 8007b28 <_dtoa_r+0x2c0>)
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	f7f8 fc7f 	bl	800029c <__adddf3>
 800799e:	4606      	mov	r6, r0
 80079a0:	4628      	mov	r0, r5
 80079a2:	460f      	mov	r7, r1
 80079a4:	f7f8 fdc6 	bl	8000534 <__aeabi_i2d>
 80079a8:	a361      	add	r3, pc, #388	; (adr r3, 8007b30 <_dtoa_r+0x2c8>)
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f7f8 fe2b 	bl	8000608 <__aeabi_dmul>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	4630      	mov	r0, r6
 80079b8:	4639      	mov	r1, r7
 80079ba:	f7f8 fc6f 	bl	800029c <__adddf3>
 80079be:	4606      	mov	r6, r0
 80079c0:	460f      	mov	r7, r1
 80079c2:	f7f9 f8d1 	bl	8000b68 <__aeabi_d2iz>
 80079c6:	2200      	movs	r2, #0
 80079c8:	9000      	str	r0, [sp, #0]
 80079ca:	2300      	movs	r3, #0
 80079cc:	4630      	mov	r0, r6
 80079ce:	4639      	mov	r1, r7
 80079d0:	f7f9 f88c 	bl	8000aec <__aeabi_dcmplt>
 80079d4:	b150      	cbz	r0, 80079ec <_dtoa_r+0x184>
 80079d6:	9800      	ldr	r0, [sp, #0]
 80079d8:	f7f8 fdac 	bl	8000534 <__aeabi_i2d>
 80079dc:	4632      	mov	r2, r6
 80079de:	463b      	mov	r3, r7
 80079e0:	f7f9 f87a 	bl	8000ad8 <__aeabi_dcmpeq>
 80079e4:	b910      	cbnz	r0, 80079ec <_dtoa_r+0x184>
 80079e6:	9b00      	ldr	r3, [sp, #0]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	9b00      	ldr	r3, [sp, #0]
 80079ee:	2b16      	cmp	r3, #22
 80079f0:	d85a      	bhi.n	8007aa8 <_dtoa_r+0x240>
 80079f2:	9a00      	ldr	r2, [sp, #0]
 80079f4:	4b57      	ldr	r3, [pc, #348]	; (8007b54 <_dtoa_r+0x2ec>)
 80079f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fe:	ec51 0b19 	vmov	r0, r1, d9
 8007a02:	f7f9 f873 	bl	8000aec <__aeabi_dcmplt>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d050      	beq.n	8007aac <_dtoa_r+0x244>
 8007a0a:	9b00      	ldr	r3, [sp, #0]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	2300      	movs	r3, #0
 8007a12:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a16:	1b5d      	subs	r5, r3, r5
 8007a18:	1e6b      	subs	r3, r5, #1
 8007a1a:	9305      	str	r3, [sp, #20]
 8007a1c:	bf45      	ittet	mi
 8007a1e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007a22:	9304      	strmi	r3, [sp, #16]
 8007a24:	2300      	movpl	r3, #0
 8007a26:	2300      	movmi	r3, #0
 8007a28:	bf4c      	ite	mi
 8007a2a:	9305      	strmi	r3, [sp, #20]
 8007a2c:	9304      	strpl	r3, [sp, #16]
 8007a2e:	9b00      	ldr	r3, [sp, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	db3d      	blt.n	8007ab0 <_dtoa_r+0x248>
 8007a34:	9b05      	ldr	r3, [sp, #20]
 8007a36:	9a00      	ldr	r2, [sp, #0]
 8007a38:	920a      	str	r2, [sp, #40]	; 0x28
 8007a3a:	4413      	add	r3, r2
 8007a3c:	9305      	str	r3, [sp, #20]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	9307      	str	r3, [sp, #28]
 8007a42:	9b06      	ldr	r3, [sp, #24]
 8007a44:	2b09      	cmp	r3, #9
 8007a46:	f200 8089 	bhi.w	8007b5c <_dtoa_r+0x2f4>
 8007a4a:	2b05      	cmp	r3, #5
 8007a4c:	bfc4      	itt	gt
 8007a4e:	3b04      	subgt	r3, #4
 8007a50:	9306      	strgt	r3, [sp, #24]
 8007a52:	9b06      	ldr	r3, [sp, #24]
 8007a54:	f1a3 0302 	sub.w	r3, r3, #2
 8007a58:	bfcc      	ite	gt
 8007a5a:	2500      	movgt	r5, #0
 8007a5c:	2501      	movle	r5, #1
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	f200 8087 	bhi.w	8007b72 <_dtoa_r+0x30a>
 8007a64:	e8df f003 	tbb	[pc, r3]
 8007a68:	59383a2d 	.word	0x59383a2d
 8007a6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007a70:	441d      	add	r5, r3
 8007a72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a76:	2b20      	cmp	r3, #32
 8007a78:	bfc1      	itttt	gt
 8007a7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007a82:	fa0b f303 	lslgt.w	r3, fp, r3
 8007a86:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a8a:	bfda      	itte	le
 8007a8c:	f1c3 0320 	rsble	r3, r3, #32
 8007a90:	fa06 f003 	lslle.w	r0, r6, r3
 8007a94:	4318      	orrgt	r0, r3
 8007a96:	f7f8 fd3d 	bl	8000514 <__aeabi_ui2d>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	4606      	mov	r6, r0
 8007a9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007aa2:	3d01      	subs	r5, #1
 8007aa4:	930e      	str	r3, [sp, #56]	; 0x38
 8007aa6:	e76a      	b.n	800797e <_dtoa_r+0x116>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e7b2      	b.n	8007a12 <_dtoa_r+0x1aa>
 8007aac:	900b      	str	r0, [sp, #44]	; 0x2c
 8007aae:	e7b1      	b.n	8007a14 <_dtoa_r+0x1ac>
 8007ab0:	9b04      	ldr	r3, [sp, #16]
 8007ab2:	9a00      	ldr	r2, [sp, #0]
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	9304      	str	r3, [sp, #16]
 8007ab8:	4253      	negs	r3, r2
 8007aba:	9307      	str	r3, [sp, #28]
 8007abc:	2300      	movs	r3, #0
 8007abe:	930a      	str	r3, [sp, #40]	; 0x28
 8007ac0:	e7bf      	b.n	8007a42 <_dtoa_r+0x1da>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	9308      	str	r3, [sp, #32]
 8007ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	dc55      	bgt.n	8007b78 <_dtoa_r+0x310>
 8007acc:	2301      	movs	r3, #1
 8007ace:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ad6:	e00c      	b.n	8007af2 <_dtoa_r+0x28a>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e7f3      	b.n	8007ac4 <_dtoa_r+0x25c>
 8007adc:	2300      	movs	r3, #0
 8007ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ae0:	9308      	str	r3, [sp, #32]
 8007ae2:	9b00      	ldr	r3, [sp, #0]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	9302      	str	r3, [sp, #8]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	9303      	str	r3, [sp, #12]
 8007aee:	bfb8      	it	lt
 8007af0:	2301      	movlt	r3, #1
 8007af2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007af4:	2200      	movs	r2, #0
 8007af6:	6042      	str	r2, [r0, #4]
 8007af8:	2204      	movs	r2, #4
 8007afa:	f102 0614 	add.w	r6, r2, #20
 8007afe:	429e      	cmp	r6, r3
 8007b00:	6841      	ldr	r1, [r0, #4]
 8007b02:	d93d      	bls.n	8007b80 <_dtoa_r+0x318>
 8007b04:	4620      	mov	r0, r4
 8007b06:	f001 f839 	bl	8008b7c <_Balloc>
 8007b0a:	9001      	str	r0, [sp, #4]
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d13b      	bne.n	8007b88 <_dtoa_r+0x320>
 8007b10:	4b11      	ldr	r3, [pc, #68]	; (8007b58 <_dtoa_r+0x2f0>)
 8007b12:	4602      	mov	r2, r0
 8007b14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007b18:	e6c0      	b.n	800789c <_dtoa_r+0x34>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e7df      	b.n	8007ade <_dtoa_r+0x276>
 8007b1e:	bf00      	nop
 8007b20:	636f4361 	.word	0x636f4361
 8007b24:	3fd287a7 	.word	0x3fd287a7
 8007b28:	8b60c8b3 	.word	0x8b60c8b3
 8007b2c:	3fc68a28 	.word	0x3fc68a28
 8007b30:	509f79fb 	.word	0x509f79fb
 8007b34:	3fd34413 	.word	0x3fd34413
 8007b38:	0800a79e 	.word	0x0800a79e
 8007b3c:	0800a7b5 	.word	0x0800a7b5
 8007b40:	7ff00000 	.word	0x7ff00000
 8007b44:	0800a79a 	.word	0x0800a79a
 8007b48:	0800a791 	.word	0x0800a791
 8007b4c:	0800a611 	.word	0x0800a611
 8007b50:	3ff80000 	.word	0x3ff80000
 8007b54:	0800a920 	.word	0x0800a920
 8007b58:	0800a810 	.word	0x0800a810
 8007b5c:	2501      	movs	r5, #1
 8007b5e:	2300      	movs	r3, #0
 8007b60:	9306      	str	r3, [sp, #24]
 8007b62:	9508      	str	r5, [sp, #32]
 8007b64:	f04f 33ff 	mov.w	r3, #4294967295
 8007b68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2312      	movs	r3, #18
 8007b70:	e7b0      	b.n	8007ad4 <_dtoa_r+0x26c>
 8007b72:	2301      	movs	r3, #1
 8007b74:	9308      	str	r3, [sp, #32]
 8007b76:	e7f5      	b.n	8007b64 <_dtoa_r+0x2fc>
 8007b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b7e:	e7b8      	b.n	8007af2 <_dtoa_r+0x28a>
 8007b80:	3101      	adds	r1, #1
 8007b82:	6041      	str	r1, [r0, #4]
 8007b84:	0052      	lsls	r2, r2, #1
 8007b86:	e7b8      	b.n	8007afa <_dtoa_r+0x292>
 8007b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b8a:	9a01      	ldr	r2, [sp, #4]
 8007b8c:	601a      	str	r2, [r3, #0]
 8007b8e:	9b03      	ldr	r3, [sp, #12]
 8007b90:	2b0e      	cmp	r3, #14
 8007b92:	f200 809d 	bhi.w	8007cd0 <_dtoa_r+0x468>
 8007b96:	2d00      	cmp	r5, #0
 8007b98:	f000 809a 	beq.w	8007cd0 <_dtoa_r+0x468>
 8007b9c:	9b00      	ldr	r3, [sp, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	dd32      	ble.n	8007c08 <_dtoa_r+0x3a0>
 8007ba2:	4ab7      	ldr	r2, [pc, #732]	; (8007e80 <_dtoa_r+0x618>)
 8007ba4:	f003 030f 	and.w	r3, r3, #15
 8007ba8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007bac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bb0:	9b00      	ldr	r3, [sp, #0]
 8007bb2:	05d8      	lsls	r0, r3, #23
 8007bb4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007bb8:	d516      	bpl.n	8007be8 <_dtoa_r+0x380>
 8007bba:	4bb2      	ldr	r3, [pc, #712]	; (8007e84 <_dtoa_r+0x61c>)
 8007bbc:	ec51 0b19 	vmov	r0, r1, d9
 8007bc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bc4:	f7f8 fe4a 	bl	800085c <__aeabi_ddiv>
 8007bc8:	f007 070f 	and.w	r7, r7, #15
 8007bcc:	4682      	mov	sl, r0
 8007bce:	468b      	mov	fp, r1
 8007bd0:	2503      	movs	r5, #3
 8007bd2:	4eac      	ldr	r6, [pc, #688]	; (8007e84 <_dtoa_r+0x61c>)
 8007bd4:	b957      	cbnz	r7, 8007bec <_dtoa_r+0x384>
 8007bd6:	4642      	mov	r2, r8
 8007bd8:	464b      	mov	r3, r9
 8007bda:	4650      	mov	r0, sl
 8007bdc:	4659      	mov	r1, fp
 8007bde:	f7f8 fe3d 	bl	800085c <__aeabi_ddiv>
 8007be2:	4682      	mov	sl, r0
 8007be4:	468b      	mov	fp, r1
 8007be6:	e028      	b.n	8007c3a <_dtoa_r+0x3d2>
 8007be8:	2502      	movs	r5, #2
 8007bea:	e7f2      	b.n	8007bd2 <_dtoa_r+0x36a>
 8007bec:	07f9      	lsls	r1, r7, #31
 8007bee:	d508      	bpl.n	8007c02 <_dtoa_r+0x39a>
 8007bf0:	4640      	mov	r0, r8
 8007bf2:	4649      	mov	r1, r9
 8007bf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bf8:	f7f8 fd06 	bl	8000608 <__aeabi_dmul>
 8007bfc:	3501      	adds	r5, #1
 8007bfe:	4680      	mov	r8, r0
 8007c00:	4689      	mov	r9, r1
 8007c02:	107f      	asrs	r7, r7, #1
 8007c04:	3608      	adds	r6, #8
 8007c06:	e7e5      	b.n	8007bd4 <_dtoa_r+0x36c>
 8007c08:	f000 809b 	beq.w	8007d42 <_dtoa_r+0x4da>
 8007c0c:	9b00      	ldr	r3, [sp, #0]
 8007c0e:	4f9d      	ldr	r7, [pc, #628]	; (8007e84 <_dtoa_r+0x61c>)
 8007c10:	425e      	negs	r6, r3
 8007c12:	4b9b      	ldr	r3, [pc, #620]	; (8007e80 <_dtoa_r+0x618>)
 8007c14:	f006 020f 	and.w	r2, r6, #15
 8007c18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c20:	ec51 0b19 	vmov	r0, r1, d9
 8007c24:	f7f8 fcf0 	bl	8000608 <__aeabi_dmul>
 8007c28:	1136      	asrs	r6, r6, #4
 8007c2a:	4682      	mov	sl, r0
 8007c2c:	468b      	mov	fp, r1
 8007c2e:	2300      	movs	r3, #0
 8007c30:	2502      	movs	r5, #2
 8007c32:	2e00      	cmp	r6, #0
 8007c34:	d17a      	bne.n	8007d2c <_dtoa_r+0x4c4>
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1d3      	bne.n	8007be2 <_dtoa_r+0x37a>
 8007c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 8082 	beq.w	8007d46 <_dtoa_r+0x4de>
 8007c42:	4b91      	ldr	r3, [pc, #580]	; (8007e88 <_dtoa_r+0x620>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	4650      	mov	r0, sl
 8007c48:	4659      	mov	r1, fp
 8007c4a:	f7f8 ff4f 	bl	8000aec <__aeabi_dcmplt>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d079      	beq.n	8007d46 <_dtoa_r+0x4de>
 8007c52:	9b03      	ldr	r3, [sp, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d076      	beq.n	8007d46 <_dtoa_r+0x4de>
 8007c58:	9b02      	ldr	r3, [sp, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	dd36      	ble.n	8007ccc <_dtoa_r+0x464>
 8007c5e:	9b00      	ldr	r3, [sp, #0]
 8007c60:	4650      	mov	r0, sl
 8007c62:	4659      	mov	r1, fp
 8007c64:	1e5f      	subs	r7, r3, #1
 8007c66:	2200      	movs	r2, #0
 8007c68:	4b88      	ldr	r3, [pc, #544]	; (8007e8c <_dtoa_r+0x624>)
 8007c6a:	f7f8 fccd 	bl	8000608 <__aeabi_dmul>
 8007c6e:	9e02      	ldr	r6, [sp, #8]
 8007c70:	4682      	mov	sl, r0
 8007c72:	468b      	mov	fp, r1
 8007c74:	3501      	adds	r5, #1
 8007c76:	4628      	mov	r0, r5
 8007c78:	f7f8 fc5c 	bl	8000534 <__aeabi_i2d>
 8007c7c:	4652      	mov	r2, sl
 8007c7e:	465b      	mov	r3, fp
 8007c80:	f7f8 fcc2 	bl	8000608 <__aeabi_dmul>
 8007c84:	4b82      	ldr	r3, [pc, #520]	; (8007e90 <_dtoa_r+0x628>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	f7f8 fb08 	bl	800029c <__adddf3>
 8007c8c:	46d0      	mov	r8, sl
 8007c8e:	46d9      	mov	r9, fp
 8007c90:	4682      	mov	sl, r0
 8007c92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007c96:	2e00      	cmp	r6, #0
 8007c98:	d158      	bne.n	8007d4c <_dtoa_r+0x4e4>
 8007c9a:	4b7e      	ldr	r3, [pc, #504]	; (8007e94 <_dtoa_r+0x62c>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	4649      	mov	r1, r9
 8007ca2:	f7f8 faf9 	bl	8000298 <__aeabi_dsub>
 8007ca6:	4652      	mov	r2, sl
 8007ca8:	465b      	mov	r3, fp
 8007caa:	4680      	mov	r8, r0
 8007cac:	4689      	mov	r9, r1
 8007cae:	f7f8 ff3b 	bl	8000b28 <__aeabi_dcmpgt>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	f040 8295 	bne.w	80081e2 <_dtoa_r+0x97a>
 8007cb8:	4652      	mov	r2, sl
 8007cba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	f7f8 ff13 	bl	8000aec <__aeabi_dcmplt>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	f040 8289 	bne.w	80081de <_dtoa_r+0x976>
 8007ccc:	ec5b ab19 	vmov	sl, fp, d9
 8007cd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f2c0 8148 	blt.w	8007f68 <_dtoa_r+0x700>
 8007cd8:	9a00      	ldr	r2, [sp, #0]
 8007cda:	2a0e      	cmp	r2, #14
 8007cdc:	f300 8144 	bgt.w	8007f68 <_dtoa_r+0x700>
 8007ce0:	4b67      	ldr	r3, [pc, #412]	; (8007e80 <_dtoa_r+0x618>)
 8007ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ce6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f280 80d5 	bge.w	8007e9c <_dtoa_r+0x634>
 8007cf2:	9b03      	ldr	r3, [sp, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f300 80d1 	bgt.w	8007e9c <_dtoa_r+0x634>
 8007cfa:	f040 826f 	bne.w	80081dc <_dtoa_r+0x974>
 8007cfe:	4b65      	ldr	r3, [pc, #404]	; (8007e94 <_dtoa_r+0x62c>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	4640      	mov	r0, r8
 8007d04:	4649      	mov	r1, r9
 8007d06:	f7f8 fc7f 	bl	8000608 <__aeabi_dmul>
 8007d0a:	4652      	mov	r2, sl
 8007d0c:	465b      	mov	r3, fp
 8007d0e:	f7f8 ff01 	bl	8000b14 <__aeabi_dcmpge>
 8007d12:	9e03      	ldr	r6, [sp, #12]
 8007d14:	4637      	mov	r7, r6
 8007d16:	2800      	cmp	r0, #0
 8007d18:	f040 8245 	bne.w	80081a6 <_dtoa_r+0x93e>
 8007d1c:	9d01      	ldr	r5, [sp, #4]
 8007d1e:	2331      	movs	r3, #49	; 0x31
 8007d20:	f805 3b01 	strb.w	r3, [r5], #1
 8007d24:	9b00      	ldr	r3, [sp, #0]
 8007d26:	3301      	adds	r3, #1
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	e240      	b.n	80081ae <_dtoa_r+0x946>
 8007d2c:	07f2      	lsls	r2, r6, #31
 8007d2e:	d505      	bpl.n	8007d3c <_dtoa_r+0x4d4>
 8007d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d34:	f7f8 fc68 	bl	8000608 <__aeabi_dmul>
 8007d38:	3501      	adds	r5, #1
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	1076      	asrs	r6, r6, #1
 8007d3e:	3708      	adds	r7, #8
 8007d40:	e777      	b.n	8007c32 <_dtoa_r+0x3ca>
 8007d42:	2502      	movs	r5, #2
 8007d44:	e779      	b.n	8007c3a <_dtoa_r+0x3d2>
 8007d46:	9f00      	ldr	r7, [sp, #0]
 8007d48:	9e03      	ldr	r6, [sp, #12]
 8007d4a:	e794      	b.n	8007c76 <_dtoa_r+0x40e>
 8007d4c:	9901      	ldr	r1, [sp, #4]
 8007d4e:	4b4c      	ldr	r3, [pc, #304]	; (8007e80 <_dtoa_r+0x618>)
 8007d50:	4431      	add	r1, r6
 8007d52:	910d      	str	r1, [sp, #52]	; 0x34
 8007d54:	9908      	ldr	r1, [sp, #32]
 8007d56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d5e:	2900      	cmp	r1, #0
 8007d60:	d043      	beq.n	8007dea <_dtoa_r+0x582>
 8007d62:	494d      	ldr	r1, [pc, #308]	; (8007e98 <_dtoa_r+0x630>)
 8007d64:	2000      	movs	r0, #0
 8007d66:	f7f8 fd79 	bl	800085c <__aeabi_ddiv>
 8007d6a:	4652      	mov	r2, sl
 8007d6c:	465b      	mov	r3, fp
 8007d6e:	f7f8 fa93 	bl	8000298 <__aeabi_dsub>
 8007d72:	9d01      	ldr	r5, [sp, #4]
 8007d74:	4682      	mov	sl, r0
 8007d76:	468b      	mov	fp, r1
 8007d78:	4649      	mov	r1, r9
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	f7f8 fef4 	bl	8000b68 <__aeabi_d2iz>
 8007d80:	4606      	mov	r6, r0
 8007d82:	f7f8 fbd7 	bl	8000534 <__aeabi_i2d>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	f7f8 fa83 	bl	8000298 <__aeabi_dsub>
 8007d92:	3630      	adds	r6, #48	; 0x30
 8007d94:	f805 6b01 	strb.w	r6, [r5], #1
 8007d98:	4652      	mov	r2, sl
 8007d9a:	465b      	mov	r3, fp
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	4689      	mov	r9, r1
 8007da0:	f7f8 fea4 	bl	8000aec <__aeabi_dcmplt>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d163      	bne.n	8007e70 <_dtoa_r+0x608>
 8007da8:	4642      	mov	r2, r8
 8007daa:	464b      	mov	r3, r9
 8007dac:	4936      	ldr	r1, [pc, #216]	; (8007e88 <_dtoa_r+0x620>)
 8007dae:	2000      	movs	r0, #0
 8007db0:	f7f8 fa72 	bl	8000298 <__aeabi_dsub>
 8007db4:	4652      	mov	r2, sl
 8007db6:	465b      	mov	r3, fp
 8007db8:	f7f8 fe98 	bl	8000aec <__aeabi_dcmplt>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	f040 80b5 	bne.w	8007f2c <_dtoa_r+0x6c4>
 8007dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dc4:	429d      	cmp	r5, r3
 8007dc6:	d081      	beq.n	8007ccc <_dtoa_r+0x464>
 8007dc8:	4b30      	ldr	r3, [pc, #192]	; (8007e8c <_dtoa_r+0x624>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	4650      	mov	r0, sl
 8007dce:	4659      	mov	r1, fp
 8007dd0:	f7f8 fc1a 	bl	8000608 <__aeabi_dmul>
 8007dd4:	4b2d      	ldr	r3, [pc, #180]	; (8007e8c <_dtoa_r+0x624>)
 8007dd6:	4682      	mov	sl, r0
 8007dd8:	468b      	mov	fp, r1
 8007dda:	4640      	mov	r0, r8
 8007ddc:	4649      	mov	r1, r9
 8007dde:	2200      	movs	r2, #0
 8007de0:	f7f8 fc12 	bl	8000608 <__aeabi_dmul>
 8007de4:	4680      	mov	r8, r0
 8007de6:	4689      	mov	r9, r1
 8007de8:	e7c6      	b.n	8007d78 <_dtoa_r+0x510>
 8007dea:	4650      	mov	r0, sl
 8007dec:	4659      	mov	r1, fp
 8007dee:	f7f8 fc0b 	bl	8000608 <__aeabi_dmul>
 8007df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007df4:	9d01      	ldr	r5, [sp, #4]
 8007df6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007df8:	4682      	mov	sl, r0
 8007dfa:	468b      	mov	fp, r1
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	4640      	mov	r0, r8
 8007e00:	f7f8 feb2 	bl	8000b68 <__aeabi_d2iz>
 8007e04:	4606      	mov	r6, r0
 8007e06:	f7f8 fb95 	bl	8000534 <__aeabi_i2d>
 8007e0a:	3630      	adds	r6, #48	; 0x30
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4640      	mov	r0, r8
 8007e12:	4649      	mov	r1, r9
 8007e14:	f7f8 fa40 	bl	8000298 <__aeabi_dsub>
 8007e18:	f805 6b01 	strb.w	r6, [r5], #1
 8007e1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e1e:	429d      	cmp	r5, r3
 8007e20:	4680      	mov	r8, r0
 8007e22:	4689      	mov	r9, r1
 8007e24:	f04f 0200 	mov.w	r2, #0
 8007e28:	d124      	bne.n	8007e74 <_dtoa_r+0x60c>
 8007e2a:	4b1b      	ldr	r3, [pc, #108]	; (8007e98 <_dtoa_r+0x630>)
 8007e2c:	4650      	mov	r0, sl
 8007e2e:	4659      	mov	r1, fp
 8007e30:	f7f8 fa34 	bl	800029c <__adddf3>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	4640      	mov	r0, r8
 8007e3a:	4649      	mov	r1, r9
 8007e3c:	f7f8 fe74 	bl	8000b28 <__aeabi_dcmpgt>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d173      	bne.n	8007f2c <_dtoa_r+0x6c4>
 8007e44:	4652      	mov	r2, sl
 8007e46:	465b      	mov	r3, fp
 8007e48:	4913      	ldr	r1, [pc, #76]	; (8007e98 <_dtoa_r+0x630>)
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	f7f8 fa24 	bl	8000298 <__aeabi_dsub>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4640      	mov	r0, r8
 8007e56:	4649      	mov	r1, r9
 8007e58:	f7f8 fe48 	bl	8000aec <__aeabi_dcmplt>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	f43f af35 	beq.w	8007ccc <_dtoa_r+0x464>
 8007e62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007e64:	1e6b      	subs	r3, r5, #1
 8007e66:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e6c:	2b30      	cmp	r3, #48	; 0x30
 8007e6e:	d0f8      	beq.n	8007e62 <_dtoa_r+0x5fa>
 8007e70:	9700      	str	r7, [sp, #0]
 8007e72:	e049      	b.n	8007f08 <_dtoa_r+0x6a0>
 8007e74:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <_dtoa_r+0x624>)
 8007e76:	f7f8 fbc7 	bl	8000608 <__aeabi_dmul>
 8007e7a:	4680      	mov	r8, r0
 8007e7c:	4689      	mov	r9, r1
 8007e7e:	e7bd      	b.n	8007dfc <_dtoa_r+0x594>
 8007e80:	0800a920 	.word	0x0800a920
 8007e84:	0800a8f8 	.word	0x0800a8f8
 8007e88:	3ff00000 	.word	0x3ff00000
 8007e8c:	40240000 	.word	0x40240000
 8007e90:	401c0000 	.word	0x401c0000
 8007e94:	40140000 	.word	0x40140000
 8007e98:	3fe00000 	.word	0x3fe00000
 8007e9c:	9d01      	ldr	r5, [sp, #4]
 8007e9e:	4656      	mov	r6, sl
 8007ea0:	465f      	mov	r7, fp
 8007ea2:	4642      	mov	r2, r8
 8007ea4:	464b      	mov	r3, r9
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	4639      	mov	r1, r7
 8007eaa:	f7f8 fcd7 	bl	800085c <__aeabi_ddiv>
 8007eae:	f7f8 fe5b 	bl	8000b68 <__aeabi_d2iz>
 8007eb2:	4682      	mov	sl, r0
 8007eb4:	f7f8 fb3e 	bl	8000534 <__aeabi_i2d>
 8007eb8:	4642      	mov	r2, r8
 8007eba:	464b      	mov	r3, r9
 8007ebc:	f7f8 fba4 	bl	8000608 <__aeabi_dmul>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	4639      	mov	r1, r7
 8007ec8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007ecc:	f7f8 f9e4 	bl	8000298 <__aeabi_dsub>
 8007ed0:	f805 6b01 	strb.w	r6, [r5], #1
 8007ed4:	9e01      	ldr	r6, [sp, #4]
 8007ed6:	9f03      	ldr	r7, [sp, #12]
 8007ed8:	1bae      	subs	r6, r5, r6
 8007eda:	42b7      	cmp	r7, r6
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	d135      	bne.n	8007f4e <_dtoa_r+0x6e6>
 8007ee2:	f7f8 f9db 	bl	800029c <__adddf3>
 8007ee6:	4642      	mov	r2, r8
 8007ee8:	464b      	mov	r3, r9
 8007eea:	4606      	mov	r6, r0
 8007eec:	460f      	mov	r7, r1
 8007eee:	f7f8 fe1b 	bl	8000b28 <__aeabi_dcmpgt>
 8007ef2:	b9d0      	cbnz	r0, 8007f2a <_dtoa_r+0x6c2>
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	464b      	mov	r3, r9
 8007ef8:	4630      	mov	r0, r6
 8007efa:	4639      	mov	r1, r7
 8007efc:	f7f8 fdec 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f00:	b110      	cbz	r0, 8007f08 <_dtoa_r+0x6a0>
 8007f02:	f01a 0f01 	tst.w	sl, #1
 8007f06:	d110      	bne.n	8007f2a <_dtoa_r+0x6c2>
 8007f08:	4620      	mov	r0, r4
 8007f0a:	ee18 1a10 	vmov	r1, s16
 8007f0e:	f000 fe75 	bl	8008bfc <_Bfree>
 8007f12:	2300      	movs	r3, #0
 8007f14:	9800      	ldr	r0, [sp, #0]
 8007f16:	702b      	strb	r3, [r5, #0]
 8007f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	6018      	str	r0, [r3, #0]
 8007f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f43f acf1 	beq.w	8007908 <_dtoa_r+0xa0>
 8007f26:	601d      	str	r5, [r3, #0]
 8007f28:	e4ee      	b.n	8007908 <_dtoa_r+0xa0>
 8007f2a:	9f00      	ldr	r7, [sp, #0]
 8007f2c:	462b      	mov	r3, r5
 8007f2e:	461d      	mov	r5, r3
 8007f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f34:	2a39      	cmp	r2, #57	; 0x39
 8007f36:	d106      	bne.n	8007f46 <_dtoa_r+0x6de>
 8007f38:	9a01      	ldr	r2, [sp, #4]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d1f7      	bne.n	8007f2e <_dtoa_r+0x6c6>
 8007f3e:	9901      	ldr	r1, [sp, #4]
 8007f40:	2230      	movs	r2, #48	; 0x30
 8007f42:	3701      	adds	r7, #1
 8007f44:	700a      	strb	r2, [r1, #0]
 8007f46:	781a      	ldrb	r2, [r3, #0]
 8007f48:	3201      	adds	r2, #1
 8007f4a:	701a      	strb	r2, [r3, #0]
 8007f4c:	e790      	b.n	8007e70 <_dtoa_r+0x608>
 8007f4e:	4ba6      	ldr	r3, [pc, #664]	; (80081e8 <_dtoa_r+0x980>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	f7f8 fb59 	bl	8000608 <__aeabi_dmul>
 8007f56:	2200      	movs	r2, #0
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	460f      	mov	r7, r1
 8007f5e:	f7f8 fdbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d09d      	beq.n	8007ea2 <_dtoa_r+0x63a>
 8007f66:	e7cf      	b.n	8007f08 <_dtoa_r+0x6a0>
 8007f68:	9a08      	ldr	r2, [sp, #32]
 8007f6a:	2a00      	cmp	r2, #0
 8007f6c:	f000 80d7 	beq.w	800811e <_dtoa_r+0x8b6>
 8007f70:	9a06      	ldr	r2, [sp, #24]
 8007f72:	2a01      	cmp	r2, #1
 8007f74:	f300 80ba 	bgt.w	80080ec <_dtoa_r+0x884>
 8007f78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f7a:	2a00      	cmp	r2, #0
 8007f7c:	f000 80b2 	beq.w	80080e4 <_dtoa_r+0x87c>
 8007f80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f84:	9e07      	ldr	r6, [sp, #28]
 8007f86:	9d04      	ldr	r5, [sp, #16]
 8007f88:	9a04      	ldr	r2, [sp, #16]
 8007f8a:	441a      	add	r2, r3
 8007f8c:	9204      	str	r2, [sp, #16]
 8007f8e:	9a05      	ldr	r2, [sp, #20]
 8007f90:	2101      	movs	r1, #1
 8007f92:	441a      	add	r2, r3
 8007f94:	4620      	mov	r0, r4
 8007f96:	9205      	str	r2, [sp, #20]
 8007f98:	f000 ff32 	bl	8008e00 <__i2b>
 8007f9c:	4607      	mov	r7, r0
 8007f9e:	2d00      	cmp	r5, #0
 8007fa0:	dd0c      	ble.n	8007fbc <_dtoa_r+0x754>
 8007fa2:	9b05      	ldr	r3, [sp, #20]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	dd09      	ble.n	8007fbc <_dtoa_r+0x754>
 8007fa8:	42ab      	cmp	r3, r5
 8007faa:	9a04      	ldr	r2, [sp, #16]
 8007fac:	bfa8      	it	ge
 8007fae:	462b      	movge	r3, r5
 8007fb0:	1ad2      	subs	r2, r2, r3
 8007fb2:	9204      	str	r2, [sp, #16]
 8007fb4:	9a05      	ldr	r2, [sp, #20]
 8007fb6:	1aed      	subs	r5, r5, r3
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	9305      	str	r3, [sp, #20]
 8007fbc:	9b07      	ldr	r3, [sp, #28]
 8007fbe:	b31b      	cbz	r3, 8008008 <_dtoa_r+0x7a0>
 8007fc0:	9b08      	ldr	r3, [sp, #32]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 80af 	beq.w	8008126 <_dtoa_r+0x8be>
 8007fc8:	2e00      	cmp	r6, #0
 8007fca:	dd13      	ble.n	8007ff4 <_dtoa_r+0x78c>
 8007fcc:	4639      	mov	r1, r7
 8007fce:	4632      	mov	r2, r6
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f000 ffd5 	bl	8008f80 <__pow5mult>
 8007fd6:	ee18 2a10 	vmov	r2, s16
 8007fda:	4601      	mov	r1, r0
 8007fdc:	4607      	mov	r7, r0
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f000 ff24 	bl	8008e2c <__multiply>
 8007fe4:	ee18 1a10 	vmov	r1, s16
 8007fe8:	4680      	mov	r8, r0
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 fe06 	bl	8008bfc <_Bfree>
 8007ff0:	ee08 8a10 	vmov	s16, r8
 8007ff4:	9b07      	ldr	r3, [sp, #28]
 8007ff6:	1b9a      	subs	r2, r3, r6
 8007ff8:	d006      	beq.n	8008008 <_dtoa_r+0x7a0>
 8007ffa:	ee18 1a10 	vmov	r1, s16
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 ffbe 	bl	8008f80 <__pow5mult>
 8008004:	ee08 0a10 	vmov	s16, r0
 8008008:	2101      	movs	r1, #1
 800800a:	4620      	mov	r0, r4
 800800c:	f000 fef8 	bl	8008e00 <__i2b>
 8008010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008012:	2b00      	cmp	r3, #0
 8008014:	4606      	mov	r6, r0
 8008016:	f340 8088 	ble.w	800812a <_dtoa_r+0x8c2>
 800801a:	461a      	mov	r2, r3
 800801c:	4601      	mov	r1, r0
 800801e:	4620      	mov	r0, r4
 8008020:	f000 ffae 	bl	8008f80 <__pow5mult>
 8008024:	9b06      	ldr	r3, [sp, #24]
 8008026:	2b01      	cmp	r3, #1
 8008028:	4606      	mov	r6, r0
 800802a:	f340 8081 	ble.w	8008130 <_dtoa_r+0x8c8>
 800802e:	f04f 0800 	mov.w	r8, #0
 8008032:	6933      	ldr	r3, [r6, #16]
 8008034:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008038:	6918      	ldr	r0, [r3, #16]
 800803a:	f000 fe91 	bl	8008d60 <__hi0bits>
 800803e:	f1c0 0020 	rsb	r0, r0, #32
 8008042:	9b05      	ldr	r3, [sp, #20]
 8008044:	4418      	add	r0, r3
 8008046:	f010 001f 	ands.w	r0, r0, #31
 800804a:	f000 8092 	beq.w	8008172 <_dtoa_r+0x90a>
 800804e:	f1c0 0320 	rsb	r3, r0, #32
 8008052:	2b04      	cmp	r3, #4
 8008054:	f340 808a 	ble.w	800816c <_dtoa_r+0x904>
 8008058:	f1c0 001c 	rsb	r0, r0, #28
 800805c:	9b04      	ldr	r3, [sp, #16]
 800805e:	4403      	add	r3, r0
 8008060:	9304      	str	r3, [sp, #16]
 8008062:	9b05      	ldr	r3, [sp, #20]
 8008064:	4403      	add	r3, r0
 8008066:	4405      	add	r5, r0
 8008068:	9305      	str	r3, [sp, #20]
 800806a:	9b04      	ldr	r3, [sp, #16]
 800806c:	2b00      	cmp	r3, #0
 800806e:	dd07      	ble.n	8008080 <_dtoa_r+0x818>
 8008070:	ee18 1a10 	vmov	r1, s16
 8008074:	461a      	mov	r2, r3
 8008076:	4620      	mov	r0, r4
 8008078:	f000 ffdc 	bl	8009034 <__lshift>
 800807c:	ee08 0a10 	vmov	s16, r0
 8008080:	9b05      	ldr	r3, [sp, #20]
 8008082:	2b00      	cmp	r3, #0
 8008084:	dd05      	ble.n	8008092 <_dtoa_r+0x82a>
 8008086:	4631      	mov	r1, r6
 8008088:	461a      	mov	r2, r3
 800808a:	4620      	mov	r0, r4
 800808c:	f000 ffd2 	bl	8009034 <__lshift>
 8008090:	4606      	mov	r6, r0
 8008092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008094:	2b00      	cmp	r3, #0
 8008096:	d06e      	beq.n	8008176 <_dtoa_r+0x90e>
 8008098:	ee18 0a10 	vmov	r0, s16
 800809c:	4631      	mov	r1, r6
 800809e:	f001 f839 	bl	8009114 <__mcmp>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	da67      	bge.n	8008176 <_dtoa_r+0x90e>
 80080a6:	9b00      	ldr	r3, [sp, #0]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	ee18 1a10 	vmov	r1, s16
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	220a      	movs	r2, #10
 80080b2:	2300      	movs	r3, #0
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fdc3 	bl	8008c40 <__multadd>
 80080ba:	9b08      	ldr	r3, [sp, #32]
 80080bc:	ee08 0a10 	vmov	s16, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 81b1 	beq.w	8008428 <_dtoa_r+0xbc0>
 80080c6:	2300      	movs	r3, #0
 80080c8:	4639      	mov	r1, r7
 80080ca:	220a      	movs	r2, #10
 80080cc:	4620      	mov	r0, r4
 80080ce:	f000 fdb7 	bl	8008c40 <__multadd>
 80080d2:	9b02      	ldr	r3, [sp, #8]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	4607      	mov	r7, r0
 80080d8:	f300 808e 	bgt.w	80081f8 <_dtoa_r+0x990>
 80080dc:	9b06      	ldr	r3, [sp, #24]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	dc51      	bgt.n	8008186 <_dtoa_r+0x91e>
 80080e2:	e089      	b.n	80081f8 <_dtoa_r+0x990>
 80080e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080ea:	e74b      	b.n	8007f84 <_dtoa_r+0x71c>
 80080ec:	9b03      	ldr	r3, [sp, #12]
 80080ee:	1e5e      	subs	r6, r3, #1
 80080f0:	9b07      	ldr	r3, [sp, #28]
 80080f2:	42b3      	cmp	r3, r6
 80080f4:	bfbf      	itttt	lt
 80080f6:	9b07      	ldrlt	r3, [sp, #28]
 80080f8:	9607      	strlt	r6, [sp, #28]
 80080fa:	1af2      	sublt	r2, r6, r3
 80080fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80080fe:	bfb6      	itet	lt
 8008100:	189b      	addlt	r3, r3, r2
 8008102:	1b9e      	subge	r6, r3, r6
 8008104:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	bfb8      	it	lt
 800810a:	2600      	movlt	r6, #0
 800810c:	2b00      	cmp	r3, #0
 800810e:	bfb7      	itett	lt
 8008110:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008114:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008118:	1a9d      	sublt	r5, r3, r2
 800811a:	2300      	movlt	r3, #0
 800811c:	e734      	b.n	8007f88 <_dtoa_r+0x720>
 800811e:	9e07      	ldr	r6, [sp, #28]
 8008120:	9d04      	ldr	r5, [sp, #16]
 8008122:	9f08      	ldr	r7, [sp, #32]
 8008124:	e73b      	b.n	8007f9e <_dtoa_r+0x736>
 8008126:	9a07      	ldr	r2, [sp, #28]
 8008128:	e767      	b.n	8007ffa <_dtoa_r+0x792>
 800812a:	9b06      	ldr	r3, [sp, #24]
 800812c:	2b01      	cmp	r3, #1
 800812e:	dc18      	bgt.n	8008162 <_dtoa_r+0x8fa>
 8008130:	f1ba 0f00 	cmp.w	sl, #0
 8008134:	d115      	bne.n	8008162 <_dtoa_r+0x8fa>
 8008136:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800813a:	b993      	cbnz	r3, 8008162 <_dtoa_r+0x8fa>
 800813c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008140:	0d1b      	lsrs	r3, r3, #20
 8008142:	051b      	lsls	r3, r3, #20
 8008144:	b183      	cbz	r3, 8008168 <_dtoa_r+0x900>
 8008146:	9b04      	ldr	r3, [sp, #16]
 8008148:	3301      	adds	r3, #1
 800814a:	9304      	str	r3, [sp, #16]
 800814c:	9b05      	ldr	r3, [sp, #20]
 800814e:	3301      	adds	r3, #1
 8008150:	9305      	str	r3, [sp, #20]
 8008152:	f04f 0801 	mov.w	r8, #1
 8008156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008158:	2b00      	cmp	r3, #0
 800815a:	f47f af6a 	bne.w	8008032 <_dtoa_r+0x7ca>
 800815e:	2001      	movs	r0, #1
 8008160:	e76f      	b.n	8008042 <_dtoa_r+0x7da>
 8008162:	f04f 0800 	mov.w	r8, #0
 8008166:	e7f6      	b.n	8008156 <_dtoa_r+0x8ee>
 8008168:	4698      	mov	r8, r3
 800816a:	e7f4      	b.n	8008156 <_dtoa_r+0x8ee>
 800816c:	f43f af7d 	beq.w	800806a <_dtoa_r+0x802>
 8008170:	4618      	mov	r0, r3
 8008172:	301c      	adds	r0, #28
 8008174:	e772      	b.n	800805c <_dtoa_r+0x7f4>
 8008176:	9b03      	ldr	r3, [sp, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	dc37      	bgt.n	80081ec <_dtoa_r+0x984>
 800817c:	9b06      	ldr	r3, [sp, #24]
 800817e:	2b02      	cmp	r3, #2
 8008180:	dd34      	ble.n	80081ec <_dtoa_r+0x984>
 8008182:	9b03      	ldr	r3, [sp, #12]
 8008184:	9302      	str	r3, [sp, #8]
 8008186:	9b02      	ldr	r3, [sp, #8]
 8008188:	b96b      	cbnz	r3, 80081a6 <_dtoa_r+0x93e>
 800818a:	4631      	mov	r1, r6
 800818c:	2205      	movs	r2, #5
 800818e:	4620      	mov	r0, r4
 8008190:	f000 fd56 	bl	8008c40 <__multadd>
 8008194:	4601      	mov	r1, r0
 8008196:	4606      	mov	r6, r0
 8008198:	ee18 0a10 	vmov	r0, s16
 800819c:	f000 ffba 	bl	8009114 <__mcmp>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	f73f adbb 	bgt.w	8007d1c <_dtoa_r+0x4b4>
 80081a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a8:	9d01      	ldr	r5, [sp, #4]
 80081aa:	43db      	mvns	r3, r3
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	f04f 0800 	mov.w	r8, #0
 80081b2:	4631      	mov	r1, r6
 80081b4:	4620      	mov	r0, r4
 80081b6:	f000 fd21 	bl	8008bfc <_Bfree>
 80081ba:	2f00      	cmp	r7, #0
 80081bc:	f43f aea4 	beq.w	8007f08 <_dtoa_r+0x6a0>
 80081c0:	f1b8 0f00 	cmp.w	r8, #0
 80081c4:	d005      	beq.n	80081d2 <_dtoa_r+0x96a>
 80081c6:	45b8      	cmp	r8, r7
 80081c8:	d003      	beq.n	80081d2 <_dtoa_r+0x96a>
 80081ca:	4641      	mov	r1, r8
 80081cc:	4620      	mov	r0, r4
 80081ce:	f000 fd15 	bl	8008bfc <_Bfree>
 80081d2:	4639      	mov	r1, r7
 80081d4:	4620      	mov	r0, r4
 80081d6:	f000 fd11 	bl	8008bfc <_Bfree>
 80081da:	e695      	b.n	8007f08 <_dtoa_r+0x6a0>
 80081dc:	2600      	movs	r6, #0
 80081de:	4637      	mov	r7, r6
 80081e0:	e7e1      	b.n	80081a6 <_dtoa_r+0x93e>
 80081e2:	9700      	str	r7, [sp, #0]
 80081e4:	4637      	mov	r7, r6
 80081e6:	e599      	b.n	8007d1c <_dtoa_r+0x4b4>
 80081e8:	40240000 	.word	0x40240000
 80081ec:	9b08      	ldr	r3, [sp, #32]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 80ca 	beq.w	8008388 <_dtoa_r+0xb20>
 80081f4:	9b03      	ldr	r3, [sp, #12]
 80081f6:	9302      	str	r3, [sp, #8]
 80081f8:	2d00      	cmp	r5, #0
 80081fa:	dd05      	ble.n	8008208 <_dtoa_r+0x9a0>
 80081fc:	4639      	mov	r1, r7
 80081fe:	462a      	mov	r2, r5
 8008200:	4620      	mov	r0, r4
 8008202:	f000 ff17 	bl	8009034 <__lshift>
 8008206:	4607      	mov	r7, r0
 8008208:	f1b8 0f00 	cmp.w	r8, #0
 800820c:	d05b      	beq.n	80082c6 <_dtoa_r+0xa5e>
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	4620      	mov	r0, r4
 8008212:	f000 fcb3 	bl	8008b7c <_Balloc>
 8008216:	4605      	mov	r5, r0
 8008218:	b928      	cbnz	r0, 8008226 <_dtoa_r+0x9be>
 800821a:	4b87      	ldr	r3, [pc, #540]	; (8008438 <_dtoa_r+0xbd0>)
 800821c:	4602      	mov	r2, r0
 800821e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008222:	f7ff bb3b 	b.w	800789c <_dtoa_r+0x34>
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	3202      	adds	r2, #2
 800822a:	0092      	lsls	r2, r2, #2
 800822c:	f107 010c 	add.w	r1, r7, #12
 8008230:	300c      	adds	r0, #12
 8008232:	f000 fc95 	bl	8008b60 <memcpy>
 8008236:	2201      	movs	r2, #1
 8008238:	4629      	mov	r1, r5
 800823a:	4620      	mov	r0, r4
 800823c:	f000 fefa 	bl	8009034 <__lshift>
 8008240:	9b01      	ldr	r3, [sp, #4]
 8008242:	f103 0901 	add.w	r9, r3, #1
 8008246:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800824a:	4413      	add	r3, r2
 800824c:	9305      	str	r3, [sp, #20]
 800824e:	f00a 0301 	and.w	r3, sl, #1
 8008252:	46b8      	mov	r8, r7
 8008254:	9304      	str	r3, [sp, #16]
 8008256:	4607      	mov	r7, r0
 8008258:	4631      	mov	r1, r6
 800825a:	ee18 0a10 	vmov	r0, s16
 800825e:	f7ff fa77 	bl	8007750 <quorem>
 8008262:	4641      	mov	r1, r8
 8008264:	9002      	str	r0, [sp, #8]
 8008266:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800826a:	ee18 0a10 	vmov	r0, s16
 800826e:	f000 ff51 	bl	8009114 <__mcmp>
 8008272:	463a      	mov	r2, r7
 8008274:	9003      	str	r0, [sp, #12]
 8008276:	4631      	mov	r1, r6
 8008278:	4620      	mov	r0, r4
 800827a:	f000 ff67 	bl	800914c <__mdiff>
 800827e:	68c2      	ldr	r2, [r0, #12]
 8008280:	f109 3bff 	add.w	fp, r9, #4294967295
 8008284:	4605      	mov	r5, r0
 8008286:	bb02      	cbnz	r2, 80082ca <_dtoa_r+0xa62>
 8008288:	4601      	mov	r1, r0
 800828a:	ee18 0a10 	vmov	r0, s16
 800828e:	f000 ff41 	bl	8009114 <__mcmp>
 8008292:	4602      	mov	r2, r0
 8008294:	4629      	mov	r1, r5
 8008296:	4620      	mov	r0, r4
 8008298:	9207      	str	r2, [sp, #28]
 800829a:	f000 fcaf 	bl	8008bfc <_Bfree>
 800829e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80082a2:	ea43 0102 	orr.w	r1, r3, r2
 80082a6:	9b04      	ldr	r3, [sp, #16]
 80082a8:	430b      	orrs	r3, r1
 80082aa:	464d      	mov	r5, r9
 80082ac:	d10f      	bne.n	80082ce <_dtoa_r+0xa66>
 80082ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80082b2:	d02a      	beq.n	800830a <_dtoa_r+0xaa2>
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	dd02      	ble.n	80082c0 <_dtoa_r+0xa58>
 80082ba:	9b02      	ldr	r3, [sp, #8]
 80082bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80082c0:	f88b a000 	strb.w	sl, [fp]
 80082c4:	e775      	b.n	80081b2 <_dtoa_r+0x94a>
 80082c6:	4638      	mov	r0, r7
 80082c8:	e7ba      	b.n	8008240 <_dtoa_r+0x9d8>
 80082ca:	2201      	movs	r2, #1
 80082cc:	e7e2      	b.n	8008294 <_dtoa_r+0xa2c>
 80082ce:	9b03      	ldr	r3, [sp, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	db04      	blt.n	80082de <_dtoa_r+0xa76>
 80082d4:	9906      	ldr	r1, [sp, #24]
 80082d6:	430b      	orrs	r3, r1
 80082d8:	9904      	ldr	r1, [sp, #16]
 80082da:	430b      	orrs	r3, r1
 80082dc:	d122      	bne.n	8008324 <_dtoa_r+0xabc>
 80082de:	2a00      	cmp	r2, #0
 80082e0:	ddee      	ble.n	80082c0 <_dtoa_r+0xa58>
 80082e2:	ee18 1a10 	vmov	r1, s16
 80082e6:	2201      	movs	r2, #1
 80082e8:	4620      	mov	r0, r4
 80082ea:	f000 fea3 	bl	8009034 <__lshift>
 80082ee:	4631      	mov	r1, r6
 80082f0:	ee08 0a10 	vmov	s16, r0
 80082f4:	f000 ff0e 	bl	8009114 <__mcmp>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	dc03      	bgt.n	8008304 <_dtoa_r+0xa9c>
 80082fc:	d1e0      	bne.n	80082c0 <_dtoa_r+0xa58>
 80082fe:	f01a 0f01 	tst.w	sl, #1
 8008302:	d0dd      	beq.n	80082c0 <_dtoa_r+0xa58>
 8008304:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008308:	d1d7      	bne.n	80082ba <_dtoa_r+0xa52>
 800830a:	2339      	movs	r3, #57	; 0x39
 800830c:	f88b 3000 	strb.w	r3, [fp]
 8008310:	462b      	mov	r3, r5
 8008312:	461d      	mov	r5, r3
 8008314:	3b01      	subs	r3, #1
 8008316:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800831a:	2a39      	cmp	r2, #57	; 0x39
 800831c:	d071      	beq.n	8008402 <_dtoa_r+0xb9a>
 800831e:	3201      	adds	r2, #1
 8008320:	701a      	strb	r2, [r3, #0]
 8008322:	e746      	b.n	80081b2 <_dtoa_r+0x94a>
 8008324:	2a00      	cmp	r2, #0
 8008326:	dd07      	ble.n	8008338 <_dtoa_r+0xad0>
 8008328:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800832c:	d0ed      	beq.n	800830a <_dtoa_r+0xaa2>
 800832e:	f10a 0301 	add.w	r3, sl, #1
 8008332:	f88b 3000 	strb.w	r3, [fp]
 8008336:	e73c      	b.n	80081b2 <_dtoa_r+0x94a>
 8008338:	9b05      	ldr	r3, [sp, #20]
 800833a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800833e:	4599      	cmp	r9, r3
 8008340:	d047      	beq.n	80083d2 <_dtoa_r+0xb6a>
 8008342:	ee18 1a10 	vmov	r1, s16
 8008346:	2300      	movs	r3, #0
 8008348:	220a      	movs	r2, #10
 800834a:	4620      	mov	r0, r4
 800834c:	f000 fc78 	bl	8008c40 <__multadd>
 8008350:	45b8      	cmp	r8, r7
 8008352:	ee08 0a10 	vmov	s16, r0
 8008356:	f04f 0300 	mov.w	r3, #0
 800835a:	f04f 020a 	mov.w	r2, #10
 800835e:	4641      	mov	r1, r8
 8008360:	4620      	mov	r0, r4
 8008362:	d106      	bne.n	8008372 <_dtoa_r+0xb0a>
 8008364:	f000 fc6c 	bl	8008c40 <__multadd>
 8008368:	4680      	mov	r8, r0
 800836a:	4607      	mov	r7, r0
 800836c:	f109 0901 	add.w	r9, r9, #1
 8008370:	e772      	b.n	8008258 <_dtoa_r+0x9f0>
 8008372:	f000 fc65 	bl	8008c40 <__multadd>
 8008376:	4639      	mov	r1, r7
 8008378:	4680      	mov	r8, r0
 800837a:	2300      	movs	r3, #0
 800837c:	220a      	movs	r2, #10
 800837e:	4620      	mov	r0, r4
 8008380:	f000 fc5e 	bl	8008c40 <__multadd>
 8008384:	4607      	mov	r7, r0
 8008386:	e7f1      	b.n	800836c <_dtoa_r+0xb04>
 8008388:	9b03      	ldr	r3, [sp, #12]
 800838a:	9302      	str	r3, [sp, #8]
 800838c:	9d01      	ldr	r5, [sp, #4]
 800838e:	ee18 0a10 	vmov	r0, s16
 8008392:	4631      	mov	r1, r6
 8008394:	f7ff f9dc 	bl	8007750 <quorem>
 8008398:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800839c:	9b01      	ldr	r3, [sp, #4]
 800839e:	f805 ab01 	strb.w	sl, [r5], #1
 80083a2:	1aea      	subs	r2, r5, r3
 80083a4:	9b02      	ldr	r3, [sp, #8]
 80083a6:	4293      	cmp	r3, r2
 80083a8:	dd09      	ble.n	80083be <_dtoa_r+0xb56>
 80083aa:	ee18 1a10 	vmov	r1, s16
 80083ae:	2300      	movs	r3, #0
 80083b0:	220a      	movs	r2, #10
 80083b2:	4620      	mov	r0, r4
 80083b4:	f000 fc44 	bl	8008c40 <__multadd>
 80083b8:	ee08 0a10 	vmov	s16, r0
 80083bc:	e7e7      	b.n	800838e <_dtoa_r+0xb26>
 80083be:	9b02      	ldr	r3, [sp, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	bfc8      	it	gt
 80083c4:	461d      	movgt	r5, r3
 80083c6:	9b01      	ldr	r3, [sp, #4]
 80083c8:	bfd8      	it	le
 80083ca:	2501      	movle	r5, #1
 80083cc:	441d      	add	r5, r3
 80083ce:	f04f 0800 	mov.w	r8, #0
 80083d2:	ee18 1a10 	vmov	r1, s16
 80083d6:	2201      	movs	r2, #1
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 fe2b 	bl	8009034 <__lshift>
 80083de:	4631      	mov	r1, r6
 80083e0:	ee08 0a10 	vmov	s16, r0
 80083e4:	f000 fe96 	bl	8009114 <__mcmp>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	dc91      	bgt.n	8008310 <_dtoa_r+0xaa8>
 80083ec:	d102      	bne.n	80083f4 <_dtoa_r+0xb8c>
 80083ee:	f01a 0f01 	tst.w	sl, #1
 80083f2:	d18d      	bne.n	8008310 <_dtoa_r+0xaa8>
 80083f4:	462b      	mov	r3, r5
 80083f6:	461d      	mov	r5, r3
 80083f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083fc:	2a30      	cmp	r2, #48	; 0x30
 80083fe:	d0fa      	beq.n	80083f6 <_dtoa_r+0xb8e>
 8008400:	e6d7      	b.n	80081b2 <_dtoa_r+0x94a>
 8008402:	9a01      	ldr	r2, [sp, #4]
 8008404:	429a      	cmp	r2, r3
 8008406:	d184      	bne.n	8008312 <_dtoa_r+0xaaa>
 8008408:	9b00      	ldr	r3, [sp, #0]
 800840a:	3301      	adds	r3, #1
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	2331      	movs	r3, #49	; 0x31
 8008410:	7013      	strb	r3, [r2, #0]
 8008412:	e6ce      	b.n	80081b2 <_dtoa_r+0x94a>
 8008414:	4b09      	ldr	r3, [pc, #36]	; (800843c <_dtoa_r+0xbd4>)
 8008416:	f7ff ba95 	b.w	8007944 <_dtoa_r+0xdc>
 800841a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800841c:	2b00      	cmp	r3, #0
 800841e:	f47f aa6e 	bne.w	80078fe <_dtoa_r+0x96>
 8008422:	4b07      	ldr	r3, [pc, #28]	; (8008440 <_dtoa_r+0xbd8>)
 8008424:	f7ff ba8e 	b.w	8007944 <_dtoa_r+0xdc>
 8008428:	9b02      	ldr	r3, [sp, #8]
 800842a:	2b00      	cmp	r3, #0
 800842c:	dcae      	bgt.n	800838c <_dtoa_r+0xb24>
 800842e:	9b06      	ldr	r3, [sp, #24]
 8008430:	2b02      	cmp	r3, #2
 8008432:	f73f aea8 	bgt.w	8008186 <_dtoa_r+0x91e>
 8008436:	e7a9      	b.n	800838c <_dtoa_r+0xb24>
 8008438:	0800a810 	.word	0x0800a810
 800843c:	0800a610 	.word	0x0800a610
 8008440:	0800a791 	.word	0x0800a791

08008444 <rshift>:
 8008444:	6903      	ldr	r3, [r0, #16]
 8008446:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800844a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800844e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008452:	f100 0414 	add.w	r4, r0, #20
 8008456:	dd45      	ble.n	80084e4 <rshift+0xa0>
 8008458:	f011 011f 	ands.w	r1, r1, #31
 800845c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008460:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008464:	d10c      	bne.n	8008480 <rshift+0x3c>
 8008466:	f100 0710 	add.w	r7, r0, #16
 800846a:	4629      	mov	r1, r5
 800846c:	42b1      	cmp	r1, r6
 800846e:	d334      	bcc.n	80084da <rshift+0x96>
 8008470:	1a9b      	subs	r3, r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	1eea      	subs	r2, r5, #3
 8008476:	4296      	cmp	r6, r2
 8008478:	bf38      	it	cc
 800847a:	2300      	movcc	r3, #0
 800847c:	4423      	add	r3, r4
 800847e:	e015      	b.n	80084ac <rshift+0x68>
 8008480:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008484:	f1c1 0820 	rsb	r8, r1, #32
 8008488:	40cf      	lsrs	r7, r1
 800848a:	f105 0e04 	add.w	lr, r5, #4
 800848e:	46a1      	mov	r9, r4
 8008490:	4576      	cmp	r6, lr
 8008492:	46f4      	mov	ip, lr
 8008494:	d815      	bhi.n	80084c2 <rshift+0x7e>
 8008496:	1a9a      	subs	r2, r3, r2
 8008498:	0092      	lsls	r2, r2, #2
 800849a:	3a04      	subs	r2, #4
 800849c:	3501      	adds	r5, #1
 800849e:	42ae      	cmp	r6, r5
 80084a0:	bf38      	it	cc
 80084a2:	2200      	movcc	r2, #0
 80084a4:	18a3      	adds	r3, r4, r2
 80084a6:	50a7      	str	r7, [r4, r2]
 80084a8:	b107      	cbz	r7, 80084ac <rshift+0x68>
 80084aa:	3304      	adds	r3, #4
 80084ac:	1b1a      	subs	r2, r3, r4
 80084ae:	42a3      	cmp	r3, r4
 80084b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80084b4:	bf08      	it	eq
 80084b6:	2300      	moveq	r3, #0
 80084b8:	6102      	str	r2, [r0, #16]
 80084ba:	bf08      	it	eq
 80084bc:	6143      	streq	r3, [r0, #20]
 80084be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084c2:	f8dc c000 	ldr.w	ip, [ip]
 80084c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80084ca:	ea4c 0707 	orr.w	r7, ip, r7
 80084ce:	f849 7b04 	str.w	r7, [r9], #4
 80084d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084d6:	40cf      	lsrs	r7, r1
 80084d8:	e7da      	b.n	8008490 <rshift+0x4c>
 80084da:	f851 cb04 	ldr.w	ip, [r1], #4
 80084de:	f847 cf04 	str.w	ip, [r7, #4]!
 80084e2:	e7c3      	b.n	800846c <rshift+0x28>
 80084e4:	4623      	mov	r3, r4
 80084e6:	e7e1      	b.n	80084ac <rshift+0x68>

080084e8 <__hexdig_fun>:
 80084e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80084ec:	2b09      	cmp	r3, #9
 80084ee:	d802      	bhi.n	80084f6 <__hexdig_fun+0xe>
 80084f0:	3820      	subs	r0, #32
 80084f2:	b2c0      	uxtb	r0, r0
 80084f4:	4770      	bx	lr
 80084f6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80084fa:	2b05      	cmp	r3, #5
 80084fc:	d801      	bhi.n	8008502 <__hexdig_fun+0x1a>
 80084fe:	3847      	subs	r0, #71	; 0x47
 8008500:	e7f7      	b.n	80084f2 <__hexdig_fun+0xa>
 8008502:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008506:	2b05      	cmp	r3, #5
 8008508:	d801      	bhi.n	800850e <__hexdig_fun+0x26>
 800850a:	3827      	subs	r0, #39	; 0x27
 800850c:	e7f1      	b.n	80084f2 <__hexdig_fun+0xa>
 800850e:	2000      	movs	r0, #0
 8008510:	4770      	bx	lr
	...

08008514 <__gethex>:
 8008514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008518:	ed2d 8b02 	vpush	{d8}
 800851c:	b089      	sub	sp, #36	; 0x24
 800851e:	ee08 0a10 	vmov	s16, r0
 8008522:	9304      	str	r3, [sp, #16]
 8008524:	4bb4      	ldr	r3, [pc, #720]	; (80087f8 <__gethex+0x2e4>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	9301      	str	r3, [sp, #4]
 800852a:	4618      	mov	r0, r3
 800852c:	468b      	mov	fp, r1
 800852e:	4690      	mov	r8, r2
 8008530:	f7f7 fe56 	bl	80001e0 <strlen>
 8008534:	9b01      	ldr	r3, [sp, #4]
 8008536:	f8db 2000 	ldr.w	r2, [fp]
 800853a:	4403      	add	r3, r0
 800853c:	4682      	mov	sl, r0
 800853e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008542:	9305      	str	r3, [sp, #20]
 8008544:	1c93      	adds	r3, r2, #2
 8008546:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800854a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800854e:	32fe      	adds	r2, #254	; 0xfe
 8008550:	18d1      	adds	r1, r2, r3
 8008552:	461f      	mov	r7, r3
 8008554:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008558:	9100      	str	r1, [sp, #0]
 800855a:	2830      	cmp	r0, #48	; 0x30
 800855c:	d0f8      	beq.n	8008550 <__gethex+0x3c>
 800855e:	f7ff ffc3 	bl	80084e8 <__hexdig_fun>
 8008562:	4604      	mov	r4, r0
 8008564:	2800      	cmp	r0, #0
 8008566:	d13a      	bne.n	80085de <__gethex+0xca>
 8008568:	9901      	ldr	r1, [sp, #4]
 800856a:	4652      	mov	r2, sl
 800856c:	4638      	mov	r0, r7
 800856e:	f001 fa33 	bl	80099d8 <strncmp>
 8008572:	4605      	mov	r5, r0
 8008574:	2800      	cmp	r0, #0
 8008576:	d168      	bne.n	800864a <__gethex+0x136>
 8008578:	f817 000a 	ldrb.w	r0, [r7, sl]
 800857c:	eb07 060a 	add.w	r6, r7, sl
 8008580:	f7ff ffb2 	bl	80084e8 <__hexdig_fun>
 8008584:	2800      	cmp	r0, #0
 8008586:	d062      	beq.n	800864e <__gethex+0x13a>
 8008588:	4633      	mov	r3, r6
 800858a:	7818      	ldrb	r0, [r3, #0]
 800858c:	2830      	cmp	r0, #48	; 0x30
 800858e:	461f      	mov	r7, r3
 8008590:	f103 0301 	add.w	r3, r3, #1
 8008594:	d0f9      	beq.n	800858a <__gethex+0x76>
 8008596:	f7ff ffa7 	bl	80084e8 <__hexdig_fun>
 800859a:	2301      	movs	r3, #1
 800859c:	fab0 f480 	clz	r4, r0
 80085a0:	0964      	lsrs	r4, r4, #5
 80085a2:	4635      	mov	r5, r6
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	463a      	mov	r2, r7
 80085a8:	4616      	mov	r6, r2
 80085aa:	3201      	adds	r2, #1
 80085ac:	7830      	ldrb	r0, [r6, #0]
 80085ae:	f7ff ff9b 	bl	80084e8 <__hexdig_fun>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d1f8      	bne.n	80085a8 <__gethex+0x94>
 80085b6:	9901      	ldr	r1, [sp, #4]
 80085b8:	4652      	mov	r2, sl
 80085ba:	4630      	mov	r0, r6
 80085bc:	f001 fa0c 	bl	80099d8 <strncmp>
 80085c0:	b980      	cbnz	r0, 80085e4 <__gethex+0xd0>
 80085c2:	b94d      	cbnz	r5, 80085d8 <__gethex+0xc4>
 80085c4:	eb06 050a 	add.w	r5, r6, sl
 80085c8:	462a      	mov	r2, r5
 80085ca:	4616      	mov	r6, r2
 80085cc:	3201      	adds	r2, #1
 80085ce:	7830      	ldrb	r0, [r6, #0]
 80085d0:	f7ff ff8a 	bl	80084e8 <__hexdig_fun>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	d1f8      	bne.n	80085ca <__gethex+0xb6>
 80085d8:	1bad      	subs	r5, r5, r6
 80085da:	00ad      	lsls	r5, r5, #2
 80085dc:	e004      	b.n	80085e8 <__gethex+0xd4>
 80085de:	2400      	movs	r4, #0
 80085e0:	4625      	mov	r5, r4
 80085e2:	e7e0      	b.n	80085a6 <__gethex+0x92>
 80085e4:	2d00      	cmp	r5, #0
 80085e6:	d1f7      	bne.n	80085d8 <__gethex+0xc4>
 80085e8:	7833      	ldrb	r3, [r6, #0]
 80085ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085ee:	2b50      	cmp	r3, #80	; 0x50
 80085f0:	d13b      	bne.n	800866a <__gethex+0x156>
 80085f2:	7873      	ldrb	r3, [r6, #1]
 80085f4:	2b2b      	cmp	r3, #43	; 0x2b
 80085f6:	d02c      	beq.n	8008652 <__gethex+0x13e>
 80085f8:	2b2d      	cmp	r3, #45	; 0x2d
 80085fa:	d02e      	beq.n	800865a <__gethex+0x146>
 80085fc:	1c71      	adds	r1, r6, #1
 80085fe:	f04f 0900 	mov.w	r9, #0
 8008602:	7808      	ldrb	r0, [r1, #0]
 8008604:	f7ff ff70 	bl	80084e8 <__hexdig_fun>
 8008608:	1e43      	subs	r3, r0, #1
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b18      	cmp	r3, #24
 800860e:	d82c      	bhi.n	800866a <__gethex+0x156>
 8008610:	f1a0 0210 	sub.w	r2, r0, #16
 8008614:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008618:	f7ff ff66 	bl	80084e8 <__hexdig_fun>
 800861c:	1e43      	subs	r3, r0, #1
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b18      	cmp	r3, #24
 8008622:	d91d      	bls.n	8008660 <__gethex+0x14c>
 8008624:	f1b9 0f00 	cmp.w	r9, #0
 8008628:	d000      	beq.n	800862c <__gethex+0x118>
 800862a:	4252      	negs	r2, r2
 800862c:	4415      	add	r5, r2
 800862e:	f8cb 1000 	str.w	r1, [fp]
 8008632:	b1e4      	cbz	r4, 800866e <__gethex+0x15a>
 8008634:	9b00      	ldr	r3, [sp, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	bf14      	ite	ne
 800863a:	2700      	movne	r7, #0
 800863c:	2706      	moveq	r7, #6
 800863e:	4638      	mov	r0, r7
 8008640:	b009      	add	sp, #36	; 0x24
 8008642:	ecbd 8b02 	vpop	{d8}
 8008646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800864a:	463e      	mov	r6, r7
 800864c:	4625      	mov	r5, r4
 800864e:	2401      	movs	r4, #1
 8008650:	e7ca      	b.n	80085e8 <__gethex+0xd4>
 8008652:	f04f 0900 	mov.w	r9, #0
 8008656:	1cb1      	adds	r1, r6, #2
 8008658:	e7d3      	b.n	8008602 <__gethex+0xee>
 800865a:	f04f 0901 	mov.w	r9, #1
 800865e:	e7fa      	b.n	8008656 <__gethex+0x142>
 8008660:	230a      	movs	r3, #10
 8008662:	fb03 0202 	mla	r2, r3, r2, r0
 8008666:	3a10      	subs	r2, #16
 8008668:	e7d4      	b.n	8008614 <__gethex+0x100>
 800866a:	4631      	mov	r1, r6
 800866c:	e7df      	b.n	800862e <__gethex+0x11a>
 800866e:	1bf3      	subs	r3, r6, r7
 8008670:	3b01      	subs	r3, #1
 8008672:	4621      	mov	r1, r4
 8008674:	2b07      	cmp	r3, #7
 8008676:	dc0b      	bgt.n	8008690 <__gethex+0x17c>
 8008678:	ee18 0a10 	vmov	r0, s16
 800867c:	f000 fa7e 	bl	8008b7c <_Balloc>
 8008680:	4604      	mov	r4, r0
 8008682:	b940      	cbnz	r0, 8008696 <__gethex+0x182>
 8008684:	4b5d      	ldr	r3, [pc, #372]	; (80087fc <__gethex+0x2e8>)
 8008686:	4602      	mov	r2, r0
 8008688:	21de      	movs	r1, #222	; 0xde
 800868a:	485d      	ldr	r0, [pc, #372]	; (8008800 <__gethex+0x2ec>)
 800868c:	f001 f9c6 	bl	8009a1c <__assert_func>
 8008690:	3101      	adds	r1, #1
 8008692:	105b      	asrs	r3, r3, #1
 8008694:	e7ee      	b.n	8008674 <__gethex+0x160>
 8008696:	f100 0914 	add.w	r9, r0, #20
 800869a:	f04f 0b00 	mov.w	fp, #0
 800869e:	f1ca 0301 	rsb	r3, sl, #1
 80086a2:	f8cd 9008 	str.w	r9, [sp, #8]
 80086a6:	f8cd b000 	str.w	fp, [sp]
 80086aa:	9306      	str	r3, [sp, #24]
 80086ac:	42b7      	cmp	r7, r6
 80086ae:	d340      	bcc.n	8008732 <__gethex+0x21e>
 80086b0:	9802      	ldr	r0, [sp, #8]
 80086b2:	9b00      	ldr	r3, [sp, #0]
 80086b4:	f840 3b04 	str.w	r3, [r0], #4
 80086b8:	eba0 0009 	sub.w	r0, r0, r9
 80086bc:	1080      	asrs	r0, r0, #2
 80086be:	0146      	lsls	r6, r0, #5
 80086c0:	6120      	str	r0, [r4, #16]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 fb4c 	bl	8008d60 <__hi0bits>
 80086c8:	1a30      	subs	r0, r6, r0
 80086ca:	f8d8 6000 	ldr.w	r6, [r8]
 80086ce:	42b0      	cmp	r0, r6
 80086d0:	dd63      	ble.n	800879a <__gethex+0x286>
 80086d2:	1b87      	subs	r7, r0, r6
 80086d4:	4639      	mov	r1, r7
 80086d6:	4620      	mov	r0, r4
 80086d8:	f000 fef0 	bl	80094bc <__any_on>
 80086dc:	4682      	mov	sl, r0
 80086de:	b1a8      	cbz	r0, 800870c <__gethex+0x1f8>
 80086e0:	1e7b      	subs	r3, r7, #1
 80086e2:	1159      	asrs	r1, r3, #5
 80086e4:	f003 021f 	and.w	r2, r3, #31
 80086e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80086ec:	f04f 0a01 	mov.w	sl, #1
 80086f0:	fa0a f202 	lsl.w	r2, sl, r2
 80086f4:	420a      	tst	r2, r1
 80086f6:	d009      	beq.n	800870c <__gethex+0x1f8>
 80086f8:	4553      	cmp	r3, sl
 80086fa:	dd05      	ble.n	8008708 <__gethex+0x1f4>
 80086fc:	1eb9      	subs	r1, r7, #2
 80086fe:	4620      	mov	r0, r4
 8008700:	f000 fedc 	bl	80094bc <__any_on>
 8008704:	2800      	cmp	r0, #0
 8008706:	d145      	bne.n	8008794 <__gethex+0x280>
 8008708:	f04f 0a02 	mov.w	sl, #2
 800870c:	4639      	mov	r1, r7
 800870e:	4620      	mov	r0, r4
 8008710:	f7ff fe98 	bl	8008444 <rshift>
 8008714:	443d      	add	r5, r7
 8008716:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800871a:	42ab      	cmp	r3, r5
 800871c:	da4c      	bge.n	80087b8 <__gethex+0x2a4>
 800871e:	ee18 0a10 	vmov	r0, s16
 8008722:	4621      	mov	r1, r4
 8008724:	f000 fa6a 	bl	8008bfc <_Bfree>
 8008728:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800872a:	2300      	movs	r3, #0
 800872c:	6013      	str	r3, [r2, #0]
 800872e:	27a3      	movs	r7, #163	; 0xa3
 8008730:	e785      	b.n	800863e <__gethex+0x12a>
 8008732:	1e73      	subs	r3, r6, #1
 8008734:	9a05      	ldr	r2, [sp, #20]
 8008736:	9303      	str	r3, [sp, #12]
 8008738:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800873c:	4293      	cmp	r3, r2
 800873e:	d019      	beq.n	8008774 <__gethex+0x260>
 8008740:	f1bb 0f20 	cmp.w	fp, #32
 8008744:	d107      	bne.n	8008756 <__gethex+0x242>
 8008746:	9b02      	ldr	r3, [sp, #8]
 8008748:	9a00      	ldr	r2, [sp, #0]
 800874a:	f843 2b04 	str.w	r2, [r3], #4
 800874e:	9302      	str	r3, [sp, #8]
 8008750:	2300      	movs	r3, #0
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	469b      	mov	fp, r3
 8008756:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800875a:	f7ff fec5 	bl	80084e8 <__hexdig_fun>
 800875e:	9b00      	ldr	r3, [sp, #0]
 8008760:	f000 000f 	and.w	r0, r0, #15
 8008764:	fa00 f00b 	lsl.w	r0, r0, fp
 8008768:	4303      	orrs	r3, r0
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	f10b 0b04 	add.w	fp, fp, #4
 8008770:	9b03      	ldr	r3, [sp, #12]
 8008772:	e00d      	b.n	8008790 <__gethex+0x27c>
 8008774:	9b03      	ldr	r3, [sp, #12]
 8008776:	9a06      	ldr	r2, [sp, #24]
 8008778:	4413      	add	r3, r2
 800877a:	42bb      	cmp	r3, r7
 800877c:	d3e0      	bcc.n	8008740 <__gethex+0x22c>
 800877e:	4618      	mov	r0, r3
 8008780:	9901      	ldr	r1, [sp, #4]
 8008782:	9307      	str	r3, [sp, #28]
 8008784:	4652      	mov	r2, sl
 8008786:	f001 f927 	bl	80099d8 <strncmp>
 800878a:	9b07      	ldr	r3, [sp, #28]
 800878c:	2800      	cmp	r0, #0
 800878e:	d1d7      	bne.n	8008740 <__gethex+0x22c>
 8008790:	461e      	mov	r6, r3
 8008792:	e78b      	b.n	80086ac <__gethex+0x198>
 8008794:	f04f 0a03 	mov.w	sl, #3
 8008798:	e7b8      	b.n	800870c <__gethex+0x1f8>
 800879a:	da0a      	bge.n	80087b2 <__gethex+0x29e>
 800879c:	1a37      	subs	r7, r6, r0
 800879e:	4621      	mov	r1, r4
 80087a0:	ee18 0a10 	vmov	r0, s16
 80087a4:	463a      	mov	r2, r7
 80087a6:	f000 fc45 	bl	8009034 <__lshift>
 80087aa:	1bed      	subs	r5, r5, r7
 80087ac:	4604      	mov	r4, r0
 80087ae:	f100 0914 	add.w	r9, r0, #20
 80087b2:	f04f 0a00 	mov.w	sl, #0
 80087b6:	e7ae      	b.n	8008716 <__gethex+0x202>
 80087b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80087bc:	42a8      	cmp	r0, r5
 80087be:	dd72      	ble.n	80088a6 <__gethex+0x392>
 80087c0:	1b45      	subs	r5, r0, r5
 80087c2:	42ae      	cmp	r6, r5
 80087c4:	dc36      	bgt.n	8008834 <__gethex+0x320>
 80087c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d02a      	beq.n	8008824 <__gethex+0x310>
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d02c      	beq.n	800882c <__gethex+0x318>
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d11c      	bne.n	8008810 <__gethex+0x2fc>
 80087d6:	42ae      	cmp	r6, r5
 80087d8:	d11a      	bne.n	8008810 <__gethex+0x2fc>
 80087da:	2e01      	cmp	r6, #1
 80087dc:	d112      	bne.n	8008804 <__gethex+0x2f0>
 80087de:	9a04      	ldr	r2, [sp, #16]
 80087e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80087e4:	6013      	str	r3, [r2, #0]
 80087e6:	2301      	movs	r3, #1
 80087e8:	6123      	str	r3, [r4, #16]
 80087ea:	f8c9 3000 	str.w	r3, [r9]
 80087ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087f0:	2762      	movs	r7, #98	; 0x62
 80087f2:	601c      	str	r4, [r3, #0]
 80087f4:	e723      	b.n	800863e <__gethex+0x12a>
 80087f6:	bf00      	nop
 80087f8:	0800a888 	.word	0x0800a888
 80087fc:	0800a810 	.word	0x0800a810
 8008800:	0800a821 	.word	0x0800a821
 8008804:	1e71      	subs	r1, r6, #1
 8008806:	4620      	mov	r0, r4
 8008808:	f000 fe58 	bl	80094bc <__any_on>
 800880c:	2800      	cmp	r0, #0
 800880e:	d1e6      	bne.n	80087de <__gethex+0x2ca>
 8008810:	ee18 0a10 	vmov	r0, s16
 8008814:	4621      	mov	r1, r4
 8008816:	f000 f9f1 	bl	8008bfc <_Bfree>
 800881a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800881c:	2300      	movs	r3, #0
 800881e:	6013      	str	r3, [r2, #0]
 8008820:	2750      	movs	r7, #80	; 0x50
 8008822:	e70c      	b.n	800863e <__gethex+0x12a>
 8008824:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1f2      	bne.n	8008810 <__gethex+0x2fc>
 800882a:	e7d8      	b.n	80087de <__gethex+0x2ca>
 800882c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1d5      	bne.n	80087de <__gethex+0x2ca>
 8008832:	e7ed      	b.n	8008810 <__gethex+0x2fc>
 8008834:	1e6f      	subs	r7, r5, #1
 8008836:	f1ba 0f00 	cmp.w	sl, #0
 800883a:	d131      	bne.n	80088a0 <__gethex+0x38c>
 800883c:	b127      	cbz	r7, 8008848 <__gethex+0x334>
 800883e:	4639      	mov	r1, r7
 8008840:	4620      	mov	r0, r4
 8008842:	f000 fe3b 	bl	80094bc <__any_on>
 8008846:	4682      	mov	sl, r0
 8008848:	117b      	asrs	r3, r7, #5
 800884a:	2101      	movs	r1, #1
 800884c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008850:	f007 071f 	and.w	r7, r7, #31
 8008854:	fa01 f707 	lsl.w	r7, r1, r7
 8008858:	421f      	tst	r7, r3
 800885a:	4629      	mov	r1, r5
 800885c:	4620      	mov	r0, r4
 800885e:	bf18      	it	ne
 8008860:	f04a 0a02 	orrne.w	sl, sl, #2
 8008864:	1b76      	subs	r6, r6, r5
 8008866:	f7ff fded 	bl	8008444 <rshift>
 800886a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800886e:	2702      	movs	r7, #2
 8008870:	f1ba 0f00 	cmp.w	sl, #0
 8008874:	d048      	beq.n	8008908 <__gethex+0x3f4>
 8008876:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800887a:	2b02      	cmp	r3, #2
 800887c:	d015      	beq.n	80088aa <__gethex+0x396>
 800887e:	2b03      	cmp	r3, #3
 8008880:	d017      	beq.n	80088b2 <__gethex+0x39e>
 8008882:	2b01      	cmp	r3, #1
 8008884:	d109      	bne.n	800889a <__gethex+0x386>
 8008886:	f01a 0f02 	tst.w	sl, #2
 800888a:	d006      	beq.n	800889a <__gethex+0x386>
 800888c:	f8d9 0000 	ldr.w	r0, [r9]
 8008890:	ea4a 0a00 	orr.w	sl, sl, r0
 8008894:	f01a 0f01 	tst.w	sl, #1
 8008898:	d10e      	bne.n	80088b8 <__gethex+0x3a4>
 800889a:	f047 0710 	orr.w	r7, r7, #16
 800889e:	e033      	b.n	8008908 <__gethex+0x3f4>
 80088a0:	f04f 0a01 	mov.w	sl, #1
 80088a4:	e7d0      	b.n	8008848 <__gethex+0x334>
 80088a6:	2701      	movs	r7, #1
 80088a8:	e7e2      	b.n	8008870 <__gethex+0x35c>
 80088aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088ac:	f1c3 0301 	rsb	r3, r3, #1
 80088b0:	9315      	str	r3, [sp, #84]	; 0x54
 80088b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d0f0      	beq.n	800889a <__gethex+0x386>
 80088b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80088bc:	f104 0314 	add.w	r3, r4, #20
 80088c0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80088c4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80088c8:	f04f 0c00 	mov.w	ip, #0
 80088cc:	4618      	mov	r0, r3
 80088ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80088d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80088d6:	d01c      	beq.n	8008912 <__gethex+0x3fe>
 80088d8:	3201      	adds	r2, #1
 80088da:	6002      	str	r2, [r0, #0]
 80088dc:	2f02      	cmp	r7, #2
 80088de:	f104 0314 	add.w	r3, r4, #20
 80088e2:	d13f      	bne.n	8008964 <__gethex+0x450>
 80088e4:	f8d8 2000 	ldr.w	r2, [r8]
 80088e8:	3a01      	subs	r2, #1
 80088ea:	42b2      	cmp	r2, r6
 80088ec:	d10a      	bne.n	8008904 <__gethex+0x3f0>
 80088ee:	1171      	asrs	r1, r6, #5
 80088f0:	2201      	movs	r2, #1
 80088f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80088f6:	f006 061f 	and.w	r6, r6, #31
 80088fa:	fa02 f606 	lsl.w	r6, r2, r6
 80088fe:	421e      	tst	r6, r3
 8008900:	bf18      	it	ne
 8008902:	4617      	movne	r7, r2
 8008904:	f047 0720 	orr.w	r7, r7, #32
 8008908:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800890a:	601c      	str	r4, [r3, #0]
 800890c:	9b04      	ldr	r3, [sp, #16]
 800890e:	601d      	str	r5, [r3, #0]
 8008910:	e695      	b.n	800863e <__gethex+0x12a>
 8008912:	4299      	cmp	r1, r3
 8008914:	f843 cc04 	str.w	ip, [r3, #-4]
 8008918:	d8d8      	bhi.n	80088cc <__gethex+0x3b8>
 800891a:	68a3      	ldr	r3, [r4, #8]
 800891c:	459b      	cmp	fp, r3
 800891e:	db19      	blt.n	8008954 <__gethex+0x440>
 8008920:	6861      	ldr	r1, [r4, #4]
 8008922:	ee18 0a10 	vmov	r0, s16
 8008926:	3101      	adds	r1, #1
 8008928:	f000 f928 	bl	8008b7c <_Balloc>
 800892c:	4681      	mov	r9, r0
 800892e:	b918      	cbnz	r0, 8008938 <__gethex+0x424>
 8008930:	4b1a      	ldr	r3, [pc, #104]	; (800899c <__gethex+0x488>)
 8008932:	4602      	mov	r2, r0
 8008934:	2184      	movs	r1, #132	; 0x84
 8008936:	e6a8      	b.n	800868a <__gethex+0x176>
 8008938:	6922      	ldr	r2, [r4, #16]
 800893a:	3202      	adds	r2, #2
 800893c:	f104 010c 	add.w	r1, r4, #12
 8008940:	0092      	lsls	r2, r2, #2
 8008942:	300c      	adds	r0, #12
 8008944:	f000 f90c 	bl	8008b60 <memcpy>
 8008948:	4621      	mov	r1, r4
 800894a:	ee18 0a10 	vmov	r0, s16
 800894e:	f000 f955 	bl	8008bfc <_Bfree>
 8008952:	464c      	mov	r4, r9
 8008954:	6923      	ldr	r3, [r4, #16]
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800895c:	6122      	str	r2, [r4, #16]
 800895e:	2201      	movs	r2, #1
 8008960:	615a      	str	r2, [r3, #20]
 8008962:	e7bb      	b.n	80088dc <__gethex+0x3c8>
 8008964:	6922      	ldr	r2, [r4, #16]
 8008966:	455a      	cmp	r2, fp
 8008968:	dd0b      	ble.n	8008982 <__gethex+0x46e>
 800896a:	2101      	movs	r1, #1
 800896c:	4620      	mov	r0, r4
 800896e:	f7ff fd69 	bl	8008444 <rshift>
 8008972:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008976:	3501      	adds	r5, #1
 8008978:	42ab      	cmp	r3, r5
 800897a:	f6ff aed0 	blt.w	800871e <__gethex+0x20a>
 800897e:	2701      	movs	r7, #1
 8008980:	e7c0      	b.n	8008904 <__gethex+0x3f0>
 8008982:	f016 061f 	ands.w	r6, r6, #31
 8008986:	d0fa      	beq.n	800897e <__gethex+0x46a>
 8008988:	4453      	add	r3, sl
 800898a:	f1c6 0620 	rsb	r6, r6, #32
 800898e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008992:	f000 f9e5 	bl	8008d60 <__hi0bits>
 8008996:	42b0      	cmp	r0, r6
 8008998:	dbe7      	blt.n	800896a <__gethex+0x456>
 800899a:	e7f0      	b.n	800897e <__gethex+0x46a>
 800899c:	0800a810 	.word	0x0800a810

080089a0 <L_shift>:
 80089a0:	f1c2 0208 	rsb	r2, r2, #8
 80089a4:	0092      	lsls	r2, r2, #2
 80089a6:	b570      	push	{r4, r5, r6, lr}
 80089a8:	f1c2 0620 	rsb	r6, r2, #32
 80089ac:	6843      	ldr	r3, [r0, #4]
 80089ae:	6804      	ldr	r4, [r0, #0]
 80089b0:	fa03 f506 	lsl.w	r5, r3, r6
 80089b4:	432c      	orrs	r4, r5
 80089b6:	40d3      	lsrs	r3, r2
 80089b8:	6004      	str	r4, [r0, #0]
 80089ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80089be:	4288      	cmp	r0, r1
 80089c0:	d3f4      	bcc.n	80089ac <L_shift+0xc>
 80089c2:	bd70      	pop	{r4, r5, r6, pc}

080089c4 <__match>:
 80089c4:	b530      	push	{r4, r5, lr}
 80089c6:	6803      	ldr	r3, [r0, #0]
 80089c8:	3301      	adds	r3, #1
 80089ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ce:	b914      	cbnz	r4, 80089d6 <__match+0x12>
 80089d0:	6003      	str	r3, [r0, #0]
 80089d2:	2001      	movs	r0, #1
 80089d4:	bd30      	pop	{r4, r5, pc}
 80089d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80089de:	2d19      	cmp	r5, #25
 80089e0:	bf98      	it	ls
 80089e2:	3220      	addls	r2, #32
 80089e4:	42a2      	cmp	r2, r4
 80089e6:	d0f0      	beq.n	80089ca <__match+0x6>
 80089e8:	2000      	movs	r0, #0
 80089ea:	e7f3      	b.n	80089d4 <__match+0x10>

080089ec <__hexnan>:
 80089ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f0:	680b      	ldr	r3, [r1, #0]
 80089f2:	115e      	asrs	r6, r3, #5
 80089f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80089f8:	f013 031f 	ands.w	r3, r3, #31
 80089fc:	b087      	sub	sp, #28
 80089fe:	bf18      	it	ne
 8008a00:	3604      	addne	r6, #4
 8008a02:	2500      	movs	r5, #0
 8008a04:	1f37      	subs	r7, r6, #4
 8008a06:	4690      	mov	r8, r2
 8008a08:	6802      	ldr	r2, [r0, #0]
 8008a0a:	9301      	str	r3, [sp, #4]
 8008a0c:	4682      	mov	sl, r0
 8008a0e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a12:	46b9      	mov	r9, r7
 8008a14:	463c      	mov	r4, r7
 8008a16:	9502      	str	r5, [sp, #8]
 8008a18:	46ab      	mov	fp, r5
 8008a1a:	7851      	ldrb	r1, [r2, #1]
 8008a1c:	1c53      	adds	r3, r2, #1
 8008a1e:	9303      	str	r3, [sp, #12]
 8008a20:	b341      	cbz	r1, 8008a74 <__hexnan+0x88>
 8008a22:	4608      	mov	r0, r1
 8008a24:	9205      	str	r2, [sp, #20]
 8008a26:	9104      	str	r1, [sp, #16]
 8008a28:	f7ff fd5e 	bl	80084e8 <__hexdig_fun>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d14f      	bne.n	8008ad0 <__hexnan+0xe4>
 8008a30:	9904      	ldr	r1, [sp, #16]
 8008a32:	9a05      	ldr	r2, [sp, #20]
 8008a34:	2920      	cmp	r1, #32
 8008a36:	d818      	bhi.n	8008a6a <__hexnan+0x7e>
 8008a38:	9b02      	ldr	r3, [sp, #8]
 8008a3a:	459b      	cmp	fp, r3
 8008a3c:	dd13      	ble.n	8008a66 <__hexnan+0x7a>
 8008a3e:	454c      	cmp	r4, r9
 8008a40:	d206      	bcs.n	8008a50 <__hexnan+0x64>
 8008a42:	2d07      	cmp	r5, #7
 8008a44:	dc04      	bgt.n	8008a50 <__hexnan+0x64>
 8008a46:	462a      	mov	r2, r5
 8008a48:	4649      	mov	r1, r9
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f7ff ffa8 	bl	80089a0 <L_shift>
 8008a50:	4544      	cmp	r4, r8
 8008a52:	d950      	bls.n	8008af6 <__hexnan+0x10a>
 8008a54:	2300      	movs	r3, #0
 8008a56:	f1a4 0904 	sub.w	r9, r4, #4
 8008a5a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a5e:	f8cd b008 	str.w	fp, [sp, #8]
 8008a62:	464c      	mov	r4, r9
 8008a64:	461d      	mov	r5, r3
 8008a66:	9a03      	ldr	r2, [sp, #12]
 8008a68:	e7d7      	b.n	8008a1a <__hexnan+0x2e>
 8008a6a:	2929      	cmp	r1, #41	; 0x29
 8008a6c:	d156      	bne.n	8008b1c <__hexnan+0x130>
 8008a6e:	3202      	adds	r2, #2
 8008a70:	f8ca 2000 	str.w	r2, [sl]
 8008a74:	f1bb 0f00 	cmp.w	fp, #0
 8008a78:	d050      	beq.n	8008b1c <__hexnan+0x130>
 8008a7a:	454c      	cmp	r4, r9
 8008a7c:	d206      	bcs.n	8008a8c <__hexnan+0xa0>
 8008a7e:	2d07      	cmp	r5, #7
 8008a80:	dc04      	bgt.n	8008a8c <__hexnan+0xa0>
 8008a82:	462a      	mov	r2, r5
 8008a84:	4649      	mov	r1, r9
 8008a86:	4620      	mov	r0, r4
 8008a88:	f7ff ff8a 	bl	80089a0 <L_shift>
 8008a8c:	4544      	cmp	r4, r8
 8008a8e:	d934      	bls.n	8008afa <__hexnan+0x10e>
 8008a90:	f1a8 0204 	sub.w	r2, r8, #4
 8008a94:	4623      	mov	r3, r4
 8008a96:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a9a:	f842 1f04 	str.w	r1, [r2, #4]!
 8008a9e:	429f      	cmp	r7, r3
 8008aa0:	d2f9      	bcs.n	8008a96 <__hexnan+0xaa>
 8008aa2:	1b3b      	subs	r3, r7, r4
 8008aa4:	f023 0303 	bic.w	r3, r3, #3
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	3401      	adds	r4, #1
 8008aac:	3e03      	subs	r6, #3
 8008aae:	42b4      	cmp	r4, r6
 8008ab0:	bf88      	it	hi
 8008ab2:	2304      	movhi	r3, #4
 8008ab4:	4443      	add	r3, r8
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f843 2b04 	str.w	r2, [r3], #4
 8008abc:	429f      	cmp	r7, r3
 8008abe:	d2fb      	bcs.n	8008ab8 <__hexnan+0xcc>
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	b91b      	cbnz	r3, 8008acc <__hexnan+0xe0>
 8008ac4:	4547      	cmp	r7, r8
 8008ac6:	d127      	bne.n	8008b18 <__hexnan+0x12c>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	603b      	str	r3, [r7, #0]
 8008acc:	2005      	movs	r0, #5
 8008ace:	e026      	b.n	8008b1e <__hexnan+0x132>
 8008ad0:	3501      	adds	r5, #1
 8008ad2:	2d08      	cmp	r5, #8
 8008ad4:	f10b 0b01 	add.w	fp, fp, #1
 8008ad8:	dd06      	ble.n	8008ae8 <__hexnan+0xfc>
 8008ada:	4544      	cmp	r4, r8
 8008adc:	d9c3      	bls.n	8008a66 <__hexnan+0x7a>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ae4:	2501      	movs	r5, #1
 8008ae6:	3c04      	subs	r4, #4
 8008ae8:	6822      	ldr	r2, [r4, #0]
 8008aea:	f000 000f 	and.w	r0, r0, #15
 8008aee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008af2:	6022      	str	r2, [r4, #0]
 8008af4:	e7b7      	b.n	8008a66 <__hexnan+0x7a>
 8008af6:	2508      	movs	r5, #8
 8008af8:	e7b5      	b.n	8008a66 <__hexnan+0x7a>
 8008afa:	9b01      	ldr	r3, [sp, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0df      	beq.n	8008ac0 <__hexnan+0xd4>
 8008b00:	f04f 32ff 	mov.w	r2, #4294967295
 8008b04:	f1c3 0320 	rsb	r3, r3, #32
 8008b08:	fa22 f303 	lsr.w	r3, r2, r3
 8008b0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008b10:	401a      	ands	r2, r3
 8008b12:	f846 2c04 	str.w	r2, [r6, #-4]
 8008b16:	e7d3      	b.n	8008ac0 <__hexnan+0xd4>
 8008b18:	3f04      	subs	r7, #4
 8008b1a:	e7d1      	b.n	8008ac0 <__hexnan+0xd4>
 8008b1c:	2004      	movs	r0, #4
 8008b1e:	b007      	add	sp, #28
 8008b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b24 <_localeconv_r>:
 8008b24:	4800      	ldr	r0, [pc, #0]	; (8008b28 <_localeconv_r+0x4>)
 8008b26:	4770      	bx	lr
 8008b28:	20000194 	.word	0x20000194

08008b2c <malloc>:
 8008b2c:	4b02      	ldr	r3, [pc, #8]	; (8008b38 <malloc+0xc>)
 8008b2e:	4601      	mov	r1, r0
 8008b30:	6818      	ldr	r0, [r3, #0]
 8008b32:	f000 bd67 	b.w	8009604 <_malloc_r>
 8008b36:	bf00      	nop
 8008b38:	2000003c 	.word	0x2000003c

08008b3c <__ascii_mbtowc>:
 8008b3c:	b082      	sub	sp, #8
 8008b3e:	b901      	cbnz	r1, 8008b42 <__ascii_mbtowc+0x6>
 8008b40:	a901      	add	r1, sp, #4
 8008b42:	b142      	cbz	r2, 8008b56 <__ascii_mbtowc+0x1a>
 8008b44:	b14b      	cbz	r3, 8008b5a <__ascii_mbtowc+0x1e>
 8008b46:	7813      	ldrb	r3, [r2, #0]
 8008b48:	600b      	str	r3, [r1, #0]
 8008b4a:	7812      	ldrb	r2, [r2, #0]
 8008b4c:	1e10      	subs	r0, r2, #0
 8008b4e:	bf18      	it	ne
 8008b50:	2001      	movne	r0, #1
 8008b52:	b002      	add	sp, #8
 8008b54:	4770      	bx	lr
 8008b56:	4610      	mov	r0, r2
 8008b58:	e7fb      	b.n	8008b52 <__ascii_mbtowc+0x16>
 8008b5a:	f06f 0001 	mvn.w	r0, #1
 8008b5e:	e7f8      	b.n	8008b52 <__ascii_mbtowc+0x16>

08008b60 <memcpy>:
 8008b60:	440a      	add	r2, r1
 8008b62:	4291      	cmp	r1, r2
 8008b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b68:	d100      	bne.n	8008b6c <memcpy+0xc>
 8008b6a:	4770      	bx	lr
 8008b6c:	b510      	push	{r4, lr}
 8008b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b76:	4291      	cmp	r1, r2
 8008b78:	d1f9      	bne.n	8008b6e <memcpy+0xe>
 8008b7a:	bd10      	pop	{r4, pc}

08008b7c <_Balloc>:
 8008b7c:	b570      	push	{r4, r5, r6, lr}
 8008b7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b80:	4604      	mov	r4, r0
 8008b82:	460d      	mov	r5, r1
 8008b84:	b976      	cbnz	r6, 8008ba4 <_Balloc+0x28>
 8008b86:	2010      	movs	r0, #16
 8008b88:	f7ff ffd0 	bl	8008b2c <malloc>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	6260      	str	r0, [r4, #36]	; 0x24
 8008b90:	b920      	cbnz	r0, 8008b9c <_Balloc+0x20>
 8008b92:	4b18      	ldr	r3, [pc, #96]	; (8008bf4 <_Balloc+0x78>)
 8008b94:	4818      	ldr	r0, [pc, #96]	; (8008bf8 <_Balloc+0x7c>)
 8008b96:	2166      	movs	r1, #102	; 0x66
 8008b98:	f000 ff40 	bl	8009a1c <__assert_func>
 8008b9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ba0:	6006      	str	r6, [r0, #0]
 8008ba2:	60c6      	str	r6, [r0, #12]
 8008ba4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ba6:	68f3      	ldr	r3, [r6, #12]
 8008ba8:	b183      	cbz	r3, 8008bcc <_Balloc+0x50>
 8008baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bb2:	b9b8      	cbnz	r0, 8008be4 <_Balloc+0x68>
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	fa01 f605 	lsl.w	r6, r1, r5
 8008bba:	1d72      	adds	r2, r6, #5
 8008bbc:	0092      	lsls	r2, r2, #2
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f000 fc9d 	bl	80094fe <_calloc_r>
 8008bc4:	b160      	cbz	r0, 8008be0 <_Balloc+0x64>
 8008bc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bca:	e00e      	b.n	8008bea <_Balloc+0x6e>
 8008bcc:	2221      	movs	r2, #33	; 0x21
 8008bce:	2104      	movs	r1, #4
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f000 fc94 	bl	80094fe <_calloc_r>
 8008bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bd8:	60f0      	str	r0, [r6, #12]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e4      	bne.n	8008baa <_Balloc+0x2e>
 8008be0:	2000      	movs	r0, #0
 8008be2:	bd70      	pop	{r4, r5, r6, pc}
 8008be4:	6802      	ldr	r2, [r0, #0]
 8008be6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bea:	2300      	movs	r3, #0
 8008bec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bf0:	e7f7      	b.n	8008be2 <_Balloc+0x66>
 8008bf2:	bf00      	nop
 8008bf4:	0800a79e 	.word	0x0800a79e
 8008bf8:	0800a89c 	.word	0x0800a89c

08008bfc <_Bfree>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c00:	4605      	mov	r5, r0
 8008c02:	460c      	mov	r4, r1
 8008c04:	b976      	cbnz	r6, 8008c24 <_Bfree+0x28>
 8008c06:	2010      	movs	r0, #16
 8008c08:	f7ff ff90 	bl	8008b2c <malloc>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	6268      	str	r0, [r5, #36]	; 0x24
 8008c10:	b920      	cbnz	r0, 8008c1c <_Bfree+0x20>
 8008c12:	4b09      	ldr	r3, [pc, #36]	; (8008c38 <_Bfree+0x3c>)
 8008c14:	4809      	ldr	r0, [pc, #36]	; (8008c3c <_Bfree+0x40>)
 8008c16:	218a      	movs	r1, #138	; 0x8a
 8008c18:	f000 ff00 	bl	8009a1c <__assert_func>
 8008c1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c20:	6006      	str	r6, [r0, #0]
 8008c22:	60c6      	str	r6, [r0, #12]
 8008c24:	b13c      	cbz	r4, 8008c36 <_Bfree+0x3a>
 8008c26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c28:	6862      	ldr	r2, [r4, #4]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c30:	6021      	str	r1, [r4, #0]
 8008c32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
 8008c38:	0800a79e 	.word	0x0800a79e
 8008c3c:	0800a89c 	.word	0x0800a89c

08008c40 <__multadd>:
 8008c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c44:	690d      	ldr	r5, [r1, #16]
 8008c46:	4607      	mov	r7, r0
 8008c48:	460c      	mov	r4, r1
 8008c4a:	461e      	mov	r6, r3
 8008c4c:	f101 0c14 	add.w	ip, r1, #20
 8008c50:	2000      	movs	r0, #0
 8008c52:	f8dc 3000 	ldr.w	r3, [ip]
 8008c56:	b299      	uxth	r1, r3
 8008c58:	fb02 6101 	mla	r1, r2, r1, r6
 8008c5c:	0c1e      	lsrs	r6, r3, #16
 8008c5e:	0c0b      	lsrs	r3, r1, #16
 8008c60:	fb02 3306 	mla	r3, r2, r6, r3
 8008c64:	b289      	uxth	r1, r1
 8008c66:	3001      	adds	r0, #1
 8008c68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c6c:	4285      	cmp	r5, r0
 8008c6e:	f84c 1b04 	str.w	r1, [ip], #4
 8008c72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c76:	dcec      	bgt.n	8008c52 <__multadd+0x12>
 8008c78:	b30e      	cbz	r6, 8008cbe <__multadd+0x7e>
 8008c7a:	68a3      	ldr	r3, [r4, #8]
 8008c7c:	42ab      	cmp	r3, r5
 8008c7e:	dc19      	bgt.n	8008cb4 <__multadd+0x74>
 8008c80:	6861      	ldr	r1, [r4, #4]
 8008c82:	4638      	mov	r0, r7
 8008c84:	3101      	adds	r1, #1
 8008c86:	f7ff ff79 	bl	8008b7c <_Balloc>
 8008c8a:	4680      	mov	r8, r0
 8008c8c:	b928      	cbnz	r0, 8008c9a <__multadd+0x5a>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	4b0c      	ldr	r3, [pc, #48]	; (8008cc4 <__multadd+0x84>)
 8008c92:	480d      	ldr	r0, [pc, #52]	; (8008cc8 <__multadd+0x88>)
 8008c94:	21b5      	movs	r1, #181	; 0xb5
 8008c96:	f000 fec1 	bl	8009a1c <__assert_func>
 8008c9a:	6922      	ldr	r2, [r4, #16]
 8008c9c:	3202      	adds	r2, #2
 8008c9e:	f104 010c 	add.w	r1, r4, #12
 8008ca2:	0092      	lsls	r2, r2, #2
 8008ca4:	300c      	adds	r0, #12
 8008ca6:	f7ff ff5b 	bl	8008b60 <memcpy>
 8008caa:	4621      	mov	r1, r4
 8008cac:	4638      	mov	r0, r7
 8008cae:	f7ff ffa5 	bl	8008bfc <_Bfree>
 8008cb2:	4644      	mov	r4, r8
 8008cb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cb8:	3501      	adds	r5, #1
 8008cba:	615e      	str	r6, [r3, #20]
 8008cbc:	6125      	str	r5, [r4, #16]
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc4:	0800a810 	.word	0x0800a810
 8008cc8:	0800a89c 	.word	0x0800a89c

08008ccc <__s2b>:
 8008ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	4615      	mov	r5, r2
 8008cd4:	461f      	mov	r7, r3
 8008cd6:	2209      	movs	r2, #9
 8008cd8:	3308      	adds	r3, #8
 8008cda:	4606      	mov	r6, r0
 8008cdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	db09      	blt.n	8008cfc <__s2b+0x30>
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f7ff ff47 	bl	8008b7c <_Balloc>
 8008cee:	b940      	cbnz	r0, 8008d02 <__s2b+0x36>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	4b19      	ldr	r3, [pc, #100]	; (8008d58 <__s2b+0x8c>)
 8008cf4:	4819      	ldr	r0, [pc, #100]	; (8008d5c <__s2b+0x90>)
 8008cf6:	21ce      	movs	r1, #206	; 0xce
 8008cf8:	f000 fe90 	bl	8009a1c <__assert_func>
 8008cfc:	0052      	lsls	r2, r2, #1
 8008cfe:	3101      	adds	r1, #1
 8008d00:	e7f0      	b.n	8008ce4 <__s2b+0x18>
 8008d02:	9b08      	ldr	r3, [sp, #32]
 8008d04:	6143      	str	r3, [r0, #20]
 8008d06:	2d09      	cmp	r5, #9
 8008d08:	f04f 0301 	mov.w	r3, #1
 8008d0c:	6103      	str	r3, [r0, #16]
 8008d0e:	dd16      	ble.n	8008d3e <__s2b+0x72>
 8008d10:	f104 0909 	add.w	r9, r4, #9
 8008d14:	46c8      	mov	r8, r9
 8008d16:	442c      	add	r4, r5
 8008d18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d1c:	4601      	mov	r1, r0
 8008d1e:	3b30      	subs	r3, #48	; 0x30
 8008d20:	220a      	movs	r2, #10
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7ff ff8c 	bl	8008c40 <__multadd>
 8008d28:	45a0      	cmp	r8, r4
 8008d2a:	d1f5      	bne.n	8008d18 <__s2b+0x4c>
 8008d2c:	f1a5 0408 	sub.w	r4, r5, #8
 8008d30:	444c      	add	r4, r9
 8008d32:	1b2d      	subs	r5, r5, r4
 8008d34:	1963      	adds	r3, r4, r5
 8008d36:	42bb      	cmp	r3, r7
 8008d38:	db04      	blt.n	8008d44 <__s2b+0x78>
 8008d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d3e:	340a      	adds	r4, #10
 8008d40:	2509      	movs	r5, #9
 8008d42:	e7f6      	b.n	8008d32 <__s2b+0x66>
 8008d44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d48:	4601      	mov	r1, r0
 8008d4a:	3b30      	subs	r3, #48	; 0x30
 8008d4c:	220a      	movs	r2, #10
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f7ff ff76 	bl	8008c40 <__multadd>
 8008d54:	e7ee      	b.n	8008d34 <__s2b+0x68>
 8008d56:	bf00      	nop
 8008d58:	0800a810 	.word	0x0800a810
 8008d5c:	0800a89c 	.word	0x0800a89c

08008d60 <__hi0bits>:
 8008d60:	0c03      	lsrs	r3, r0, #16
 8008d62:	041b      	lsls	r3, r3, #16
 8008d64:	b9d3      	cbnz	r3, 8008d9c <__hi0bits+0x3c>
 8008d66:	0400      	lsls	r0, r0, #16
 8008d68:	2310      	movs	r3, #16
 8008d6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d6e:	bf04      	itt	eq
 8008d70:	0200      	lsleq	r0, r0, #8
 8008d72:	3308      	addeq	r3, #8
 8008d74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d78:	bf04      	itt	eq
 8008d7a:	0100      	lsleq	r0, r0, #4
 8008d7c:	3304      	addeq	r3, #4
 8008d7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d82:	bf04      	itt	eq
 8008d84:	0080      	lsleq	r0, r0, #2
 8008d86:	3302      	addeq	r3, #2
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	db05      	blt.n	8008d98 <__hi0bits+0x38>
 8008d8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d90:	f103 0301 	add.w	r3, r3, #1
 8008d94:	bf08      	it	eq
 8008d96:	2320      	moveq	r3, #32
 8008d98:	4618      	mov	r0, r3
 8008d9a:	4770      	bx	lr
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	e7e4      	b.n	8008d6a <__hi0bits+0xa>

08008da0 <__lo0bits>:
 8008da0:	6803      	ldr	r3, [r0, #0]
 8008da2:	f013 0207 	ands.w	r2, r3, #7
 8008da6:	4601      	mov	r1, r0
 8008da8:	d00b      	beq.n	8008dc2 <__lo0bits+0x22>
 8008daa:	07da      	lsls	r2, r3, #31
 8008dac:	d423      	bmi.n	8008df6 <__lo0bits+0x56>
 8008dae:	0798      	lsls	r0, r3, #30
 8008db0:	bf49      	itett	mi
 8008db2:	085b      	lsrmi	r3, r3, #1
 8008db4:	089b      	lsrpl	r3, r3, #2
 8008db6:	2001      	movmi	r0, #1
 8008db8:	600b      	strmi	r3, [r1, #0]
 8008dba:	bf5c      	itt	pl
 8008dbc:	600b      	strpl	r3, [r1, #0]
 8008dbe:	2002      	movpl	r0, #2
 8008dc0:	4770      	bx	lr
 8008dc2:	b298      	uxth	r0, r3
 8008dc4:	b9a8      	cbnz	r0, 8008df2 <__lo0bits+0x52>
 8008dc6:	0c1b      	lsrs	r3, r3, #16
 8008dc8:	2010      	movs	r0, #16
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	b90a      	cbnz	r2, 8008dd2 <__lo0bits+0x32>
 8008dce:	3008      	adds	r0, #8
 8008dd0:	0a1b      	lsrs	r3, r3, #8
 8008dd2:	071a      	lsls	r2, r3, #28
 8008dd4:	bf04      	itt	eq
 8008dd6:	091b      	lsreq	r3, r3, #4
 8008dd8:	3004      	addeq	r0, #4
 8008dda:	079a      	lsls	r2, r3, #30
 8008ddc:	bf04      	itt	eq
 8008dde:	089b      	lsreq	r3, r3, #2
 8008de0:	3002      	addeq	r0, #2
 8008de2:	07da      	lsls	r2, r3, #31
 8008de4:	d403      	bmi.n	8008dee <__lo0bits+0x4e>
 8008de6:	085b      	lsrs	r3, r3, #1
 8008de8:	f100 0001 	add.w	r0, r0, #1
 8008dec:	d005      	beq.n	8008dfa <__lo0bits+0x5a>
 8008dee:	600b      	str	r3, [r1, #0]
 8008df0:	4770      	bx	lr
 8008df2:	4610      	mov	r0, r2
 8008df4:	e7e9      	b.n	8008dca <__lo0bits+0x2a>
 8008df6:	2000      	movs	r0, #0
 8008df8:	4770      	bx	lr
 8008dfa:	2020      	movs	r0, #32
 8008dfc:	4770      	bx	lr
	...

08008e00 <__i2b>:
 8008e00:	b510      	push	{r4, lr}
 8008e02:	460c      	mov	r4, r1
 8008e04:	2101      	movs	r1, #1
 8008e06:	f7ff feb9 	bl	8008b7c <_Balloc>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	b928      	cbnz	r0, 8008e1a <__i2b+0x1a>
 8008e0e:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <__i2b+0x24>)
 8008e10:	4805      	ldr	r0, [pc, #20]	; (8008e28 <__i2b+0x28>)
 8008e12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e16:	f000 fe01 	bl	8009a1c <__assert_func>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	6144      	str	r4, [r0, #20]
 8008e1e:	6103      	str	r3, [r0, #16]
 8008e20:	bd10      	pop	{r4, pc}
 8008e22:	bf00      	nop
 8008e24:	0800a810 	.word	0x0800a810
 8008e28:	0800a89c 	.word	0x0800a89c

08008e2c <__multiply>:
 8008e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e30:	4691      	mov	r9, r2
 8008e32:	690a      	ldr	r2, [r1, #16]
 8008e34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	bfb8      	it	lt
 8008e3c:	460b      	movlt	r3, r1
 8008e3e:	460c      	mov	r4, r1
 8008e40:	bfbc      	itt	lt
 8008e42:	464c      	movlt	r4, r9
 8008e44:	4699      	movlt	r9, r3
 8008e46:	6927      	ldr	r7, [r4, #16]
 8008e48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e4c:	68a3      	ldr	r3, [r4, #8]
 8008e4e:	6861      	ldr	r1, [r4, #4]
 8008e50:	eb07 060a 	add.w	r6, r7, sl
 8008e54:	42b3      	cmp	r3, r6
 8008e56:	b085      	sub	sp, #20
 8008e58:	bfb8      	it	lt
 8008e5a:	3101      	addlt	r1, #1
 8008e5c:	f7ff fe8e 	bl	8008b7c <_Balloc>
 8008e60:	b930      	cbnz	r0, 8008e70 <__multiply+0x44>
 8008e62:	4602      	mov	r2, r0
 8008e64:	4b44      	ldr	r3, [pc, #272]	; (8008f78 <__multiply+0x14c>)
 8008e66:	4845      	ldr	r0, [pc, #276]	; (8008f7c <__multiply+0x150>)
 8008e68:	f240 115d 	movw	r1, #349	; 0x15d
 8008e6c:	f000 fdd6 	bl	8009a1c <__assert_func>
 8008e70:	f100 0514 	add.w	r5, r0, #20
 8008e74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e78:	462b      	mov	r3, r5
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	4543      	cmp	r3, r8
 8008e7e:	d321      	bcc.n	8008ec4 <__multiply+0x98>
 8008e80:	f104 0314 	add.w	r3, r4, #20
 8008e84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008e88:	f109 0314 	add.w	r3, r9, #20
 8008e8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008e90:	9202      	str	r2, [sp, #8]
 8008e92:	1b3a      	subs	r2, r7, r4
 8008e94:	3a15      	subs	r2, #21
 8008e96:	f022 0203 	bic.w	r2, r2, #3
 8008e9a:	3204      	adds	r2, #4
 8008e9c:	f104 0115 	add.w	r1, r4, #21
 8008ea0:	428f      	cmp	r7, r1
 8008ea2:	bf38      	it	cc
 8008ea4:	2204      	movcc	r2, #4
 8008ea6:	9201      	str	r2, [sp, #4]
 8008ea8:	9a02      	ldr	r2, [sp, #8]
 8008eaa:	9303      	str	r3, [sp, #12]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d80c      	bhi.n	8008eca <__multiply+0x9e>
 8008eb0:	2e00      	cmp	r6, #0
 8008eb2:	dd03      	ble.n	8008ebc <__multiply+0x90>
 8008eb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d05a      	beq.n	8008f72 <__multiply+0x146>
 8008ebc:	6106      	str	r6, [r0, #16]
 8008ebe:	b005      	add	sp, #20
 8008ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec4:	f843 2b04 	str.w	r2, [r3], #4
 8008ec8:	e7d8      	b.n	8008e7c <__multiply+0x50>
 8008eca:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ece:	f1ba 0f00 	cmp.w	sl, #0
 8008ed2:	d024      	beq.n	8008f1e <__multiply+0xf2>
 8008ed4:	f104 0e14 	add.w	lr, r4, #20
 8008ed8:	46a9      	mov	r9, r5
 8008eda:	f04f 0c00 	mov.w	ip, #0
 8008ede:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008ee2:	f8d9 1000 	ldr.w	r1, [r9]
 8008ee6:	fa1f fb82 	uxth.w	fp, r2
 8008eea:	b289      	uxth	r1, r1
 8008eec:	fb0a 110b 	mla	r1, sl, fp, r1
 8008ef0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008ef4:	f8d9 2000 	ldr.w	r2, [r9]
 8008ef8:	4461      	add	r1, ip
 8008efa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008efe:	fb0a c20b 	mla	r2, sl, fp, ip
 8008f02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f06:	b289      	uxth	r1, r1
 8008f08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f0c:	4577      	cmp	r7, lr
 8008f0e:	f849 1b04 	str.w	r1, [r9], #4
 8008f12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f16:	d8e2      	bhi.n	8008ede <__multiply+0xb2>
 8008f18:	9a01      	ldr	r2, [sp, #4]
 8008f1a:	f845 c002 	str.w	ip, [r5, r2]
 8008f1e:	9a03      	ldr	r2, [sp, #12]
 8008f20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f24:	3304      	adds	r3, #4
 8008f26:	f1b9 0f00 	cmp.w	r9, #0
 8008f2a:	d020      	beq.n	8008f6e <__multiply+0x142>
 8008f2c:	6829      	ldr	r1, [r5, #0]
 8008f2e:	f104 0c14 	add.w	ip, r4, #20
 8008f32:	46ae      	mov	lr, r5
 8008f34:	f04f 0a00 	mov.w	sl, #0
 8008f38:	f8bc b000 	ldrh.w	fp, [ip]
 8008f3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f40:	fb09 220b 	mla	r2, r9, fp, r2
 8008f44:	4492      	add	sl, r2
 8008f46:	b289      	uxth	r1, r1
 8008f48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008f4c:	f84e 1b04 	str.w	r1, [lr], #4
 8008f50:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f54:	f8be 1000 	ldrh.w	r1, [lr]
 8008f58:	0c12      	lsrs	r2, r2, #16
 8008f5a:	fb09 1102 	mla	r1, r9, r2, r1
 8008f5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008f62:	4567      	cmp	r7, ip
 8008f64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f68:	d8e6      	bhi.n	8008f38 <__multiply+0x10c>
 8008f6a:	9a01      	ldr	r2, [sp, #4]
 8008f6c:	50a9      	str	r1, [r5, r2]
 8008f6e:	3504      	adds	r5, #4
 8008f70:	e79a      	b.n	8008ea8 <__multiply+0x7c>
 8008f72:	3e01      	subs	r6, #1
 8008f74:	e79c      	b.n	8008eb0 <__multiply+0x84>
 8008f76:	bf00      	nop
 8008f78:	0800a810 	.word	0x0800a810
 8008f7c:	0800a89c 	.word	0x0800a89c

08008f80 <__pow5mult>:
 8008f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f84:	4615      	mov	r5, r2
 8008f86:	f012 0203 	ands.w	r2, r2, #3
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	460f      	mov	r7, r1
 8008f8e:	d007      	beq.n	8008fa0 <__pow5mult+0x20>
 8008f90:	4c25      	ldr	r4, [pc, #148]	; (8009028 <__pow5mult+0xa8>)
 8008f92:	3a01      	subs	r2, #1
 8008f94:	2300      	movs	r3, #0
 8008f96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f9a:	f7ff fe51 	bl	8008c40 <__multadd>
 8008f9e:	4607      	mov	r7, r0
 8008fa0:	10ad      	asrs	r5, r5, #2
 8008fa2:	d03d      	beq.n	8009020 <__pow5mult+0xa0>
 8008fa4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008fa6:	b97c      	cbnz	r4, 8008fc8 <__pow5mult+0x48>
 8008fa8:	2010      	movs	r0, #16
 8008faa:	f7ff fdbf 	bl	8008b2c <malloc>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	6270      	str	r0, [r6, #36]	; 0x24
 8008fb2:	b928      	cbnz	r0, 8008fc0 <__pow5mult+0x40>
 8008fb4:	4b1d      	ldr	r3, [pc, #116]	; (800902c <__pow5mult+0xac>)
 8008fb6:	481e      	ldr	r0, [pc, #120]	; (8009030 <__pow5mult+0xb0>)
 8008fb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008fbc:	f000 fd2e 	bl	8009a1c <__assert_func>
 8008fc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fc4:	6004      	str	r4, [r0, #0]
 8008fc6:	60c4      	str	r4, [r0, #12]
 8008fc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008fcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fd0:	b94c      	cbnz	r4, 8008fe6 <__pow5mult+0x66>
 8008fd2:	f240 2171 	movw	r1, #625	; 0x271
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f7ff ff12 	bl	8008e00 <__i2b>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	6003      	str	r3, [r0, #0]
 8008fe6:	f04f 0900 	mov.w	r9, #0
 8008fea:	07eb      	lsls	r3, r5, #31
 8008fec:	d50a      	bpl.n	8009004 <__pow5mult+0x84>
 8008fee:	4639      	mov	r1, r7
 8008ff0:	4622      	mov	r2, r4
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7ff ff1a 	bl	8008e2c <__multiply>
 8008ff8:	4639      	mov	r1, r7
 8008ffa:	4680      	mov	r8, r0
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f7ff fdfd 	bl	8008bfc <_Bfree>
 8009002:	4647      	mov	r7, r8
 8009004:	106d      	asrs	r5, r5, #1
 8009006:	d00b      	beq.n	8009020 <__pow5mult+0xa0>
 8009008:	6820      	ldr	r0, [r4, #0]
 800900a:	b938      	cbnz	r0, 800901c <__pow5mult+0x9c>
 800900c:	4622      	mov	r2, r4
 800900e:	4621      	mov	r1, r4
 8009010:	4630      	mov	r0, r6
 8009012:	f7ff ff0b 	bl	8008e2c <__multiply>
 8009016:	6020      	str	r0, [r4, #0]
 8009018:	f8c0 9000 	str.w	r9, [r0]
 800901c:	4604      	mov	r4, r0
 800901e:	e7e4      	b.n	8008fea <__pow5mult+0x6a>
 8009020:	4638      	mov	r0, r7
 8009022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009026:	bf00      	nop
 8009028:	0800a9e8 	.word	0x0800a9e8
 800902c:	0800a79e 	.word	0x0800a79e
 8009030:	0800a89c 	.word	0x0800a89c

08009034 <__lshift>:
 8009034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009038:	460c      	mov	r4, r1
 800903a:	6849      	ldr	r1, [r1, #4]
 800903c:	6923      	ldr	r3, [r4, #16]
 800903e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009042:	68a3      	ldr	r3, [r4, #8]
 8009044:	4607      	mov	r7, r0
 8009046:	4691      	mov	r9, r2
 8009048:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800904c:	f108 0601 	add.w	r6, r8, #1
 8009050:	42b3      	cmp	r3, r6
 8009052:	db0b      	blt.n	800906c <__lshift+0x38>
 8009054:	4638      	mov	r0, r7
 8009056:	f7ff fd91 	bl	8008b7c <_Balloc>
 800905a:	4605      	mov	r5, r0
 800905c:	b948      	cbnz	r0, 8009072 <__lshift+0x3e>
 800905e:	4602      	mov	r2, r0
 8009060:	4b2a      	ldr	r3, [pc, #168]	; (800910c <__lshift+0xd8>)
 8009062:	482b      	ldr	r0, [pc, #172]	; (8009110 <__lshift+0xdc>)
 8009064:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009068:	f000 fcd8 	bl	8009a1c <__assert_func>
 800906c:	3101      	adds	r1, #1
 800906e:	005b      	lsls	r3, r3, #1
 8009070:	e7ee      	b.n	8009050 <__lshift+0x1c>
 8009072:	2300      	movs	r3, #0
 8009074:	f100 0114 	add.w	r1, r0, #20
 8009078:	f100 0210 	add.w	r2, r0, #16
 800907c:	4618      	mov	r0, r3
 800907e:	4553      	cmp	r3, sl
 8009080:	db37      	blt.n	80090f2 <__lshift+0xbe>
 8009082:	6920      	ldr	r0, [r4, #16]
 8009084:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009088:	f104 0314 	add.w	r3, r4, #20
 800908c:	f019 091f 	ands.w	r9, r9, #31
 8009090:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009094:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009098:	d02f      	beq.n	80090fa <__lshift+0xc6>
 800909a:	f1c9 0e20 	rsb	lr, r9, #32
 800909e:	468a      	mov	sl, r1
 80090a0:	f04f 0c00 	mov.w	ip, #0
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	fa02 f209 	lsl.w	r2, r2, r9
 80090aa:	ea42 020c 	orr.w	r2, r2, ip
 80090ae:	f84a 2b04 	str.w	r2, [sl], #4
 80090b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b6:	4298      	cmp	r0, r3
 80090b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80090bc:	d8f2      	bhi.n	80090a4 <__lshift+0x70>
 80090be:	1b03      	subs	r3, r0, r4
 80090c0:	3b15      	subs	r3, #21
 80090c2:	f023 0303 	bic.w	r3, r3, #3
 80090c6:	3304      	adds	r3, #4
 80090c8:	f104 0215 	add.w	r2, r4, #21
 80090cc:	4290      	cmp	r0, r2
 80090ce:	bf38      	it	cc
 80090d0:	2304      	movcc	r3, #4
 80090d2:	f841 c003 	str.w	ip, [r1, r3]
 80090d6:	f1bc 0f00 	cmp.w	ip, #0
 80090da:	d001      	beq.n	80090e0 <__lshift+0xac>
 80090dc:	f108 0602 	add.w	r6, r8, #2
 80090e0:	3e01      	subs	r6, #1
 80090e2:	4638      	mov	r0, r7
 80090e4:	612e      	str	r6, [r5, #16]
 80090e6:	4621      	mov	r1, r4
 80090e8:	f7ff fd88 	bl	8008bfc <_Bfree>
 80090ec:	4628      	mov	r0, r5
 80090ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80090f6:	3301      	adds	r3, #1
 80090f8:	e7c1      	b.n	800907e <__lshift+0x4a>
 80090fa:	3904      	subs	r1, #4
 80090fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009100:	f841 2f04 	str.w	r2, [r1, #4]!
 8009104:	4298      	cmp	r0, r3
 8009106:	d8f9      	bhi.n	80090fc <__lshift+0xc8>
 8009108:	e7ea      	b.n	80090e0 <__lshift+0xac>
 800910a:	bf00      	nop
 800910c:	0800a810 	.word	0x0800a810
 8009110:	0800a89c 	.word	0x0800a89c

08009114 <__mcmp>:
 8009114:	b530      	push	{r4, r5, lr}
 8009116:	6902      	ldr	r2, [r0, #16]
 8009118:	690c      	ldr	r4, [r1, #16]
 800911a:	1b12      	subs	r2, r2, r4
 800911c:	d10e      	bne.n	800913c <__mcmp+0x28>
 800911e:	f100 0314 	add.w	r3, r0, #20
 8009122:	3114      	adds	r1, #20
 8009124:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009128:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800912c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009130:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009134:	42a5      	cmp	r5, r4
 8009136:	d003      	beq.n	8009140 <__mcmp+0x2c>
 8009138:	d305      	bcc.n	8009146 <__mcmp+0x32>
 800913a:	2201      	movs	r2, #1
 800913c:	4610      	mov	r0, r2
 800913e:	bd30      	pop	{r4, r5, pc}
 8009140:	4283      	cmp	r3, r0
 8009142:	d3f3      	bcc.n	800912c <__mcmp+0x18>
 8009144:	e7fa      	b.n	800913c <__mcmp+0x28>
 8009146:	f04f 32ff 	mov.w	r2, #4294967295
 800914a:	e7f7      	b.n	800913c <__mcmp+0x28>

0800914c <__mdiff>:
 800914c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009150:	460c      	mov	r4, r1
 8009152:	4606      	mov	r6, r0
 8009154:	4611      	mov	r1, r2
 8009156:	4620      	mov	r0, r4
 8009158:	4690      	mov	r8, r2
 800915a:	f7ff ffdb 	bl	8009114 <__mcmp>
 800915e:	1e05      	subs	r5, r0, #0
 8009160:	d110      	bne.n	8009184 <__mdiff+0x38>
 8009162:	4629      	mov	r1, r5
 8009164:	4630      	mov	r0, r6
 8009166:	f7ff fd09 	bl	8008b7c <_Balloc>
 800916a:	b930      	cbnz	r0, 800917a <__mdiff+0x2e>
 800916c:	4b3a      	ldr	r3, [pc, #232]	; (8009258 <__mdiff+0x10c>)
 800916e:	4602      	mov	r2, r0
 8009170:	f240 2132 	movw	r1, #562	; 0x232
 8009174:	4839      	ldr	r0, [pc, #228]	; (800925c <__mdiff+0x110>)
 8009176:	f000 fc51 	bl	8009a1c <__assert_func>
 800917a:	2301      	movs	r3, #1
 800917c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009184:	bfa4      	itt	ge
 8009186:	4643      	movge	r3, r8
 8009188:	46a0      	movge	r8, r4
 800918a:	4630      	mov	r0, r6
 800918c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009190:	bfa6      	itte	ge
 8009192:	461c      	movge	r4, r3
 8009194:	2500      	movge	r5, #0
 8009196:	2501      	movlt	r5, #1
 8009198:	f7ff fcf0 	bl	8008b7c <_Balloc>
 800919c:	b920      	cbnz	r0, 80091a8 <__mdiff+0x5c>
 800919e:	4b2e      	ldr	r3, [pc, #184]	; (8009258 <__mdiff+0x10c>)
 80091a0:	4602      	mov	r2, r0
 80091a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80091a6:	e7e5      	b.n	8009174 <__mdiff+0x28>
 80091a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80091ac:	6926      	ldr	r6, [r4, #16]
 80091ae:	60c5      	str	r5, [r0, #12]
 80091b0:	f104 0914 	add.w	r9, r4, #20
 80091b4:	f108 0514 	add.w	r5, r8, #20
 80091b8:	f100 0e14 	add.w	lr, r0, #20
 80091bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80091c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80091c4:	f108 0210 	add.w	r2, r8, #16
 80091c8:	46f2      	mov	sl, lr
 80091ca:	2100      	movs	r1, #0
 80091cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80091d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80091d4:	fa1f f883 	uxth.w	r8, r3
 80091d8:	fa11 f18b 	uxtah	r1, r1, fp
 80091dc:	0c1b      	lsrs	r3, r3, #16
 80091de:	eba1 0808 	sub.w	r8, r1, r8
 80091e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80091e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80091ea:	fa1f f888 	uxth.w	r8, r8
 80091ee:	1419      	asrs	r1, r3, #16
 80091f0:	454e      	cmp	r6, r9
 80091f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80091f6:	f84a 3b04 	str.w	r3, [sl], #4
 80091fa:	d8e7      	bhi.n	80091cc <__mdiff+0x80>
 80091fc:	1b33      	subs	r3, r6, r4
 80091fe:	3b15      	subs	r3, #21
 8009200:	f023 0303 	bic.w	r3, r3, #3
 8009204:	3304      	adds	r3, #4
 8009206:	3415      	adds	r4, #21
 8009208:	42a6      	cmp	r6, r4
 800920a:	bf38      	it	cc
 800920c:	2304      	movcc	r3, #4
 800920e:	441d      	add	r5, r3
 8009210:	4473      	add	r3, lr
 8009212:	469e      	mov	lr, r3
 8009214:	462e      	mov	r6, r5
 8009216:	4566      	cmp	r6, ip
 8009218:	d30e      	bcc.n	8009238 <__mdiff+0xec>
 800921a:	f10c 0203 	add.w	r2, ip, #3
 800921e:	1b52      	subs	r2, r2, r5
 8009220:	f022 0203 	bic.w	r2, r2, #3
 8009224:	3d03      	subs	r5, #3
 8009226:	45ac      	cmp	ip, r5
 8009228:	bf38      	it	cc
 800922a:	2200      	movcc	r2, #0
 800922c:	441a      	add	r2, r3
 800922e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009232:	b17b      	cbz	r3, 8009254 <__mdiff+0x108>
 8009234:	6107      	str	r7, [r0, #16]
 8009236:	e7a3      	b.n	8009180 <__mdiff+0x34>
 8009238:	f856 8b04 	ldr.w	r8, [r6], #4
 800923c:	fa11 f288 	uxtah	r2, r1, r8
 8009240:	1414      	asrs	r4, r2, #16
 8009242:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009246:	b292      	uxth	r2, r2
 8009248:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800924c:	f84e 2b04 	str.w	r2, [lr], #4
 8009250:	1421      	asrs	r1, r4, #16
 8009252:	e7e0      	b.n	8009216 <__mdiff+0xca>
 8009254:	3f01      	subs	r7, #1
 8009256:	e7ea      	b.n	800922e <__mdiff+0xe2>
 8009258:	0800a810 	.word	0x0800a810
 800925c:	0800a89c 	.word	0x0800a89c

08009260 <__ulp>:
 8009260:	b082      	sub	sp, #8
 8009262:	ed8d 0b00 	vstr	d0, [sp]
 8009266:	9b01      	ldr	r3, [sp, #4]
 8009268:	4912      	ldr	r1, [pc, #72]	; (80092b4 <__ulp+0x54>)
 800926a:	4019      	ands	r1, r3
 800926c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009270:	2900      	cmp	r1, #0
 8009272:	dd05      	ble.n	8009280 <__ulp+0x20>
 8009274:	2200      	movs	r2, #0
 8009276:	460b      	mov	r3, r1
 8009278:	ec43 2b10 	vmov	d0, r2, r3
 800927c:	b002      	add	sp, #8
 800927e:	4770      	bx	lr
 8009280:	4249      	negs	r1, r1
 8009282:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009286:	ea4f 5021 	mov.w	r0, r1, asr #20
 800928a:	f04f 0200 	mov.w	r2, #0
 800928e:	f04f 0300 	mov.w	r3, #0
 8009292:	da04      	bge.n	800929e <__ulp+0x3e>
 8009294:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009298:	fa41 f300 	asr.w	r3, r1, r0
 800929c:	e7ec      	b.n	8009278 <__ulp+0x18>
 800929e:	f1a0 0114 	sub.w	r1, r0, #20
 80092a2:	291e      	cmp	r1, #30
 80092a4:	bfda      	itte	le
 80092a6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80092aa:	fa20 f101 	lsrle.w	r1, r0, r1
 80092ae:	2101      	movgt	r1, #1
 80092b0:	460a      	mov	r2, r1
 80092b2:	e7e1      	b.n	8009278 <__ulp+0x18>
 80092b4:	7ff00000 	.word	0x7ff00000

080092b8 <__b2d>:
 80092b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ba:	6905      	ldr	r5, [r0, #16]
 80092bc:	f100 0714 	add.w	r7, r0, #20
 80092c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80092c4:	1f2e      	subs	r6, r5, #4
 80092c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80092ca:	4620      	mov	r0, r4
 80092cc:	f7ff fd48 	bl	8008d60 <__hi0bits>
 80092d0:	f1c0 0320 	rsb	r3, r0, #32
 80092d4:	280a      	cmp	r0, #10
 80092d6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009354 <__b2d+0x9c>
 80092da:	600b      	str	r3, [r1, #0]
 80092dc:	dc14      	bgt.n	8009308 <__b2d+0x50>
 80092de:	f1c0 0e0b 	rsb	lr, r0, #11
 80092e2:	fa24 f10e 	lsr.w	r1, r4, lr
 80092e6:	42b7      	cmp	r7, r6
 80092e8:	ea41 030c 	orr.w	r3, r1, ip
 80092ec:	bf34      	ite	cc
 80092ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80092f2:	2100      	movcs	r1, #0
 80092f4:	3015      	adds	r0, #21
 80092f6:	fa04 f000 	lsl.w	r0, r4, r0
 80092fa:	fa21 f10e 	lsr.w	r1, r1, lr
 80092fe:	ea40 0201 	orr.w	r2, r0, r1
 8009302:	ec43 2b10 	vmov	d0, r2, r3
 8009306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009308:	42b7      	cmp	r7, r6
 800930a:	bf3a      	itte	cc
 800930c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009310:	f1a5 0608 	subcc.w	r6, r5, #8
 8009314:	2100      	movcs	r1, #0
 8009316:	380b      	subs	r0, #11
 8009318:	d017      	beq.n	800934a <__b2d+0x92>
 800931a:	f1c0 0c20 	rsb	ip, r0, #32
 800931e:	fa04 f500 	lsl.w	r5, r4, r0
 8009322:	42be      	cmp	r6, r7
 8009324:	fa21 f40c 	lsr.w	r4, r1, ip
 8009328:	ea45 0504 	orr.w	r5, r5, r4
 800932c:	bf8c      	ite	hi
 800932e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009332:	2400      	movls	r4, #0
 8009334:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009338:	fa01 f000 	lsl.w	r0, r1, r0
 800933c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009340:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009344:	ea40 0204 	orr.w	r2, r0, r4
 8009348:	e7db      	b.n	8009302 <__b2d+0x4a>
 800934a:	ea44 030c 	orr.w	r3, r4, ip
 800934e:	460a      	mov	r2, r1
 8009350:	e7d7      	b.n	8009302 <__b2d+0x4a>
 8009352:	bf00      	nop
 8009354:	3ff00000 	.word	0x3ff00000

08009358 <__d2b>:
 8009358:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800935c:	4689      	mov	r9, r1
 800935e:	2101      	movs	r1, #1
 8009360:	ec57 6b10 	vmov	r6, r7, d0
 8009364:	4690      	mov	r8, r2
 8009366:	f7ff fc09 	bl	8008b7c <_Balloc>
 800936a:	4604      	mov	r4, r0
 800936c:	b930      	cbnz	r0, 800937c <__d2b+0x24>
 800936e:	4602      	mov	r2, r0
 8009370:	4b25      	ldr	r3, [pc, #148]	; (8009408 <__d2b+0xb0>)
 8009372:	4826      	ldr	r0, [pc, #152]	; (800940c <__d2b+0xb4>)
 8009374:	f240 310a 	movw	r1, #778	; 0x30a
 8009378:	f000 fb50 	bl	8009a1c <__assert_func>
 800937c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009380:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009384:	bb35      	cbnz	r5, 80093d4 <__d2b+0x7c>
 8009386:	2e00      	cmp	r6, #0
 8009388:	9301      	str	r3, [sp, #4]
 800938a:	d028      	beq.n	80093de <__d2b+0x86>
 800938c:	4668      	mov	r0, sp
 800938e:	9600      	str	r6, [sp, #0]
 8009390:	f7ff fd06 	bl	8008da0 <__lo0bits>
 8009394:	9900      	ldr	r1, [sp, #0]
 8009396:	b300      	cbz	r0, 80093da <__d2b+0x82>
 8009398:	9a01      	ldr	r2, [sp, #4]
 800939a:	f1c0 0320 	rsb	r3, r0, #32
 800939e:	fa02 f303 	lsl.w	r3, r2, r3
 80093a2:	430b      	orrs	r3, r1
 80093a4:	40c2      	lsrs	r2, r0
 80093a6:	6163      	str	r3, [r4, #20]
 80093a8:	9201      	str	r2, [sp, #4]
 80093aa:	9b01      	ldr	r3, [sp, #4]
 80093ac:	61a3      	str	r3, [r4, #24]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	bf14      	ite	ne
 80093b2:	2202      	movne	r2, #2
 80093b4:	2201      	moveq	r2, #1
 80093b6:	6122      	str	r2, [r4, #16]
 80093b8:	b1d5      	cbz	r5, 80093f0 <__d2b+0x98>
 80093ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093be:	4405      	add	r5, r0
 80093c0:	f8c9 5000 	str.w	r5, [r9]
 80093c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093c8:	f8c8 0000 	str.w	r0, [r8]
 80093cc:	4620      	mov	r0, r4
 80093ce:	b003      	add	sp, #12
 80093d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093d8:	e7d5      	b.n	8009386 <__d2b+0x2e>
 80093da:	6161      	str	r1, [r4, #20]
 80093dc:	e7e5      	b.n	80093aa <__d2b+0x52>
 80093de:	a801      	add	r0, sp, #4
 80093e0:	f7ff fcde 	bl	8008da0 <__lo0bits>
 80093e4:	9b01      	ldr	r3, [sp, #4]
 80093e6:	6163      	str	r3, [r4, #20]
 80093e8:	2201      	movs	r2, #1
 80093ea:	6122      	str	r2, [r4, #16]
 80093ec:	3020      	adds	r0, #32
 80093ee:	e7e3      	b.n	80093b8 <__d2b+0x60>
 80093f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093f8:	f8c9 0000 	str.w	r0, [r9]
 80093fc:	6918      	ldr	r0, [r3, #16]
 80093fe:	f7ff fcaf 	bl	8008d60 <__hi0bits>
 8009402:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009406:	e7df      	b.n	80093c8 <__d2b+0x70>
 8009408:	0800a810 	.word	0x0800a810
 800940c:	0800a89c 	.word	0x0800a89c

08009410 <__ratio>:
 8009410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009414:	4688      	mov	r8, r1
 8009416:	4669      	mov	r1, sp
 8009418:	4681      	mov	r9, r0
 800941a:	f7ff ff4d 	bl	80092b8 <__b2d>
 800941e:	a901      	add	r1, sp, #4
 8009420:	4640      	mov	r0, r8
 8009422:	ec55 4b10 	vmov	r4, r5, d0
 8009426:	f7ff ff47 	bl	80092b8 <__b2d>
 800942a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800942e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009432:	eba3 0c02 	sub.w	ip, r3, r2
 8009436:	e9dd 3200 	ldrd	r3, r2, [sp]
 800943a:	1a9b      	subs	r3, r3, r2
 800943c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009440:	ec51 0b10 	vmov	r0, r1, d0
 8009444:	2b00      	cmp	r3, #0
 8009446:	bfd6      	itet	le
 8009448:	460a      	movle	r2, r1
 800944a:	462a      	movgt	r2, r5
 800944c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009450:	468b      	mov	fp, r1
 8009452:	462f      	mov	r7, r5
 8009454:	bfd4      	ite	le
 8009456:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800945a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800945e:	4620      	mov	r0, r4
 8009460:	ee10 2a10 	vmov	r2, s0
 8009464:	465b      	mov	r3, fp
 8009466:	4639      	mov	r1, r7
 8009468:	f7f7 f9f8 	bl	800085c <__aeabi_ddiv>
 800946c:	ec41 0b10 	vmov	d0, r0, r1
 8009470:	b003      	add	sp, #12
 8009472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009476 <__copybits>:
 8009476:	3901      	subs	r1, #1
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	1149      	asrs	r1, r1, #5
 800947c:	6914      	ldr	r4, [r2, #16]
 800947e:	3101      	adds	r1, #1
 8009480:	f102 0314 	add.w	r3, r2, #20
 8009484:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009488:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800948c:	1f05      	subs	r5, r0, #4
 800948e:	42a3      	cmp	r3, r4
 8009490:	d30c      	bcc.n	80094ac <__copybits+0x36>
 8009492:	1aa3      	subs	r3, r4, r2
 8009494:	3b11      	subs	r3, #17
 8009496:	f023 0303 	bic.w	r3, r3, #3
 800949a:	3211      	adds	r2, #17
 800949c:	42a2      	cmp	r2, r4
 800949e:	bf88      	it	hi
 80094a0:	2300      	movhi	r3, #0
 80094a2:	4418      	add	r0, r3
 80094a4:	2300      	movs	r3, #0
 80094a6:	4288      	cmp	r0, r1
 80094a8:	d305      	bcc.n	80094b6 <__copybits+0x40>
 80094aa:	bd70      	pop	{r4, r5, r6, pc}
 80094ac:	f853 6b04 	ldr.w	r6, [r3], #4
 80094b0:	f845 6f04 	str.w	r6, [r5, #4]!
 80094b4:	e7eb      	b.n	800948e <__copybits+0x18>
 80094b6:	f840 3b04 	str.w	r3, [r0], #4
 80094ba:	e7f4      	b.n	80094a6 <__copybits+0x30>

080094bc <__any_on>:
 80094bc:	f100 0214 	add.w	r2, r0, #20
 80094c0:	6900      	ldr	r0, [r0, #16]
 80094c2:	114b      	asrs	r3, r1, #5
 80094c4:	4298      	cmp	r0, r3
 80094c6:	b510      	push	{r4, lr}
 80094c8:	db11      	blt.n	80094ee <__any_on+0x32>
 80094ca:	dd0a      	ble.n	80094e2 <__any_on+0x26>
 80094cc:	f011 011f 	ands.w	r1, r1, #31
 80094d0:	d007      	beq.n	80094e2 <__any_on+0x26>
 80094d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094d6:	fa24 f001 	lsr.w	r0, r4, r1
 80094da:	fa00 f101 	lsl.w	r1, r0, r1
 80094de:	428c      	cmp	r4, r1
 80094e0:	d10b      	bne.n	80094fa <__any_on+0x3e>
 80094e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d803      	bhi.n	80094f2 <__any_on+0x36>
 80094ea:	2000      	movs	r0, #0
 80094ec:	bd10      	pop	{r4, pc}
 80094ee:	4603      	mov	r3, r0
 80094f0:	e7f7      	b.n	80094e2 <__any_on+0x26>
 80094f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094f6:	2900      	cmp	r1, #0
 80094f8:	d0f5      	beq.n	80094e6 <__any_on+0x2a>
 80094fa:	2001      	movs	r0, #1
 80094fc:	e7f6      	b.n	80094ec <__any_on+0x30>

080094fe <_calloc_r>:
 80094fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009500:	fba1 2402 	umull	r2, r4, r1, r2
 8009504:	b94c      	cbnz	r4, 800951a <_calloc_r+0x1c>
 8009506:	4611      	mov	r1, r2
 8009508:	9201      	str	r2, [sp, #4]
 800950a:	f000 f87b 	bl	8009604 <_malloc_r>
 800950e:	9a01      	ldr	r2, [sp, #4]
 8009510:	4605      	mov	r5, r0
 8009512:	b930      	cbnz	r0, 8009522 <_calloc_r+0x24>
 8009514:	4628      	mov	r0, r5
 8009516:	b003      	add	sp, #12
 8009518:	bd30      	pop	{r4, r5, pc}
 800951a:	220c      	movs	r2, #12
 800951c:	6002      	str	r2, [r0, #0]
 800951e:	2500      	movs	r5, #0
 8009520:	e7f8      	b.n	8009514 <_calloc_r+0x16>
 8009522:	4621      	mov	r1, r4
 8009524:	f7fc fbbe 	bl	8005ca4 <memset>
 8009528:	e7f4      	b.n	8009514 <_calloc_r+0x16>
	...

0800952c <_free_r>:
 800952c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800952e:	2900      	cmp	r1, #0
 8009530:	d044      	beq.n	80095bc <_free_r+0x90>
 8009532:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009536:	9001      	str	r0, [sp, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f1a1 0404 	sub.w	r4, r1, #4
 800953e:	bfb8      	it	lt
 8009540:	18e4      	addlt	r4, r4, r3
 8009542:	f000 fab5 	bl	8009ab0 <__malloc_lock>
 8009546:	4a1e      	ldr	r2, [pc, #120]	; (80095c0 <_free_r+0x94>)
 8009548:	9801      	ldr	r0, [sp, #4]
 800954a:	6813      	ldr	r3, [r2, #0]
 800954c:	b933      	cbnz	r3, 800955c <_free_r+0x30>
 800954e:	6063      	str	r3, [r4, #4]
 8009550:	6014      	str	r4, [r2, #0]
 8009552:	b003      	add	sp, #12
 8009554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009558:	f000 bab0 	b.w	8009abc <__malloc_unlock>
 800955c:	42a3      	cmp	r3, r4
 800955e:	d908      	bls.n	8009572 <_free_r+0x46>
 8009560:	6825      	ldr	r5, [r4, #0]
 8009562:	1961      	adds	r1, r4, r5
 8009564:	428b      	cmp	r3, r1
 8009566:	bf01      	itttt	eq
 8009568:	6819      	ldreq	r1, [r3, #0]
 800956a:	685b      	ldreq	r3, [r3, #4]
 800956c:	1949      	addeq	r1, r1, r5
 800956e:	6021      	streq	r1, [r4, #0]
 8009570:	e7ed      	b.n	800954e <_free_r+0x22>
 8009572:	461a      	mov	r2, r3
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	b10b      	cbz	r3, 800957c <_free_r+0x50>
 8009578:	42a3      	cmp	r3, r4
 800957a:	d9fa      	bls.n	8009572 <_free_r+0x46>
 800957c:	6811      	ldr	r1, [r2, #0]
 800957e:	1855      	adds	r5, r2, r1
 8009580:	42a5      	cmp	r5, r4
 8009582:	d10b      	bne.n	800959c <_free_r+0x70>
 8009584:	6824      	ldr	r4, [r4, #0]
 8009586:	4421      	add	r1, r4
 8009588:	1854      	adds	r4, r2, r1
 800958a:	42a3      	cmp	r3, r4
 800958c:	6011      	str	r1, [r2, #0]
 800958e:	d1e0      	bne.n	8009552 <_free_r+0x26>
 8009590:	681c      	ldr	r4, [r3, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	6053      	str	r3, [r2, #4]
 8009596:	4421      	add	r1, r4
 8009598:	6011      	str	r1, [r2, #0]
 800959a:	e7da      	b.n	8009552 <_free_r+0x26>
 800959c:	d902      	bls.n	80095a4 <_free_r+0x78>
 800959e:	230c      	movs	r3, #12
 80095a0:	6003      	str	r3, [r0, #0]
 80095a2:	e7d6      	b.n	8009552 <_free_r+0x26>
 80095a4:	6825      	ldr	r5, [r4, #0]
 80095a6:	1961      	adds	r1, r4, r5
 80095a8:	428b      	cmp	r3, r1
 80095aa:	bf04      	itt	eq
 80095ac:	6819      	ldreq	r1, [r3, #0]
 80095ae:	685b      	ldreq	r3, [r3, #4]
 80095b0:	6063      	str	r3, [r4, #4]
 80095b2:	bf04      	itt	eq
 80095b4:	1949      	addeq	r1, r1, r5
 80095b6:	6021      	streq	r1, [r4, #0]
 80095b8:	6054      	str	r4, [r2, #4]
 80095ba:	e7ca      	b.n	8009552 <_free_r+0x26>
 80095bc:	b003      	add	sp, #12
 80095be:	bd30      	pop	{r4, r5, pc}
 80095c0:	200003e4 	.word	0x200003e4

080095c4 <sbrk_aligned>:
 80095c4:	b570      	push	{r4, r5, r6, lr}
 80095c6:	4e0e      	ldr	r6, [pc, #56]	; (8009600 <sbrk_aligned+0x3c>)
 80095c8:	460c      	mov	r4, r1
 80095ca:	6831      	ldr	r1, [r6, #0]
 80095cc:	4605      	mov	r5, r0
 80095ce:	b911      	cbnz	r1, 80095d6 <sbrk_aligned+0x12>
 80095d0:	f000 f9f2 	bl	80099b8 <_sbrk_r>
 80095d4:	6030      	str	r0, [r6, #0]
 80095d6:	4621      	mov	r1, r4
 80095d8:	4628      	mov	r0, r5
 80095da:	f000 f9ed 	bl	80099b8 <_sbrk_r>
 80095de:	1c43      	adds	r3, r0, #1
 80095e0:	d00a      	beq.n	80095f8 <sbrk_aligned+0x34>
 80095e2:	1cc4      	adds	r4, r0, #3
 80095e4:	f024 0403 	bic.w	r4, r4, #3
 80095e8:	42a0      	cmp	r0, r4
 80095ea:	d007      	beq.n	80095fc <sbrk_aligned+0x38>
 80095ec:	1a21      	subs	r1, r4, r0
 80095ee:	4628      	mov	r0, r5
 80095f0:	f000 f9e2 	bl	80099b8 <_sbrk_r>
 80095f4:	3001      	adds	r0, #1
 80095f6:	d101      	bne.n	80095fc <sbrk_aligned+0x38>
 80095f8:	f04f 34ff 	mov.w	r4, #4294967295
 80095fc:	4620      	mov	r0, r4
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
 8009600:	200003e8 	.word	0x200003e8

08009604 <_malloc_r>:
 8009604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009608:	1ccd      	adds	r5, r1, #3
 800960a:	f025 0503 	bic.w	r5, r5, #3
 800960e:	3508      	adds	r5, #8
 8009610:	2d0c      	cmp	r5, #12
 8009612:	bf38      	it	cc
 8009614:	250c      	movcc	r5, #12
 8009616:	2d00      	cmp	r5, #0
 8009618:	4607      	mov	r7, r0
 800961a:	db01      	blt.n	8009620 <_malloc_r+0x1c>
 800961c:	42a9      	cmp	r1, r5
 800961e:	d905      	bls.n	800962c <_malloc_r+0x28>
 8009620:	230c      	movs	r3, #12
 8009622:	603b      	str	r3, [r7, #0]
 8009624:	2600      	movs	r6, #0
 8009626:	4630      	mov	r0, r6
 8009628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800962c:	4e2e      	ldr	r6, [pc, #184]	; (80096e8 <_malloc_r+0xe4>)
 800962e:	f000 fa3f 	bl	8009ab0 <__malloc_lock>
 8009632:	6833      	ldr	r3, [r6, #0]
 8009634:	461c      	mov	r4, r3
 8009636:	bb34      	cbnz	r4, 8009686 <_malloc_r+0x82>
 8009638:	4629      	mov	r1, r5
 800963a:	4638      	mov	r0, r7
 800963c:	f7ff ffc2 	bl	80095c4 <sbrk_aligned>
 8009640:	1c43      	adds	r3, r0, #1
 8009642:	4604      	mov	r4, r0
 8009644:	d14d      	bne.n	80096e2 <_malloc_r+0xde>
 8009646:	6834      	ldr	r4, [r6, #0]
 8009648:	4626      	mov	r6, r4
 800964a:	2e00      	cmp	r6, #0
 800964c:	d140      	bne.n	80096d0 <_malloc_r+0xcc>
 800964e:	6823      	ldr	r3, [r4, #0]
 8009650:	4631      	mov	r1, r6
 8009652:	4638      	mov	r0, r7
 8009654:	eb04 0803 	add.w	r8, r4, r3
 8009658:	f000 f9ae 	bl	80099b8 <_sbrk_r>
 800965c:	4580      	cmp	r8, r0
 800965e:	d13a      	bne.n	80096d6 <_malloc_r+0xd2>
 8009660:	6821      	ldr	r1, [r4, #0]
 8009662:	3503      	adds	r5, #3
 8009664:	1a6d      	subs	r5, r5, r1
 8009666:	f025 0503 	bic.w	r5, r5, #3
 800966a:	3508      	adds	r5, #8
 800966c:	2d0c      	cmp	r5, #12
 800966e:	bf38      	it	cc
 8009670:	250c      	movcc	r5, #12
 8009672:	4629      	mov	r1, r5
 8009674:	4638      	mov	r0, r7
 8009676:	f7ff ffa5 	bl	80095c4 <sbrk_aligned>
 800967a:	3001      	adds	r0, #1
 800967c:	d02b      	beq.n	80096d6 <_malloc_r+0xd2>
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	442b      	add	r3, r5
 8009682:	6023      	str	r3, [r4, #0]
 8009684:	e00e      	b.n	80096a4 <_malloc_r+0xa0>
 8009686:	6822      	ldr	r2, [r4, #0]
 8009688:	1b52      	subs	r2, r2, r5
 800968a:	d41e      	bmi.n	80096ca <_malloc_r+0xc6>
 800968c:	2a0b      	cmp	r2, #11
 800968e:	d916      	bls.n	80096be <_malloc_r+0xba>
 8009690:	1961      	adds	r1, r4, r5
 8009692:	42a3      	cmp	r3, r4
 8009694:	6025      	str	r5, [r4, #0]
 8009696:	bf18      	it	ne
 8009698:	6059      	strne	r1, [r3, #4]
 800969a:	6863      	ldr	r3, [r4, #4]
 800969c:	bf08      	it	eq
 800969e:	6031      	streq	r1, [r6, #0]
 80096a0:	5162      	str	r2, [r4, r5]
 80096a2:	604b      	str	r3, [r1, #4]
 80096a4:	4638      	mov	r0, r7
 80096a6:	f104 060b 	add.w	r6, r4, #11
 80096aa:	f000 fa07 	bl	8009abc <__malloc_unlock>
 80096ae:	f026 0607 	bic.w	r6, r6, #7
 80096b2:	1d23      	adds	r3, r4, #4
 80096b4:	1af2      	subs	r2, r6, r3
 80096b6:	d0b6      	beq.n	8009626 <_malloc_r+0x22>
 80096b8:	1b9b      	subs	r3, r3, r6
 80096ba:	50a3      	str	r3, [r4, r2]
 80096bc:	e7b3      	b.n	8009626 <_malloc_r+0x22>
 80096be:	6862      	ldr	r2, [r4, #4]
 80096c0:	42a3      	cmp	r3, r4
 80096c2:	bf0c      	ite	eq
 80096c4:	6032      	streq	r2, [r6, #0]
 80096c6:	605a      	strne	r2, [r3, #4]
 80096c8:	e7ec      	b.n	80096a4 <_malloc_r+0xa0>
 80096ca:	4623      	mov	r3, r4
 80096cc:	6864      	ldr	r4, [r4, #4]
 80096ce:	e7b2      	b.n	8009636 <_malloc_r+0x32>
 80096d0:	4634      	mov	r4, r6
 80096d2:	6876      	ldr	r6, [r6, #4]
 80096d4:	e7b9      	b.n	800964a <_malloc_r+0x46>
 80096d6:	230c      	movs	r3, #12
 80096d8:	603b      	str	r3, [r7, #0]
 80096da:	4638      	mov	r0, r7
 80096dc:	f000 f9ee 	bl	8009abc <__malloc_unlock>
 80096e0:	e7a1      	b.n	8009626 <_malloc_r+0x22>
 80096e2:	6025      	str	r5, [r4, #0]
 80096e4:	e7de      	b.n	80096a4 <_malloc_r+0xa0>
 80096e6:	bf00      	nop
 80096e8:	200003e4 	.word	0x200003e4

080096ec <__ssputs_r>:
 80096ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f0:	688e      	ldr	r6, [r1, #8]
 80096f2:	429e      	cmp	r6, r3
 80096f4:	4682      	mov	sl, r0
 80096f6:	460c      	mov	r4, r1
 80096f8:	4690      	mov	r8, r2
 80096fa:	461f      	mov	r7, r3
 80096fc:	d838      	bhi.n	8009770 <__ssputs_r+0x84>
 80096fe:	898a      	ldrh	r2, [r1, #12]
 8009700:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009704:	d032      	beq.n	800976c <__ssputs_r+0x80>
 8009706:	6825      	ldr	r5, [r4, #0]
 8009708:	6909      	ldr	r1, [r1, #16]
 800970a:	eba5 0901 	sub.w	r9, r5, r1
 800970e:	6965      	ldr	r5, [r4, #20]
 8009710:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009714:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009718:	3301      	adds	r3, #1
 800971a:	444b      	add	r3, r9
 800971c:	106d      	asrs	r5, r5, #1
 800971e:	429d      	cmp	r5, r3
 8009720:	bf38      	it	cc
 8009722:	461d      	movcc	r5, r3
 8009724:	0553      	lsls	r3, r2, #21
 8009726:	d531      	bpl.n	800978c <__ssputs_r+0xa0>
 8009728:	4629      	mov	r1, r5
 800972a:	f7ff ff6b 	bl	8009604 <_malloc_r>
 800972e:	4606      	mov	r6, r0
 8009730:	b950      	cbnz	r0, 8009748 <__ssputs_r+0x5c>
 8009732:	230c      	movs	r3, #12
 8009734:	f8ca 3000 	str.w	r3, [sl]
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800973e:	81a3      	strh	r3, [r4, #12]
 8009740:	f04f 30ff 	mov.w	r0, #4294967295
 8009744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009748:	6921      	ldr	r1, [r4, #16]
 800974a:	464a      	mov	r2, r9
 800974c:	f7ff fa08 	bl	8008b60 <memcpy>
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800975a:	81a3      	strh	r3, [r4, #12]
 800975c:	6126      	str	r6, [r4, #16]
 800975e:	6165      	str	r5, [r4, #20]
 8009760:	444e      	add	r6, r9
 8009762:	eba5 0509 	sub.w	r5, r5, r9
 8009766:	6026      	str	r6, [r4, #0]
 8009768:	60a5      	str	r5, [r4, #8]
 800976a:	463e      	mov	r6, r7
 800976c:	42be      	cmp	r6, r7
 800976e:	d900      	bls.n	8009772 <__ssputs_r+0x86>
 8009770:	463e      	mov	r6, r7
 8009772:	6820      	ldr	r0, [r4, #0]
 8009774:	4632      	mov	r2, r6
 8009776:	4641      	mov	r1, r8
 8009778:	f000 f980 	bl	8009a7c <memmove>
 800977c:	68a3      	ldr	r3, [r4, #8]
 800977e:	1b9b      	subs	r3, r3, r6
 8009780:	60a3      	str	r3, [r4, #8]
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	4433      	add	r3, r6
 8009786:	6023      	str	r3, [r4, #0]
 8009788:	2000      	movs	r0, #0
 800978a:	e7db      	b.n	8009744 <__ssputs_r+0x58>
 800978c:	462a      	mov	r2, r5
 800978e:	f000 f99b 	bl	8009ac8 <_realloc_r>
 8009792:	4606      	mov	r6, r0
 8009794:	2800      	cmp	r0, #0
 8009796:	d1e1      	bne.n	800975c <__ssputs_r+0x70>
 8009798:	6921      	ldr	r1, [r4, #16]
 800979a:	4650      	mov	r0, sl
 800979c:	f7ff fec6 	bl	800952c <_free_r>
 80097a0:	e7c7      	b.n	8009732 <__ssputs_r+0x46>
	...

080097a4 <_svfiprintf_r>:
 80097a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	4698      	mov	r8, r3
 80097aa:	898b      	ldrh	r3, [r1, #12]
 80097ac:	061b      	lsls	r3, r3, #24
 80097ae:	b09d      	sub	sp, #116	; 0x74
 80097b0:	4607      	mov	r7, r0
 80097b2:	460d      	mov	r5, r1
 80097b4:	4614      	mov	r4, r2
 80097b6:	d50e      	bpl.n	80097d6 <_svfiprintf_r+0x32>
 80097b8:	690b      	ldr	r3, [r1, #16]
 80097ba:	b963      	cbnz	r3, 80097d6 <_svfiprintf_r+0x32>
 80097bc:	2140      	movs	r1, #64	; 0x40
 80097be:	f7ff ff21 	bl	8009604 <_malloc_r>
 80097c2:	6028      	str	r0, [r5, #0]
 80097c4:	6128      	str	r0, [r5, #16]
 80097c6:	b920      	cbnz	r0, 80097d2 <_svfiprintf_r+0x2e>
 80097c8:	230c      	movs	r3, #12
 80097ca:	603b      	str	r3, [r7, #0]
 80097cc:	f04f 30ff 	mov.w	r0, #4294967295
 80097d0:	e0d1      	b.n	8009976 <_svfiprintf_r+0x1d2>
 80097d2:	2340      	movs	r3, #64	; 0x40
 80097d4:	616b      	str	r3, [r5, #20]
 80097d6:	2300      	movs	r3, #0
 80097d8:	9309      	str	r3, [sp, #36]	; 0x24
 80097da:	2320      	movs	r3, #32
 80097dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80097e4:	2330      	movs	r3, #48	; 0x30
 80097e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009990 <_svfiprintf_r+0x1ec>
 80097ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097ee:	f04f 0901 	mov.w	r9, #1
 80097f2:	4623      	mov	r3, r4
 80097f4:	469a      	mov	sl, r3
 80097f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097fa:	b10a      	cbz	r2, 8009800 <_svfiprintf_r+0x5c>
 80097fc:	2a25      	cmp	r2, #37	; 0x25
 80097fe:	d1f9      	bne.n	80097f4 <_svfiprintf_r+0x50>
 8009800:	ebba 0b04 	subs.w	fp, sl, r4
 8009804:	d00b      	beq.n	800981e <_svfiprintf_r+0x7a>
 8009806:	465b      	mov	r3, fp
 8009808:	4622      	mov	r2, r4
 800980a:	4629      	mov	r1, r5
 800980c:	4638      	mov	r0, r7
 800980e:	f7ff ff6d 	bl	80096ec <__ssputs_r>
 8009812:	3001      	adds	r0, #1
 8009814:	f000 80aa 	beq.w	800996c <_svfiprintf_r+0x1c8>
 8009818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800981a:	445a      	add	r2, fp
 800981c:	9209      	str	r2, [sp, #36]	; 0x24
 800981e:	f89a 3000 	ldrb.w	r3, [sl]
 8009822:	2b00      	cmp	r3, #0
 8009824:	f000 80a2 	beq.w	800996c <_svfiprintf_r+0x1c8>
 8009828:	2300      	movs	r3, #0
 800982a:	f04f 32ff 	mov.w	r2, #4294967295
 800982e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009832:	f10a 0a01 	add.w	sl, sl, #1
 8009836:	9304      	str	r3, [sp, #16]
 8009838:	9307      	str	r3, [sp, #28]
 800983a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800983e:	931a      	str	r3, [sp, #104]	; 0x68
 8009840:	4654      	mov	r4, sl
 8009842:	2205      	movs	r2, #5
 8009844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009848:	4851      	ldr	r0, [pc, #324]	; (8009990 <_svfiprintf_r+0x1ec>)
 800984a:	f7f6 fcd1 	bl	80001f0 <memchr>
 800984e:	9a04      	ldr	r2, [sp, #16]
 8009850:	b9d8      	cbnz	r0, 800988a <_svfiprintf_r+0xe6>
 8009852:	06d0      	lsls	r0, r2, #27
 8009854:	bf44      	itt	mi
 8009856:	2320      	movmi	r3, #32
 8009858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800985c:	0711      	lsls	r1, r2, #28
 800985e:	bf44      	itt	mi
 8009860:	232b      	movmi	r3, #43	; 0x2b
 8009862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009866:	f89a 3000 	ldrb.w	r3, [sl]
 800986a:	2b2a      	cmp	r3, #42	; 0x2a
 800986c:	d015      	beq.n	800989a <_svfiprintf_r+0xf6>
 800986e:	9a07      	ldr	r2, [sp, #28]
 8009870:	4654      	mov	r4, sl
 8009872:	2000      	movs	r0, #0
 8009874:	f04f 0c0a 	mov.w	ip, #10
 8009878:	4621      	mov	r1, r4
 800987a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800987e:	3b30      	subs	r3, #48	; 0x30
 8009880:	2b09      	cmp	r3, #9
 8009882:	d94e      	bls.n	8009922 <_svfiprintf_r+0x17e>
 8009884:	b1b0      	cbz	r0, 80098b4 <_svfiprintf_r+0x110>
 8009886:	9207      	str	r2, [sp, #28]
 8009888:	e014      	b.n	80098b4 <_svfiprintf_r+0x110>
 800988a:	eba0 0308 	sub.w	r3, r0, r8
 800988e:	fa09 f303 	lsl.w	r3, r9, r3
 8009892:	4313      	orrs	r3, r2
 8009894:	9304      	str	r3, [sp, #16]
 8009896:	46a2      	mov	sl, r4
 8009898:	e7d2      	b.n	8009840 <_svfiprintf_r+0x9c>
 800989a:	9b03      	ldr	r3, [sp, #12]
 800989c:	1d19      	adds	r1, r3, #4
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	9103      	str	r1, [sp, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	bfbb      	ittet	lt
 80098a6:	425b      	neglt	r3, r3
 80098a8:	f042 0202 	orrlt.w	r2, r2, #2
 80098ac:	9307      	strge	r3, [sp, #28]
 80098ae:	9307      	strlt	r3, [sp, #28]
 80098b0:	bfb8      	it	lt
 80098b2:	9204      	strlt	r2, [sp, #16]
 80098b4:	7823      	ldrb	r3, [r4, #0]
 80098b6:	2b2e      	cmp	r3, #46	; 0x2e
 80098b8:	d10c      	bne.n	80098d4 <_svfiprintf_r+0x130>
 80098ba:	7863      	ldrb	r3, [r4, #1]
 80098bc:	2b2a      	cmp	r3, #42	; 0x2a
 80098be:	d135      	bne.n	800992c <_svfiprintf_r+0x188>
 80098c0:	9b03      	ldr	r3, [sp, #12]
 80098c2:	1d1a      	adds	r2, r3, #4
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	9203      	str	r2, [sp, #12]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	bfb8      	it	lt
 80098cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80098d0:	3402      	adds	r4, #2
 80098d2:	9305      	str	r3, [sp, #20]
 80098d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80099a0 <_svfiprintf_r+0x1fc>
 80098d8:	7821      	ldrb	r1, [r4, #0]
 80098da:	2203      	movs	r2, #3
 80098dc:	4650      	mov	r0, sl
 80098de:	f7f6 fc87 	bl	80001f0 <memchr>
 80098e2:	b140      	cbz	r0, 80098f6 <_svfiprintf_r+0x152>
 80098e4:	2340      	movs	r3, #64	; 0x40
 80098e6:	eba0 000a 	sub.w	r0, r0, sl
 80098ea:	fa03 f000 	lsl.w	r0, r3, r0
 80098ee:	9b04      	ldr	r3, [sp, #16]
 80098f0:	4303      	orrs	r3, r0
 80098f2:	3401      	adds	r4, #1
 80098f4:	9304      	str	r3, [sp, #16]
 80098f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098fa:	4826      	ldr	r0, [pc, #152]	; (8009994 <_svfiprintf_r+0x1f0>)
 80098fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009900:	2206      	movs	r2, #6
 8009902:	f7f6 fc75 	bl	80001f0 <memchr>
 8009906:	2800      	cmp	r0, #0
 8009908:	d038      	beq.n	800997c <_svfiprintf_r+0x1d8>
 800990a:	4b23      	ldr	r3, [pc, #140]	; (8009998 <_svfiprintf_r+0x1f4>)
 800990c:	bb1b      	cbnz	r3, 8009956 <_svfiprintf_r+0x1b2>
 800990e:	9b03      	ldr	r3, [sp, #12]
 8009910:	3307      	adds	r3, #7
 8009912:	f023 0307 	bic.w	r3, r3, #7
 8009916:	3308      	adds	r3, #8
 8009918:	9303      	str	r3, [sp, #12]
 800991a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800991c:	4433      	add	r3, r6
 800991e:	9309      	str	r3, [sp, #36]	; 0x24
 8009920:	e767      	b.n	80097f2 <_svfiprintf_r+0x4e>
 8009922:	fb0c 3202 	mla	r2, ip, r2, r3
 8009926:	460c      	mov	r4, r1
 8009928:	2001      	movs	r0, #1
 800992a:	e7a5      	b.n	8009878 <_svfiprintf_r+0xd4>
 800992c:	2300      	movs	r3, #0
 800992e:	3401      	adds	r4, #1
 8009930:	9305      	str	r3, [sp, #20]
 8009932:	4619      	mov	r1, r3
 8009934:	f04f 0c0a 	mov.w	ip, #10
 8009938:	4620      	mov	r0, r4
 800993a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800993e:	3a30      	subs	r2, #48	; 0x30
 8009940:	2a09      	cmp	r2, #9
 8009942:	d903      	bls.n	800994c <_svfiprintf_r+0x1a8>
 8009944:	2b00      	cmp	r3, #0
 8009946:	d0c5      	beq.n	80098d4 <_svfiprintf_r+0x130>
 8009948:	9105      	str	r1, [sp, #20]
 800994a:	e7c3      	b.n	80098d4 <_svfiprintf_r+0x130>
 800994c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009950:	4604      	mov	r4, r0
 8009952:	2301      	movs	r3, #1
 8009954:	e7f0      	b.n	8009938 <_svfiprintf_r+0x194>
 8009956:	ab03      	add	r3, sp, #12
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	462a      	mov	r2, r5
 800995c:	4b0f      	ldr	r3, [pc, #60]	; (800999c <_svfiprintf_r+0x1f8>)
 800995e:	a904      	add	r1, sp, #16
 8009960:	4638      	mov	r0, r7
 8009962:	f7fc fa47 	bl	8005df4 <_printf_float>
 8009966:	1c42      	adds	r2, r0, #1
 8009968:	4606      	mov	r6, r0
 800996a:	d1d6      	bne.n	800991a <_svfiprintf_r+0x176>
 800996c:	89ab      	ldrh	r3, [r5, #12]
 800996e:	065b      	lsls	r3, r3, #25
 8009970:	f53f af2c 	bmi.w	80097cc <_svfiprintf_r+0x28>
 8009974:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009976:	b01d      	add	sp, #116	; 0x74
 8009978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997c:	ab03      	add	r3, sp, #12
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	462a      	mov	r2, r5
 8009982:	4b06      	ldr	r3, [pc, #24]	; (800999c <_svfiprintf_r+0x1f8>)
 8009984:	a904      	add	r1, sp, #16
 8009986:	4638      	mov	r0, r7
 8009988:	f7fc fcd8 	bl	800633c <_printf_i>
 800998c:	e7eb      	b.n	8009966 <_svfiprintf_r+0x1c2>
 800998e:	bf00      	nop
 8009990:	0800a9f4 	.word	0x0800a9f4
 8009994:	0800a9fe 	.word	0x0800a9fe
 8009998:	08005df5 	.word	0x08005df5
 800999c:	080096ed 	.word	0x080096ed
 80099a0:	0800a9fa 	.word	0x0800a9fa
 80099a4:	00000000 	.word	0x00000000

080099a8 <nan>:
 80099a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80099b0 <nan+0x8>
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	00000000 	.word	0x00000000
 80099b4:	7ff80000 	.word	0x7ff80000

080099b8 <_sbrk_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4d06      	ldr	r5, [pc, #24]	; (80099d4 <_sbrk_r+0x1c>)
 80099bc:	2300      	movs	r3, #0
 80099be:	4604      	mov	r4, r0
 80099c0:	4608      	mov	r0, r1
 80099c2:	602b      	str	r3, [r5, #0]
 80099c4:	f7f8 ffd6 	bl	8002974 <_sbrk>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	d102      	bne.n	80099d2 <_sbrk_r+0x1a>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	b103      	cbz	r3, 80099d2 <_sbrk_r+0x1a>
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	bd38      	pop	{r3, r4, r5, pc}
 80099d4:	200003ec 	.word	0x200003ec

080099d8 <strncmp>:
 80099d8:	b510      	push	{r4, lr}
 80099da:	b17a      	cbz	r2, 80099fc <strncmp+0x24>
 80099dc:	4603      	mov	r3, r0
 80099de:	3901      	subs	r1, #1
 80099e0:	1884      	adds	r4, r0, r2
 80099e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80099e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80099ea:	4290      	cmp	r0, r2
 80099ec:	d101      	bne.n	80099f2 <strncmp+0x1a>
 80099ee:	42a3      	cmp	r3, r4
 80099f0:	d101      	bne.n	80099f6 <strncmp+0x1e>
 80099f2:	1a80      	subs	r0, r0, r2
 80099f4:	bd10      	pop	{r4, pc}
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d1f3      	bne.n	80099e2 <strncmp+0xa>
 80099fa:	e7fa      	b.n	80099f2 <strncmp+0x1a>
 80099fc:	4610      	mov	r0, r2
 80099fe:	e7f9      	b.n	80099f4 <strncmp+0x1c>

08009a00 <__ascii_wctomb>:
 8009a00:	b149      	cbz	r1, 8009a16 <__ascii_wctomb+0x16>
 8009a02:	2aff      	cmp	r2, #255	; 0xff
 8009a04:	bf85      	ittet	hi
 8009a06:	238a      	movhi	r3, #138	; 0x8a
 8009a08:	6003      	strhi	r3, [r0, #0]
 8009a0a:	700a      	strbls	r2, [r1, #0]
 8009a0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a10:	bf98      	it	ls
 8009a12:	2001      	movls	r0, #1
 8009a14:	4770      	bx	lr
 8009a16:	4608      	mov	r0, r1
 8009a18:	4770      	bx	lr
	...

08009a1c <__assert_func>:
 8009a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a1e:	4614      	mov	r4, r2
 8009a20:	461a      	mov	r2, r3
 8009a22:	4b09      	ldr	r3, [pc, #36]	; (8009a48 <__assert_func+0x2c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4605      	mov	r5, r0
 8009a28:	68d8      	ldr	r0, [r3, #12]
 8009a2a:	b14c      	cbz	r4, 8009a40 <__assert_func+0x24>
 8009a2c:	4b07      	ldr	r3, [pc, #28]	; (8009a4c <__assert_func+0x30>)
 8009a2e:	9100      	str	r1, [sp, #0]
 8009a30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a34:	4906      	ldr	r1, [pc, #24]	; (8009a50 <__assert_func+0x34>)
 8009a36:	462b      	mov	r3, r5
 8009a38:	f000 f80e 	bl	8009a58 <fiprintf>
 8009a3c:	f000 fa8c 	bl	8009f58 <abort>
 8009a40:	4b04      	ldr	r3, [pc, #16]	; (8009a54 <__assert_func+0x38>)
 8009a42:	461c      	mov	r4, r3
 8009a44:	e7f3      	b.n	8009a2e <__assert_func+0x12>
 8009a46:	bf00      	nop
 8009a48:	2000003c 	.word	0x2000003c
 8009a4c:	0800aa05 	.word	0x0800aa05
 8009a50:	0800aa12 	.word	0x0800aa12
 8009a54:	0800aa40 	.word	0x0800aa40

08009a58 <fiprintf>:
 8009a58:	b40e      	push	{r1, r2, r3}
 8009a5a:	b503      	push	{r0, r1, lr}
 8009a5c:	4601      	mov	r1, r0
 8009a5e:	ab03      	add	r3, sp, #12
 8009a60:	4805      	ldr	r0, [pc, #20]	; (8009a78 <fiprintf+0x20>)
 8009a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a66:	6800      	ldr	r0, [r0, #0]
 8009a68:	9301      	str	r3, [sp, #4]
 8009a6a:	f000 f885 	bl	8009b78 <_vfiprintf_r>
 8009a6e:	b002      	add	sp, #8
 8009a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a74:	b003      	add	sp, #12
 8009a76:	4770      	bx	lr
 8009a78:	2000003c 	.word	0x2000003c

08009a7c <memmove>:
 8009a7c:	4288      	cmp	r0, r1
 8009a7e:	b510      	push	{r4, lr}
 8009a80:	eb01 0402 	add.w	r4, r1, r2
 8009a84:	d902      	bls.n	8009a8c <memmove+0x10>
 8009a86:	4284      	cmp	r4, r0
 8009a88:	4623      	mov	r3, r4
 8009a8a:	d807      	bhi.n	8009a9c <memmove+0x20>
 8009a8c:	1e43      	subs	r3, r0, #1
 8009a8e:	42a1      	cmp	r1, r4
 8009a90:	d008      	beq.n	8009aa4 <memmove+0x28>
 8009a92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a9a:	e7f8      	b.n	8009a8e <memmove+0x12>
 8009a9c:	4402      	add	r2, r0
 8009a9e:	4601      	mov	r1, r0
 8009aa0:	428a      	cmp	r2, r1
 8009aa2:	d100      	bne.n	8009aa6 <memmove+0x2a>
 8009aa4:	bd10      	pop	{r4, pc}
 8009aa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009aaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009aae:	e7f7      	b.n	8009aa0 <memmove+0x24>

08009ab0 <__malloc_lock>:
 8009ab0:	4801      	ldr	r0, [pc, #4]	; (8009ab8 <__malloc_lock+0x8>)
 8009ab2:	f000 bc11 	b.w	800a2d8 <__retarget_lock_acquire_recursive>
 8009ab6:	bf00      	nop
 8009ab8:	200003f0 	.word	0x200003f0

08009abc <__malloc_unlock>:
 8009abc:	4801      	ldr	r0, [pc, #4]	; (8009ac4 <__malloc_unlock+0x8>)
 8009abe:	f000 bc0c 	b.w	800a2da <__retarget_lock_release_recursive>
 8009ac2:	bf00      	nop
 8009ac4:	200003f0 	.word	0x200003f0

08009ac8 <_realloc_r>:
 8009ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009acc:	4680      	mov	r8, r0
 8009ace:	4614      	mov	r4, r2
 8009ad0:	460e      	mov	r6, r1
 8009ad2:	b921      	cbnz	r1, 8009ade <_realloc_r+0x16>
 8009ad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad8:	4611      	mov	r1, r2
 8009ada:	f7ff bd93 	b.w	8009604 <_malloc_r>
 8009ade:	b92a      	cbnz	r2, 8009aec <_realloc_r+0x24>
 8009ae0:	f7ff fd24 	bl	800952c <_free_r>
 8009ae4:	4625      	mov	r5, r4
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aec:	f000 fc5c 	bl	800a3a8 <_malloc_usable_size_r>
 8009af0:	4284      	cmp	r4, r0
 8009af2:	4607      	mov	r7, r0
 8009af4:	d802      	bhi.n	8009afc <_realloc_r+0x34>
 8009af6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009afa:	d812      	bhi.n	8009b22 <_realloc_r+0x5a>
 8009afc:	4621      	mov	r1, r4
 8009afe:	4640      	mov	r0, r8
 8009b00:	f7ff fd80 	bl	8009604 <_malloc_r>
 8009b04:	4605      	mov	r5, r0
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d0ed      	beq.n	8009ae6 <_realloc_r+0x1e>
 8009b0a:	42bc      	cmp	r4, r7
 8009b0c:	4622      	mov	r2, r4
 8009b0e:	4631      	mov	r1, r6
 8009b10:	bf28      	it	cs
 8009b12:	463a      	movcs	r2, r7
 8009b14:	f7ff f824 	bl	8008b60 <memcpy>
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	f7ff fd06 	bl	800952c <_free_r>
 8009b20:	e7e1      	b.n	8009ae6 <_realloc_r+0x1e>
 8009b22:	4635      	mov	r5, r6
 8009b24:	e7df      	b.n	8009ae6 <_realloc_r+0x1e>

08009b26 <__sfputc_r>:
 8009b26:	6893      	ldr	r3, [r2, #8]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	b410      	push	{r4}
 8009b2e:	6093      	str	r3, [r2, #8]
 8009b30:	da08      	bge.n	8009b44 <__sfputc_r+0x1e>
 8009b32:	6994      	ldr	r4, [r2, #24]
 8009b34:	42a3      	cmp	r3, r4
 8009b36:	db01      	blt.n	8009b3c <__sfputc_r+0x16>
 8009b38:	290a      	cmp	r1, #10
 8009b3a:	d103      	bne.n	8009b44 <__sfputc_r+0x1e>
 8009b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b40:	f000 b94a 	b.w	8009dd8 <__swbuf_r>
 8009b44:	6813      	ldr	r3, [r2, #0]
 8009b46:	1c58      	adds	r0, r3, #1
 8009b48:	6010      	str	r0, [r2, #0]
 8009b4a:	7019      	strb	r1, [r3, #0]
 8009b4c:	4608      	mov	r0, r1
 8009b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <__sfputs_r>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	4606      	mov	r6, r0
 8009b58:	460f      	mov	r7, r1
 8009b5a:	4614      	mov	r4, r2
 8009b5c:	18d5      	adds	r5, r2, r3
 8009b5e:	42ac      	cmp	r4, r5
 8009b60:	d101      	bne.n	8009b66 <__sfputs_r+0x12>
 8009b62:	2000      	movs	r0, #0
 8009b64:	e007      	b.n	8009b76 <__sfputs_r+0x22>
 8009b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b6a:	463a      	mov	r2, r7
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	f7ff ffda 	bl	8009b26 <__sfputc_r>
 8009b72:	1c43      	adds	r3, r0, #1
 8009b74:	d1f3      	bne.n	8009b5e <__sfputs_r+0xa>
 8009b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b78 <_vfiprintf_r>:
 8009b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7c:	460d      	mov	r5, r1
 8009b7e:	b09d      	sub	sp, #116	; 0x74
 8009b80:	4614      	mov	r4, r2
 8009b82:	4698      	mov	r8, r3
 8009b84:	4606      	mov	r6, r0
 8009b86:	b118      	cbz	r0, 8009b90 <_vfiprintf_r+0x18>
 8009b88:	6983      	ldr	r3, [r0, #24]
 8009b8a:	b90b      	cbnz	r3, 8009b90 <_vfiprintf_r+0x18>
 8009b8c:	f000 fb06 	bl	800a19c <__sinit>
 8009b90:	4b89      	ldr	r3, [pc, #548]	; (8009db8 <_vfiprintf_r+0x240>)
 8009b92:	429d      	cmp	r5, r3
 8009b94:	d11b      	bne.n	8009bce <_vfiprintf_r+0x56>
 8009b96:	6875      	ldr	r5, [r6, #4]
 8009b98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b9a:	07d9      	lsls	r1, r3, #31
 8009b9c:	d405      	bmi.n	8009baa <_vfiprintf_r+0x32>
 8009b9e:	89ab      	ldrh	r3, [r5, #12]
 8009ba0:	059a      	lsls	r2, r3, #22
 8009ba2:	d402      	bmi.n	8009baa <_vfiprintf_r+0x32>
 8009ba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ba6:	f000 fb97 	bl	800a2d8 <__retarget_lock_acquire_recursive>
 8009baa:	89ab      	ldrh	r3, [r5, #12]
 8009bac:	071b      	lsls	r3, r3, #28
 8009bae:	d501      	bpl.n	8009bb4 <_vfiprintf_r+0x3c>
 8009bb0:	692b      	ldr	r3, [r5, #16]
 8009bb2:	b9eb      	cbnz	r3, 8009bf0 <_vfiprintf_r+0x78>
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	f000 f960 	bl	8009e7c <__swsetup_r>
 8009bbc:	b1c0      	cbz	r0, 8009bf0 <_vfiprintf_r+0x78>
 8009bbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bc0:	07dc      	lsls	r4, r3, #31
 8009bc2:	d50e      	bpl.n	8009be2 <_vfiprintf_r+0x6a>
 8009bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc8:	b01d      	add	sp, #116	; 0x74
 8009bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bce:	4b7b      	ldr	r3, [pc, #492]	; (8009dbc <_vfiprintf_r+0x244>)
 8009bd0:	429d      	cmp	r5, r3
 8009bd2:	d101      	bne.n	8009bd8 <_vfiprintf_r+0x60>
 8009bd4:	68b5      	ldr	r5, [r6, #8]
 8009bd6:	e7df      	b.n	8009b98 <_vfiprintf_r+0x20>
 8009bd8:	4b79      	ldr	r3, [pc, #484]	; (8009dc0 <_vfiprintf_r+0x248>)
 8009bda:	429d      	cmp	r5, r3
 8009bdc:	bf08      	it	eq
 8009bde:	68f5      	ldreq	r5, [r6, #12]
 8009be0:	e7da      	b.n	8009b98 <_vfiprintf_r+0x20>
 8009be2:	89ab      	ldrh	r3, [r5, #12]
 8009be4:	0598      	lsls	r0, r3, #22
 8009be6:	d4ed      	bmi.n	8009bc4 <_vfiprintf_r+0x4c>
 8009be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bea:	f000 fb76 	bl	800a2da <__retarget_lock_release_recursive>
 8009bee:	e7e9      	b.n	8009bc4 <_vfiprintf_r+0x4c>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf4:	2320      	movs	r3, #32
 8009bf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bfe:	2330      	movs	r3, #48	; 0x30
 8009c00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009dc4 <_vfiprintf_r+0x24c>
 8009c04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c08:	f04f 0901 	mov.w	r9, #1
 8009c0c:	4623      	mov	r3, r4
 8009c0e:	469a      	mov	sl, r3
 8009c10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c14:	b10a      	cbz	r2, 8009c1a <_vfiprintf_r+0xa2>
 8009c16:	2a25      	cmp	r2, #37	; 0x25
 8009c18:	d1f9      	bne.n	8009c0e <_vfiprintf_r+0x96>
 8009c1a:	ebba 0b04 	subs.w	fp, sl, r4
 8009c1e:	d00b      	beq.n	8009c38 <_vfiprintf_r+0xc0>
 8009c20:	465b      	mov	r3, fp
 8009c22:	4622      	mov	r2, r4
 8009c24:	4629      	mov	r1, r5
 8009c26:	4630      	mov	r0, r6
 8009c28:	f7ff ff94 	bl	8009b54 <__sfputs_r>
 8009c2c:	3001      	adds	r0, #1
 8009c2e:	f000 80aa 	beq.w	8009d86 <_vfiprintf_r+0x20e>
 8009c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c34:	445a      	add	r2, fp
 8009c36:	9209      	str	r2, [sp, #36]	; 0x24
 8009c38:	f89a 3000 	ldrb.w	r3, [sl]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 80a2 	beq.w	8009d86 <_vfiprintf_r+0x20e>
 8009c42:	2300      	movs	r3, #0
 8009c44:	f04f 32ff 	mov.w	r2, #4294967295
 8009c48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c4c:	f10a 0a01 	add.w	sl, sl, #1
 8009c50:	9304      	str	r3, [sp, #16]
 8009c52:	9307      	str	r3, [sp, #28]
 8009c54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c58:	931a      	str	r3, [sp, #104]	; 0x68
 8009c5a:	4654      	mov	r4, sl
 8009c5c:	2205      	movs	r2, #5
 8009c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c62:	4858      	ldr	r0, [pc, #352]	; (8009dc4 <_vfiprintf_r+0x24c>)
 8009c64:	f7f6 fac4 	bl	80001f0 <memchr>
 8009c68:	9a04      	ldr	r2, [sp, #16]
 8009c6a:	b9d8      	cbnz	r0, 8009ca4 <_vfiprintf_r+0x12c>
 8009c6c:	06d1      	lsls	r1, r2, #27
 8009c6e:	bf44      	itt	mi
 8009c70:	2320      	movmi	r3, #32
 8009c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c76:	0713      	lsls	r3, r2, #28
 8009c78:	bf44      	itt	mi
 8009c7a:	232b      	movmi	r3, #43	; 0x2b
 8009c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c80:	f89a 3000 	ldrb.w	r3, [sl]
 8009c84:	2b2a      	cmp	r3, #42	; 0x2a
 8009c86:	d015      	beq.n	8009cb4 <_vfiprintf_r+0x13c>
 8009c88:	9a07      	ldr	r2, [sp, #28]
 8009c8a:	4654      	mov	r4, sl
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	f04f 0c0a 	mov.w	ip, #10
 8009c92:	4621      	mov	r1, r4
 8009c94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c98:	3b30      	subs	r3, #48	; 0x30
 8009c9a:	2b09      	cmp	r3, #9
 8009c9c:	d94e      	bls.n	8009d3c <_vfiprintf_r+0x1c4>
 8009c9e:	b1b0      	cbz	r0, 8009cce <_vfiprintf_r+0x156>
 8009ca0:	9207      	str	r2, [sp, #28]
 8009ca2:	e014      	b.n	8009cce <_vfiprintf_r+0x156>
 8009ca4:	eba0 0308 	sub.w	r3, r0, r8
 8009ca8:	fa09 f303 	lsl.w	r3, r9, r3
 8009cac:	4313      	orrs	r3, r2
 8009cae:	9304      	str	r3, [sp, #16]
 8009cb0:	46a2      	mov	sl, r4
 8009cb2:	e7d2      	b.n	8009c5a <_vfiprintf_r+0xe2>
 8009cb4:	9b03      	ldr	r3, [sp, #12]
 8009cb6:	1d19      	adds	r1, r3, #4
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	9103      	str	r1, [sp, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	bfbb      	ittet	lt
 8009cc0:	425b      	neglt	r3, r3
 8009cc2:	f042 0202 	orrlt.w	r2, r2, #2
 8009cc6:	9307      	strge	r3, [sp, #28]
 8009cc8:	9307      	strlt	r3, [sp, #28]
 8009cca:	bfb8      	it	lt
 8009ccc:	9204      	strlt	r2, [sp, #16]
 8009cce:	7823      	ldrb	r3, [r4, #0]
 8009cd0:	2b2e      	cmp	r3, #46	; 0x2e
 8009cd2:	d10c      	bne.n	8009cee <_vfiprintf_r+0x176>
 8009cd4:	7863      	ldrb	r3, [r4, #1]
 8009cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8009cd8:	d135      	bne.n	8009d46 <_vfiprintf_r+0x1ce>
 8009cda:	9b03      	ldr	r3, [sp, #12]
 8009cdc:	1d1a      	adds	r2, r3, #4
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	9203      	str	r2, [sp, #12]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	bfb8      	it	lt
 8009ce6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cea:	3402      	adds	r4, #2
 8009cec:	9305      	str	r3, [sp, #20]
 8009cee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009dd4 <_vfiprintf_r+0x25c>
 8009cf2:	7821      	ldrb	r1, [r4, #0]
 8009cf4:	2203      	movs	r2, #3
 8009cf6:	4650      	mov	r0, sl
 8009cf8:	f7f6 fa7a 	bl	80001f0 <memchr>
 8009cfc:	b140      	cbz	r0, 8009d10 <_vfiprintf_r+0x198>
 8009cfe:	2340      	movs	r3, #64	; 0x40
 8009d00:	eba0 000a 	sub.w	r0, r0, sl
 8009d04:	fa03 f000 	lsl.w	r0, r3, r0
 8009d08:	9b04      	ldr	r3, [sp, #16]
 8009d0a:	4303      	orrs	r3, r0
 8009d0c:	3401      	adds	r4, #1
 8009d0e:	9304      	str	r3, [sp, #16]
 8009d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d14:	482c      	ldr	r0, [pc, #176]	; (8009dc8 <_vfiprintf_r+0x250>)
 8009d16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d1a:	2206      	movs	r2, #6
 8009d1c:	f7f6 fa68 	bl	80001f0 <memchr>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	d03f      	beq.n	8009da4 <_vfiprintf_r+0x22c>
 8009d24:	4b29      	ldr	r3, [pc, #164]	; (8009dcc <_vfiprintf_r+0x254>)
 8009d26:	bb1b      	cbnz	r3, 8009d70 <_vfiprintf_r+0x1f8>
 8009d28:	9b03      	ldr	r3, [sp, #12]
 8009d2a:	3307      	adds	r3, #7
 8009d2c:	f023 0307 	bic.w	r3, r3, #7
 8009d30:	3308      	adds	r3, #8
 8009d32:	9303      	str	r3, [sp, #12]
 8009d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d36:	443b      	add	r3, r7
 8009d38:	9309      	str	r3, [sp, #36]	; 0x24
 8009d3a:	e767      	b.n	8009c0c <_vfiprintf_r+0x94>
 8009d3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d40:	460c      	mov	r4, r1
 8009d42:	2001      	movs	r0, #1
 8009d44:	e7a5      	b.n	8009c92 <_vfiprintf_r+0x11a>
 8009d46:	2300      	movs	r3, #0
 8009d48:	3401      	adds	r4, #1
 8009d4a:	9305      	str	r3, [sp, #20]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	f04f 0c0a 	mov.w	ip, #10
 8009d52:	4620      	mov	r0, r4
 8009d54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d58:	3a30      	subs	r2, #48	; 0x30
 8009d5a:	2a09      	cmp	r2, #9
 8009d5c:	d903      	bls.n	8009d66 <_vfiprintf_r+0x1ee>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d0c5      	beq.n	8009cee <_vfiprintf_r+0x176>
 8009d62:	9105      	str	r1, [sp, #20]
 8009d64:	e7c3      	b.n	8009cee <_vfiprintf_r+0x176>
 8009d66:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e7f0      	b.n	8009d52 <_vfiprintf_r+0x1da>
 8009d70:	ab03      	add	r3, sp, #12
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	462a      	mov	r2, r5
 8009d76:	4b16      	ldr	r3, [pc, #88]	; (8009dd0 <_vfiprintf_r+0x258>)
 8009d78:	a904      	add	r1, sp, #16
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f7fc f83a 	bl	8005df4 <_printf_float>
 8009d80:	4607      	mov	r7, r0
 8009d82:	1c78      	adds	r0, r7, #1
 8009d84:	d1d6      	bne.n	8009d34 <_vfiprintf_r+0x1bc>
 8009d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d88:	07d9      	lsls	r1, r3, #31
 8009d8a:	d405      	bmi.n	8009d98 <_vfiprintf_r+0x220>
 8009d8c:	89ab      	ldrh	r3, [r5, #12]
 8009d8e:	059a      	lsls	r2, r3, #22
 8009d90:	d402      	bmi.n	8009d98 <_vfiprintf_r+0x220>
 8009d92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d94:	f000 faa1 	bl	800a2da <__retarget_lock_release_recursive>
 8009d98:	89ab      	ldrh	r3, [r5, #12]
 8009d9a:	065b      	lsls	r3, r3, #25
 8009d9c:	f53f af12 	bmi.w	8009bc4 <_vfiprintf_r+0x4c>
 8009da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009da2:	e711      	b.n	8009bc8 <_vfiprintf_r+0x50>
 8009da4:	ab03      	add	r3, sp, #12
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	462a      	mov	r2, r5
 8009daa:	4b09      	ldr	r3, [pc, #36]	; (8009dd0 <_vfiprintf_r+0x258>)
 8009dac:	a904      	add	r1, sp, #16
 8009dae:	4630      	mov	r0, r6
 8009db0:	f7fc fac4 	bl	800633c <_printf_i>
 8009db4:	e7e4      	b.n	8009d80 <_vfiprintf_r+0x208>
 8009db6:	bf00      	nop
 8009db8:	0800aa64 	.word	0x0800aa64
 8009dbc:	0800aa84 	.word	0x0800aa84
 8009dc0:	0800aa44 	.word	0x0800aa44
 8009dc4:	0800a9f4 	.word	0x0800a9f4
 8009dc8:	0800a9fe 	.word	0x0800a9fe
 8009dcc:	08005df5 	.word	0x08005df5
 8009dd0:	08009b55 	.word	0x08009b55
 8009dd4:	0800a9fa 	.word	0x0800a9fa

08009dd8 <__swbuf_r>:
 8009dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dda:	460e      	mov	r6, r1
 8009ddc:	4614      	mov	r4, r2
 8009dde:	4605      	mov	r5, r0
 8009de0:	b118      	cbz	r0, 8009dea <__swbuf_r+0x12>
 8009de2:	6983      	ldr	r3, [r0, #24]
 8009de4:	b90b      	cbnz	r3, 8009dea <__swbuf_r+0x12>
 8009de6:	f000 f9d9 	bl	800a19c <__sinit>
 8009dea:	4b21      	ldr	r3, [pc, #132]	; (8009e70 <__swbuf_r+0x98>)
 8009dec:	429c      	cmp	r4, r3
 8009dee:	d12b      	bne.n	8009e48 <__swbuf_r+0x70>
 8009df0:	686c      	ldr	r4, [r5, #4]
 8009df2:	69a3      	ldr	r3, [r4, #24]
 8009df4:	60a3      	str	r3, [r4, #8]
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	071a      	lsls	r2, r3, #28
 8009dfa:	d52f      	bpl.n	8009e5c <__swbuf_r+0x84>
 8009dfc:	6923      	ldr	r3, [r4, #16]
 8009dfe:	b36b      	cbz	r3, 8009e5c <__swbuf_r+0x84>
 8009e00:	6923      	ldr	r3, [r4, #16]
 8009e02:	6820      	ldr	r0, [r4, #0]
 8009e04:	1ac0      	subs	r0, r0, r3
 8009e06:	6963      	ldr	r3, [r4, #20]
 8009e08:	b2f6      	uxtb	r6, r6
 8009e0a:	4283      	cmp	r3, r0
 8009e0c:	4637      	mov	r7, r6
 8009e0e:	dc04      	bgt.n	8009e1a <__swbuf_r+0x42>
 8009e10:	4621      	mov	r1, r4
 8009e12:	4628      	mov	r0, r5
 8009e14:	f000 f92e 	bl	800a074 <_fflush_r>
 8009e18:	bb30      	cbnz	r0, 8009e68 <__swbuf_r+0x90>
 8009e1a:	68a3      	ldr	r3, [r4, #8]
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	60a3      	str	r3, [r4, #8]
 8009e20:	6823      	ldr	r3, [r4, #0]
 8009e22:	1c5a      	adds	r2, r3, #1
 8009e24:	6022      	str	r2, [r4, #0]
 8009e26:	701e      	strb	r6, [r3, #0]
 8009e28:	6963      	ldr	r3, [r4, #20]
 8009e2a:	3001      	adds	r0, #1
 8009e2c:	4283      	cmp	r3, r0
 8009e2e:	d004      	beq.n	8009e3a <__swbuf_r+0x62>
 8009e30:	89a3      	ldrh	r3, [r4, #12]
 8009e32:	07db      	lsls	r3, r3, #31
 8009e34:	d506      	bpl.n	8009e44 <__swbuf_r+0x6c>
 8009e36:	2e0a      	cmp	r6, #10
 8009e38:	d104      	bne.n	8009e44 <__swbuf_r+0x6c>
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	f000 f919 	bl	800a074 <_fflush_r>
 8009e42:	b988      	cbnz	r0, 8009e68 <__swbuf_r+0x90>
 8009e44:	4638      	mov	r0, r7
 8009e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e48:	4b0a      	ldr	r3, [pc, #40]	; (8009e74 <__swbuf_r+0x9c>)
 8009e4a:	429c      	cmp	r4, r3
 8009e4c:	d101      	bne.n	8009e52 <__swbuf_r+0x7a>
 8009e4e:	68ac      	ldr	r4, [r5, #8]
 8009e50:	e7cf      	b.n	8009df2 <__swbuf_r+0x1a>
 8009e52:	4b09      	ldr	r3, [pc, #36]	; (8009e78 <__swbuf_r+0xa0>)
 8009e54:	429c      	cmp	r4, r3
 8009e56:	bf08      	it	eq
 8009e58:	68ec      	ldreq	r4, [r5, #12]
 8009e5a:	e7ca      	b.n	8009df2 <__swbuf_r+0x1a>
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	4628      	mov	r0, r5
 8009e60:	f000 f80c 	bl	8009e7c <__swsetup_r>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d0cb      	beq.n	8009e00 <__swbuf_r+0x28>
 8009e68:	f04f 37ff 	mov.w	r7, #4294967295
 8009e6c:	e7ea      	b.n	8009e44 <__swbuf_r+0x6c>
 8009e6e:	bf00      	nop
 8009e70:	0800aa64 	.word	0x0800aa64
 8009e74:	0800aa84 	.word	0x0800aa84
 8009e78:	0800aa44 	.word	0x0800aa44

08009e7c <__swsetup_r>:
 8009e7c:	4b32      	ldr	r3, [pc, #200]	; (8009f48 <__swsetup_r+0xcc>)
 8009e7e:	b570      	push	{r4, r5, r6, lr}
 8009e80:	681d      	ldr	r5, [r3, #0]
 8009e82:	4606      	mov	r6, r0
 8009e84:	460c      	mov	r4, r1
 8009e86:	b125      	cbz	r5, 8009e92 <__swsetup_r+0x16>
 8009e88:	69ab      	ldr	r3, [r5, #24]
 8009e8a:	b913      	cbnz	r3, 8009e92 <__swsetup_r+0x16>
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f000 f985 	bl	800a19c <__sinit>
 8009e92:	4b2e      	ldr	r3, [pc, #184]	; (8009f4c <__swsetup_r+0xd0>)
 8009e94:	429c      	cmp	r4, r3
 8009e96:	d10f      	bne.n	8009eb8 <__swsetup_r+0x3c>
 8009e98:	686c      	ldr	r4, [r5, #4]
 8009e9a:	89a3      	ldrh	r3, [r4, #12]
 8009e9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ea0:	0719      	lsls	r1, r3, #28
 8009ea2:	d42c      	bmi.n	8009efe <__swsetup_r+0x82>
 8009ea4:	06dd      	lsls	r5, r3, #27
 8009ea6:	d411      	bmi.n	8009ecc <__swsetup_r+0x50>
 8009ea8:	2309      	movs	r3, #9
 8009eaa:	6033      	str	r3, [r6, #0]
 8009eac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009eb0:	81a3      	strh	r3, [r4, #12]
 8009eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb6:	e03e      	b.n	8009f36 <__swsetup_r+0xba>
 8009eb8:	4b25      	ldr	r3, [pc, #148]	; (8009f50 <__swsetup_r+0xd4>)
 8009eba:	429c      	cmp	r4, r3
 8009ebc:	d101      	bne.n	8009ec2 <__swsetup_r+0x46>
 8009ebe:	68ac      	ldr	r4, [r5, #8]
 8009ec0:	e7eb      	b.n	8009e9a <__swsetup_r+0x1e>
 8009ec2:	4b24      	ldr	r3, [pc, #144]	; (8009f54 <__swsetup_r+0xd8>)
 8009ec4:	429c      	cmp	r4, r3
 8009ec6:	bf08      	it	eq
 8009ec8:	68ec      	ldreq	r4, [r5, #12]
 8009eca:	e7e6      	b.n	8009e9a <__swsetup_r+0x1e>
 8009ecc:	0758      	lsls	r0, r3, #29
 8009ece:	d512      	bpl.n	8009ef6 <__swsetup_r+0x7a>
 8009ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ed2:	b141      	cbz	r1, 8009ee6 <__swsetup_r+0x6a>
 8009ed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ed8:	4299      	cmp	r1, r3
 8009eda:	d002      	beq.n	8009ee2 <__swsetup_r+0x66>
 8009edc:	4630      	mov	r0, r6
 8009ede:	f7ff fb25 	bl	800952c <_free_r>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	6363      	str	r3, [r4, #52]	; 0x34
 8009ee6:	89a3      	ldrh	r3, [r4, #12]
 8009ee8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009eec:	81a3      	strh	r3, [r4, #12]
 8009eee:	2300      	movs	r3, #0
 8009ef0:	6063      	str	r3, [r4, #4]
 8009ef2:	6923      	ldr	r3, [r4, #16]
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	f043 0308 	orr.w	r3, r3, #8
 8009efc:	81a3      	strh	r3, [r4, #12]
 8009efe:	6923      	ldr	r3, [r4, #16]
 8009f00:	b94b      	cbnz	r3, 8009f16 <__swsetup_r+0x9a>
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f0c:	d003      	beq.n	8009f16 <__swsetup_r+0x9a>
 8009f0e:	4621      	mov	r1, r4
 8009f10:	4630      	mov	r0, r6
 8009f12:	f000 fa09 	bl	800a328 <__smakebuf_r>
 8009f16:	89a0      	ldrh	r0, [r4, #12]
 8009f18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f1c:	f010 0301 	ands.w	r3, r0, #1
 8009f20:	d00a      	beq.n	8009f38 <__swsetup_r+0xbc>
 8009f22:	2300      	movs	r3, #0
 8009f24:	60a3      	str	r3, [r4, #8]
 8009f26:	6963      	ldr	r3, [r4, #20]
 8009f28:	425b      	negs	r3, r3
 8009f2a:	61a3      	str	r3, [r4, #24]
 8009f2c:	6923      	ldr	r3, [r4, #16]
 8009f2e:	b943      	cbnz	r3, 8009f42 <__swsetup_r+0xc6>
 8009f30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f34:	d1ba      	bne.n	8009eac <__swsetup_r+0x30>
 8009f36:	bd70      	pop	{r4, r5, r6, pc}
 8009f38:	0781      	lsls	r1, r0, #30
 8009f3a:	bf58      	it	pl
 8009f3c:	6963      	ldrpl	r3, [r4, #20]
 8009f3e:	60a3      	str	r3, [r4, #8]
 8009f40:	e7f4      	b.n	8009f2c <__swsetup_r+0xb0>
 8009f42:	2000      	movs	r0, #0
 8009f44:	e7f7      	b.n	8009f36 <__swsetup_r+0xba>
 8009f46:	bf00      	nop
 8009f48:	2000003c 	.word	0x2000003c
 8009f4c:	0800aa64 	.word	0x0800aa64
 8009f50:	0800aa84 	.word	0x0800aa84
 8009f54:	0800aa44 	.word	0x0800aa44

08009f58 <abort>:
 8009f58:	b508      	push	{r3, lr}
 8009f5a:	2006      	movs	r0, #6
 8009f5c:	f000 fa54 	bl	800a408 <raise>
 8009f60:	2001      	movs	r0, #1
 8009f62:	f7f8 fc8f 	bl	8002884 <_exit>
	...

08009f68 <__sflush_r>:
 8009f68:	898a      	ldrh	r2, [r1, #12]
 8009f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f6e:	4605      	mov	r5, r0
 8009f70:	0710      	lsls	r0, r2, #28
 8009f72:	460c      	mov	r4, r1
 8009f74:	d458      	bmi.n	800a028 <__sflush_r+0xc0>
 8009f76:	684b      	ldr	r3, [r1, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	dc05      	bgt.n	8009f88 <__sflush_r+0x20>
 8009f7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	dc02      	bgt.n	8009f88 <__sflush_r+0x20>
 8009f82:	2000      	movs	r0, #0
 8009f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f8a:	2e00      	cmp	r6, #0
 8009f8c:	d0f9      	beq.n	8009f82 <__sflush_r+0x1a>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f94:	682f      	ldr	r7, [r5, #0]
 8009f96:	602b      	str	r3, [r5, #0]
 8009f98:	d032      	beq.n	800a000 <__sflush_r+0x98>
 8009f9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f9c:	89a3      	ldrh	r3, [r4, #12]
 8009f9e:	075a      	lsls	r2, r3, #29
 8009fa0:	d505      	bpl.n	8009fae <__sflush_r+0x46>
 8009fa2:	6863      	ldr	r3, [r4, #4]
 8009fa4:	1ac0      	subs	r0, r0, r3
 8009fa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fa8:	b10b      	cbz	r3, 8009fae <__sflush_r+0x46>
 8009faa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fac:	1ac0      	subs	r0, r0, r3
 8009fae:	2300      	movs	r3, #0
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fb4:	6a21      	ldr	r1, [r4, #32]
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	47b0      	blx	r6
 8009fba:	1c43      	adds	r3, r0, #1
 8009fbc:	89a3      	ldrh	r3, [r4, #12]
 8009fbe:	d106      	bne.n	8009fce <__sflush_r+0x66>
 8009fc0:	6829      	ldr	r1, [r5, #0]
 8009fc2:	291d      	cmp	r1, #29
 8009fc4:	d82c      	bhi.n	800a020 <__sflush_r+0xb8>
 8009fc6:	4a2a      	ldr	r2, [pc, #168]	; (800a070 <__sflush_r+0x108>)
 8009fc8:	40ca      	lsrs	r2, r1
 8009fca:	07d6      	lsls	r6, r2, #31
 8009fcc:	d528      	bpl.n	800a020 <__sflush_r+0xb8>
 8009fce:	2200      	movs	r2, #0
 8009fd0:	6062      	str	r2, [r4, #4]
 8009fd2:	04d9      	lsls	r1, r3, #19
 8009fd4:	6922      	ldr	r2, [r4, #16]
 8009fd6:	6022      	str	r2, [r4, #0]
 8009fd8:	d504      	bpl.n	8009fe4 <__sflush_r+0x7c>
 8009fda:	1c42      	adds	r2, r0, #1
 8009fdc:	d101      	bne.n	8009fe2 <__sflush_r+0x7a>
 8009fde:	682b      	ldr	r3, [r5, #0]
 8009fe0:	b903      	cbnz	r3, 8009fe4 <__sflush_r+0x7c>
 8009fe2:	6560      	str	r0, [r4, #84]	; 0x54
 8009fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fe6:	602f      	str	r7, [r5, #0]
 8009fe8:	2900      	cmp	r1, #0
 8009fea:	d0ca      	beq.n	8009f82 <__sflush_r+0x1a>
 8009fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ff0:	4299      	cmp	r1, r3
 8009ff2:	d002      	beq.n	8009ffa <__sflush_r+0x92>
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	f7ff fa99 	bl	800952c <_free_r>
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	6360      	str	r0, [r4, #52]	; 0x34
 8009ffe:	e7c1      	b.n	8009f84 <__sflush_r+0x1c>
 800a000:	6a21      	ldr	r1, [r4, #32]
 800a002:	2301      	movs	r3, #1
 800a004:	4628      	mov	r0, r5
 800a006:	47b0      	blx	r6
 800a008:	1c41      	adds	r1, r0, #1
 800a00a:	d1c7      	bne.n	8009f9c <__sflush_r+0x34>
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d0c4      	beq.n	8009f9c <__sflush_r+0x34>
 800a012:	2b1d      	cmp	r3, #29
 800a014:	d001      	beq.n	800a01a <__sflush_r+0xb2>
 800a016:	2b16      	cmp	r3, #22
 800a018:	d101      	bne.n	800a01e <__sflush_r+0xb6>
 800a01a:	602f      	str	r7, [r5, #0]
 800a01c:	e7b1      	b.n	8009f82 <__sflush_r+0x1a>
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a024:	81a3      	strh	r3, [r4, #12]
 800a026:	e7ad      	b.n	8009f84 <__sflush_r+0x1c>
 800a028:	690f      	ldr	r7, [r1, #16]
 800a02a:	2f00      	cmp	r7, #0
 800a02c:	d0a9      	beq.n	8009f82 <__sflush_r+0x1a>
 800a02e:	0793      	lsls	r3, r2, #30
 800a030:	680e      	ldr	r6, [r1, #0]
 800a032:	bf08      	it	eq
 800a034:	694b      	ldreq	r3, [r1, #20]
 800a036:	600f      	str	r7, [r1, #0]
 800a038:	bf18      	it	ne
 800a03a:	2300      	movne	r3, #0
 800a03c:	eba6 0807 	sub.w	r8, r6, r7
 800a040:	608b      	str	r3, [r1, #8]
 800a042:	f1b8 0f00 	cmp.w	r8, #0
 800a046:	dd9c      	ble.n	8009f82 <__sflush_r+0x1a>
 800a048:	6a21      	ldr	r1, [r4, #32]
 800a04a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a04c:	4643      	mov	r3, r8
 800a04e:	463a      	mov	r2, r7
 800a050:	4628      	mov	r0, r5
 800a052:	47b0      	blx	r6
 800a054:	2800      	cmp	r0, #0
 800a056:	dc06      	bgt.n	800a066 <__sflush_r+0xfe>
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a05e:	81a3      	strh	r3, [r4, #12]
 800a060:	f04f 30ff 	mov.w	r0, #4294967295
 800a064:	e78e      	b.n	8009f84 <__sflush_r+0x1c>
 800a066:	4407      	add	r7, r0
 800a068:	eba8 0800 	sub.w	r8, r8, r0
 800a06c:	e7e9      	b.n	800a042 <__sflush_r+0xda>
 800a06e:	bf00      	nop
 800a070:	20400001 	.word	0x20400001

0800a074 <_fflush_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	690b      	ldr	r3, [r1, #16]
 800a078:	4605      	mov	r5, r0
 800a07a:	460c      	mov	r4, r1
 800a07c:	b913      	cbnz	r3, 800a084 <_fflush_r+0x10>
 800a07e:	2500      	movs	r5, #0
 800a080:	4628      	mov	r0, r5
 800a082:	bd38      	pop	{r3, r4, r5, pc}
 800a084:	b118      	cbz	r0, 800a08e <_fflush_r+0x1a>
 800a086:	6983      	ldr	r3, [r0, #24]
 800a088:	b90b      	cbnz	r3, 800a08e <_fflush_r+0x1a>
 800a08a:	f000 f887 	bl	800a19c <__sinit>
 800a08e:	4b14      	ldr	r3, [pc, #80]	; (800a0e0 <_fflush_r+0x6c>)
 800a090:	429c      	cmp	r4, r3
 800a092:	d11b      	bne.n	800a0cc <_fflush_r+0x58>
 800a094:	686c      	ldr	r4, [r5, #4]
 800a096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d0ef      	beq.n	800a07e <_fflush_r+0xa>
 800a09e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0a0:	07d0      	lsls	r0, r2, #31
 800a0a2:	d404      	bmi.n	800a0ae <_fflush_r+0x3a>
 800a0a4:	0599      	lsls	r1, r3, #22
 800a0a6:	d402      	bmi.n	800a0ae <_fflush_r+0x3a>
 800a0a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0aa:	f000 f915 	bl	800a2d8 <__retarget_lock_acquire_recursive>
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	f7ff ff59 	bl	8009f68 <__sflush_r>
 800a0b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0b8:	07da      	lsls	r2, r3, #31
 800a0ba:	4605      	mov	r5, r0
 800a0bc:	d4e0      	bmi.n	800a080 <_fflush_r+0xc>
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	059b      	lsls	r3, r3, #22
 800a0c2:	d4dd      	bmi.n	800a080 <_fflush_r+0xc>
 800a0c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0c6:	f000 f908 	bl	800a2da <__retarget_lock_release_recursive>
 800a0ca:	e7d9      	b.n	800a080 <_fflush_r+0xc>
 800a0cc:	4b05      	ldr	r3, [pc, #20]	; (800a0e4 <_fflush_r+0x70>)
 800a0ce:	429c      	cmp	r4, r3
 800a0d0:	d101      	bne.n	800a0d6 <_fflush_r+0x62>
 800a0d2:	68ac      	ldr	r4, [r5, #8]
 800a0d4:	e7df      	b.n	800a096 <_fflush_r+0x22>
 800a0d6:	4b04      	ldr	r3, [pc, #16]	; (800a0e8 <_fflush_r+0x74>)
 800a0d8:	429c      	cmp	r4, r3
 800a0da:	bf08      	it	eq
 800a0dc:	68ec      	ldreq	r4, [r5, #12]
 800a0de:	e7da      	b.n	800a096 <_fflush_r+0x22>
 800a0e0:	0800aa64 	.word	0x0800aa64
 800a0e4:	0800aa84 	.word	0x0800aa84
 800a0e8:	0800aa44 	.word	0x0800aa44

0800a0ec <std>:
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	b510      	push	{r4, lr}
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	e9c0 3300 	strd	r3, r3, [r0]
 800a0f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0fa:	6083      	str	r3, [r0, #8]
 800a0fc:	8181      	strh	r1, [r0, #12]
 800a0fe:	6643      	str	r3, [r0, #100]	; 0x64
 800a100:	81c2      	strh	r2, [r0, #14]
 800a102:	6183      	str	r3, [r0, #24]
 800a104:	4619      	mov	r1, r3
 800a106:	2208      	movs	r2, #8
 800a108:	305c      	adds	r0, #92	; 0x5c
 800a10a:	f7fb fdcb 	bl	8005ca4 <memset>
 800a10e:	4b05      	ldr	r3, [pc, #20]	; (800a124 <std+0x38>)
 800a110:	6263      	str	r3, [r4, #36]	; 0x24
 800a112:	4b05      	ldr	r3, [pc, #20]	; (800a128 <std+0x3c>)
 800a114:	62a3      	str	r3, [r4, #40]	; 0x28
 800a116:	4b05      	ldr	r3, [pc, #20]	; (800a12c <std+0x40>)
 800a118:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a11a:	4b05      	ldr	r3, [pc, #20]	; (800a130 <std+0x44>)
 800a11c:	6224      	str	r4, [r4, #32]
 800a11e:	6323      	str	r3, [r4, #48]	; 0x30
 800a120:	bd10      	pop	{r4, pc}
 800a122:	bf00      	nop
 800a124:	0800a441 	.word	0x0800a441
 800a128:	0800a463 	.word	0x0800a463
 800a12c:	0800a49b 	.word	0x0800a49b
 800a130:	0800a4bf 	.word	0x0800a4bf

0800a134 <_cleanup_r>:
 800a134:	4901      	ldr	r1, [pc, #4]	; (800a13c <_cleanup_r+0x8>)
 800a136:	f000 b8af 	b.w	800a298 <_fwalk_reent>
 800a13a:	bf00      	nop
 800a13c:	0800a075 	.word	0x0800a075

0800a140 <__sfmoreglue>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	2268      	movs	r2, #104	; 0x68
 800a144:	1e4d      	subs	r5, r1, #1
 800a146:	4355      	muls	r5, r2
 800a148:	460e      	mov	r6, r1
 800a14a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a14e:	f7ff fa59 	bl	8009604 <_malloc_r>
 800a152:	4604      	mov	r4, r0
 800a154:	b140      	cbz	r0, 800a168 <__sfmoreglue+0x28>
 800a156:	2100      	movs	r1, #0
 800a158:	e9c0 1600 	strd	r1, r6, [r0]
 800a15c:	300c      	adds	r0, #12
 800a15e:	60a0      	str	r0, [r4, #8]
 800a160:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a164:	f7fb fd9e 	bl	8005ca4 <memset>
 800a168:	4620      	mov	r0, r4
 800a16a:	bd70      	pop	{r4, r5, r6, pc}

0800a16c <__sfp_lock_acquire>:
 800a16c:	4801      	ldr	r0, [pc, #4]	; (800a174 <__sfp_lock_acquire+0x8>)
 800a16e:	f000 b8b3 	b.w	800a2d8 <__retarget_lock_acquire_recursive>
 800a172:	bf00      	nop
 800a174:	200003f1 	.word	0x200003f1

0800a178 <__sfp_lock_release>:
 800a178:	4801      	ldr	r0, [pc, #4]	; (800a180 <__sfp_lock_release+0x8>)
 800a17a:	f000 b8ae 	b.w	800a2da <__retarget_lock_release_recursive>
 800a17e:	bf00      	nop
 800a180:	200003f1 	.word	0x200003f1

0800a184 <__sinit_lock_acquire>:
 800a184:	4801      	ldr	r0, [pc, #4]	; (800a18c <__sinit_lock_acquire+0x8>)
 800a186:	f000 b8a7 	b.w	800a2d8 <__retarget_lock_acquire_recursive>
 800a18a:	bf00      	nop
 800a18c:	200003f2 	.word	0x200003f2

0800a190 <__sinit_lock_release>:
 800a190:	4801      	ldr	r0, [pc, #4]	; (800a198 <__sinit_lock_release+0x8>)
 800a192:	f000 b8a2 	b.w	800a2da <__retarget_lock_release_recursive>
 800a196:	bf00      	nop
 800a198:	200003f2 	.word	0x200003f2

0800a19c <__sinit>:
 800a19c:	b510      	push	{r4, lr}
 800a19e:	4604      	mov	r4, r0
 800a1a0:	f7ff fff0 	bl	800a184 <__sinit_lock_acquire>
 800a1a4:	69a3      	ldr	r3, [r4, #24]
 800a1a6:	b11b      	cbz	r3, 800a1b0 <__sinit+0x14>
 800a1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1ac:	f7ff bff0 	b.w	800a190 <__sinit_lock_release>
 800a1b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a1b4:	6523      	str	r3, [r4, #80]	; 0x50
 800a1b6:	4b13      	ldr	r3, [pc, #76]	; (800a204 <__sinit+0x68>)
 800a1b8:	4a13      	ldr	r2, [pc, #76]	; (800a208 <__sinit+0x6c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a1be:	42a3      	cmp	r3, r4
 800a1c0:	bf04      	itt	eq
 800a1c2:	2301      	moveq	r3, #1
 800a1c4:	61a3      	streq	r3, [r4, #24]
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f000 f820 	bl	800a20c <__sfp>
 800a1cc:	6060      	str	r0, [r4, #4]
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f000 f81c 	bl	800a20c <__sfp>
 800a1d4:	60a0      	str	r0, [r4, #8]
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f000 f818 	bl	800a20c <__sfp>
 800a1dc:	2200      	movs	r2, #0
 800a1de:	60e0      	str	r0, [r4, #12]
 800a1e0:	2104      	movs	r1, #4
 800a1e2:	6860      	ldr	r0, [r4, #4]
 800a1e4:	f7ff ff82 	bl	800a0ec <std>
 800a1e8:	68a0      	ldr	r0, [r4, #8]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	2109      	movs	r1, #9
 800a1ee:	f7ff ff7d 	bl	800a0ec <std>
 800a1f2:	68e0      	ldr	r0, [r4, #12]
 800a1f4:	2202      	movs	r2, #2
 800a1f6:	2112      	movs	r1, #18
 800a1f8:	f7ff ff78 	bl	800a0ec <std>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	61a3      	str	r3, [r4, #24]
 800a200:	e7d2      	b.n	800a1a8 <__sinit+0xc>
 800a202:	bf00      	nop
 800a204:	0800a5fc 	.word	0x0800a5fc
 800a208:	0800a135 	.word	0x0800a135

0800a20c <__sfp>:
 800a20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20e:	4607      	mov	r7, r0
 800a210:	f7ff ffac 	bl	800a16c <__sfp_lock_acquire>
 800a214:	4b1e      	ldr	r3, [pc, #120]	; (800a290 <__sfp+0x84>)
 800a216:	681e      	ldr	r6, [r3, #0]
 800a218:	69b3      	ldr	r3, [r6, #24]
 800a21a:	b913      	cbnz	r3, 800a222 <__sfp+0x16>
 800a21c:	4630      	mov	r0, r6
 800a21e:	f7ff ffbd 	bl	800a19c <__sinit>
 800a222:	3648      	adds	r6, #72	; 0x48
 800a224:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a228:	3b01      	subs	r3, #1
 800a22a:	d503      	bpl.n	800a234 <__sfp+0x28>
 800a22c:	6833      	ldr	r3, [r6, #0]
 800a22e:	b30b      	cbz	r3, 800a274 <__sfp+0x68>
 800a230:	6836      	ldr	r6, [r6, #0]
 800a232:	e7f7      	b.n	800a224 <__sfp+0x18>
 800a234:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a238:	b9d5      	cbnz	r5, 800a270 <__sfp+0x64>
 800a23a:	4b16      	ldr	r3, [pc, #88]	; (800a294 <__sfp+0x88>)
 800a23c:	60e3      	str	r3, [r4, #12]
 800a23e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a242:	6665      	str	r5, [r4, #100]	; 0x64
 800a244:	f000 f847 	bl	800a2d6 <__retarget_lock_init_recursive>
 800a248:	f7ff ff96 	bl	800a178 <__sfp_lock_release>
 800a24c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a250:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a254:	6025      	str	r5, [r4, #0]
 800a256:	61a5      	str	r5, [r4, #24]
 800a258:	2208      	movs	r2, #8
 800a25a:	4629      	mov	r1, r5
 800a25c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a260:	f7fb fd20 	bl	8005ca4 <memset>
 800a264:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a268:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a26c:	4620      	mov	r0, r4
 800a26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a270:	3468      	adds	r4, #104	; 0x68
 800a272:	e7d9      	b.n	800a228 <__sfp+0x1c>
 800a274:	2104      	movs	r1, #4
 800a276:	4638      	mov	r0, r7
 800a278:	f7ff ff62 	bl	800a140 <__sfmoreglue>
 800a27c:	4604      	mov	r4, r0
 800a27e:	6030      	str	r0, [r6, #0]
 800a280:	2800      	cmp	r0, #0
 800a282:	d1d5      	bne.n	800a230 <__sfp+0x24>
 800a284:	f7ff ff78 	bl	800a178 <__sfp_lock_release>
 800a288:	230c      	movs	r3, #12
 800a28a:	603b      	str	r3, [r7, #0]
 800a28c:	e7ee      	b.n	800a26c <__sfp+0x60>
 800a28e:	bf00      	nop
 800a290:	0800a5fc 	.word	0x0800a5fc
 800a294:	ffff0001 	.word	0xffff0001

0800a298 <_fwalk_reent>:
 800a298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a29c:	4606      	mov	r6, r0
 800a29e:	4688      	mov	r8, r1
 800a2a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a2a4:	2700      	movs	r7, #0
 800a2a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2aa:	f1b9 0901 	subs.w	r9, r9, #1
 800a2ae:	d505      	bpl.n	800a2bc <_fwalk_reent+0x24>
 800a2b0:	6824      	ldr	r4, [r4, #0]
 800a2b2:	2c00      	cmp	r4, #0
 800a2b4:	d1f7      	bne.n	800a2a6 <_fwalk_reent+0xe>
 800a2b6:	4638      	mov	r0, r7
 800a2b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2bc:	89ab      	ldrh	r3, [r5, #12]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d907      	bls.n	800a2d2 <_fwalk_reent+0x3a>
 800a2c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	d003      	beq.n	800a2d2 <_fwalk_reent+0x3a>
 800a2ca:	4629      	mov	r1, r5
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	47c0      	blx	r8
 800a2d0:	4307      	orrs	r7, r0
 800a2d2:	3568      	adds	r5, #104	; 0x68
 800a2d4:	e7e9      	b.n	800a2aa <_fwalk_reent+0x12>

0800a2d6 <__retarget_lock_init_recursive>:
 800a2d6:	4770      	bx	lr

0800a2d8 <__retarget_lock_acquire_recursive>:
 800a2d8:	4770      	bx	lr

0800a2da <__retarget_lock_release_recursive>:
 800a2da:	4770      	bx	lr

0800a2dc <__swhatbuf_r>:
 800a2dc:	b570      	push	{r4, r5, r6, lr}
 800a2de:	460e      	mov	r6, r1
 800a2e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2e4:	2900      	cmp	r1, #0
 800a2e6:	b096      	sub	sp, #88	; 0x58
 800a2e8:	4614      	mov	r4, r2
 800a2ea:	461d      	mov	r5, r3
 800a2ec:	da08      	bge.n	800a300 <__swhatbuf_r+0x24>
 800a2ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	602a      	str	r2, [r5, #0]
 800a2f6:	061a      	lsls	r2, r3, #24
 800a2f8:	d410      	bmi.n	800a31c <__swhatbuf_r+0x40>
 800a2fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2fe:	e00e      	b.n	800a31e <__swhatbuf_r+0x42>
 800a300:	466a      	mov	r2, sp
 800a302:	f000 f903 	bl	800a50c <_fstat_r>
 800a306:	2800      	cmp	r0, #0
 800a308:	dbf1      	blt.n	800a2ee <__swhatbuf_r+0x12>
 800a30a:	9a01      	ldr	r2, [sp, #4]
 800a30c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a310:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a314:	425a      	negs	r2, r3
 800a316:	415a      	adcs	r2, r3
 800a318:	602a      	str	r2, [r5, #0]
 800a31a:	e7ee      	b.n	800a2fa <__swhatbuf_r+0x1e>
 800a31c:	2340      	movs	r3, #64	; 0x40
 800a31e:	2000      	movs	r0, #0
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	b016      	add	sp, #88	; 0x58
 800a324:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a328 <__smakebuf_r>:
 800a328:	898b      	ldrh	r3, [r1, #12]
 800a32a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a32c:	079d      	lsls	r5, r3, #30
 800a32e:	4606      	mov	r6, r0
 800a330:	460c      	mov	r4, r1
 800a332:	d507      	bpl.n	800a344 <__smakebuf_r+0x1c>
 800a334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a338:	6023      	str	r3, [r4, #0]
 800a33a:	6123      	str	r3, [r4, #16]
 800a33c:	2301      	movs	r3, #1
 800a33e:	6163      	str	r3, [r4, #20]
 800a340:	b002      	add	sp, #8
 800a342:	bd70      	pop	{r4, r5, r6, pc}
 800a344:	ab01      	add	r3, sp, #4
 800a346:	466a      	mov	r2, sp
 800a348:	f7ff ffc8 	bl	800a2dc <__swhatbuf_r>
 800a34c:	9900      	ldr	r1, [sp, #0]
 800a34e:	4605      	mov	r5, r0
 800a350:	4630      	mov	r0, r6
 800a352:	f7ff f957 	bl	8009604 <_malloc_r>
 800a356:	b948      	cbnz	r0, 800a36c <__smakebuf_r+0x44>
 800a358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a35c:	059a      	lsls	r2, r3, #22
 800a35e:	d4ef      	bmi.n	800a340 <__smakebuf_r+0x18>
 800a360:	f023 0303 	bic.w	r3, r3, #3
 800a364:	f043 0302 	orr.w	r3, r3, #2
 800a368:	81a3      	strh	r3, [r4, #12]
 800a36a:	e7e3      	b.n	800a334 <__smakebuf_r+0xc>
 800a36c:	4b0d      	ldr	r3, [pc, #52]	; (800a3a4 <__smakebuf_r+0x7c>)
 800a36e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a370:	89a3      	ldrh	r3, [r4, #12]
 800a372:	6020      	str	r0, [r4, #0]
 800a374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a378:	81a3      	strh	r3, [r4, #12]
 800a37a:	9b00      	ldr	r3, [sp, #0]
 800a37c:	6163      	str	r3, [r4, #20]
 800a37e:	9b01      	ldr	r3, [sp, #4]
 800a380:	6120      	str	r0, [r4, #16]
 800a382:	b15b      	cbz	r3, 800a39c <__smakebuf_r+0x74>
 800a384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a388:	4630      	mov	r0, r6
 800a38a:	f000 f8d1 	bl	800a530 <_isatty_r>
 800a38e:	b128      	cbz	r0, 800a39c <__smakebuf_r+0x74>
 800a390:	89a3      	ldrh	r3, [r4, #12]
 800a392:	f023 0303 	bic.w	r3, r3, #3
 800a396:	f043 0301 	orr.w	r3, r3, #1
 800a39a:	81a3      	strh	r3, [r4, #12]
 800a39c:	89a0      	ldrh	r0, [r4, #12]
 800a39e:	4305      	orrs	r5, r0
 800a3a0:	81a5      	strh	r5, [r4, #12]
 800a3a2:	e7cd      	b.n	800a340 <__smakebuf_r+0x18>
 800a3a4:	0800a135 	.word	0x0800a135

0800a3a8 <_malloc_usable_size_r>:
 800a3a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ac:	1f18      	subs	r0, r3, #4
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	bfbc      	itt	lt
 800a3b2:	580b      	ldrlt	r3, [r1, r0]
 800a3b4:	18c0      	addlt	r0, r0, r3
 800a3b6:	4770      	bx	lr

0800a3b8 <_raise_r>:
 800a3b8:	291f      	cmp	r1, #31
 800a3ba:	b538      	push	{r3, r4, r5, lr}
 800a3bc:	4604      	mov	r4, r0
 800a3be:	460d      	mov	r5, r1
 800a3c0:	d904      	bls.n	800a3cc <_raise_r+0x14>
 800a3c2:	2316      	movs	r3, #22
 800a3c4:	6003      	str	r3, [r0, #0]
 800a3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a3ce:	b112      	cbz	r2, 800a3d6 <_raise_r+0x1e>
 800a3d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3d4:	b94b      	cbnz	r3, 800a3ea <_raise_r+0x32>
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f000 f830 	bl	800a43c <_getpid_r>
 800a3dc:	462a      	mov	r2, r5
 800a3de:	4601      	mov	r1, r0
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3e6:	f000 b817 	b.w	800a418 <_kill_r>
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d00a      	beq.n	800a404 <_raise_r+0x4c>
 800a3ee:	1c59      	adds	r1, r3, #1
 800a3f0:	d103      	bne.n	800a3fa <_raise_r+0x42>
 800a3f2:	2316      	movs	r3, #22
 800a3f4:	6003      	str	r3, [r0, #0]
 800a3f6:	2001      	movs	r0, #1
 800a3f8:	e7e7      	b.n	800a3ca <_raise_r+0x12>
 800a3fa:	2400      	movs	r4, #0
 800a3fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a400:	4628      	mov	r0, r5
 800a402:	4798      	blx	r3
 800a404:	2000      	movs	r0, #0
 800a406:	e7e0      	b.n	800a3ca <_raise_r+0x12>

0800a408 <raise>:
 800a408:	4b02      	ldr	r3, [pc, #8]	; (800a414 <raise+0xc>)
 800a40a:	4601      	mov	r1, r0
 800a40c:	6818      	ldr	r0, [r3, #0]
 800a40e:	f7ff bfd3 	b.w	800a3b8 <_raise_r>
 800a412:	bf00      	nop
 800a414:	2000003c 	.word	0x2000003c

0800a418 <_kill_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	4d07      	ldr	r5, [pc, #28]	; (800a438 <_kill_r+0x20>)
 800a41c:	2300      	movs	r3, #0
 800a41e:	4604      	mov	r4, r0
 800a420:	4608      	mov	r0, r1
 800a422:	4611      	mov	r1, r2
 800a424:	602b      	str	r3, [r5, #0]
 800a426:	f7f8 fa1d 	bl	8002864 <_kill>
 800a42a:	1c43      	adds	r3, r0, #1
 800a42c:	d102      	bne.n	800a434 <_kill_r+0x1c>
 800a42e:	682b      	ldr	r3, [r5, #0]
 800a430:	b103      	cbz	r3, 800a434 <_kill_r+0x1c>
 800a432:	6023      	str	r3, [r4, #0]
 800a434:	bd38      	pop	{r3, r4, r5, pc}
 800a436:	bf00      	nop
 800a438:	200003ec 	.word	0x200003ec

0800a43c <_getpid_r>:
 800a43c:	f7f8 ba0a 	b.w	8002854 <_getpid>

0800a440 <__sread>:
 800a440:	b510      	push	{r4, lr}
 800a442:	460c      	mov	r4, r1
 800a444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a448:	f000 f894 	bl	800a574 <_read_r>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	bfab      	itete	ge
 800a450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a452:	89a3      	ldrhlt	r3, [r4, #12]
 800a454:	181b      	addge	r3, r3, r0
 800a456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a45a:	bfac      	ite	ge
 800a45c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a45e:	81a3      	strhlt	r3, [r4, #12]
 800a460:	bd10      	pop	{r4, pc}

0800a462 <__swrite>:
 800a462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a466:	461f      	mov	r7, r3
 800a468:	898b      	ldrh	r3, [r1, #12]
 800a46a:	05db      	lsls	r3, r3, #23
 800a46c:	4605      	mov	r5, r0
 800a46e:	460c      	mov	r4, r1
 800a470:	4616      	mov	r6, r2
 800a472:	d505      	bpl.n	800a480 <__swrite+0x1e>
 800a474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a478:	2302      	movs	r3, #2
 800a47a:	2200      	movs	r2, #0
 800a47c:	f000 f868 	bl	800a550 <_lseek_r>
 800a480:	89a3      	ldrh	r3, [r4, #12]
 800a482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a48a:	81a3      	strh	r3, [r4, #12]
 800a48c:	4632      	mov	r2, r6
 800a48e:	463b      	mov	r3, r7
 800a490:	4628      	mov	r0, r5
 800a492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a496:	f000 b817 	b.w	800a4c8 <_write_r>

0800a49a <__sseek>:
 800a49a:	b510      	push	{r4, lr}
 800a49c:	460c      	mov	r4, r1
 800a49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a2:	f000 f855 	bl	800a550 <_lseek_r>
 800a4a6:	1c43      	adds	r3, r0, #1
 800a4a8:	89a3      	ldrh	r3, [r4, #12]
 800a4aa:	bf15      	itete	ne
 800a4ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4b6:	81a3      	strheq	r3, [r4, #12]
 800a4b8:	bf18      	it	ne
 800a4ba:	81a3      	strhne	r3, [r4, #12]
 800a4bc:	bd10      	pop	{r4, pc}

0800a4be <__sclose>:
 800a4be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c2:	f000 b813 	b.w	800a4ec <_close_r>
	...

0800a4c8 <_write_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	4d07      	ldr	r5, [pc, #28]	; (800a4e8 <_write_r+0x20>)
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	4608      	mov	r0, r1
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	602a      	str	r2, [r5, #0]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	f7f8 f9fb 	bl	80028d2 <_write>
 800a4dc:	1c43      	adds	r3, r0, #1
 800a4de:	d102      	bne.n	800a4e6 <_write_r+0x1e>
 800a4e0:	682b      	ldr	r3, [r5, #0]
 800a4e2:	b103      	cbz	r3, 800a4e6 <_write_r+0x1e>
 800a4e4:	6023      	str	r3, [r4, #0]
 800a4e6:	bd38      	pop	{r3, r4, r5, pc}
 800a4e8:	200003ec 	.word	0x200003ec

0800a4ec <_close_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	4d06      	ldr	r5, [pc, #24]	; (800a508 <_close_r+0x1c>)
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	4608      	mov	r0, r1
 800a4f6:	602b      	str	r3, [r5, #0]
 800a4f8:	f7f8 fa07 	bl	800290a <_close>
 800a4fc:	1c43      	adds	r3, r0, #1
 800a4fe:	d102      	bne.n	800a506 <_close_r+0x1a>
 800a500:	682b      	ldr	r3, [r5, #0]
 800a502:	b103      	cbz	r3, 800a506 <_close_r+0x1a>
 800a504:	6023      	str	r3, [r4, #0]
 800a506:	bd38      	pop	{r3, r4, r5, pc}
 800a508:	200003ec 	.word	0x200003ec

0800a50c <_fstat_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4d07      	ldr	r5, [pc, #28]	; (800a52c <_fstat_r+0x20>)
 800a510:	2300      	movs	r3, #0
 800a512:	4604      	mov	r4, r0
 800a514:	4608      	mov	r0, r1
 800a516:	4611      	mov	r1, r2
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	f7f8 fa02 	bl	8002922 <_fstat>
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	d102      	bne.n	800a528 <_fstat_r+0x1c>
 800a522:	682b      	ldr	r3, [r5, #0]
 800a524:	b103      	cbz	r3, 800a528 <_fstat_r+0x1c>
 800a526:	6023      	str	r3, [r4, #0]
 800a528:	bd38      	pop	{r3, r4, r5, pc}
 800a52a:	bf00      	nop
 800a52c:	200003ec 	.word	0x200003ec

0800a530 <_isatty_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	4d06      	ldr	r5, [pc, #24]	; (800a54c <_isatty_r+0x1c>)
 800a534:	2300      	movs	r3, #0
 800a536:	4604      	mov	r4, r0
 800a538:	4608      	mov	r0, r1
 800a53a:	602b      	str	r3, [r5, #0]
 800a53c:	f7f8 fa01 	bl	8002942 <_isatty>
 800a540:	1c43      	adds	r3, r0, #1
 800a542:	d102      	bne.n	800a54a <_isatty_r+0x1a>
 800a544:	682b      	ldr	r3, [r5, #0]
 800a546:	b103      	cbz	r3, 800a54a <_isatty_r+0x1a>
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	bd38      	pop	{r3, r4, r5, pc}
 800a54c:	200003ec 	.word	0x200003ec

0800a550 <_lseek_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4d07      	ldr	r5, [pc, #28]	; (800a570 <_lseek_r+0x20>)
 800a554:	4604      	mov	r4, r0
 800a556:	4608      	mov	r0, r1
 800a558:	4611      	mov	r1, r2
 800a55a:	2200      	movs	r2, #0
 800a55c:	602a      	str	r2, [r5, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	f7f8 f9fa 	bl	8002958 <_lseek>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_lseek_r+0x1e>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_lseek_r+0x1e>
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	200003ec 	.word	0x200003ec

0800a574 <_read_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	4d07      	ldr	r5, [pc, #28]	; (800a594 <_read_r+0x20>)
 800a578:	4604      	mov	r4, r0
 800a57a:	4608      	mov	r0, r1
 800a57c:	4611      	mov	r1, r2
 800a57e:	2200      	movs	r2, #0
 800a580:	602a      	str	r2, [r5, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	f7f8 f988 	bl	8002898 <_read>
 800a588:	1c43      	adds	r3, r0, #1
 800a58a:	d102      	bne.n	800a592 <_read_r+0x1e>
 800a58c:	682b      	ldr	r3, [r5, #0]
 800a58e:	b103      	cbz	r3, 800a592 <_read_r+0x1e>
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	bd38      	pop	{r3, r4, r5, pc}
 800a594:	200003ec 	.word	0x200003ec

0800a598 <_init>:
 800a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59a:	bf00      	nop
 800a59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a59e:	bc08      	pop	{r3}
 800a5a0:	469e      	mov	lr, r3
 800a5a2:	4770      	bx	lr

0800a5a4 <_fini>:
 800a5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a6:	bf00      	nop
 800a5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5aa:	bc08      	pop	{r3}
 800a5ac:	469e      	mov	lr, r3
 800a5ae:	4770      	bx	lr
