
ece198.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acf0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800ae90  0800ae90  0001ae90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b384  0800b384  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800b384  0800b384  0001b384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b38c  0800b38c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b38c  0800b38c  0001b38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b390  0800b390  0001b390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800b394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000210  0800b5a4  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  0800b5a4  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a70  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292f  00000000  00000000  00032cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  000355e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00036668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fb9  00000000  00000000  000375e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016202  00000000  00000000  00051599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098cd6  00000000  00000000  0006779b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a70  00000000  00000000  001004c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ae78 	.word	0x0800ae78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	0800ae78 	.word	0x0800ae78

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9f5 	b.w	80010a4 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9aa 	b.w	80010a4 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	4604      	mov	r4, r0
 8000ddc:	468e      	mov	lr, r1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d14d      	bne.n	8000e7e <__udivmoddi4+0xaa>
 8000de2:	428a      	cmp	r2, r1
 8000de4:	4694      	mov	ip, r2
 8000de6:	d969      	bls.n	8000ebc <__udivmoddi4+0xe8>
 8000de8:	fab2 f282 	clz	r2, r2
 8000dec:	b152      	cbz	r2, 8000e04 <__udivmoddi4+0x30>
 8000dee:	fa01 f302 	lsl.w	r3, r1, r2
 8000df2:	f1c2 0120 	rsb	r1, r2, #32
 8000df6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000e02:	4094      	lsls	r4, r2
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	0c21      	lsrs	r1, r4, #16
 8000e0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e0e:	fa1f f78c 	uxth.w	r7, ip
 8000e12:	fb08 e316 	mls	r3, r8, r6, lr
 8000e16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1a:	fb06 f107 	mul.w	r1, r6, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x64>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2a:	f080 811f 	bcs.w	800106c <__udivmoddi4+0x298>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 811c 	bls.w	800106c <__udivmoddi4+0x298>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb00 f707 	mul.w	r7, r0, r7
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	d90a      	bls.n	8000e66 <__udivmoddi4+0x92>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	f080 810a 	bcs.w	8001070 <__udivmoddi4+0x29c>
 8000e5c:	42a7      	cmp	r7, r4
 8000e5e:	f240 8107 	bls.w	8001070 <__udivmoddi4+0x29c>
 8000e62:	4464      	add	r4, ip
 8000e64:	3802      	subs	r0, #2
 8000e66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6a:	1be4      	subs	r4, r4, r7
 8000e6c:	2600      	movs	r6, #0
 8000e6e:	b11d      	cbz	r5, 8000e78 <__udivmoddi4+0xa4>
 8000e70:	40d4      	lsrs	r4, r2
 8000e72:	2300      	movs	r3, #0
 8000e74:	e9c5 4300 	strd	r4, r3, [r5]
 8000e78:	4631      	mov	r1, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d909      	bls.n	8000e96 <__udivmoddi4+0xc2>
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	f000 80ef 	beq.w	8001066 <__udivmoddi4+0x292>
 8000e88:	2600      	movs	r6, #0
 8000e8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8e:	4630      	mov	r0, r6
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	fab3 f683 	clz	r6, r3
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d14a      	bne.n	8000f34 <__udivmoddi4+0x160>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0xd4>
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	f200 80f9 	bhi.w	800109a <__udivmoddi4+0x2c6>
 8000ea8:	1a84      	subs	r4, r0, r2
 8000eaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	469e      	mov	lr, r3
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d0e0      	beq.n	8000e78 <__udivmoddi4+0xa4>
 8000eb6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eba:	e7dd      	b.n	8000e78 <__udivmoddi4+0xa4>
 8000ebc:	b902      	cbnz	r2, 8000ec0 <__udivmoddi4+0xec>
 8000ebe:	deff      	udf	#255	; 0xff
 8000ec0:	fab2 f282 	clz	r2, r2
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	f040 8092 	bne.w	8000fee <__udivmoddi4+0x21a>
 8000eca:	eba1 010c 	sub.w	r1, r1, ip
 8000ece:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	2601      	movs	r6, #1
 8000ed8:	0c20      	lsrs	r0, r4, #16
 8000eda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ede:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee6:	fb0e f003 	mul.w	r0, lr, r3
 8000eea:	4288      	cmp	r0, r1
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x12c>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x12a>
 8000ef8:	4288      	cmp	r0, r1
 8000efa:	f200 80cb 	bhi.w	8001094 <__udivmoddi4+0x2c0>
 8000efe:	4643      	mov	r3, r8
 8000f00:	1a09      	subs	r1, r1, r0
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1110 	mls	r1, r7, r0, r1
 8000f0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f10:	fb0e fe00 	mul.w	lr, lr, r0
 8000f14:	45a6      	cmp	lr, r4
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x156>
 8000f18:	eb1c 0404 	adds.w	r4, ip, r4
 8000f1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f20:	d202      	bcs.n	8000f28 <__udivmoddi4+0x154>
 8000f22:	45a6      	cmp	lr, r4
 8000f24:	f200 80bb 	bhi.w	800109e <__udivmoddi4+0x2ca>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	eba4 040e 	sub.w	r4, r4, lr
 8000f2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f32:	e79c      	b.n	8000e6e <__udivmoddi4+0x9a>
 8000f34:	f1c6 0720 	rsb	r7, r6, #32
 8000f38:	40b3      	lsls	r3, r6
 8000f3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f42:	fa20 f407 	lsr.w	r4, r0, r7
 8000f46:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	40f9      	lsrs	r1, r7
 8000f4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f52:	fa00 f306 	lsl.w	r3, r0, r6
 8000f56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5a:	0c20      	lsrs	r0, r4, #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fb09 1118 	mls	r1, r9, r8, r1
 8000f64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f68:	fb08 f00e 	mul.w	r0, r8, lr
 8000f6c:	4288      	cmp	r0, r1
 8000f6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f72:	d90b      	bls.n	8000f8c <__udivmoddi4+0x1b8>
 8000f74:	eb1c 0101 	adds.w	r1, ip, r1
 8000f78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f7c:	f080 8088 	bcs.w	8001090 <__udivmoddi4+0x2bc>
 8000f80:	4288      	cmp	r0, r1
 8000f82:	f240 8085 	bls.w	8001090 <__udivmoddi4+0x2bc>
 8000f86:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1a09      	subs	r1, r1, r0
 8000f8e:	b2a4      	uxth	r4, r4
 8000f90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f94:	fb09 1110 	mls	r1, r9, r0, r1
 8000f98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa0:	458e      	cmp	lr, r1
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x1e2>
 8000fa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fac:	d26c      	bcs.n	8001088 <__udivmoddi4+0x2b4>
 8000fae:	458e      	cmp	lr, r1
 8000fb0:	d96a      	bls.n	8001088 <__udivmoddi4+0x2b4>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	4461      	add	r1, ip
 8000fb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fba:	fba0 9402 	umull	r9, r4, r0, r2
 8000fbe:	eba1 010e 	sub.w	r1, r1, lr
 8000fc2:	42a1      	cmp	r1, r4
 8000fc4:	46c8      	mov	r8, r9
 8000fc6:	46a6      	mov	lr, r4
 8000fc8:	d356      	bcc.n	8001078 <__udivmoddi4+0x2a4>
 8000fca:	d053      	beq.n	8001074 <__udivmoddi4+0x2a0>
 8000fcc:	b15d      	cbz	r5, 8000fe6 <__udivmoddi4+0x212>
 8000fce:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fda:	fa22 f306 	lsr.w	r3, r2, r6
 8000fde:	40f1      	lsrs	r1, r6
 8000fe0:	431f      	orrs	r7, r3
 8000fe2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fe6:	2600      	movs	r6, #0
 8000fe8:	4631      	mov	r1, r6
 8000fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fee:	f1c2 0320 	rsb	r3, r2, #32
 8000ff2:	40d8      	lsrs	r0, r3
 8000ff4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff8:	fa21 f303 	lsr.w	r3, r1, r3
 8000ffc:	4091      	lsls	r1, r2
 8000ffe:	4301      	orrs	r1, r0
 8001000:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001004:	fa1f fe8c 	uxth.w	lr, ip
 8001008:	fbb3 f0f7 	udiv	r0, r3, r7
 800100c:	fb07 3610 	mls	r6, r7, r0, r3
 8001010:	0c0b      	lsrs	r3, r1, #16
 8001012:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001016:	fb00 f60e 	mul.w	r6, r0, lr
 800101a:	429e      	cmp	r6, r3
 800101c:	fa04 f402 	lsl.w	r4, r4, r2
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x260>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f100 38ff 	add.w	r8, r0, #4294967295
 800102a:	d22f      	bcs.n	800108c <__udivmoddi4+0x2b8>
 800102c:	429e      	cmp	r6, r3
 800102e:	d92d      	bls.n	800108c <__udivmoddi4+0x2b8>
 8001030:	3802      	subs	r0, #2
 8001032:	4463      	add	r3, ip
 8001034:	1b9b      	subs	r3, r3, r6
 8001036:	b289      	uxth	r1, r1
 8001038:	fbb3 f6f7 	udiv	r6, r3, r7
 800103c:	fb07 3316 	mls	r3, r7, r6, r3
 8001040:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001044:	fb06 f30e 	mul.w	r3, r6, lr
 8001048:	428b      	cmp	r3, r1
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x28a>
 800104c:	eb1c 0101 	adds.w	r1, ip, r1
 8001050:	f106 38ff 	add.w	r8, r6, #4294967295
 8001054:	d216      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001056:	428b      	cmp	r3, r1
 8001058:	d914      	bls.n	8001084 <__udivmoddi4+0x2b0>
 800105a:	3e02      	subs	r6, #2
 800105c:	4461      	add	r1, ip
 800105e:	1ac9      	subs	r1, r1, r3
 8001060:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001064:	e738      	b.n	8000ed8 <__udivmoddi4+0x104>
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e705      	b.n	8000e78 <__udivmoddi4+0xa4>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e3      	b.n	8000e38 <__udivmoddi4+0x64>
 8001070:	4618      	mov	r0, r3
 8001072:	e6f8      	b.n	8000e66 <__udivmoddi4+0x92>
 8001074:	454b      	cmp	r3, r9
 8001076:	d2a9      	bcs.n	8000fcc <__udivmoddi4+0x1f8>
 8001078:	ebb9 0802 	subs.w	r8, r9, r2
 800107c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001080:	3801      	subs	r0, #1
 8001082:	e7a3      	b.n	8000fcc <__udivmoddi4+0x1f8>
 8001084:	4646      	mov	r6, r8
 8001086:	e7ea      	b.n	800105e <__udivmoddi4+0x28a>
 8001088:	4620      	mov	r0, r4
 800108a:	e794      	b.n	8000fb6 <__udivmoddi4+0x1e2>
 800108c:	4640      	mov	r0, r8
 800108e:	e7d1      	b.n	8001034 <__udivmoddi4+0x260>
 8001090:	46d0      	mov	r8, sl
 8001092:	e77b      	b.n	8000f8c <__udivmoddi4+0x1b8>
 8001094:	3b02      	subs	r3, #2
 8001096:	4461      	add	r1, ip
 8001098:	e732      	b.n	8000f00 <__udivmoddi4+0x12c>
 800109a:	4630      	mov	r0, r6
 800109c:	e709      	b.n	8000eb2 <__udivmoddi4+0xde>
 800109e:	4464      	add	r4, ip
 80010a0:	3802      	subs	r0, #2
 80010a2:	e742      	b.n	8000f2a <__udivmoddi4+0x156>

080010a4 <__aeabi_idiv0>:
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2319      	movs	r3, #25
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	463b      	mov	r3, r7
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2301      	movs	r3, #1
 80010be:	2288      	movs	r2, #136	; 0x88
 80010c0:	21ec      	movs	r1, #236	; 0xec
 80010c2:	4857      	ldr	r0, [pc, #348]	; (8001220 <TrimRead+0x178>)
 80010c4:	f002 ff0a 	bl	8003edc <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010c8:	463b      	mov	r3, r7
 80010ca:	3319      	adds	r3, #25
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	9202      	str	r2, [sp, #8]
 80010d2:	2207      	movs	r2, #7
 80010d4:	9201      	str	r2, [sp, #4]
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	22e1      	movs	r2, #225	; 0xe1
 80010dc:	21ec      	movs	r1, #236	; 0xec
 80010de:	4850      	ldr	r0, [pc, #320]	; (8001220 <TrimRead+0x178>)
 80010e0:	f002 fefc 	bl	8003edc <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	783b      	ldrb	r3, [r7, #0]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <TrimRead+0x17c>)
 80010f6:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b48      	ldr	r3, [pc, #288]	; (8001228 <TrimRead+0x180>)
 8001108:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800110a:	797b      	ldrb	r3, [r7, #5]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	b21b      	sxth	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b21a      	sxth	r2, r3
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <TrimRead+0x184>)
 800111a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	797b      	ldrb	r3, [r7, #5]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21b      	sxth	r3, r3
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b40      	ldr	r3, [pc, #256]	; (8001230 <TrimRead+0x188>)
 800112e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001130:	7a7b      	ldrb	r3, [r7, #9]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21a      	sxth	r2, r3
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <TrimRead+0x18c>)
 8001140:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001142:	7afb      	ldrb	r3, [r7, #11]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	7abb      	ldrb	r3, [r7, #10]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b39      	ldr	r3, [pc, #228]	; (8001238 <TrimRead+0x190>)
 8001152:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001154:	7b7b      	ldrb	r3, [r7, #13]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	7b3b      	ldrb	r3, [r7, #12]
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <TrimRead+0x194>)
 8001164:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b21a      	sxth	r2, r3
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b32      	ldr	r3, [pc, #200]	; (8001240 <TrimRead+0x198>)
 8001176:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001178:	7c7b      	ldrb	r3, [r7, #17]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b21a      	sxth	r2, r3
 800117e:	7c3b      	ldrb	r3, [r7, #16]
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21a      	sxth	r2, r3
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <TrimRead+0x19c>)
 8001188:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 800118a:	7cfb      	ldrb	r3, [r7, #19]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21a      	sxth	r2, r3
 8001190:	7cbb      	ldrb	r3, [r7, #18]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21a      	sxth	r2, r3
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <TrimRead+0x1a0>)
 800119a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 800119c:	7d7b      	ldrb	r3, [r7, #21]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7d3b      	ldrb	r3, [r7, #20]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <TrimRead+0x1a4>)
 80011ac:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	7dbb      	ldrb	r3, [r7, #22]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <TrimRead+0x1a8>)
 80011be:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011c0:	7e3b      	ldrb	r3, [r7, #24]
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <TrimRead+0x1ac>)
 80011c6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011c8:	7ebb      	ldrb	r3, [r7, #26]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	7e7b      	ldrb	r3, [r7, #25]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <TrimRead+0x1b0>)
 80011d8:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80011da:	7efb      	ldrb	r3, [r7, #27]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <TrimRead+0x1b4>)
 80011e0:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80011e2:	7f3b      	ldrb	r3, [r7, #28]
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	7f7b      	ldrb	r3, [r7, #29]
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <TrimRead+0x1b8>)
 80011f8:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80011fa:	7fbb      	ldrb	r3, [r7, #30]
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	b21a      	sxth	r2, r3
 8001200:	7f7b      	ldrb	r3, [r7, #29]
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	b2db      	uxtb	r3, r3
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <TrimRead+0x1bc>)
 800120e:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001210:	7ffb      	ldrb	r3, [r7, #31]
 8001212:	b21a      	sxth	r2, r3
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <TrimRead+0x1c0>)
 8001216:	801a      	strh	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200002ac 	.word	0x200002ac
 8001224:	2000023c 	.word	0x2000023c
 8001228:	20000244 	.word	0x20000244
 800122c:	20000246 	.word	0x20000246
 8001230:	2000023e 	.word	0x2000023e
 8001234:	20000248 	.word	0x20000248
 8001238:	2000024a 	.word	0x2000024a
 800123c:	2000024c 	.word	0x2000024c
 8001240:	2000024e 	.word	0x2000024e
 8001244:	20000250 	.word	0x20000250
 8001248:	20000252 	.word	0x20000252
 800124c:	20000254 	.word	0x20000254
 8001250:	20000256 	.word	0x20000256
 8001254:	20000240 	.word	0x20000240
 8001258:	20000258 	.word	0x20000258
 800125c:	20000242 	.word	0x20000242
 8001260:	2000025a 	.word	0x2000025a
 8001264:	2000025c 	.word	0x2000025c
 8001268:	2000025e 	.word	0x2000025e

0800126c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af04      	add	r7, sp, #16
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	4611      	mov	r1, r2
 8001278:	461a      	mov	r2, r3
 800127a:	4623      	mov	r3, r4
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	4603      	mov	r3, r0
 8001280:	71bb      	strb	r3, [r7, #6]
 8001282:	460b      	mov	r3, r1
 8001284:	717b      	strb	r3, [r7, #5]
 8001286:	4613      	mov	r3, r2
 8001288:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 800128a:	f7ff ff0d 	bl	80010a8 <TrimRead>


	uint8_t datatowrite = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001296:	23b6      	movs	r3, #182	; 0xb6
 8001298:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 030f 	add.w	r3, r7, #15
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	22e0      	movs	r2, #224	; 0xe0
 80012ae:	21ec      	movs	r1, #236	; 0xec
 80012b0:	4858      	ldr	r0, [pc, #352]	; (8001414 <BME280_Config+0x1a8>)
 80012b2:	f002 fd19 	bl	8003ce8 <HAL_I2C_Mem_Write>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <BME280_Config+0x56>
	{
		return -1;
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	e0a3      	b.n	800140a <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80012c2:	2064      	movs	r0, #100	; 0x64
 80012c4:	f001 fc2c 	bl	8002b20 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80012c8:	797b      	ldrb	r3, [r7, #5]
 80012ca:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d0:	9302      	str	r3, [sp, #8]
 80012d2:	2301      	movs	r3, #1
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	f107 030f 	add.w	r3, r7, #15
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2301      	movs	r3, #1
 80012de:	22f2      	movs	r2, #242	; 0xf2
 80012e0:	21ec      	movs	r1, #236	; 0xec
 80012e2:	484c      	ldr	r0, [pc, #304]	; (8001414 <BME280_Config+0x1a8>)
 80012e4:	f002 fd00 	bl	8003ce8 <HAL_I2C_Mem_Write>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <BME280_Config+0x88>
	{
		return -1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e08a      	b.n	800140a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012f4:	2064      	movs	r0, #100	; 0x64
 80012f6:	f001 fc13 	bl	8002b20 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	f107 030e 	add.w	r3, r7, #14
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	22f2      	movs	r2, #242	; 0xf2
 800130e:	21ec      	movs	r1, #236	; 0xec
 8001310:	4840      	ldr	r0, [pc, #256]	; (8001414 <BME280_Config+0x1a8>)
 8001312:	f002 fde3 	bl	8003edc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001316:	7bba      	ldrb	r2, [r7, #14]
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	429a      	cmp	r2, r3
 800131c:	d002      	beq.n	8001324 <BME280_Config+0xb8>
	{
		return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e072      	b.n	800140a <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001324:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001328:	015b      	lsls	r3, r3, #5
 800132a:	b25a      	sxtb	r2, r3
 800132c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	b25b      	sxtb	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b25b      	sxtb	r3, r3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800133c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f107 030f 	add.w	r3, r7, #15
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	22f5      	movs	r2, #245	; 0xf5
 8001350:	21ec      	movs	r1, #236	; 0xec
 8001352:	4830      	ldr	r0, [pc, #192]	; (8001414 <BME280_Config+0x1a8>)
 8001354:	f002 fcc8 	bl	8003ce8 <HAL_I2C_Mem_Write>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d002      	beq.n	8001364 <BME280_Config+0xf8>
	{
		return -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e052      	b.n	800140a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001364:	2064      	movs	r0, #100	; 0x64
 8001366:	f001 fbdb 	bl	8002b20 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	2301      	movs	r3, #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	f107 030e 	add.w	r3, r7, #14
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	22f5      	movs	r2, #245	; 0xf5
 800137e:	21ec      	movs	r1, #236	; 0xec
 8001380:	4824      	ldr	r0, [pc, #144]	; (8001414 <BME280_Config+0x1a8>)
 8001382:	f002 fdab 	bl	8003edc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001386:	7bba      	ldrb	r2, [r7, #14]
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	429a      	cmp	r2, r3
 800138c:	d002      	beq.n	8001394 <BME280_Config+0x128>
	{
		return -1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	e03a      	b.n	800140a <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	015b      	lsls	r3, r3, #5
 8001398:	b25a      	sxtb	r2, r3
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b25a      	sxtb	r2, r3
 80013a4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	2301      	movs	r3, #1
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	f107 030f 	add.w	r3, r7, #15
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2301      	movs	r3, #1
 80013c2:	22f4      	movs	r2, #244	; 0xf4
 80013c4:	21ec      	movs	r1, #236	; 0xec
 80013c6:	4813      	ldr	r0, [pc, #76]	; (8001414 <BME280_Config+0x1a8>)
 80013c8:	f002 fc8e 	bl	8003ce8 <HAL_I2C_Mem_Write>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <BME280_Config+0x16c>
	{
		return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e018      	b.n	800140a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013d8:	2064      	movs	r0, #100	; 0x64
 80013da:	f001 fba1 	bl	8002b20 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2301      	movs	r3, #1
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	f107 030e 	add.w	r3, r7, #14
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	22f4      	movs	r2, #244	; 0xf4
 80013f2:	21ec      	movs	r1, #236	; 0xec
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <BME280_Config+0x1a8>)
 80013f6:	f002 fd71 	bl	8003edc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013fa:	7bba      	ldrb	r2, [r7, #14]
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d002      	beq.n	8001408 <BME280_Config+0x19c>
	{
		return -1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e000      	b.n	800140a <BME280_Config+0x19e>
	}

	return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	bf00      	nop
 8001414:	200002ac 	.word	0x200002ac

08001418 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	2301      	movs	r3, #1
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <BMEReadRaw+0x8c>)
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2301      	movs	r3, #1
 800142e:	22d0      	movs	r2, #208	; 0xd0
 8001430:	21ec      	movs	r1, #236	; 0xec
 8001432:	481d      	ldr	r0, [pc, #116]	; (80014a8 <BMEReadRaw+0x90>)
 8001434:	f002 fd52 	bl	8003edc <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <BMEReadRaw+0x8c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b60      	cmp	r3, #96	; 0x60
 800143e:	d12a      	bne.n	8001496 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	2308      	movs	r3, #8
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	463b      	mov	r3, r7
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	22f7      	movs	r2, #247	; 0xf7
 8001452:	21ec      	movs	r1, #236	; 0xec
 8001454:	4814      	ldr	r0, [pc, #80]	; (80014a8 <BMEReadRaw+0x90>)
 8001456:	f002 fd41 	bl	8003edc <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800145a:	783b      	ldrb	r3, [r7, #0]
 800145c:	031a      	lsls	r2, r3, #12
 800145e:	787b      	ldrb	r3, [r7, #1]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4313      	orrs	r3, r2
 8001464:	78ba      	ldrb	r2, [r7, #2]
 8001466:	0912      	lsrs	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	4313      	orrs	r3, r2
 800146c:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <BMEReadRaw+0x94>)
 800146e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	031a      	lsls	r2, r3, #12
 8001474:	793b      	ldrb	r3, [r7, #4]
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	4313      	orrs	r3, r2
 800147a:	797a      	ldrb	r2, [r7, #5]
 800147c:	0912      	lsrs	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	4313      	orrs	r3, r2
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <BMEReadRaw+0x98>)
 8001484:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	4313      	orrs	r3, r2
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <BMEReadRaw+0x9c>)
 8001490:	6013      	str	r3, [r2, #0]

		return 0;
 8001492:	2300      	movs	r3, #0
 8001494:	e001      	b.n	800149a <BMEReadRaw+0x82>
	}

	else return -1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000022c 	.word	0x2000022c
 80014a8:	200002ac 	.word	0x200002ac
 80014ac:	20000234 	.word	0x20000234
 80014b0:	20000230 	.word	0x20000230
 80014b4:	20000238 	.word	0x20000238

080014b8 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	10da      	asrs	r2, r3, #3
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <BME280_compensate_T_int32+0x74>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	4a18      	ldr	r2, [pc, #96]	; (8001530 <BME280_compensate_T_int32+0x78>)
 80014ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	12db      	asrs	r3, r3, #11
 80014d8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	111b      	asrs	r3, r3, #4
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <BME280_compensate_T_int32+0x74>)
 80014e0:	8812      	ldrh	r2, [r2, #0]
 80014e2:	1a9b      	subs	r3, r3, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	1112      	asrs	r2, r2, #4
 80014e8:	4910      	ldr	r1, [pc, #64]	; (800152c <BME280_compensate_T_int32+0x74>)
 80014ea:	8809      	ldrh	r1, [r1, #0]
 80014ec:	1a52      	subs	r2, r2, r1
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	131b      	asrs	r3, r3, #12
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <BME280_compensate_T_int32+0x7c>)
 80014f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	139b      	asrs	r3, r3, #14
 8001500:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4413      	add	r3, r2
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <BME280_compensate_T_int32+0x80>)
 800150a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <BME280_compensate_T_int32+0x80>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	3380      	adds	r3, #128	; 0x80
 8001518:	121b      	asrs	r3, r3, #8
 800151a:	60fb      	str	r3, [r7, #12]
	return T;
 800151c:	68fb      	ldr	r3, [r7, #12]
}
 800151e:	4618      	mov	r0, r3
 8001520:	371c      	adds	r7, #28
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	2000023c 	.word	0x2000023c
 8001530:	20000244 	.word	0x20000244
 8001534:	20000246 	.word	0x20000246
 8001538:	20000260 	.word	0x20000260

0800153c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800153c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001540:	b0ca      	sub	sp, #296	; 0x128
 8001542:	af00      	add	r7, sp, #0
 8001544:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001548:	4baf      	ldr	r3, [pc, #700]	; (8001808 <BME280_compensate_P_int64+0x2cc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	17da      	asrs	r2, r3, #31
 800154e:	461c      	mov	r4, r3
 8001550:	4615      	mov	r5, r2
 8001552:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001556:	f145 3bff 	adc.w	fp, r5, #4294967295
 800155a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800155e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001562:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001566:	fb03 f102 	mul.w	r1, r3, r2
 800156a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800156e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	18ca      	adds	r2, r1, r3
 8001578:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800157c:	fba3 8903 	umull	r8, r9, r3, r3
 8001580:	eb02 0309 	add.w	r3, r2, r9
 8001584:	4699      	mov	r9, r3
 8001586:	4ba1      	ldr	r3, [pc, #644]	; (800180c <BME280_compensate_P_int64+0x2d0>)
 8001588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158c:	b21b      	sxth	r3, r3
 800158e:	17da      	asrs	r2, r3, #31
 8001590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001594:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001598:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800159c:	4603      	mov	r3, r0
 800159e:	fb03 f209 	mul.w	r2, r3, r9
 80015a2:	460b      	mov	r3, r1
 80015a4:	fb08 f303 	mul.w	r3, r8, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	4602      	mov	r2, r0
 80015ac:	fba8 1202 	umull	r1, r2, r8, r2
 80015b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015b4:	460a      	mov	r2, r1
 80015b6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015be:	4413      	add	r3, r2
 80015c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015c4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015c8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015cc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015d0:	4b8f      	ldr	r3, [pc, #572]	; (8001810 <BME280_compensate_P_int64+0x2d4>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	17da      	asrs	r2, r3, #31
 80015da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015de:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80015e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015e6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80015ea:	462a      	mov	r2, r5
 80015ec:	fb02 f203 	mul.w	r2, r2, r3
 80015f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015f4:	4621      	mov	r1, r4
 80015f6:	fb01 f303 	mul.w	r3, r1, r3
 80015fa:	441a      	add	r2, r3
 80015fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001600:	4621      	mov	r1, r4
 8001602:	fba3 1301 	umull	r1, r3, r3, r1
 8001606:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800160a:	460b      	mov	r3, r1
 800160c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001614:	18d3      	adds	r3, r2, r3
 8001616:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800161a:	f04f 0000 	mov.w	r0, #0
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001626:	462b      	mov	r3, r5
 8001628:	0459      	lsls	r1, r3, #17
 800162a:	4623      	mov	r3, r4
 800162c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001630:	4623      	mov	r3, r4
 8001632:	0458      	lsls	r0, r3, #17
 8001634:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001638:	1814      	adds	r4, r2, r0
 800163a:	643c      	str	r4, [r7, #64]	; 0x40
 800163c:	414b      	adcs	r3, r1
 800163e:	647b      	str	r3, [r7, #68]	; 0x44
 8001640:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001644:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001648:	4b72      	ldr	r3, [pc, #456]	; (8001814 <BME280_compensate_P_int64+0x2d8>)
 800164a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164e:	b21b      	sxth	r3, r3
 8001650:	17da      	asrs	r2, r3, #31
 8001652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001656:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800165a:	f04f 0000 	mov.w	r0, #0
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001666:	00d9      	lsls	r1, r3, #3
 8001668:	2000      	movs	r0, #0
 800166a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800166e:	1814      	adds	r4, r2, r0
 8001670:	63bc      	str	r4, [r7, #56]	; 0x38
 8001672:	414b      	adcs	r3, r1
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001676:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800167a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800167e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001682:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001686:	fb03 f102 	mul.w	r1, r3, r2
 800168a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800168e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	18ca      	adds	r2, r1, r3
 8001698:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800169c:	fba3 1303 	umull	r1, r3, r3, r3
 80016a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016a4:	460b      	mov	r3, r1
 80016a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80016aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016ae:	18d3      	adds	r3, r2, r3
 80016b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016b4:	4b58      	ldr	r3, [pc, #352]	; (8001818 <BME280_compensate_P_int64+0x2dc>)
 80016b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	17da      	asrs	r2, r3, #31
 80016be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016c6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016ca:	462b      	mov	r3, r5
 80016cc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016d0:	4642      	mov	r2, r8
 80016d2:	fb02 f203 	mul.w	r2, r2, r3
 80016d6:	464b      	mov	r3, r9
 80016d8:	4621      	mov	r1, r4
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4413      	add	r3, r2
 80016e0:	4622      	mov	r2, r4
 80016e2:	4641      	mov	r1, r8
 80016e4:	fba2 1201 	umull	r1, r2, r2, r1
 80016e8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80016ec:	460a      	mov	r2, r1
 80016ee:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80016f2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80016f6:	4413      	add	r3, r2
 80016f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016fc:	f04f 0000 	mov.w	r0, #0
 8001700:	f04f 0100 	mov.w	r1, #0
 8001704:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001708:	4623      	mov	r3, r4
 800170a:	0a18      	lsrs	r0, r3, #8
 800170c:	462b      	mov	r3, r5
 800170e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001712:	462b      	mov	r3, r5
 8001714:	1219      	asrs	r1, r3, #8
 8001716:	4b41      	ldr	r3, [pc, #260]	; (800181c <BME280_compensate_P_int64+0x2e0>)
 8001718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171c:	b21b      	sxth	r3, r3
 800171e:	17da      	asrs	r2, r3, #31
 8001720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001724:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001728:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800172c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001730:	464a      	mov	r2, r9
 8001732:	fb02 f203 	mul.w	r2, r2, r3
 8001736:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800173a:	4644      	mov	r4, r8
 800173c:	fb04 f303 	mul.w	r3, r4, r3
 8001740:	441a      	add	r2, r3
 8001742:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001746:	4644      	mov	r4, r8
 8001748:	fba3 4304 	umull	r4, r3, r3, r4
 800174c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001750:	4623      	mov	r3, r4
 8001752:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001756:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800175a:	18d3      	adds	r3, r2, r3
 800175c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800176c:	464c      	mov	r4, r9
 800176e:	0323      	lsls	r3, r4, #12
 8001770:	4644      	mov	r4, r8
 8001772:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001776:	4644      	mov	r4, r8
 8001778:	0322      	lsls	r2, r4, #12
 800177a:	1884      	adds	r4, r0, r2
 800177c:	633c      	str	r4, [r7, #48]	; 0x30
 800177e:	eb41 0303 	adc.w	r3, r1, r3
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
 8001784:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001788:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800178c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001790:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001794:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001798:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <BME280_compensate_P_int64+0x2e4>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	2200      	movs	r2, #0
 80017a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017ac:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017b0:	462b      	mov	r3, r5
 80017b2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017b6:	4642      	mov	r2, r8
 80017b8:	fb02 f203 	mul.w	r2, r2, r3
 80017bc:	464b      	mov	r3, r9
 80017be:	4621      	mov	r1, r4
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	4622      	mov	r2, r4
 80017c8:	4641      	mov	r1, r8
 80017ca:	fba2 1201 	umull	r1, r2, r2, r1
 80017ce:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017d2:	460a      	mov	r2, r1
 80017d4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017d8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017dc:	4413      	add	r3, r2
 80017de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80017ee:	4629      	mov	r1, r5
 80017f0:	104a      	asrs	r2, r1, #1
 80017f2:	4629      	mov	r1, r5
 80017f4:	17cb      	asrs	r3, r1, #31
 80017f6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80017fa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017fe:	4313      	orrs	r3, r2
 8001800:	d110      	bne.n	8001824 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001802:	2300      	movs	r3, #0
 8001804:	e154      	b.n	8001ab0 <BME280_compensate_P_int64+0x574>
 8001806:	bf00      	nop
 8001808:	20000260 	.word	0x20000260
 800180c:	20000250 	.word	0x20000250
 8001810:	2000024e 	.word	0x2000024e
 8001814:	2000024c 	.word	0x2000024c
 8001818:	2000024a 	.word	0x2000024a
 800181c:	20000248 	.word	0x20000248
 8001820:	2000023e 	.word	0x2000023e
	}
	p = 1048576-adc_P;
 8001824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001828:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800182c:	17da      	asrs	r2, r3, #31
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001830:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001832:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001836:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800183a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800183e:	105b      	asrs	r3, r3, #1
 8001840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001844:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001848:	07db      	lsls	r3, r3, #31
 800184a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800184e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001852:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001856:	4621      	mov	r1, r4
 8001858:	1a89      	subs	r1, r1, r2
 800185a:	67b9      	str	r1, [r7, #120]	; 0x78
 800185c:	4629      	mov	r1, r5
 800185e:	eb61 0303 	sbc.w	r3, r1, r3
 8001862:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001864:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001868:	4622      	mov	r2, r4
 800186a:	462b      	mov	r3, r5
 800186c:	1891      	adds	r1, r2, r2
 800186e:	6239      	str	r1, [r7, #32]
 8001870:	415b      	adcs	r3, r3
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
 8001874:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001878:	4621      	mov	r1, r4
 800187a:	1851      	adds	r1, r2, r1
 800187c:	61b9      	str	r1, [r7, #24]
 800187e:	4629      	mov	r1, r5
 8001880:	414b      	adcs	r3, r1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001890:	4649      	mov	r1, r9
 8001892:	018b      	lsls	r3, r1, #6
 8001894:	4641      	mov	r1, r8
 8001896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800189a:	4641      	mov	r1, r8
 800189c:	018a      	lsls	r2, r1, #6
 800189e:	4641      	mov	r1, r8
 80018a0:	1889      	adds	r1, r1, r2
 80018a2:	6139      	str	r1, [r7, #16]
 80018a4:	4649      	mov	r1, r9
 80018a6:	eb43 0101 	adc.w	r1, r3, r1
 80018aa:	6179      	str	r1, [r7, #20]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018b8:	4649      	mov	r1, r9
 80018ba:	008b      	lsls	r3, r1, #2
 80018bc:	4641      	mov	r1, r8
 80018be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018c2:	4641      	mov	r1, r8
 80018c4:	008a      	lsls	r2, r1, #2
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	4622      	mov	r2, r4
 80018ce:	189b      	adds	r3, r3, r2
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	460b      	mov	r3, r1
 80018d4:	462a      	mov	r2, r5
 80018d6:	eb42 0303 	adc.w	r3, r2, r3
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018e8:	4649      	mov	r1, r9
 80018ea:	008b      	lsls	r3, r1, #2
 80018ec:	4641      	mov	r1, r8
 80018ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018f2:	4641      	mov	r1, r8
 80018f4:	008a      	lsls	r2, r1, #2
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	4603      	mov	r3, r0
 80018fc:	4622      	mov	r2, r4
 80018fe:	189b      	adds	r3, r3, r2
 8001900:	673b      	str	r3, [r7, #112]	; 0x70
 8001902:	462b      	mov	r3, r5
 8001904:	460a      	mov	r2, r1
 8001906:	eb42 0303 	adc.w	r3, r2, r3
 800190a:	677b      	str	r3, [r7, #116]	; 0x74
 800190c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001910:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001914:	f7ff f9c0 	bl	8000c98 <__aeabi_ldivmod>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001920:	4b66      	ldr	r3, [pc, #408]	; (8001abc <BME280_compensate_P_int64+0x580>)
 8001922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001926:	b21b      	sxth	r3, r3
 8001928:	17da      	asrs	r2, r3, #31
 800192a:	66bb      	str	r3, [r7, #104]	; 0x68
 800192c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800192e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001932:	f04f 0000 	mov.w	r0, #0
 8001936:	f04f 0100 	mov.w	r1, #0
 800193a:	0b50      	lsrs	r0, r2, #13
 800193c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001940:	1359      	asrs	r1, r3, #13
 8001942:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001946:	462b      	mov	r3, r5
 8001948:	fb00 f203 	mul.w	r2, r0, r3
 800194c:	4623      	mov	r3, r4
 800194e:	fb03 f301 	mul.w	r3, r3, r1
 8001952:	4413      	add	r3, r2
 8001954:	4622      	mov	r2, r4
 8001956:	fba2 1200 	umull	r1, r2, r2, r0
 800195a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800195e:	460a      	mov	r2, r1
 8001960:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001964:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001968:	4413      	add	r3, r2
 800196a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800196e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001972:	f04f 0000 	mov.w	r0, #0
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	0b50      	lsrs	r0, r2, #13
 800197c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001980:	1359      	asrs	r1, r3, #13
 8001982:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001986:	462b      	mov	r3, r5
 8001988:	fb00 f203 	mul.w	r2, r0, r3
 800198c:	4623      	mov	r3, r4
 800198e:	fb03 f301 	mul.w	r3, r3, r1
 8001992:	4413      	add	r3, r2
 8001994:	4622      	mov	r2, r4
 8001996:	fba2 1200 	umull	r1, r2, r2, r0
 800199a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800199e:	460a      	mov	r2, r1
 80019a0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80019a4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019a8:	4413      	add	r3, r2
 80019aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019ba:	4621      	mov	r1, r4
 80019bc:	0e4a      	lsrs	r2, r1, #25
 80019be:	4629      	mov	r1, r5
 80019c0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019c4:	4629      	mov	r1, r5
 80019c6:	164b      	asrs	r3, r1, #25
 80019c8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019cc:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <BME280_compensate_P_int64+0x584>)
 80019ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	17da      	asrs	r2, r3, #31
 80019d6:	663b      	str	r3, [r7, #96]	; 0x60
 80019d8:	667a      	str	r2, [r7, #100]	; 0x64
 80019da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019de:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019e2:	462a      	mov	r2, r5
 80019e4:	fb02 f203 	mul.w	r2, r2, r3
 80019e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019ec:	4621      	mov	r1, r4
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80019f8:	4621      	mov	r1, r4
 80019fa:	fba2 1201 	umull	r1, r2, r2, r1
 80019fe:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a02:	460a      	mov	r2, r1
 8001a04:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a08:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a1e:	4621      	mov	r1, r4
 8001a20:	0cca      	lsrs	r2, r1, #19
 8001a22:	4629      	mov	r1, r5
 8001a24:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a28:	4629      	mov	r1, r5
 8001a2a:	14cb      	asrs	r3, r1, #19
 8001a2c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a30:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a34:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a38:	1884      	adds	r4, r0, r2
 8001a3a:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a3c:	eb41 0303 	adc.w	r3, r1, r3
 8001a40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a42:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a46:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	1889      	adds	r1, r1, r2
 8001a4e:	6539      	str	r1, [r7, #80]	; 0x50
 8001a50:	4629      	mov	r1, r5
 8001a52:	eb43 0101 	adc.w	r1, r3, r1
 8001a56:	6579      	str	r1, [r7, #84]	; 0x54
 8001a58:	f04f 0000 	mov.w	r0, #0
 8001a5c:	f04f 0100 	mov.w	r1, #0
 8001a60:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a64:	4623      	mov	r3, r4
 8001a66:	0a18      	lsrs	r0, r3, #8
 8001a68:	462b      	mov	r3, r5
 8001a6a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a6e:	462b      	mov	r3, r5
 8001a70:	1219      	asrs	r1, r3, #8
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <BME280_compensate_P_int64+0x588>)
 8001a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	17da      	asrs	r2, r3, #31
 8001a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a7e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001a8c:	464c      	mov	r4, r9
 8001a8e:	0123      	lsls	r3, r4, #4
 8001a90:	4644      	mov	r4, r8
 8001a92:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a96:	4644      	mov	r4, r8
 8001a98:	0122      	lsls	r2, r4, #4
 8001a9a:	1884      	adds	r4, r0, r2
 8001a9c:	603c      	str	r4, [r7, #0]
 8001a9e:	eb41 0303 	adc.w	r3, r1, r3
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001aa8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001aac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001abc:	20000256 	.word	0x20000256
 8001ac0:	20000254 	.word	0x20000254
 8001ac4:	20000252 	.word	0x20000252

08001ac8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <bme280_compensate_H_int32+0xbc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001ad8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	039a      	lsls	r2, r3, #14
 8001ade:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <bme280_compensate_H_int32+0xc0>)
 8001ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae4:	051b      	lsls	r3, r3, #20
 8001ae6:	1ad2      	subs	r2, r2, r3
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <bme280_compensate_H_int32+0xc4>)
 8001aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aee:	4619      	mov	r1, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001af8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001afc:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001afe:	4a24      	ldr	r2, [pc, #144]	; (8001b90 <bme280_compensate_H_int32+0xc8>)
 8001b00:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b04:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b0c:	1292      	asrs	r2, r2, #10
 8001b0e:	4921      	ldr	r1, [pc, #132]	; (8001b94 <bme280_compensate_H_int32+0xcc>)
 8001b10:	8809      	ldrh	r1, [r1, #0]
 8001b12:	4608      	mov	r0, r1
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	fb00 f101 	mul.w	r1, r0, r1
 8001b1a:	12c9      	asrs	r1, r1, #11
 8001b1c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b20:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b24:	1292      	asrs	r2, r2, #10
 8001b26:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b2a:	491b      	ldr	r1, [pc, #108]	; (8001b98 <bme280_compensate_H_int32+0xd0>)
 8001b2c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b30:	fb01 f202 	mul.w	r2, r1, r2
 8001b34:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b38:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	13db      	asrs	r3, r3, #15
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	13d2      	asrs	r2, r2, #15
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001b4e:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <bme280_compensate_H_int32+0xd4>)
 8001b50:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001b56:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b64:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b6c:	bfa8      	it	ge
 8001b6e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b72:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	131b      	asrs	r3, r3, #12
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	20000260 	.word	0x20000260
 8001b88:	2000025a 	.word	0x2000025a
 8001b8c:	2000025c 	.word	0x2000025c
 8001b90:	2000025e 	.word	0x2000025e
 8001b94:	20000242 	.word	0x20000242
 8001b98:	20000258 	.word	0x20000258
 8001b9c:	20000240 	.word	0x20000240

08001ba0 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001ba4:	f7ff fc38 	bl	8001418 <BMEReadRaw>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d163      	bne.n	8001c76 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001bae:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <BME280_Measure+0xf4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bb6:	d104      	bne.n	8001bc2 <BME280_Measure+0x22>
 8001bb8:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <BME280_Measure+0xf8>)
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e016      	b.n	8001bf0 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001bc2:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <BME280_Measure+0xf4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fc76 	bl	80014b8 <BME280_compensate_T_int32>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fcb0 	bl	8000534 <__aeabi_i2d>
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <BME280_Measure+0xfc>)
 8001bda:	f7fe fe3f 	bl	800085c <__aeabi_ddiv>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7ff f807 	bl	8000bf8 <__aeabi_d2f>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4a2a      	ldr	r2, [pc, #168]	; (8001c98 <BME280_Measure+0xf8>)
 8001bee:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <BME280_Measure+0x100>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bf8:	d104      	bne.n	8001c04 <BME280_Measure+0x64>
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <BME280_Measure+0x104>)
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	e016      	b.n	8001c32 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001c04:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <BME280_Measure+0x100>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fc97 	bl	800153c <BME280_compensate_P_int64>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc7f 	bl	8000514 <__aeabi_ui2d>
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <BME280_Measure+0x108>)
 8001c1c:	f7fe fe1e 	bl	800085c <__aeabi_ddiv>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7fe ffe6 	bl	8000bf8 <__aeabi_d2f>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <BME280_Measure+0x104>)
 8001c30:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <BME280_Measure+0x10c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c3a:	d104      	bne.n	8001c46 <BME280_Measure+0xa6>
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <BME280_Measure+0x110>)
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001c44:	e023      	b.n	8001c8e <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <BME280_Measure+0x10c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff3c 	bl	8001ac8 <bme280_compensate_H_int32>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc5e 	bl	8000514 <__aeabi_ui2d>
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <BME280_Measure+0x114>)
 8001c5e:	f7fe fdfd 	bl	800085c <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ffc5 	bl	8000bf8 <__aeabi_d2f>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <BME280_Measure+0x110>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	e00b      	b.n	8001c8e <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <BME280_Measure+0x110>)
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <BME280_Measure+0x110>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <BME280_Measure+0x104>)
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <BME280_Measure+0x104>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <BME280_Measure+0xf8>)
 8001c8c:	6013      	str	r3, [r2, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000230 	.word	0x20000230
 8001c98:	200005d0 	.word	0x200005d0
 8001c9c:	40590000 	.word	0x40590000
 8001ca0:	20000234 	.word	0x20000234
 8001ca4:	200005d4 	.word	0x200005d4
 8001ca8:	40700000 	.word	0x40700000
 8001cac:	20000238 	.word	0x20000238
 8001cb0:	200005d8 	.word	0x200005d8
 8001cb4:	40900000 	.word	0x40900000

08001cb8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f023 030f 	bic.w	r3, r3, #15
 8001cc8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	f043 030c 	orr.w	r3, r3, #12
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001ce4:	7bbb      	ldrb	r3, [r7, #14]
 8001ce6:	f043 030c 	orr.w	r3, r3, #12
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001cee:	7bbb      	ldrb	r3, [r7, #14]
 8001cf0:	f043 0308 	orr.w	r3, r3, #8
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cf8:	f107 0208 	add.w	r2, r7, #8
 8001cfc:	2364      	movs	r3, #100	; 0x64
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2304      	movs	r3, #4
 8001d02:	214e      	movs	r1, #78	; 0x4e
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <lcd_send_cmd+0x5c>)
 8001d06:	f001 fef1 	bl	8003aec <HAL_I2C_Master_Transmit>
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200002ac 	.word	0x200002ac

08001d18 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f023 030f 	bic.w	r3, r3, #15
 8001d28:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	f043 030d 	orr.w	r3, r3, #13
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	f043 0309 	orr.w	r3, r3, #9
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001d44:	7bbb      	ldrb	r3, [r7, #14]
 8001d46:	f043 030d 	orr.w	r3, r3, #13
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001d4e:	7bbb      	ldrb	r3, [r7, #14]
 8001d50:	f043 0309 	orr.w	r3, r3, #9
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d58:	f107 0208 	add.w	r2, r7, #8
 8001d5c:	2364      	movs	r3, #100	; 0x64
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2304      	movs	r3, #4
 8001d62:	214e      	movs	r1, #78	; 0x4e
 8001d64:	4803      	ldr	r0, [pc, #12]	; (8001d74 <lcd_send_data+0x5c>)
 8001d66:	f001 fec1 	bl	8003aec <HAL_I2C_Master_Transmit>
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200002ac 	.word	0x200002ac

08001d78 <lcd_clear>:

void lcd_clear (void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	lcd_send_cmd (LCD_CLEARDISPLAY);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff ff9b 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(2);
 8001d82:	2002      	movs	r0, #2
 8001d84:	f000 fecc 	bl	8002b20 <HAL_Delay>
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <lcd_init>:

void lcd_init (void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001d90:	2032      	movs	r0, #50	; 0x32
 8001d92:	f000 fec5 	bl	8002b20 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001d96:	2030      	movs	r0, #48	; 0x30
 8001d98:	f7ff ff8e 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001d9c:	2005      	movs	r0, #5
 8001d9e:	f000 febf 	bl	8002b20 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001da2:	2030      	movs	r0, #48	; 0x30
 8001da4:	f7ff ff88 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001da8:	2001      	movs	r0, #1
 8001daa:	f000 feb9 	bl	8002b20 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001dae:	2030      	movs	r0, #48	; 0x30
 8001db0:	f7ff ff82 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(10);
 8001db4:	200a      	movs	r0, #10
 8001db6:	f000 feb3 	bl	8002b20 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001dba:	2020      	movs	r0, #32
 8001dbc:	f7ff ff7c 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(10);
 8001dc0:	200a      	movs	r0, #10
 8001dc2:	f000 fead 	bl	8002b20 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001dc6:	2028      	movs	r0, #40	; 0x28
 8001dc8:	f7ff ff76 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(1);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f000 fea7 	bl	8002b20 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001dd2:	2008      	movs	r0, #8
 8001dd4:	f7ff ff70 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(1);
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f000 fea1 	bl	8002b20 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001dde:	2001      	movs	r0, #1
 8001de0:	f7ff ff6a 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(1);
 8001de4:	2001      	movs	r0, #1
 8001de6:	f000 fe9b 	bl	8002b20 <HAL_Delay>
	HAL_Delay(1);
 8001dea:	2001      	movs	r0, #1
 8001dec:	f000 fe98 	bl	8002b20 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001df0:	2006      	movs	r0, #6
 8001df2:	f7ff ff61 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(1);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f000 fe92 	bl	8002b20 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001dfc:	200c      	movs	r0, #12
 8001dfe:	f7ff ff5b 	bl	8001cb8 <lcd_send_cmd>
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001e0e:	e006      	b.n	8001e1e <lcd_send_string+0x18>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff7d 	bl	8001d18 <lcd_send_data>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f4      	bne.n	8001e10 <lcd_send_string+0xa>
}
 8001e26:	bf00      	nop
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <lcd_home>:

void lcd_home(){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	lcd_send_cmd (LCD_RETURNHOME);
 8001e34:	2002      	movs	r0, #2
 8001e36:	f7ff ff3f 	bl	8001cb8 <lcd_send_cmd>
	HAL_Delay(2);
 8001e3a:	2002      	movs	r0, #2
 8001e3c:	f000 fe70 	bl	8002b20 <HAL_Delay>
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <lcd_create_char>:
}
void lcd_no_autoscroll(){
    _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
    lcd_send_cmd(LCD_ENTRYMODESET | _displaymode);
}
void lcd_create_char(uint8_t location, uint8_t charmap[]){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
    location &= 0x7; // we only have 8 locations 0-7
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(LCD_SETCGRAMADDR | (location << 3));
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	b25b      	sxtb	r3, r3
 8001e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e62:	b25b      	sxtb	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ff26 	bl	8001cb8 <lcd_send_cmd>
    for (uint8_t i = 0; i != 8; i++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	e009      	b.n	8001e86 <lcd_create_char+0x42>
    	lcd_send_data(charmap[i]);
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff4c 	bl	8001d18 <lcd_send_data>
    for (uint8_t i = 0; i != 8; i++)
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	3301      	adds	r3, #1
 8001e84:	73fb      	strb	r3, [r7, #15]
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d1f2      	bne.n	8001e72 <lcd_create_char+0x2e>
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <lcd_set_cursor>:
void lcd_set_cursor(uint8_t col, uint8_t row){
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	460a      	mov	r2, r1
 8001ea2:	71fb      	strb	r3, [r7, #7]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	71bb      	strb	r3, [r7, #6]
    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001ea8:	4b10      	ldr	r3, [pc, #64]	; (8001eec <lcd_set_cursor+0x54>)
 8001eaa:	f107 0408 	add.w	r4, r7, #8
 8001eae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (row > 4)
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d901      	bls.n	8001ebe <lcd_set_cursor+0x26>
        row = 4 - 1; // we count rows starting w/0
 8001eba:	2303      	movs	r3, #3
 8001ebc:	71bb      	strb	r3, [r7, #6]
    lcd_send_cmd(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001ebe:	79bb      	ldrb	r3, [r7, #6]
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	3318      	adds	r3, #24
 8001ec4:	443b      	add	r3, r7
 8001ec6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	4413      	add	r3, r2
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	b25b      	sxtb	r3, r3
 8001ed4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ed8:	b25b      	sxtb	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff feeb 	bl	8001cb8 <lcd_send_cmd>
}
 8001ee2:	bf00      	nop
 8001ee4:	371c      	adds	r7, #28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd90      	pop	{r4, r7, pc}
 8001eea:	bf00      	nop
 8001eec:	0800ae90 	.word	0x0800ae90

08001ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef0:	b5b0      	push	{r4, r5, r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef6:	f000 fda1 	bl	8002a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001efa:	f000 f899 	bl	8002030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001efe:	f000 f9e1 	bl	80022c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001f02:	f000 f8ff 	bl	8002104 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001f06:	f000 f94f 	bl	80021a8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001f0a:	f000 f97b 	bl	8002204 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001f0e:	f003 fdcb 	bl	8005aa8 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8001f12:	f000 f9ad 	bl	8002270 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001f16:	2304      	movs	r3, #4
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2303      	movs	r3, #3
 8001f20:	2201      	movs	r2, #1
 8001f22:	2105      	movs	r1, #5
 8001f24:	2002      	movs	r0, #2
 8001f26:	f7ff f9a1 	bl	800126c <BME280_Config>
  lcd_init();
 8001f2a:	f7ff ff2f 	bl	8001d8c <lcd_init>
  lcd_clear();
 8001f2e:	f7ff ff23 	bl	8001d78 <lcd_clear>
  lcd_create_char(0,thermometer);
 8001f32:	4932      	ldr	r1, [pc, #200]	; (8001ffc <main+0x10c>)
 8001f34:	2000      	movs	r0, #0
 8001f36:	f7ff ff85 	bl	8001e44 <lcd_create_char>
  lcd_create_char(1,droplet);
 8001f3a:	4931      	ldr	r1, [pc, #196]	; (8002000 <main+0x110>)
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f7ff ff81 	bl	8001e44 <lcd_create_char>
  lcd_create_char(2,wifi);
 8001f42:	4930      	ldr	r1, [pc, #192]	; (8002004 <main+0x114>)
 8001f44:	2002      	movs	r0, #2
 8001f46:	f7ff ff7d 	bl	8001e44 <lcd_create_char>
  lcd_home();
 8001f4a:	f7ff ff71 	bl	8001e30 <lcd_home>

  fresult = f_mount(&fs, "/", 1);
 8001f4e:	2201      	movs	r2, #1
 8001f50:	492d      	ldr	r1, [pc, #180]	; (8002008 <main+0x118>)
 8001f52:	482e      	ldr	r0, [pc, #184]	; (800200c <main+0x11c>)
 8001f54:	f004 fa4a 	bl	80063ec <f_mount>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <main+0x120>)
 8001f5e:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BME280_Measure();
 8001f60:	f7ff fe1e 	bl	8001ba0 <BME280_Measure>
	  HAL_ADC_Start(&hadc1);
 8001f64:	482b      	ldr	r0, [pc, #172]	; (8002014 <main+0x124>)
 8001f66:	f000 fe43 	bl	8002bf0 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1,12)==HAL_OK){
 8001f6a:	210c      	movs	r1, #12
 8001f6c:	4829      	ldr	r0, [pc, #164]	; (8002014 <main+0x124>)
 8001f6e:	f000 ff26 	bl	8002dbe <HAL_ADC_PollForConversion>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d127      	bne.n	8001fc8 <main+0xd8>
		  //SoilMoisture = HAL_ADC_GetValue(&hadc1);
		  SoilMoisture=((moisture_air-HAL_ADC_GetValue(&hadc1)) * 100.0 / (moisture_air-moisture_water));
 8001f78:	4b27      	ldr	r3, [pc, #156]	; (8002018 <main+0x128>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	461c      	mov	r4, r3
 8001f7e:	4825      	ldr	r0, [pc, #148]	; (8002014 <main+0x124>)
 8001f80:	f000 ffa8 	bl	8002ed4 <HAL_ADC_GetValue>
 8001f84:	4603      	mov	r3, r0
 8001f86:	1ae3      	subs	r3, r4, r3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fac3 	bl	8000514 <__aeabi_ui2d>
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	4b22      	ldr	r3, [pc, #136]	; (800201c <main+0x12c>)
 8001f94:	f7fe fb38 	bl	8000608 <__aeabi_dmul>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4614      	mov	r4, r2
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <main+0x128>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <main+0x130>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fac1 	bl	8000534 <__aeabi_i2d>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	4629      	mov	r1, r5
 8001fba:	f7fe fc4f 	bl	800085c <__aeabi_ddiv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4918      	ldr	r1, [pc, #96]	; (8002024 <main+0x134>)
 8001fc4:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  HAL_ADC_Stop(&hadc1);
 8001fc8:	4812      	ldr	r0, [pc, #72]	; (8002014 <main+0x124>)
 8001fca:	f000 fec5 	bl	8002d58 <HAL_ADC_Stop>
	  if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_1))
 8001fce:	2102      	movs	r1, #2
 8001fd0:	4815      	ldr	r0, [pc, #84]	; (8002028 <main+0x138>)
 8001fd2:	f001 fc15 	bl	8003800 <HAL_GPIO_ReadPin>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <main+0xfa>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe2:	4812      	ldr	r0, [pc, #72]	; (800202c <main+0x13c>)
 8001fe4:	f001 fc24 	bl	8003830 <HAL_GPIO_WritePin>
 8001fe8:	e005      	b.n	8001ff6 <main+0x106>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff0:	480e      	ldr	r0, [pc, #56]	; (800202c <main+0x13c>)
 8001ff2:	f001 fc1d 	bl	8003830 <HAL_GPIO_WritePin>
	  }
	  Print_LCD();
 8001ff6:	f000 f9e9 	bl	80023cc <Print_LCD>
	  BME280_Measure();
 8001ffa:	e7b1      	b.n	8001f60 <main+0x70>
 8001ffc:	20000008 	.word	0x20000008
 8002000:	20000000 	.word	0x20000000
 8002004:	20000010 	.word	0x20000010
 8002008:	0800aea0 	.word	0x0800aea0
 800200c:	2000039c 	.word	0x2000039c
 8002010:	200005cc 	.word	0x200005cc
 8002014:	20000264 	.word	0x20000264
 8002018:	2000001a 	.word	0x2000001a
 800201c:	40590000 	.word	0x40590000
 8002020:	20000018 	.word	0x20000018
 8002024:	200005e0 	.word	0x200005e0
 8002028:	40020400 	.word	0x40020400
 800202c:	40020000 	.word	0x40020000

08002030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b094      	sub	sp, #80	; 0x50
 8002034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002036:	f107 0320 	add.w	r3, r7, #32
 800203a:	2230      	movs	r2, #48	; 0x30
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f004 faa0 	bl	8006584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	4b28      	ldr	r3, [pc, #160]	; (80020fc <SystemClock_Config+0xcc>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	4a27      	ldr	r2, [pc, #156]	; (80020fc <SystemClock_Config+0xcc>)
 800205e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002062:	6413      	str	r3, [r2, #64]	; 0x40
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <SystemClock_Config+0xcc>)
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002070:	2300      	movs	r3, #0
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <SystemClock_Config+0xd0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800207c:	4a20      	ldr	r2, [pc, #128]	; (8002100 <SystemClock_Config+0xd0>)
 800207e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <SystemClock_Config+0xd0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002090:	2301      	movs	r3, #1
 8002092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800209a:	2302      	movs	r3, #2
 800209c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800209e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020a4:	2304      	movs	r3, #4
 80020a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80020a8:	2354      	movs	r3, #84	; 0x54
 80020aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020ac:	2302      	movs	r3, #2
 80020ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020b0:	2304      	movs	r3, #4
 80020b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b4:	f107 0320 	add.w	r3, r7, #32
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 fd13 	bl	8004ae4 <HAL_RCC_OscConfig>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80020c4:	f000 fa0c 	bl	80024e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020c8:	230f      	movs	r3, #15
 80020ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020cc:	2302      	movs	r3, #2
 80020ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	2102      	movs	r1, #2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 ff75 	bl	8004fd4 <HAL_RCC_ClockConfig>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80020f0:	f000 f9f6 	bl	80024e0 <Error_Handler>
  }
}
 80020f4:	bf00      	nop
 80020f6:	3750      	adds	r7, #80	; 0x50
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40023800 	.word	0x40023800
 8002100:	40007000 	.word	0x40007000

08002104 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800210a:	463b      	mov	r3, r7
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002116:	4b21      	ldr	r3, [pc, #132]	; (800219c <MX_ADC1_Init+0x98>)
 8002118:	4a21      	ldr	r2, [pc, #132]	; (80021a0 <MX_ADC1_Init+0x9c>)
 800211a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800211c:	4b1f      	ldr	r3, [pc, #124]	; (800219c <MX_ADC1_Init+0x98>)
 800211e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002122:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <MX_ADC1_Init+0x98>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800212a:	4b1c      	ldr	r3, [pc, #112]	; (800219c <MX_ADC1_Init+0x98>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <MX_ADC1_Init+0x98>)
 8002132:	2200      	movs	r2, #0
 8002134:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002136:	4b19      	ldr	r3, [pc, #100]	; (800219c <MX_ADC1_Init+0x98>)
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800213e:	4b17      	ldr	r3, [pc, #92]	; (800219c <MX_ADC1_Init+0x98>)
 8002140:	2200      	movs	r2, #0
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002144:	4b15      	ldr	r3, [pc, #84]	; (800219c <MX_ADC1_Init+0x98>)
 8002146:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <MX_ADC1_Init+0xa0>)
 8002148:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <MX_ADC1_Init+0x98>)
 800214c:	2200      	movs	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <MX_ADC1_Init+0x98>)
 8002152:	2201      	movs	r2, #1
 8002154:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <MX_ADC1_Init+0x98>)
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800215e:	4b0f      	ldr	r3, [pc, #60]	; (800219c <MX_ADC1_Init+0x98>)
 8002160:	2201      	movs	r2, #1
 8002162:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002164:	480d      	ldr	r0, [pc, #52]	; (800219c <MX_ADC1_Init+0x98>)
 8002166:	f000 fcff 	bl	8002b68 <HAL_ADC_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002170:	f000 f9b6 	bl	80024e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002174:	230a      	movs	r3, #10
 8002176:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002178:	2301      	movs	r3, #1
 800217a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800217c:	2300      	movs	r3, #0
 800217e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002180:	463b      	mov	r3, r7
 8002182:	4619      	mov	r1, r3
 8002184:	4805      	ldr	r0, [pc, #20]	; (800219c <MX_ADC1_Init+0x98>)
 8002186:	f000 feb3 	bl	8002ef0 <HAL_ADC_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002190:	f000 f9a6 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000264 	.word	0x20000264
 80021a0:	40012000 	.word	0x40012000
 80021a4:	0f000001 	.word	0x0f000001

080021a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <MX_I2C1_Init+0x50>)
 80021ae:	4a13      	ldr	r2, [pc, #76]	; (80021fc <MX_I2C1_Init+0x54>)
 80021b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_I2C1_Init+0x50>)
 80021b4:	4a12      	ldr	r2, [pc, #72]	; (8002200 <MX_I2C1_Init+0x58>)
 80021b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <MX_I2C1_Init+0x50>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <MX_I2C1_Init+0x50>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <MX_I2C1_Init+0x50>)
 80021c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <MX_I2C1_Init+0x50>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <MX_I2C1_Init+0x50>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <MX_I2C1_Init+0x50>)
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <MX_I2C1_Init+0x50>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021e4:	4804      	ldr	r0, [pc, #16]	; (80021f8 <MX_I2C1_Init+0x50>)
 80021e6:	f001 fb3d 	bl	8003864 <HAL_I2C_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021f0:	f000 f976 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200002ac 	.word	0x200002ac
 80021fc:	40005400 	.word	0x40005400
 8002200:	000186a0 	.word	0x000186a0

08002204 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002208:	4b17      	ldr	r3, [pc, #92]	; (8002268 <MX_SPI1_Init+0x64>)
 800220a:	4a18      	ldr	r2, [pc, #96]	; (800226c <MX_SPI1_Init+0x68>)
 800220c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <MX_SPI1_Init+0x64>)
 8002210:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <MX_SPI1_Init+0x64>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <MX_SPI1_Init+0x64>)
 800221e:	2200      	movs	r2, #0
 8002220:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <MX_SPI1_Init+0x64>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <MX_SPI1_Init+0x64>)
 800222a:	2200      	movs	r2, #0
 800222c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <MX_SPI1_Init+0x64>)
 8002230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002234:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <MX_SPI1_Init+0x64>)
 8002238:	2200      	movs	r2, #0
 800223a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <MX_SPI1_Init+0x64>)
 800223e:	2200      	movs	r2, #0
 8002240:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <MX_SPI1_Init+0x64>)
 8002244:	2200      	movs	r2, #0
 8002246:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <MX_SPI1_Init+0x64>)
 800224a:	2200      	movs	r2, #0
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <MX_SPI1_Init+0x64>)
 8002250:	220a      	movs	r2, #10
 8002252:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002254:	4804      	ldr	r0, [pc, #16]	; (8002268 <MX_SPI1_Init+0x64>)
 8002256:	f003 f8dd 	bl	8005414 <HAL_SPI_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002260:	f000 f93e 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000300 	.word	0x20000300
 800226c:	40013000 	.word	0x40013000

08002270 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <MX_USART1_UART_Init+0x50>)
 8002278:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 800227c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002280:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 8002296:	220c      	movs	r2, #12
 8002298:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 80022a8:	f003 f93d 	bl	8005526 <HAL_UART_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022b2:	f000 f915 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000358 	.word	0x20000358
 80022c0:	40011000 	.word	0x40011000

080022c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	60da      	str	r2, [r3, #12]
 80022d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	4b38      	ldr	r3, [pc, #224]	; (80023c0 <MX_GPIO_Init+0xfc>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a37      	ldr	r2, [pc, #220]	; (80023c0 <MX_GPIO_Init+0xfc>)
 80022e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b35      	ldr	r3, [pc, #212]	; (80023c0 <MX_GPIO_Init+0xfc>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <MX_GPIO_Init+0xfc>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a30      	ldr	r2, [pc, #192]	; (80023c0 <MX_GPIO_Init+0xfc>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b2e      	ldr	r3, [pc, #184]	; (80023c0 <MX_GPIO_Init+0xfc>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <MX_GPIO_Init+0xfc>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	4a29      	ldr	r2, [pc, #164]	; (80023c0 <MX_GPIO_Init+0xfc>)
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	6313      	str	r3, [r2, #48]	; 0x30
 8002322:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <MX_GPIO_Init+0xfc>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <MX_GPIO_Init+0xfc>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a22      	ldr	r2, [pc, #136]	; (80023c0 <MX_GPIO_Init+0xfc>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <MX_GPIO_Init+0xfc>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_MicroSD_GPIO_Port, CS_MicroSD_Pin, GPIO_PIN_RESET);
 800234a:	2200      	movs	r2, #0
 800234c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002350:	481c      	ldr	r0, [pc, #112]	; (80023c4 <MX_GPIO_Init+0x100>)
 8002352:	f001 fa6d 	bl	8003830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002356:	2200      	movs	r2, #0
 8002358:	f44f 7180 	mov.w	r1, #256	; 0x100
 800235c:	481a      	ldr	r0, [pc, #104]	; (80023c8 <MX_GPIO_Init+0x104>)
 800235e:	f001 fa67 	bl	8003830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8002362:	2302      	movs	r3, #2
 8002364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	4813      	ldr	r0, [pc, #76]	; (80023c4 <MX_GPIO_Init+0x100>)
 8002376:	f001 f8bf 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_MicroSD_Pin */
  GPIO_InitStruct.Pin = CS_MicroSD_Pin;
 800237a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800237e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002380:	2301      	movs	r3, #1
 8002382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002388:	2300      	movs	r3, #0
 800238a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_MicroSD_GPIO_Port, &GPIO_InitStruct);
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	4619      	mov	r1, r3
 8002392:	480c      	ldr	r0, [pc, #48]	; (80023c4 <MX_GPIO_Init+0x100>)
 8002394:	f001 f8b0 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800239c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239e:	2301      	movs	r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4619      	mov	r1, r3
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_GPIO_Init+0x104>)
 80023b2:	f001 f8a1 	bl	80034f8 <HAL_GPIO_Init>

}
 80023b6:	bf00      	nop
 80023b8:	3728      	adds	r7, #40	; 0x28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020400 	.word	0x40020400
 80023c8:	40020000 	.word	0x40020000

080023cc <Print_LCD>:

/* USER CODE BEGIN 4 */
void Print_LCD(){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	lcd_set_cursor(0, 0);
 80023d0:	2100      	movs	r1, #0
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7ff fd60 	bl	8001e98 <lcd_set_cursor>
	lcd_send_data(1);
 80023d8:	2001      	movs	r0, #1
 80023da:	f7ff fc9d 	bl	8001d18 <lcd_send_data>
	sprintf(text,"%.2f",SoilMoisture);
 80023de:	4b34      	ldr	r3, [pc, #208]	; (80024b0 <Print_LCD+0xe4>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	4933      	ldr	r1, [pc, #204]	; (80024b4 <Print_LCD+0xe8>)
 80023e6:	4834      	ldr	r0, [pc, #208]	; (80024b8 <Print_LCD+0xec>)
 80023e8:	f004 ff54 	bl	8007294 <siprintf>
	lcd_send_string(text);
 80023ec:	4832      	ldr	r0, [pc, #200]	; (80024b8 <Print_LCD+0xec>)
 80023ee:	f7ff fd0a 	bl	8001e06 <lcd_send_string>
	lcd_send_string("%");
 80023f2:	4832      	ldr	r0, [pc, #200]	; (80024bc <Print_LCD+0xf0>)
 80023f4:	f7ff fd07 	bl	8001e06 <lcd_send_string>
	lcd_set_cursor(0, 1);
 80023f8:	2101      	movs	r1, #1
 80023fa:	2000      	movs	r0, #0
 80023fc:	f7ff fd4c 	bl	8001e98 <lcd_set_cursor>
	lcd_send_data(0);
 8002400:	2000      	movs	r0, #0
 8002402:	f7ff fc89 	bl	8001d18 <lcd_send_data>
	sprintf(text,"%.2f",Temperature);
 8002406:	4b2e      	ldr	r3, [pc, #184]	; (80024c0 <Print_LCD+0xf4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe f8a4 	bl	8000558 <__aeabi_f2d>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4927      	ldr	r1, [pc, #156]	; (80024b4 <Print_LCD+0xe8>)
 8002416:	4828      	ldr	r0, [pc, #160]	; (80024b8 <Print_LCD+0xec>)
 8002418:	f004 ff3c 	bl	8007294 <siprintf>
	lcd_send_string(text);
 800241c:	4826      	ldr	r0, [pc, #152]	; (80024b8 <Print_LCD+0xec>)
 800241e:	f7ff fcf2 	bl	8001e06 <lcd_send_string>
	lcd_send_data(0b11011111);
 8002422:	20df      	movs	r0, #223	; 0xdf
 8002424:	f7ff fc78 	bl	8001d18 <lcd_send_data>
	lcd_send_string("C");
 8002428:	4826      	ldr	r0, [pc, #152]	; (80024c4 <Print_LCD+0xf8>)
 800242a:	f7ff fcec 	bl	8001e06 <lcd_send_string>
	lcd_set_cursor(0, 2);
 800242e:	2102      	movs	r1, #2
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff fd31 	bl	8001e98 <lcd_set_cursor>
	lcd_send_data(1);
 8002436:	2001      	movs	r0, #1
 8002438:	f7ff fc6e 	bl	8001d18 <lcd_send_data>
	sprintf(text,"%.2f",Humidity);
 800243c:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <Print_LCD+0xfc>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe f889 	bl	8000558 <__aeabi_f2d>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	491a      	ldr	r1, [pc, #104]	; (80024b4 <Print_LCD+0xe8>)
 800244c:	481a      	ldr	r0, [pc, #104]	; (80024b8 <Print_LCD+0xec>)
 800244e:	f004 ff21 	bl	8007294 <siprintf>
	lcd_send_string(text);
 8002452:	4819      	ldr	r0, [pc, #100]	; (80024b8 <Print_LCD+0xec>)
 8002454:	f7ff fcd7 	bl	8001e06 <lcd_send_string>
	lcd_send_string("%");
 8002458:	4818      	ldr	r0, [pc, #96]	; (80024bc <Print_LCD+0xf0>)
 800245a:	f7ff fcd4 	bl	8001e06 <lcd_send_string>
	lcd_set_cursor(0, 3);
 800245e:	2103      	movs	r1, #3
 8002460:	2000      	movs	r0, #0
 8002462:	f7ff fd19 	bl	8001e98 <lcd_set_cursor>
	lcd_send_string("Pres:");
 8002466:	4819      	ldr	r0, [pc, #100]	; (80024cc <Print_LCD+0x100>)
 8002468:	f7ff fccd 	bl	8001e06 <lcd_send_string>
	sprintf(text,"%4.1f",Pressure/100);
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <Print_LCD+0x104>)
 800246e:	edd3 7a00 	vldr	s15, [r3]
 8002472:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80024d4 <Print_LCD+0x108>
 8002476:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800247a:	ee16 0a90 	vmov	r0, s13
 800247e:	f7fe f86b 	bl	8000558 <__aeabi_f2d>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4914      	ldr	r1, [pc, #80]	; (80024d8 <Print_LCD+0x10c>)
 8002488:	480b      	ldr	r0, [pc, #44]	; (80024b8 <Print_LCD+0xec>)
 800248a:	f004 ff03 	bl	8007294 <siprintf>
	lcd_send_string(text);
 800248e:	480a      	ldr	r0, [pc, #40]	; (80024b8 <Print_LCD+0xec>)
 8002490:	f7ff fcb9 	bl	8001e06 <lcd_send_string>
	lcd_send_string("hPa");
 8002494:	4811      	ldr	r0, [pc, #68]	; (80024dc <Print_LCD+0x110>)
 8002496:	f7ff fcb6 	bl	8001e06 <lcd_send_string>
	HAL_Delay (500);
 800249a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800249e:	f000 fb3f 	bl	8002b20 <HAL_Delay>
	lcd_clear();
 80024a2:	f7ff fc69 	bl	8001d78 <lcd_clear>
	lcd_home();
 80024a6:	f7ff fcc3 	bl	8001e30 <lcd_home>
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200005e0 	.word	0x200005e0
 80024b4:	0800aea4 	.word	0x0800aea4
 80024b8:	200005e8 	.word	0x200005e8
 80024bc:	0800aeac 	.word	0x0800aeac
 80024c0:	200005d0 	.word	0x200005d0
 80024c4:	0800aeb0 	.word	0x0800aeb0
 80024c8:	200005d8 	.word	0x200005d8
 80024cc:	0800aeb4 	.word	0x0800aeb4
 80024d0:	200005d4 	.word	0x200005d4
 80024d4:	42c80000 	.word	0x42c80000
 80024d8:	0800aebc 	.word	0x0800aebc
 80024dc:	0800aec4 	.word	0x0800aec4

080024e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024e4:	b672      	cpsid	i
}
 80024e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <Error_Handler+0x8>
	...

080024ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_MspInit+0x4c>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <HAL_MspInit+0x4c>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_MspInit+0x4c>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_MspInit+0x4c>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_MspInit+0x4c>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_MspInit+0x4c>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800

0800253c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <HAL_ADC_MspInit+0x7c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d127      	bne.n	80025ae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <HAL_ADC_MspInit+0x80>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4a15      	ldr	r2, [pc, #84]	; (80025bc <HAL_ADC_MspInit+0x80>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	4b13      	ldr	r3, [pc, #76]	; (80025bc <HAL_ADC_MspInit+0x80>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <HAL_ADC_MspInit+0x80>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <HAL_ADC_MspInit+0x80>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_ADC_MspInit+0x80>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = SOIL_MOIST_Pin;
 8002596:	2301      	movs	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800259a:	2303      	movs	r3, #3
 800259c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOIL_MOIST_GPIO_Port, &GPIO_InitStruct);
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4619      	mov	r1, r3
 80025a8:	4805      	ldr	r0, [pc, #20]	; (80025c0 <HAL_ADC_MspInit+0x84>)
 80025aa:	f000 ffa5 	bl	80034f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025ae:	bf00      	nop
 80025b0:	3728      	adds	r7, #40	; 0x28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40012000 	.word	0x40012000
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40020800 	.word	0x40020800

080025c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a19      	ldr	r2, [pc, #100]	; (8002648 <HAL_I2C_MspInit+0x84>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d12c      	bne.n	8002640 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	4b18      	ldr	r3, [pc, #96]	; (800264c <HAL_I2C_MspInit+0x88>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a17      	ldr	r2, [pc, #92]	; (800264c <HAL_I2C_MspInit+0x88>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <HAL_I2C_MspInit+0x88>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002602:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002608:	2312      	movs	r3, #18
 800260a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800260c:	2301      	movs	r3, #1
 800260e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002614:	2304      	movs	r3, #4
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4619      	mov	r1, r3
 800261e:	480c      	ldr	r0, [pc, #48]	; (8002650 <HAL_I2C_MspInit+0x8c>)
 8002620:	f000 ff6a 	bl	80034f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <HAL_I2C_MspInit+0x88>)
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	4a07      	ldr	r2, [pc, #28]	; (800264c <HAL_I2C_MspInit+0x88>)
 800262e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002632:	6413      	str	r3, [r2, #64]	; 0x40
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_I2C_MspInit+0x88>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002640:	bf00      	nop
 8002642:	3728      	adds	r7, #40	; 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40005400 	.word	0x40005400
 800264c:	40023800 	.word	0x40023800
 8002650:	40020400 	.word	0x40020400

08002654 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	; 0x28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a19      	ldr	r2, [pc, #100]	; (80026d8 <HAL_SPI_MspInit+0x84>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d12b      	bne.n	80026ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_SPI_MspInit+0x88>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	4a17      	ldr	r2, [pc, #92]	; (80026dc <HAL_SPI_MspInit+0x88>)
 8002680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002684:	6453      	str	r3, [r2, #68]	; 0x44
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <HAL_SPI_MspInit+0x88>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HAL_SPI_MspInit+0x88>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a10      	ldr	r2, [pc, #64]	; (80026dc <HAL_SPI_MspInit+0x88>)
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <HAL_SPI_MspInit+0x88>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80026ae:	2338      	movs	r3, #56	; 0x38
 80026b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ba:	2303      	movs	r3, #3
 80026bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026be:	2305      	movs	r3, #5
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	4619      	mov	r1, r3
 80026c8:	4805      	ldr	r0, [pc, #20]	; (80026e0 <HAL_SPI_MspInit+0x8c>)
 80026ca:	f000 ff15 	bl	80034f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026ce:	bf00      	nop
 80026d0:	3728      	adds	r7, #40	; 0x28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40013000 	.word	0x40013000
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40020400 	.word	0x40020400

080026e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a19      	ldr	r2, [pc, #100]	; (8002768 <HAL_UART_MspInit+0x84>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d12c      	bne.n	8002760 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	4b18      	ldr	r3, [pc, #96]	; (800276c <HAL_UART_MspInit+0x88>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a17      	ldr	r2, [pc, #92]	; (800276c <HAL_UART_MspInit+0x88>)
 8002710:	f043 0310 	orr.w	r3, r3, #16
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <HAL_UART_MspInit+0x88>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_UART_MspInit+0x88>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a10      	ldr	r2, [pc, #64]	; (800276c <HAL_UART_MspInit+0x88>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b0e      	ldr	r3, [pc, #56]	; (800276c <HAL_UART_MspInit+0x88>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800273e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274c:	2303      	movs	r3, #3
 800274e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002750:	2307      	movs	r3, #7
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4619      	mov	r1, r3
 800275a:	4805      	ldr	r0, [pc, #20]	; (8002770 <HAL_UART_MspInit+0x8c>)
 800275c:	f000 fecc 	bl	80034f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002760:	bf00      	nop
 8002762:	3728      	adds	r7, #40	; 0x28
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40011000 	.word	0x40011000
 800276c:	40023800 	.word	0x40023800
 8002770:	40020000 	.word	0x40020000

08002774 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002778:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <SDTimer_Handler+0x40>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d006      	beq.n	8002790 <SDTimer_Handler+0x1c>
    Timer1--;
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <SDTimer_Handler+0x40>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b2da      	uxtb	r2, r3
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <SDTimer_Handler+0x40>)
 800278e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <SDTimer_Handler+0x44>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <SDTimer_Handler+0x34>
    Timer2--;
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <SDTimer_Handler+0x44>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <SDTimer_Handler+0x44>)
 80027a6:	701a      	strb	r2, [r3, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	200005ef 	.word	0x200005ef
 80027b8:	200005f0 	.word	0x200005f0

080027bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <NMI_Handler+0x4>

080027c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <HardFault_Handler+0x4>

080027c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <MemManage_Handler+0x4>

080027ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d2:	e7fe      	b.n	80027d2 <BusFault_Handler+0x4>

080027d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <UsageFault_Handler+0x4>

080027da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 8002808:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <SysTick_Handler+0x30>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	3301      	adds	r3, #1
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <SysTick_Handler+0x30>)
 8002814:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 8002816:	4b07      	ldr	r3, [pc, #28]	; (8002834 <SysTick_Handler+0x30>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b09      	cmp	r3, #9
 800281e:	d904      	bls.n	800282a <SysTick_Handler+0x26>
  {
	FatFsCnt = 0;
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <SysTick_Handler+0x30>)
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
	SDTimer_Handler();
 8002826:	f7ff ffa5 	bl	8002774 <SDTimer_Handler>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800282a:	f000 f959 	bl	8002ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	200005ee 	.word	0x200005ee

08002838 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
	return 1;
 800283c:	2301      	movs	r3, #1
}
 800283e:	4618      	mov	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <_kill>:

int _kill(int pid, int sig)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002852:	f003 fe6d 	bl	8006530 <__errno>
 8002856:	4603      	mov	r3, r0
 8002858:	2216      	movs	r2, #22
 800285a:	601a      	str	r2, [r3, #0]
	return -1;
 800285c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <_exit>:

void _exit (int status)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002870:	f04f 31ff 	mov.w	r1, #4294967295
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ffe7 	bl	8002848 <_kill>
	while (1) {}		/* Make sure we hang here */
 800287a:	e7fe      	b.n	800287a <_exit+0x12>

0800287c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	e00a      	b.n	80028a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800288e:	f3af 8000 	nop.w
 8002892:	4601      	mov	r1, r0
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	60ba      	str	r2, [r7, #8]
 800289a:	b2ca      	uxtb	r2, r1
 800289c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	3301      	adds	r3, #1
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	dbf0      	blt.n	800288e <_read+0x12>
	}

return len;
 80028ac:	687b      	ldr	r3, [r7, #4]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b086      	sub	sp, #24
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	e009      	b.n	80028dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	60ba      	str	r2, [r7, #8]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3301      	adds	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	dbf1      	blt.n	80028c8 <_write+0x12>
	}
	return len;
 80028e4:	687b      	ldr	r3, [r7, #4]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <_close>:

int _close(int file)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
	return -1;
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002916:	605a      	str	r2, [r3, #4]
	return 0;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <_isatty>:

int _isatty(int file)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
	return 1;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
	return 0;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002960:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <_sbrk+0x5c>)
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <_sbrk+0x60>)
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <_sbrk+0x64>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d102      	bne.n	800297a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <_sbrk+0x64>)
 8002976:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <_sbrk+0x68>)
 8002978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <_sbrk+0x64>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	429a      	cmp	r2, r3
 8002986:	d207      	bcs.n	8002998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002988:	f003 fdd2 	bl	8006530 <__errno>
 800298c:	4603      	mov	r3, r0
 800298e:	220c      	movs	r2, #12
 8002990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	e009      	b.n	80029ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002998:	4b08      	ldr	r3, [pc, #32]	; (80029bc <_sbrk+0x64>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <_sbrk+0x64>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	4a05      	ldr	r2, [pc, #20]	; (80029bc <_sbrk+0x64>)
 80029a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029aa:	68fb      	ldr	r3, [r7, #12]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	20018000 	.word	0x20018000
 80029b8:	00000400 	.word	0x00000400
 80029bc:	200005f4 	.word	0x200005f4
 80029c0:	20000648 	.word	0x20000648

080029c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <SystemInit+0x20>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ce:	4a05      	ldr	r2, [pc, #20]	; (80029e4 <SystemInit+0x20>)
 80029d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029ec:	480d      	ldr	r0, [pc, #52]	; (8002a24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029ee:	490e      	ldr	r1, [pc, #56]	; (8002a28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029f0:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f4:	e002      	b.n	80029fc <LoopCopyDataInit>

080029f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029fa:	3304      	adds	r3, #4

080029fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a00:	d3f9      	bcc.n	80029f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a02:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a04:	4c0b      	ldr	r4, [pc, #44]	; (8002a34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a08:	e001      	b.n	8002a0e <LoopFillZerobss>

08002a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a0c:	3204      	adds	r2, #4

08002a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a10:	d3fb      	bcc.n	8002a0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a12:	f7ff ffd7 	bl	80029c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a16:	f003 fd91 	bl	800653c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a1a:	f7ff fa69 	bl	8001ef0 <main>
  bx  lr    
 8002a1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a28:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002a2c:	0800b394 	.word	0x0800b394
  ldr r2, =_sbss
 8002a30:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002a34:	20000648 	.word	0x20000648

08002a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a38:	e7fe      	b.n	8002a38 <ADC_IRQHandler>
	...

08002a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a40:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <HAL_Init+0x40>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0d      	ldr	r2, [pc, #52]	; (8002a7c <HAL_Init+0x40>)
 8002a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_Init+0x40>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <HAL_Init+0x40>)
 8002a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HAL_Init+0x40>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <HAL_Init+0x40>)
 8002a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a64:	2003      	movs	r0, #3
 8002a66:	f000 fd13 	bl	8003490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a6a:	200f      	movs	r0, #15
 8002a6c:	f000 f808 	bl	8002a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a70:	f7ff fd3c 	bl	80024ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023c00 	.word	0x40023c00

08002a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_InitTick+0x54>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_InitTick+0x58>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	4619      	mov	r1, r3
 8002a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fd1d 	bl	80034de <HAL_SYSTICK_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e00e      	b.n	8002acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b0f      	cmp	r3, #15
 8002ab2:	d80a      	bhi.n	8002aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8002abc:	f000 fcf3 	bl	80034a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac0:	4a06      	ldr	r2, [pc, #24]	; (8002adc <HAL_InitTick+0x5c>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e000      	b.n	8002acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	2000001c 	.word	0x2000001c
 8002ad8:	20000024 	.word	0x20000024
 8002adc:	20000020 	.word	0x20000020

08002ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_IncTick+0x20>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_IncTick+0x24>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4413      	add	r3, r2
 8002af0:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <HAL_IncTick+0x24>)
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000024 	.word	0x20000024
 8002b04:	200005f8 	.word	0x200005f8

08002b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <HAL_GetTick+0x14>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	200005f8 	.word	0x200005f8

08002b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b28:	f7ff ffee 	bl	8002b08 <HAL_GetTick>
 8002b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b38:	d005      	beq.n	8002b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_Delay+0x44>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b46:	bf00      	nop
 8002b48:	f7ff ffde 	bl	8002b08 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d8f7      	bhi.n	8002b48 <HAL_Delay+0x28>
  {
  }
}
 8002b58:	bf00      	nop
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000024 	.word	0x20000024

08002b68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e033      	b.n	8002be6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff fcd8 	bl	800253c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d118      	bne.n	8002bd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bae:	f023 0302 	bic.w	r3, r3, #2
 8002bb2:	f043 0202 	orr.w	r2, r3, #2
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 faba 	bl	8003134 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f023 0303 	bic.w	r3, r3, #3
 8002bce:	f043 0201 	orr.w	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
 8002bd6:	e001      	b.n	8002bdc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_ADC_Start+0x1a>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e097      	b.n	8002d3a <HAL_ADC_Start+0x14a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d018      	beq.n	8002c52 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c30:	4b45      	ldr	r3, [pc, #276]	; (8002d48 <HAL_ADC_Start+0x158>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a45      	ldr	r2, [pc, #276]	; (8002d4c <HAL_ADC_Start+0x15c>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	0c9a      	lsrs	r2, r3, #18
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c44:	e002      	b.n	8002c4c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f9      	bne.n	8002c46 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d15f      	bne.n	8002d20 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9e:	d106      	bne.n	8002cae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	f023 0206 	bic.w	r2, r3, #6
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	645a      	str	r2, [r3, #68]	; 0x44
 8002cac:	e002      	b.n	8002cb4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cbc:	4b24      	ldr	r3, [pc, #144]	; (8002d50 <HAL_ADC_Start+0x160>)
 8002cbe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002cc8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10f      	bne.n	8002cf6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d129      	bne.n	8002d38 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	e020      	b.n	8002d38 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a16      	ldr	r2, [pc, #88]	; (8002d54 <HAL_ADC_Start+0x164>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d11b      	bne.n	8002d38 <HAL_ADC_Start+0x148>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d114      	bne.n	8002d38 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	e00b      	b.n	8002d38 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f043 0210 	orr.w	r2, r3, #16
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	f043 0201 	orr.w	r2, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	2000001c 	.word	0x2000001c
 8002d4c:	431bde83 	.word	0x431bde83
 8002d50:	40012300 	.word	0x40012300
 8002d54:	40012000 	.word	0x40012000

08002d58 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_Stop+0x16>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e021      	b.n	8002db2 <HAL_ADC_Stop+0x5a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0201 	bic.w	r2, r2, #1
 8002d84:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d109      	bne.n	8002da8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	f043 0201 	orr.w	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dda:	d113      	bne.n	8002e04 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dea:	d10b      	bne.n	8002e04 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	f043 0220 	orr.w	r2, r3, #32
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e063      	b.n	8002ecc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002e04:	f7ff fe80 	bl	8002b08 <HAL_GetTick>
 8002e08:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e0a:	e021      	b.n	8002e50 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e12:	d01d      	beq.n	8002e50 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d007      	beq.n	8002e2a <HAL_ADC_PollForConversion+0x6c>
 8002e1a:	f7ff fe75 	bl	8002b08 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d212      	bcs.n	8002e50 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d00b      	beq.n	8002e50 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f043 0204 	orr.w	r2, r3, #4
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e03d      	b.n	8002ecc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d1d6      	bne.n	8002e0c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f06f 0212 	mvn.w	r2, #18
 8002e66:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d123      	bne.n	8002eca <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d11f      	bne.n	8002eca <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d111      	bne.n	8002eca <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d105      	bne.n	8002eca <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f043 0201 	orr.w	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x1c>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e105      	b.n	8003118 <HAL_ADC_ConfigChannel+0x228>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b09      	cmp	r3, #9
 8002f1a:	d925      	bls.n	8002f68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68d9      	ldr	r1, [r3, #12]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	3b1e      	subs	r3, #30
 8002f32:	2207      	movs	r2, #7
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43da      	mvns	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	400a      	ands	r2, r1
 8002f40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68d9      	ldr	r1, [r3, #12]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	4618      	mov	r0, r3
 8002f54:	4603      	mov	r3, r0
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4403      	add	r3, r0
 8002f5a:	3b1e      	subs	r3, #30
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	e022      	b.n	8002fae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6919      	ldr	r1, [r3, #16]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	4613      	mov	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	400a      	ands	r2, r1
 8002f8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6919      	ldr	r1, [r3, #16]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4403      	add	r3, r0
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b06      	cmp	r3, #6
 8002fb4:	d824      	bhi.n	8003000 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3b05      	subs	r3, #5
 8002fc8:	221f      	movs	r2, #31
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	3b05      	subs	r3, #5
 8002ff2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ffe:	e04c      	b.n	800309a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b0c      	cmp	r3, #12
 8003006:	d824      	bhi.n	8003052 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	3b23      	subs	r3, #35	; 0x23
 800301a:	221f      	movs	r2, #31
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43da      	mvns	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	400a      	ands	r2, r1
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	b29b      	uxth	r3, r3
 8003036:	4618      	mov	r0, r3
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	3b23      	subs	r3, #35	; 0x23
 8003044:	fa00 f203 	lsl.w	r2, r0, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
 8003050:	e023      	b.n	800309a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	3b41      	subs	r3, #65	; 0x41
 8003064:	221f      	movs	r2, #31
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43da      	mvns	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	400a      	ands	r2, r1
 8003072:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	4618      	mov	r0, r3
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	3b41      	subs	r3, #65	; 0x41
 800308e:	fa00 f203 	lsl.w	r2, r0, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800309a:	4b22      	ldr	r3, [pc, #136]	; (8003124 <HAL_ADC_ConfigChannel+0x234>)
 800309c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a21      	ldr	r2, [pc, #132]	; (8003128 <HAL_ADC_ConfigChannel+0x238>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d109      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x1cc>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b12      	cmp	r3, #18
 80030ae:	d105      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a19      	ldr	r2, [pc, #100]	; (8003128 <HAL_ADC_ConfigChannel+0x238>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d123      	bne.n	800310e <HAL_ADC_ConfigChannel+0x21e>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b10      	cmp	r3, #16
 80030cc:	d003      	beq.n	80030d6 <HAL_ADC_ConfigChannel+0x1e6>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b11      	cmp	r3, #17
 80030d4:	d11b      	bne.n	800310e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b10      	cmp	r3, #16
 80030e8:	d111      	bne.n	800310e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ea:	4b10      	ldr	r3, [pc, #64]	; (800312c <HAL_ADC_ConfigChannel+0x23c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a10      	ldr	r2, [pc, #64]	; (8003130 <HAL_ADC_ConfigChannel+0x240>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	0c9a      	lsrs	r2, r3, #18
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003100:	e002      	b.n	8003108 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	3b01      	subs	r3, #1
 8003106:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f9      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	40012300 	.word	0x40012300
 8003128:	40012000 	.word	0x40012000
 800312c:	2000001c 	.word	0x2000001c
 8003130:	431bde83 	.word	0x431bde83

08003134 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800313c:	4b79      	ldr	r3, [pc, #484]	; (8003324 <ADC_Init+0x1f0>)
 800313e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	431a      	orrs	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003168:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	021a      	lsls	r2, r3, #8
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800318c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6899      	ldr	r1, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	4a58      	ldr	r2, [pc, #352]	; (8003328 <ADC_Init+0x1f4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d022      	beq.n	8003212 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6899      	ldr	r1, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6899      	ldr	r1, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	e00f      	b.n	8003232 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003230:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0202 	bic.w	r2, r2, #2
 8003240:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6899      	ldr	r1, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	7e1b      	ldrb	r3, [r3, #24]
 800324c:	005a      	lsls	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01b      	beq.n	8003298 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800326e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800327e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6859      	ldr	r1, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	3b01      	subs	r3, #1
 800328c:	035a      	lsls	r2, r3, #13
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	e007      	b.n	80032a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	051a      	lsls	r2, r3, #20
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6899      	ldr	r1, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ea:	025a      	lsls	r2, r3, #9
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6899      	ldr	r1, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	029a      	lsls	r2, r3, #10
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	609a      	str	r2, [r3, #8]
}
 8003318:	bf00      	nop
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40012300 	.word	0x40012300
 8003328:	0f000001 	.word	0x0f000001

0800332c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <__NVIC_SetPriorityGrouping+0x44>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003348:	4013      	ands	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800335e:	4a04      	ldr	r2, [pc, #16]	; (8003370 <__NVIC_SetPriorityGrouping+0x44>)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	60d3      	str	r3, [r2, #12]
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <__NVIC_GetPriorityGrouping+0x18>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	0a1b      	lsrs	r3, r3, #8
 800337e:	f003 0307 	and.w	r3, r3, #7
}
 8003382:	4618      	mov	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	6039      	str	r1, [r7, #0]
 800339a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	db0a      	blt.n	80033ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	490c      	ldr	r1, [pc, #48]	; (80033dc <__NVIC_SetPriority+0x4c>)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	0112      	lsls	r2, r2, #4
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	440b      	add	r3, r1
 80033b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b8:	e00a      	b.n	80033d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	4908      	ldr	r1, [pc, #32]	; (80033e0 <__NVIC_SetPriority+0x50>)
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	3b04      	subs	r3, #4
 80033c8:	0112      	lsls	r2, r2, #4
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	440b      	add	r3, r1
 80033ce:	761a      	strb	r2, [r3, #24]
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	e000e100 	.word	0xe000e100
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f1c3 0307 	rsb	r3, r3, #7
 80033fe:	2b04      	cmp	r3, #4
 8003400:	bf28      	it	cs
 8003402:	2304      	movcs	r3, #4
 8003404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3304      	adds	r3, #4
 800340a:	2b06      	cmp	r3, #6
 800340c:	d902      	bls.n	8003414 <NVIC_EncodePriority+0x30>
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3b03      	subs	r3, #3
 8003412:	e000      	b.n	8003416 <NVIC_EncodePriority+0x32>
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003418:	f04f 32ff 	mov.w	r2, #4294967295
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43da      	mvns	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	401a      	ands	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800342c:	f04f 31ff 	mov.w	r1, #4294967295
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	43d9      	mvns	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	4313      	orrs	r3, r2
         );
}
 800343e:	4618      	mov	r0, r3
 8003440:	3724      	adds	r7, #36	; 0x24
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3b01      	subs	r3, #1
 8003458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800345c:	d301      	bcc.n	8003462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800345e:	2301      	movs	r3, #1
 8003460:	e00f      	b.n	8003482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003462:	4a0a      	ldr	r2, [pc, #40]	; (800348c <SysTick_Config+0x40>)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3b01      	subs	r3, #1
 8003468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800346a:	210f      	movs	r1, #15
 800346c:	f04f 30ff 	mov.w	r0, #4294967295
 8003470:	f7ff ff8e 	bl	8003390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <SysTick_Config+0x40>)
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347a:	4b04      	ldr	r3, [pc, #16]	; (800348c <SysTick_Config+0x40>)
 800347c:	2207      	movs	r2, #7
 800347e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	e000e010 	.word	0xe000e010

08003490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff ff47 	bl	800332c <__NVIC_SetPriorityGrouping>
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	4603      	mov	r3, r0
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b8:	f7ff ff5c 	bl	8003374 <__NVIC_GetPriorityGrouping>
 80034bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	6978      	ldr	r0, [r7, #20]
 80034c4:	f7ff ff8e 	bl	80033e4 <NVIC_EncodePriority>
 80034c8:	4602      	mov	r2, r0
 80034ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff ff5d 	bl	8003390 <__NVIC_SetPriority>
}
 80034d6:	bf00      	nop
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff ffb0 	bl	800344c <SysTick_Config>
 80034ec:	4603      	mov	r3, r0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	e159      	b.n	80037c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003514:	2201      	movs	r2, #1
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	429a      	cmp	r2, r3
 800352e:	f040 8148 	bne.w	80037c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d005      	beq.n	800354a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003546:	2b02      	cmp	r3, #2
 8003548:	d130      	bne.n	80035ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	2203      	movs	r2, #3
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003580:	2201      	movs	r2, #1
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 0201 	and.w	r2, r3, #1
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d017      	beq.n	80035e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d123      	bne.n	800363c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	08da      	lsrs	r2, r3, #3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3208      	adds	r2, #8
 80035fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	220f      	movs	r2, #15
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	08da      	lsrs	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3208      	adds	r2, #8
 8003636:	69b9      	ldr	r1, [r7, #24]
 8003638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	2203      	movs	r2, #3
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0203 	and.w	r2, r3, #3
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80a2 	beq.w	80037c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	4b57      	ldr	r3, [pc, #348]	; (80037e0 <HAL_GPIO_Init+0x2e8>)
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	4a56      	ldr	r2, [pc, #344]	; (80037e0 <HAL_GPIO_Init+0x2e8>)
 8003688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800368c:	6453      	str	r3, [r2, #68]	; 0x44
 800368e:	4b54      	ldr	r3, [pc, #336]	; (80037e0 <HAL_GPIO_Init+0x2e8>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800369a:	4a52      	ldr	r2, [pc, #328]	; (80037e4 <HAL_GPIO_Init+0x2ec>)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	089b      	lsrs	r3, r3, #2
 80036a0:	3302      	adds	r3, #2
 80036a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	220f      	movs	r2, #15
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a49      	ldr	r2, [pc, #292]	; (80037e8 <HAL_GPIO_Init+0x2f0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d019      	beq.n	80036fa <HAL_GPIO_Init+0x202>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a48      	ldr	r2, [pc, #288]	; (80037ec <HAL_GPIO_Init+0x2f4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_GPIO_Init+0x1fe>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a47      	ldr	r2, [pc, #284]	; (80037f0 <HAL_GPIO_Init+0x2f8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00d      	beq.n	80036f2 <HAL_GPIO_Init+0x1fa>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a46      	ldr	r2, [pc, #280]	; (80037f4 <HAL_GPIO_Init+0x2fc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d007      	beq.n	80036ee <HAL_GPIO_Init+0x1f6>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a45      	ldr	r2, [pc, #276]	; (80037f8 <HAL_GPIO_Init+0x300>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <HAL_GPIO_Init+0x1f2>
 80036e6:	2304      	movs	r3, #4
 80036e8:	e008      	b.n	80036fc <HAL_GPIO_Init+0x204>
 80036ea:	2307      	movs	r3, #7
 80036ec:	e006      	b.n	80036fc <HAL_GPIO_Init+0x204>
 80036ee:	2303      	movs	r3, #3
 80036f0:	e004      	b.n	80036fc <HAL_GPIO_Init+0x204>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e002      	b.n	80036fc <HAL_GPIO_Init+0x204>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_GPIO_Init+0x204>
 80036fa:	2300      	movs	r3, #0
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	f002 0203 	and.w	r2, r2, #3
 8003702:	0092      	lsls	r2, r2, #2
 8003704:	4093      	lsls	r3, r2
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800370c:	4935      	ldr	r1, [pc, #212]	; (80037e4 <HAL_GPIO_Init+0x2ec>)
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	089b      	lsrs	r3, r3, #2
 8003712:	3302      	adds	r3, #2
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800371a:	4b38      	ldr	r3, [pc, #224]	; (80037fc <HAL_GPIO_Init+0x304>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800373e:	4a2f      	ldr	r2, [pc, #188]	; (80037fc <HAL_GPIO_Init+0x304>)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003744:	4b2d      	ldr	r3, [pc, #180]	; (80037fc <HAL_GPIO_Init+0x304>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003768:	4a24      	ldr	r2, [pc, #144]	; (80037fc <HAL_GPIO_Init+0x304>)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800376e:	4b23      	ldr	r3, [pc, #140]	; (80037fc <HAL_GPIO_Init+0x304>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003792:	4a1a      	ldr	r2, [pc, #104]	; (80037fc <HAL_GPIO_Init+0x304>)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003798:	4b18      	ldr	r3, [pc, #96]	; (80037fc <HAL_GPIO_Init+0x304>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037bc:	4a0f      	ldr	r2, [pc, #60]	; (80037fc <HAL_GPIO_Init+0x304>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3301      	adds	r3, #1
 80037c6:	61fb      	str	r3, [r7, #28]
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b0f      	cmp	r3, #15
 80037cc:	f67f aea2 	bls.w	8003514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	3724      	adds	r7, #36	; 0x24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40013800 	.word	0x40013800
 80037e8:	40020000 	.word	0x40020000
 80037ec:	40020400 	.word	0x40020400
 80037f0:	40020800 	.word	0x40020800
 80037f4:	40020c00 	.word	0x40020c00
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40013c00 	.word	0x40013c00

08003800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	887b      	ldrh	r3, [r7, #2]
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
 800381c:	e001      	b.n	8003822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800381e:	2300      	movs	r3, #0
 8003820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003822:	7bfb      	ldrb	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]
 800383c:	4613      	mov	r3, r2
 800383e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003840:	787b      	ldrb	r3, [r7, #1]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003846:	887a      	ldrh	r2, [r7, #2]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800384c:	e003      	b.n	8003856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800384e:	887b      	ldrh	r3, [r7, #2]
 8003850:	041a      	lsls	r2, r3, #16
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	619a      	str	r2, [r3, #24]
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e12b      	b.n	8003ace <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fe fe9a 	bl	80025c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	; 0x24
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0201 	bic.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038c8:	f001 fd7c 	bl	80053c4 <HAL_RCC_GetPCLK1Freq>
 80038cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4a81      	ldr	r2, [pc, #516]	; (8003ad8 <HAL_I2C_Init+0x274>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d807      	bhi.n	80038e8 <HAL_I2C_Init+0x84>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4a80      	ldr	r2, [pc, #512]	; (8003adc <HAL_I2C_Init+0x278>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	bf94      	ite	ls
 80038e0:	2301      	movls	r3, #1
 80038e2:	2300      	movhi	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	e006      	b.n	80038f6 <HAL_I2C_Init+0x92>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4a7d      	ldr	r2, [pc, #500]	; (8003ae0 <HAL_I2C_Init+0x27c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	bf94      	ite	ls
 80038f0:	2301      	movls	r3, #1
 80038f2:	2300      	movhi	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e0e7      	b.n	8003ace <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a78      	ldr	r2, [pc, #480]	; (8003ae4 <HAL_I2C_Init+0x280>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	0c9b      	lsrs	r3, r3, #18
 8003908:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a6a      	ldr	r2, [pc, #424]	; (8003ad8 <HAL_I2C_Init+0x274>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d802      	bhi.n	8003938 <HAL_I2C_Init+0xd4>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	3301      	adds	r3, #1
 8003936:	e009      	b.n	800394c <HAL_I2C_Init+0xe8>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	4a69      	ldr	r2, [pc, #420]	; (8003ae8 <HAL_I2C_Init+0x284>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	099b      	lsrs	r3, r3, #6
 800394a:	3301      	adds	r3, #1
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	430b      	orrs	r3, r1
 8003952:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800395e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	495c      	ldr	r1, [pc, #368]	; (8003ad8 <HAL_I2C_Init+0x274>)
 8003968:	428b      	cmp	r3, r1
 800396a:	d819      	bhi.n	80039a0 <HAL_I2C_Init+0x13c>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1e59      	subs	r1, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	fbb1 f3f3 	udiv	r3, r1, r3
 800397a:	1c59      	adds	r1, r3, #1
 800397c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003980:	400b      	ands	r3, r1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_I2C_Init+0x138>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1e59      	subs	r1, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fbb1 f3f3 	udiv	r3, r1, r3
 8003994:	3301      	adds	r3, #1
 8003996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399a:	e051      	b.n	8003a40 <HAL_I2C_Init+0x1dc>
 800399c:	2304      	movs	r3, #4
 800399e:	e04f      	b.n	8003a40 <HAL_I2C_Init+0x1dc>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d111      	bne.n	80039cc <HAL_I2C_Init+0x168>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1e58      	subs	r0, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6859      	ldr	r1, [r3, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	440b      	add	r3, r1
 80039b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ba:	3301      	adds	r3, #1
 80039bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	e012      	b.n	80039f2 <HAL_I2C_Init+0x18e>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1e58      	subs	r0, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6859      	ldr	r1, [r3, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	0099      	lsls	r1, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e2:	3301      	adds	r3, #1
 80039e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf0c      	ite	eq
 80039ec:	2301      	moveq	r3, #1
 80039ee:	2300      	movne	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_I2C_Init+0x196>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e022      	b.n	8003a40 <HAL_I2C_Init+0x1dc>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10e      	bne.n	8003a20 <HAL_I2C_Init+0x1bc>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1e58      	subs	r0, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6859      	ldr	r1, [r3, #4]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	440b      	add	r3, r1
 8003a10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a14:	3301      	adds	r3, #1
 8003a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1e:	e00f      	b.n	8003a40 <HAL_I2C_Init+0x1dc>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1e58      	subs	r0, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6859      	ldr	r1, [r3, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	0099      	lsls	r1, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a36:	3301      	adds	r3, #1
 8003a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	6809      	ldr	r1, [r1, #0]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6911      	ldr	r1, [r2, #16]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68d2      	ldr	r2, [r2, #12]
 8003a7a:	4311      	orrs	r1, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	430b      	orrs	r3, r1
 8003a82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	000186a0 	.word	0x000186a0
 8003adc:	001e847f 	.word	0x001e847f
 8003ae0:	003d08ff 	.word	0x003d08ff
 8003ae4:	431bde83 	.word	0x431bde83
 8003ae8:	10624dd3 	.word	0x10624dd3

08003aec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	461a      	mov	r2, r3
 8003af8:	460b      	mov	r3, r1
 8003afa:	817b      	strh	r3, [r7, #10]
 8003afc:	4613      	mov	r3, r2
 8003afe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b00:	f7ff f802 	bl	8002b08 <HAL_GetTick>
 8003b04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	f040 80e0 	bne.w	8003cd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	2319      	movs	r3, #25
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4970      	ldr	r1, [pc, #448]	; (8003ce0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fe02 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e0d3      	b.n	8003cd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_I2C_Master_Transmit+0x50>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e0cc      	b.n	8003cd6 <HAL_I2C_Master_Transmit+0x1ea>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d007      	beq.n	8003b62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2221      	movs	r2, #33	; 0x21
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2210      	movs	r2, #16
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	893a      	ldrh	r2, [r7, #8]
 8003b92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4a50      	ldr	r2, [pc, #320]	; (8003ce4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ba4:	8979      	ldrh	r1, [r7, #10]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	6a3a      	ldr	r2, [r7, #32]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fbbc 	bl	8004328 <I2C_MasterRequestWrite>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e08d      	b.n	8003cd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bd0:	e066      	b.n	8003ca0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	6a39      	ldr	r1, [r7, #32]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 fe7c 	bl	80048d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00d      	beq.n	8003bfe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d107      	bne.n	8003bfa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e06b      	b.n	8003cd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	781a      	ldrb	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d11b      	bne.n	8003c74 <HAL_I2C_Master_Transmit+0x188>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d017      	beq.n	8003c74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	6a39      	ldr	r1, [r7, #32]
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fe6c 	bl	8004956 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00d      	beq.n	8003ca0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d107      	bne.n	8003c9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e01a      	b.n	8003cd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d194      	bne.n	8003bd2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	00100002 	.word	0x00100002
 8003ce4:	ffff0000 	.word	0xffff0000

08003ce8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	817b      	strh	r3, [r7, #10]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	813b      	strh	r3, [r7, #8]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d02:	f7fe ff01 	bl	8002b08 <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	f040 80d9 	bne.w	8003ec8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2319      	movs	r3, #25
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	496d      	ldr	r1, [pc, #436]	; (8003ed4 <HAL_I2C_Mem_Write+0x1ec>)
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fd01 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e0cc      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_I2C_Mem_Write+0x56>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e0c5      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d007      	beq.n	8003d64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2221      	movs	r2, #33	; 0x21
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2240      	movs	r2, #64	; 0x40
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a3a      	ldr	r2, [r7, #32]
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4a4d      	ldr	r2, [pc, #308]	; (8003ed8 <HAL_I2C_Mem_Write+0x1f0>)
 8003da4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003da6:	88f8      	ldrh	r0, [r7, #6]
 8003da8:	893a      	ldrh	r2, [r7, #8]
 8003daa:	8979      	ldrh	r1, [r7, #10]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	4603      	mov	r3, r0
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fb38 	bl	800442c <I2C_RequestMemoryWrite>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d052      	beq.n	8003e68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e081      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fd82 	bl	80048d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d107      	bne.n	8003dee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e06b      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	781a      	ldrb	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d11b      	bne.n	8003e68 <HAL_I2C_Mem_Write+0x180>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d017      	beq.n	8003e68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	781a      	ldrb	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1aa      	bne.n	8003dc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fd6e 	bl	8004956 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00d      	beq.n	8003e9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d107      	bne.n	8003e98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e016      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e000      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
  }
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	00100002 	.word	0x00100002
 8003ed8:	ffff0000 	.word	0xffff0000

08003edc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08c      	sub	sp, #48	; 0x30
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	4608      	mov	r0, r1
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4603      	mov	r3, r0
 8003eec:	817b      	strh	r3, [r7, #10]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	813b      	strh	r3, [r7, #8]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ef6:	f7fe fe07 	bl	8002b08 <HAL_GetTick>
 8003efa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	f040 8208 	bne.w	800431a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	2319      	movs	r3, #25
 8003f10:	2201      	movs	r2, #1
 8003f12:	497b      	ldr	r1, [pc, #492]	; (8004100 <HAL_I2C_Mem_Read+0x224>)
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fc07 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f20:	2302      	movs	r3, #2
 8003f22:	e1fb      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_I2C_Mem_Read+0x56>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e1f4      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d007      	beq.n	8003f58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2222      	movs	r2, #34	; 0x22
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2240      	movs	r2, #64	; 0x40
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4a5b      	ldr	r2, [pc, #364]	; (8004104 <HAL_I2C_Mem_Read+0x228>)
 8003f98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f9a:	88f8      	ldrh	r0, [r7, #6]
 8003f9c:	893a      	ldrh	r2, [r7, #8]
 8003f9e:	8979      	ldrh	r1, [r7, #10]
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	4603      	mov	r3, r0
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fad4 	bl	8004558 <I2C_RequestMemoryRead>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e1b0      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d113      	bne.n	8003fea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	623b      	str	r3, [r7, #32]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	623b      	str	r3, [r7, #32]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	e184      	b.n	80042f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d11b      	bne.n	800402a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004000:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	e164      	b.n	80042f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	2b02      	cmp	r3, #2
 8004030:	d11b      	bne.n	800406a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004040:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004050:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	e144      	b.n	80042f4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004080:	e138      	b.n	80042f4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004086:	2b03      	cmp	r3, #3
 8004088:	f200 80f1 	bhi.w	800426e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004090:	2b01      	cmp	r3, #1
 8004092:	d123      	bne.n	80040dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fc9d 	bl	80049d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e139      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040da:	e10b      	b.n	80042f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d14e      	bne.n	8004182 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ea:	2200      	movs	r2, #0
 80040ec:	4906      	ldr	r1, [pc, #24]	; (8004108 <HAL_I2C_Mem_Read+0x22c>)
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fb1a 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e10e      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
 80040fe:	bf00      	nop
 8004100:	00100002 	.word	0x00100002
 8004104:	ffff0000 	.word	0xffff0000
 8004108:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004180:	e0b8      	b.n	80042f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	2200      	movs	r2, #0
 800418a:	4966      	ldr	r1, [pc, #408]	; (8004324 <HAL_I2C_Mem_Read+0x448>)
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 facb 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0bf      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	2200      	movs	r2, #0
 80041e6:	494f      	ldr	r1, [pc, #316]	; (8004324 <HAL_I2C_Mem_Read+0x448>)
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fa9d 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e091      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004206:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800426c:	e042      	b.n	80042f4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800426e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004270:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fbb0 	bl	80049d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e04c      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d118      	bne.n	80042f4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f47f aec2 	bne.w	8004082 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	e000      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800431a:	2302      	movs	r3, #2
  }
}
 800431c:	4618      	mov	r0, r3
 800431e:	3728      	adds	r7, #40	; 0x28
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	00010004 	.word	0x00010004

08004328 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	607a      	str	r2, [r7, #4]
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	460b      	mov	r3, r1
 8004336:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d006      	beq.n	8004352 <I2C_MasterRequestWrite+0x2a>
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d003      	beq.n	8004352 <I2C_MasterRequestWrite+0x2a>
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004350:	d108      	bne.n	8004364 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e00b      	b.n	800437c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	2b12      	cmp	r3, #18
 800436a:	d107      	bne.n	800437c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f9cd 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00d      	beq.n	80043b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a2:	d103      	bne.n	80043ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e035      	b.n	800441c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b8:	d108      	bne.n	80043cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ba:	897b      	ldrh	r3, [r7, #10]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043c8:	611a      	str	r2, [r3, #16]
 80043ca:	e01b      	b.n	8004404 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043cc:	897b      	ldrh	r3, [r7, #10]
 80043ce:	11db      	asrs	r3, r3, #7
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f003 0306 	and.w	r3, r3, #6
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f063 030f 	orn	r3, r3, #15
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	490e      	ldr	r1, [pc, #56]	; (8004424 <I2C_MasterRequestWrite+0xfc>)
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f9f3 	bl	80047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e010      	b.n	800441c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043fa:	897b      	ldrh	r3, [r7, #10]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4907      	ldr	r1, [pc, #28]	; (8004428 <I2C_MasterRequestWrite+0x100>)
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f9e3 	bl	80047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	00010008 	.word	0x00010008
 8004428:	00010002 	.word	0x00010002

0800442c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af02      	add	r7, sp, #8
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	4608      	mov	r0, r1
 8004436:	4611      	mov	r1, r2
 8004438:	461a      	mov	r2, r3
 800443a:	4603      	mov	r3, r0
 800443c:	817b      	strh	r3, [r7, #10]
 800443e:	460b      	mov	r3, r1
 8004440:	813b      	strh	r3, [r7, #8]
 8004442:	4613      	mov	r3, r2
 8004444:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004454:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	2200      	movs	r2, #0
 800445e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f960 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00d      	beq.n	800448a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800447c:	d103      	bne.n	8004486 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e05f      	b.n	800454a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800448a:	897b      	ldrh	r3, [r7, #10]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004498:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	6a3a      	ldr	r2, [r7, #32]
 800449e:	492d      	ldr	r1, [pc, #180]	; (8004554 <I2C_RequestMemoryWrite+0x128>)
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f998 	bl	80047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e04c      	b.n	800454a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c8:	6a39      	ldr	r1, [r7, #32]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fa02 	bl	80048d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00d      	beq.n	80044f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d107      	bne.n	80044ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e02b      	b.n	800454a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d105      	bne.n	8004504 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044f8:	893b      	ldrh	r3, [r7, #8]
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	611a      	str	r2, [r3, #16]
 8004502:	e021      	b.n	8004548 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004504:	893b      	ldrh	r3, [r7, #8]
 8004506:	0a1b      	lsrs	r3, r3, #8
 8004508:	b29b      	uxth	r3, r3
 800450a:	b2da      	uxtb	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004514:	6a39      	ldr	r1, [r7, #32]
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f9dc 	bl	80048d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00d      	beq.n	800453e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	2b04      	cmp	r3, #4
 8004528:	d107      	bne.n	800453a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004538:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e005      	b.n	800454a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800453e:	893b      	ldrh	r3, [r7, #8]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	00010002 	.word	0x00010002

08004558 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af02      	add	r7, sp, #8
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	4608      	mov	r0, r1
 8004562:	4611      	mov	r1, r2
 8004564:	461a      	mov	r2, r3
 8004566:	4603      	mov	r3, r0
 8004568:	817b      	strh	r3, [r7, #10]
 800456a:	460b      	mov	r3, r1
 800456c:	813b      	strh	r3, [r7, #8]
 800456e:	4613      	mov	r3, r2
 8004570:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004580:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004590:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	2200      	movs	r2, #0
 800459a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f8c2 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00d      	beq.n	80045c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b8:	d103      	bne.n	80045c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e0aa      	b.n	800471c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045c6:	897b      	ldrh	r3, [r7, #10]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	461a      	mov	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	6a3a      	ldr	r2, [r7, #32]
 80045da:	4952      	ldr	r1, [pc, #328]	; (8004724 <I2C_RequestMemoryRead+0x1cc>)
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f8fa 	bl	80047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e097      	b.n	800471c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	6a39      	ldr	r1, [r7, #32]
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f964 	bl	80048d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00d      	beq.n	800462e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	2b04      	cmp	r3, #4
 8004618:	d107      	bne.n	800462a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004628:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e076      	b.n	800471c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d105      	bne.n	8004640 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004634:	893b      	ldrh	r3, [r7, #8]
 8004636:	b2da      	uxtb	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	611a      	str	r2, [r3, #16]
 800463e:	e021      	b.n	8004684 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004640:	893b      	ldrh	r3, [r7, #8]
 8004642:	0a1b      	lsrs	r3, r3, #8
 8004644:	b29b      	uxth	r3, r3
 8004646:	b2da      	uxtb	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800464e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004650:	6a39      	ldr	r1, [r7, #32]
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f93e 	bl	80048d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00d      	beq.n	800467a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	2b04      	cmp	r3, #4
 8004664:	d107      	bne.n	8004676 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004674:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e050      	b.n	800471c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800467a:	893b      	ldrh	r3, [r7, #8]
 800467c:	b2da      	uxtb	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004686:	6a39      	ldr	r1, [r7, #32]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f923 	bl	80048d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00d      	beq.n	80046b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	2b04      	cmp	r3, #4
 800469a:	d107      	bne.n	80046ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e035      	b.n	800471c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f82b 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00d      	beq.n	80046f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e6:	d103      	bne.n	80046f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e013      	b.n	800471c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046f4:	897b      	ldrh	r3, [r7, #10]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	6a3a      	ldr	r2, [r7, #32]
 8004708:	4906      	ldr	r1, [pc, #24]	; (8004724 <I2C_RequestMemoryRead+0x1cc>)
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 f863 	bl	80047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	00010002 	.word	0x00010002

08004728 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	4613      	mov	r3, r2
 8004736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004738:	e025      	b.n	8004786 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d021      	beq.n	8004786 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004742:	f7fe f9e1 	bl	8002b08 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d302      	bcc.n	8004758 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d116      	bne.n	8004786 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f043 0220 	orr.w	r2, r3, #32
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e023      	b.n	80047ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	0c1b      	lsrs	r3, r3, #16
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	d10d      	bne.n	80047ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	43da      	mvns	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4013      	ands	r3, r2
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bf0c      	ite	eq
 80047a2:	2301      	moveq	r3, #1
 80047a4:	2300      	movne	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	e00c      	b.n	80047c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	43da      	mvns	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4013      	ands	r3, r2
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bf0c      	ite	eq
 80047be:	2301      	moveq	r3, #1
 80047c0:	2300      	movne	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d0b6      	beq.n	800473a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047e4:	e051      	b.n	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f4:	d123      	bne.n	800483e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004804:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800480e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f043 0204 	orr.w	r2, r3, #4
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e046      	b.n	80048cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004844:	d021      	beq.n	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004846:	f7fe f95f 	bl	8002b08 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	429a      	cmp	r2, r3
 8004854:	d302      	bcc.n	800485c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d116      	bne.n	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f043 0220 	orr.w	r2, r3, #32
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e020      	b.n	80048cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	0c1b      	lsrs	r3, r3, #16
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d10c      	bne.n	80048ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	43da      	mvns	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4013      	ands	r3, r2
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bf14      	ite	ne
 80048a6:	2301      	movne	r3, #1
 80048a8:	2300      	moveq	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	e00b      	b.n	80048c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	43da      	mvns	r2, r3
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4013      	ands	r3, r2
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bf14      	ite	ne
 80048c0:	2301      	movne	r3, #1
 80048c2:	2300      	moveq	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d18d      	bne.n	80047e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048e0:	e02d      	b.n	800493e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f8ce 	bl	8004a84 <I2C_IsAcknowledgeFailed>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e02d      	b.n	800494e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f8:	d021      	beq.n	800493e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fa:	f7fe f905 	bl	8002b08 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	429a      	cmp	r2, r3
 8004908:	d302      	bcc.n	8004910 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d116      	bne.n	800493e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f043 0220 	orr.w	r2, r3, #32
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e007      	b.n	800494e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004948:	2b80      	cmp	r3, #128	; 0x80
 800494a:	d1ca      	bne.n	80048e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004962:	e02d      	b.n	80049c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f88d 	bl	8004a84 <I2C_IsAcknowledgeFailed>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e02d      	b.n	80049d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497a:	d021      	beq.n	80049c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800497c:	f7fe f8c4 	bl	8002b08 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	429a      	cmp	r2, r3
 800498a:	d302      	bcc.n	8004992 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d116      	bne.n	80049c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	f043 0220 	orr.w	r2, r3, #32
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e007      	b.n	80049d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d1ca      	bne.n	8004964 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049e4:	e042      	b.n	8004a6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	f003 0310 	and.w	r3, r3, #16
 80049f0:	2b10      	cmp	r3, #16
 80049f2:	d119      	bne.n	8004a28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0210 	mvn.w	r2, #16
 80049fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e029      	b.n	8004a7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a28:	f7fe f86e 	bl	8002b08 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d302      	bcc.n	8004a3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d116      	bne.n	8004a6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	f043 0220 	orr.w	r2, r3, #32
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e007      	b.n	8004a7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a76:	2b40      	cmp	r3, #64	; 0x40
 8004a78:	d1b5      	bne.n	80049e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a9a:	d11b      	bne.n	8004ad4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004aa4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	f043 0204 	orr.w	r2, r3, #4
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e267      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d075      	beq.n	8004bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b02:	4b88      	ldr	r3, [pc, #544]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d00c      	beq.n	8004b28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b0e:	4b85      	ldr	r3, [pc, #532]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d112      	bne.n	8004b40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b1a:	4b82      	ldr	r3, [pc, #520]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b26:	d10b      	bne.n	8004b40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b28:	4b7e      	ldr	r3, [pc, #504]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d05b      	beq.n	8004bec <HAL_RCC_OscConfig+0x108>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d157      	bne.n	8004bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e242      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b48:	d106      	bne.n	8004b58 <HAL_RCC_OscConfig+0x74>
 8004b4a:	4b76      	ldr	r3, [pc, #472]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a75      	ldr	r2, [pc, #468]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	e01d      	b.n	8004b94 <HAL_RCC_OscConfig+0xb0>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b60:	d10c      	bne.n	8004b7c <HAL_RCC_OscConfig+0x98>
 8004b62:	4b70      	ldr	r3, [pc, #448]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a6f      	ldr	r2, [pc, #444]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	4b6d      	ldr	r3, [pc, #436]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a6c      	ldr	r2, [pc, #432]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	e00b      	b.n	8004b94 <HAL_RCC_OscConfig+0xb0>
 8004b7c:	4b69      	ldr	r3, [pc, #420]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a68      	ldr	r2, [pc, #416]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	4b66      	ldr	r3, [pc, #408]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a65      	ldr	r2, [pc, #404]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d013      	beq.n	8004bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fd ffb4 	bl	8002b08 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7fd ffb0 	bl	8002b08 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	; 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e207      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb6:	4b5b      	ldr	r3, [pc, #364]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0xc0>
 8004bc2:	e014      	b.n	8004bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7fd ffa0 	bl	8002b08 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bcc:	f7fd ff9c 	bl	8002b08 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	; 0x64
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e1f3      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bde:	4b51      	ldr	r3, [pc, #324]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0xe8>
 8004bea:	e000      	b.n	8004bee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d063      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bfa:	4b4a      	ldr	r3, [pc, #296]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00b      	beq.n	8004c1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c06:	4b47      	ldr	r3, [pc, #284]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d11c      	bne.n	8004c4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c12:	4b44      	ldr	r3, [pc, #272]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d116      	bne.n	8004c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c1e:	4b41      	ldr	r3, [pc, #260]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d005      	beq.n	8004c36 <HAL_RCC_OscConfig+0x152>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d001      	beq.n	8004c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e1c7      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c36:	4b3b      	ldr	r3, [pc, #236]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4937      	ldr	r1, [pc, #220]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c4a:	e03a      	b.n	8004cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d020      	beq.n	8004c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c54:	4b34      	ldr	r3, [pc, #208]	; (8004d28 <HAL_RCC_OscConfig+0x244>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5a:	f7fd ff55 	bl	8002b08 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c62:	f7fd ff51 	bl	8002b08 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e1a8      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c74:	4b2b      	ldr	r3, [pc, #172]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c80:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4925      	ldr	r1, [pc, #148]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	600b      	str	r3, [r1, #0]
 8004c94:	e015      	b.n	8004cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c96:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <HAL_RCC_OscConfig+0x244>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fd ff34 	bl	8002b08 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ca4:	f7fd ff30 	bl	8002b08 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e187      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cb6:	4b1b      	ldr	r3, [pc, #108]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d036      	beq.n	8004d3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d016      	beq.n	8004d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cd6:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <HAL_RCC_OscConfig+0x248>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cdc:	f7fd ff14 	bl	8002b08 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce4:	f7fd ff10 	bl	8002b08 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e167      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x200>
 8004d02:	e01b      	b.n	8004d3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d04:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <HAL_RCC_OscConfig+0x248>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0a:	f7fd fefd 	bl	8002b08 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d10:	e00e      	b.n	8004d30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d12:	f7fd fef9 	bl	8002b08 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d907      	bls.n	8004d30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e150      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
 8004d24:	40023800 	.word	0x40023800
 8004d28:	42470000 	.word	0x42470000
 8004d2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d30:	4b88      	ldr	r3, [pc, #544]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1ea      	bne.n	8004d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8097 	beq.w	8004e78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4e:	4b81      	ldr	r3, [pc, #516]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10f      	bne.n	8004d7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	4b7d      	ldr	r3, [pc, #500]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	4a7c      	ldr	r2, [pc, #496]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d68:	6413      	str	r3, [r2, #64]	; 0x40
 8004d6a:	4b7a      	ldr	r3, [pc, #488]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d72:	60bb      	str	r3, [r7, #8]
 8004d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d76:	2301      	movs	r3, #1
 8004d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7a:	4b77      	ldr	r3, [pc, #476]	; (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d118      	bne.n	8004db8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d86:	4b74      	ldr	r3, [pc, #464]	; (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a73      	ldr	r2, [pc, #460]	; (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d92:	f7fd feb9 	bl	8002b08 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d9a:	f7fd feb5 	bl	8002b08 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e10c      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dac:	4b6a      	ldr	r3, [pc, #424]	; (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d106      	bne.n	8004dce <HAL_RCC_OscConfig+0x2ea>
 8004dc0:	4b64      	ldr	r3, [pc, #400]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	4a63      	ldr	r2, [pc, #396]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	6713      	str	r3, [r2, #112]	; 0x70
 8004dcc:	e01c      	b.n	8004e08 <HAL_RCC_OscConfig+0x324>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	d10c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x30c>
 8004dd6:	4b5f      	ldr	r3, [pc, #380]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dda:	4a5e      	ldr	r2, [pc, #376]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004ddc:	f043 0304 	orr.w	r3, r3, #4
 8004de0:	6713      	str	r3, [r2, #112]	; 0x70
 8004de2:	4b5c      	ldr	r3, [pc, #368]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de6:	4a5b      	ldr	r2, [pc, #364]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	6713      	str	r3, [r2, #112]	; 0x70
 8004dee:	e00b      	b.n	8004e08 <HAL_RCC_OscConfig+0x324>
 8004df0:	4b58      	ldr	r3, [pc, #352]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	4a57      	ldr	r2, [pc, #348]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfc:	4b55      	ldr	r3, [pc, #340]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	4a54      	ldr	r2, [pc, #336]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e02:	f023 0304 	bic.w	r3, r3, #4
 8004e06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d015      	beq.n	8004e3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e10:	f7fd fe7a 	bl	8002b08 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	e00a      	b.n	8004e2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e18:	f7fd fe76 	bl	8002b08 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e0cb      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2e:	4b49      	ldr	r3, [pc, #292]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0ee      	beq.n	8004e18 <HAL_RCC_OscConfig+0x334>
 8004e3a:	e014      	b.n	8004e66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3c:	f7fd fe64 	bl	8002b08 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e42:	e00a      	b.n	8004e5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e44:	f7fd fe60 	bl	8002b08 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e0b5      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5a:	4b3e      	ldr	r3, [pc, #248]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1ee      	bne.n	8004e44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e66:	7dfb      	ldrb	r3, [r7, #23]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d105      	bne.n	8004e78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e6c:	4b39      	ldr	r3, [pc, #228]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	4a38      	ldr	r2, [pc, #224]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80a1 	beq.w	8004fc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e82:	4b34      	ldr	r3, [pc, #208]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 030c 	and.w	r3, r3, #12
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d05c      	beq.n	8004f48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d141      	bne.n	8004f1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e96:	4b31      	ldr	r3, [pc, #196]	; (8004f5c <HAL_RCC_OscConfig+0x478>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fd fe34 	bl	8002b08 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea4:	f7fd fe30 	bl	8002b08 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e087      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	4b27      	ldr	r3, [pc, #156]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	019b      	lsls	r3, r3, #6
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	085b      	lsrs	r3, r3, #1
 8004eda:	3b01      	subs	r3, #1
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	061b      	lsls	r3, r3, #24
 8004ee6:	491b      	ldr	r1, [pc, #108]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eec:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <HAL_RCC_OscConfig+0x478>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef2:	f7fd fe09 	bl	8002b08 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004efa:	f7fd fe05 	bl	8002b08 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e05c      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f0c:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <HAL_RCC_OscConfig+0x416>
 8004f18:	e054      	b.n	8004fc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1a:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <HAL_RCC_OscConfig+0x478>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fd fdf2 	bl	8002b08 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f28:	f7fd fdee 	bl	8002b08 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e045      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3a:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x444>
 8004f46:	e03d      	b.n	8004fc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d107      	bne.n	8004f60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e038      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
 8004f54:	40023800 	.word	0x40023800
 8004f58:	40007000 	.word	0x40007000
 8004f5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f60:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <HAL_RCC_OscConfig+0x4ec>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d028      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d121      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d11a      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d111      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800

08004fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0cc      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe8:	4b68      	ldr	r3, [pc, #416]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d90c      	bls.n	8005010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff6:	4b65      	ldr	r3, [pc, #404]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffe:	4b63      	ldr	r3, [pc, #396]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d001      	beq.n	8005010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0b8      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d020      	beq.n	800505e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005028:	4b59      	ldr	r3, [pc, #356]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4a58      	ldr	r2, [pc, #352]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005032:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005040:	4b53      	ldr	r3, [pc, #332]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4a52      	ldr	r2, [pc, #328]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800504a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800504c:	4b50      	ldr	r3, [pc, #320]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	494d      	ldr	r1, [pc, #308]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d044      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d107      	bne.n	8005082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005072:	4b47      	ldr	r3, [pc, #284]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d119      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e07f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d003      	beq.n	8005092 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800508e:	2b03      	cmp	r3, #3
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005092:	4b3f      	ldr	r3, [pc, #252]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e06f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a2:	4b3b      	ldr	r3, [pc, #236]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e067      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050b2:	4b37      	ldr	r3, [pc, #220]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f023 0203 	bic.w	r2, r3, #3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4934      	ldr	r1, [pc, #208]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050c4:	f7fd fd20 	bl	8002b08 <HAL_GetTick>
 80050c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050cc:	f7fd fd1c 	bl	8002b08 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e04f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	4b2b      	ldr	r3, [pc, #172]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 020c 	and.w	r2, r3, #12
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d1eb      	bne.n	80050cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050f4:	4b25      	ldr	r3, [pc, #148]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d20c      	bcs.n	800511c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005102:	4b22      	ldr	r3, [pc, #136]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	4b20      	ldr	r3, [pc, #128]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d001      	beq.n	800511c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e032      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005128:	4b19      	ldr	r3, [pc, #100]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4916      	ldr	r1, [pc, #88]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	490e      	ldr	r1, [pc, #56]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800515a:	f000 f821 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 800515e:	4602      	mov	r2, r0
 8005160:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	490a      	ldr	r1, [pc, #40]	; (8005194 <HAL_RCC_ClockConfig+0x1c0>)
 800516c:	5ccb      	ldrb	r3, [r1, r3]
 800516e:	fa22 f303 	lsr.w	r3, r2, r3
 8005172:	4a09      	ldr	r2, [pc, #36]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 8005174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005176:	4b09      	ldr	r3, [pc, #36]	; (800519c <HAL_RCC_ClockConfig+0x1c8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f7fd fc80 	bl	8002a80 <HAL_InitTick>

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40023c00 	.word	0x40023c00
 8005190:	40023800 	.word	0x40023800
 8005194:	0800aec8 	.word	0x0800aec8
 8005198:	2000001c 	.word	0x2000001c
 800519c:	20000020 	.word	0x20000020

080051a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a4:	b094      	sub	sp, #80	; 0x50
 80051a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	647b      	str	r3, [r7, #68]	; 0x44
 80051ac:	2300      	movs	r3, #0
 80051ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b0:	2300      	movs	r3, #0
 80051b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051b8:	4b79      	ldr	r3, [pc, #484]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 030c 	and.w	r3, r3, #12
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d00d      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0x40>
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	f200 80e1 	bhi.w	800538c <HAL_RCC_GetSysClockFreq+0x1ec>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_RCC_GetSysClockFreq+0x34>
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d003      	beq.n	80051da <HAL_RCC_GetSysClockFreq+0x3a>
 80051d2:	e0db      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051d4:	4b73      	ldr	r3, [pc, #460]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80051d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80051d8:	e0db      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051da:	4b73      	ldr	r3, [pc, #460]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80051dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051de:	e0d8      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051e0:	4b6f      	ldr	r3, [pc, #444]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ea:	4b6d      	ldr	r3, [pc, #436]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d063      	beq.n	80052be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051f6:	4b6a      	ldr	r3, [pc, #424]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	099b      	lsrs	r3, r3, #6
 80051fc:	2200      	movs	r2, #0
 80051fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005200:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005208:	633b      	str	r3, [r7, #48]	; 0x30
 800520a:	2300      	movs	r3, #0
 800520c:	637b      	str	r3, [r7, #52]	; 0x34
 800520e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005212:	4622      	mov	r2, r4
 8005214:	462b      	mov	r3, r5
 8005216:	f04f 0000 	mov.w	r0, #0
 800521a:	f04f 0100 	mov.w	r1, #0
 800521e:	0159      	lsls	r1, r3, #5
 8005220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005224:	0150      	lsls	r0, r2, #5
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4621      	mov	r1, r4
 800522c:	1a51      	subs	r1, r2, r1
 800522e:	6139      	str	r1, [r7, #16]
 8005230:	4629      	mov	r1, r5
 8005232:	eb63 0301 	sbc.w	r3, r3, r1
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005244:	4659      	mov	r1, fp
 8005246:	018b      	lsls	r3, r1, #6
 8005248:	4651      	mov	r1, sl
 800524a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800524e:	4651      	mov	r1, sl
 8005250:	018a      	lsls	r2, r1, #6
 8005252:	4651      	mov	r1, sl
 8005254:	ebb2 0801 	subs.w	r8, r2, r1
 8005258:	4659      	mov	r1, fp
 800525a:	eb63 0901 	sbc.w	r9, r3, r1
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800526a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800526e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005272:	4690      	mov	r8, r2
 8005274:	4699      	mov	r9, r3
 8005276:	4623      	mov	r3, r4
 8005278:	eb18 0303 	adds.w	r3, r8, r3
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	462b      	mov	r3, r5
 8005280:	eb49 0303 	adc.w	r3, r9, r3
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005292:	4629      	mov	r1, r5
 8005294:	024b      	lsls	r3, r1, #9
 8005296:	4621      	mov	r1, r4
 8005298:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800529c:	4621      	mov	r1, r4
 800529e:	024a      	lsls	r2, r1, #9
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a6:	2200      	movs	r2, #0
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052b0:	f7fb fd42 	bl	8000d38 <__aeabi_uldivmod>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4613      	mov	r3, r2
 80052ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052bc:	e058      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052be:	4b38      	ldr	r3, [pc, #224]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	099b      	lsrs	r3, r3, #6
 80052c4:	2200      	movs	r2, #0
 80052c6:	4618      	mov	r0, r3
 80052c8:	4611      	mov	r1, r2
 80052ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ce:	623b      	str	r3, [r7, #32]
 80052d0:	2300      	movs	r3, #0
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
 80052d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052d8:	4642      	mov	r2, r8
 80052da:	464b      	mov	r3, r9
 80052dc:	f04f 0000 	mov.w	r0, #0
 80052e0:	f04f 0100 	mov.w	r1, #0
 80052e4:	0159      	lsls	r1, r3, #5
 80052e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052ea:	0150      	lsls	r0, r2, #5
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4641      	mov	r1, r8
 80052f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80052f6:	4649      	mov	r1, r9
 80052f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005308:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800530c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005310:	ebb2 040a 	subs.w	r4, r2, sl
 8005314:	eb63 050b 	sbc.w	r5, r3, fp
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	00eb      	lsls	r3, r5, #3
 8005322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005326:	00e2      	lsls	r2, r4, #3
 8005328:	4614      	mov	r4, r2
 800532a:	461d      	mov	r5, r3
 800532c:	4643      	mov	r3, r8
 800532e:	18e3      	adds	r3, r4, r3
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	464b      	mov	r3, r9
 8005334:	eb45 0303 	adc.w	r3, r5, r3
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005346:	4629      	mov	r1, r5
 8005348:	028b      	lsls	r3, r1, #10
 800534a:	4621      	mov	r1, r4
 800534c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005350:	4621      	mov	r1, r4
 8005352:	028a      	lsls	r2, r1, #10
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800535a:	2200      	movs	r2, #0
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	61fa      	str	r2, [r7, #28]
 8005360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005364:	f7fb fce8 	bl	8000d38 <__aeabi_uldivmod>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4613      	mov	r3, r2
 800536e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	0c1b      	lsrs	r3, r3, #16
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	3301      	adds	r3, #1
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005380:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800538a:	e002      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800538e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005394:	4618      	mov	r0, r3
 8005396:	3750      	adds	r7, #80	; 0x50
 8005398:	46bd      	mov	sp, r7
 800539a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800539e:	bf00      	nop
 80053a0:	40023800 	.word	0x40023800
 80053a4:	00f42400 	.word	0x00f42400
 80053a8:	007a1200 	.word	0x007a1200

080053ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b0:	4b03      	ldr	r3, [pc, #12]	; (80053c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053b2:	681b      	ldr	r3, [r3, #0]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	2000001c 	.word	0x2000001c

080053c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053c8:	f7ff fff0 	bl	80053ac <HAL_RCC_GetHCLKFreq>
 80053cc:	4602      	mov	r2, r0
 80053ce:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	0a9b      	lsrs	r3, r3, #10
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	4903      	ldr	r1, [pc, #12]	; (80053e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053da:	5ccb      	ldrb	r3, [r1, r3]
 80053dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40023800 	.word	0x40023800
 80053e8:	0800aed8 	.word	0x0800aed8

080053ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053f0:	f7ff ffdc 	bl	80053ac <HAL_RCC_GetHCLKFreq>
 80053f4:	4602      	mov	r2, r0
 80053f6:	4b05      	ldr	r3, [pc, #20]	; (800540c <HAL_RCC_GetPCLK2Freq+0x20>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	0b5b      	lsrs	r3, r3, #13
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	4903      	ldr	r1, [pc, #12]	; (8005410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005402:	5ccb      	ldrb	r3, [r1, r3]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005408:	4618      	mov	r0, r3
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40023800 	.word	0x40023800
 8005410:	0800aed8 	.word	0x0800aed8

08005414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e07b      	b.n	800551e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	2b00      	cmp	r3, #0
 800542c:	d108      	bne.n	8005440 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005436:	d009      	beq.n	800544c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	61da      	str	r2, [r3, #28]
 800543e:	e005      	b.n	800544c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fd f8f4 	bl	8002654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005482:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d0:	ea42 0103 	orr.w	r1, r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	0c1b      	lsrs	r3, r3, #16
 80054ea:	f003 0104 	and.w	r1, r3, #4
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	f003 0210 	and.w	r2, r3, #16
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800550c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b082      	sub	sp, #8
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e03f      	b.n	80055b8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d106      	bne.n	8005552 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7fd f8c9 	bl	80026e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2224      	movs	r2, #36	; 0x24
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005568:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f828 	bl	80055c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800557e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695a      	ldr	r2, [r3, #20]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800558e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800559e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c4:	b0c0      	sub	sp, #256	; 0x100
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055dc:	68d9      	ldr	r1, [r3, #12]
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	ea40 0301 	orr.w	r3, r0, r1
 80055e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	431a      	orrs	r2, r3
 8005600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005618:	f021 010c 	bic.w	r1, r1, #12
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005626:	430b      	orrs	r3, r1
 8005628:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563a:	6999      	ldr	r1, [r3, #24]
 800563c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	ea40 0301 	orr.w	r3, r0, r1
 8005646:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4b8f      	ldr	r3, [pc, #572]	; (800588c <UART_SetConfig+0x2cc>)
 8005650:	429a      	cmp	r2, r3
 8005652:	d005      	beq.n	8005660 <UART_SetConfig+0xa0>
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	4b8d      	ldr	r3, [pc, #564]	; (8005890 <UART_SetConfig+0x2d0>)
 800565c:	429a      	cmp	r2, r3
 800565e:	d104      	bne.n	800566a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005660:	f7ff fec4 	bl	80053ec <HAL_RCC_GetPCLK2Freq>
 8005664:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005668:	e003      	b.n	8005672 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800566a:	f7ff feab 	bl	80053c4 <HAL_RCC_GetPCLK1Freq>
 800566e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800567c:	f040 810c 	bne.w	8005898 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005684:	2200      	movs	r2, #0
 8005686:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800568a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800568e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005692:	4622      	mov	r2, r4
 8005694:	462b      	mov	r3, r5
 8005696:	1891      	adds	r1, r2, r2
 8005698:	65b9      	str	r1, [r7, #88]	; 0x58
 800569a:	415b      	adcs	r3, r3
 800569c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800569e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056a2:	4621      	mov	r1, r4
 80056a4:	eb12 0801 	adds.w	r8, r2, r1
 80056a8:	4629      	mov	r1, r5
 80056aa:	eb43 0901 	adc.w	r9, r3, r1
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	f04f 0300 	mov.w	r3, #0
 80056b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056c2:	4690      	mov	r8, r2
 80056c4:	4699      	mov	r9, r3
 80056c6:	4623      	mov	r3, r4
 80056c8:	eb18 0303 	adds.w	r3, r8, r3
 80056cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056d0:	462b      	mov	r3, r5
 80056d2:	eb49 0303 	adc.w	r3, r9, r3
 80056d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056ee:	460b      	mov	r3, r1
 80056f0:	18db      	adds	r3, r3, r3
 80056f2:	653b      	str	r3, [r7, #80]	; 0x50
 80056f4:	4613      	mov	r3, r2
 80056f6:	eb42 0303 	adc.w	r3, r2, r3
 80056fa:	657b      	str	r3, [r7, #84]	; 0x54
 80056fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005700:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005704:	f7fb fb18 	bl	8000d38 <__aeabi_uldivmod>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4b61      	ldr	r3, [pc, #388]	; (8005894 <UART_SetConfig+0x2d4>)
 800570e:	fba3 2302 	umull	r2, r3, r3, r2
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	011c      	lsls	r4, r3, #4
 8005716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800571a:	2200      	movs	r2, #0
 800571c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005720:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005724:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005728:	4642      	mov	r2, r8
 800572a:	464b      	mov	r3, r9
 800572c:	1891      	adds	r1, r2, r2
 800572e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005730:	415b      	adcs	r3, r3
 8005732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005734:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005738:	4641      	mov	r1, r8
 800573a:	eb12 0a01 	adds.w	sl, r2, r1
 800573e:	4649      	mov	r1, r9
 8005740:	eb43 0b01 	adc.w	fp, r3, r1
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005750:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005754:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005758:	4692      	mov	sl, r2
 800575a:	469b      	mov	fp, r3
 800575c:	4643      	mov	r3, r8
 800575e:	eb1a 0303 	adds.w	r3, sl, r3
 8005762:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005766:	464b      	mov	r3, r9
 8005768:	eb4b 0303 	adc.w	r3, fp, r3
 800576c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800577c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005780:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005784:	460b      	mov	r3, r1
 8005786:	18db      	adds	r3, r3, r3
 8005788:	643b      	str	r3, [r7, #64]	; 0x40
 800578a:	4613      	mov	r3, r2
 800578c:	eb42 0303 	adc.w	r3, r2, r3
 8005790:	647b      	str	r3, [r7, #68]	; 0x44
 8005792:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005796:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800579a:	f7fb facd 	bl	8000d38 <__aeabi_uldivmod>
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	4611      	mov	r1, r2
 80057a4:	4b3b      	ldr	r3, [pc, #236]	; (8005894 <UART_SetConfig+0x2d4>)
 80057a6:	fba3 2301 	umull	r2, r3, r3, r1
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	2264      	movs	r2, #100	; 0x64
 80057ae:	fb02 f303 	mul.w	r3, r2, r3
 80057b2:	1acb      	subs	r3, r1, r3
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057ba:	4b36      	ldr	r3, [pc, #216]	; (8005894 <UART_SetConfig+0x2d4>)
 80057bc:	fba3 2302 	umull	r2, r3, r3, r2
 80057c0:	095b      	lsrs	r3, r3, #5
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057c8:	441c      	add	r4, r3
 80057ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057dc:	4642      	mov	r2, r8
 80057de:	464b      	mov	r3, r9
 80057e0:	1891      	adds	r1, r2, r2
 80057e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80057e4:	415b      	adcs	r3, r3
 80057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057ec:	4641      	mov	r1, r8
 80057ee:	1851      	adds	r1, r2, r1
 80057f0:	6339      	str	r1, [r7, #48]	; 0x30
 80057f2:	4649      	mov	r1, r9
 80057f4:	414b      	adcs	r3, r1
 80057f6:	637b      	str	r3, [r7, #52]	; 0x34
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005804:	4659      	mov	r1, fp
 8005806:	00cb      	lsls	r3, r1, #3
 8005808:	4651      	mov	r1, sl
 800580a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800580e:	4651      	mov	r1, sl
 8005810:	00ca      	lsls	r2, r1, #3
 8005812:	4610      	mov	r0, r2
 8005814:	4619      	mov	r1, r3
 8005816:	4603      	mov	r3, r0
 8005818:	4642      	mov	r2, r8
 800581a:	189b      	adds	r3, r3, r2
 800581c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005820:	464b      	mov	r3, r9
 8005822:	460a      	mov	r2, r1
 8005824:	eb42 0303 	adc.w	r3, r2, r3
 8005828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005838:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800583c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005840:	460b      	mov	r3, r1
 8005842:	18db      	adds	r3, r3, r3
 8005844:	62bb      	str	r3, [r7, #40]	; 0x28
 8005846:	4613      	mov	r3, r2
 8005848:	eb42 0303 	adc.w	r3, r2, r3
 800584c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800584e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005852:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005856:	f7fb fa6f 	bl	8000d38 <__aeabi_uldivmod>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4b0d      	ldr	r3, [pc, #52]	; (8005894 <UART_SetConfig+0x2d4>)
 8005860:	fba3 1302 	umull	r1, r3, r3, r2
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	2164      	movs	r1, #100	; 0x64
 8005868:	fb01 f303 	mul.w	r3, r1, r3
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	3332      	adds	r3, #50	; 0x32
 8005872:	4a08      	ldr	r2, [pc, #32]	; (8005894 <UART_SetConfig+0x2d4>)
 8005874:	fba2 2303 	umull	r2, r3, r2, r3
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	f003 0207 	and.w	r2, r3, #7
 800587e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4422      	add	r2, r4
 8005886:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005888:	e105      	b.n	8005a96 <UART_SetConfig+0x4d6>
 800588a:	bf00      	nop
 800588c:	40011000 	.word	0x40011000
 8005890:	40011400 	.word	0x40011400
 8005894:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800589c:	2200      	movs	r2, #0
 800589e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058aa:	4642      	mov	r2, r8
 80058ac:	464b      	mov	r3, r9
 80058ae:	1891      	adds	r1, r2, r2
 80058b0:	6239      	str	r1, [r7, #32]
 80058b2:	415b      	adcs	r3, r3
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
 80058b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058ba:	4641      	mov	r1, r8
 80058bc:	1854      	adds	r4, r2, r1
 80058be:	4649      	mov	r1, r9
 80058c0:	eb43 0501 	adc.w	r5, r3, r1
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	00eb      	lsls	r3, r5, #3
 80058ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058d2:	00e2      	lsls	r2, r4, #3
 80058d4:	4614      	mov	r4, r2
 80058d6:	461d      	mov	r5, r3
 80058d8:	4643      	mov	r3, r8
 80058da:	18e3      	adds	r3, r4, r3
 80058dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058e0:	464b      	mov	r3, r9
 80058e2:	eb45 0303 	adc.w	r3, r5, r3
 80058e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005906:	4629      	mov	r1, r5
 8005908:	008b      	lsls	r3, r1, #2
 800590a:	4621      	mov	r1, r4
 800590c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005910:	4621      	mov	r1, r4
 8005912:	008a      	lsls	r2, r1, #2
 8005914:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005918:	f7fb fa0e 	bl	8000d38 <__aeabi_uldivmod>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	4b60      	ldr	r3, [pc, #384]	; (8005aa4 <UART_SetConfig+0x4e4>)
 8005922:	fba3 2302 	umull	r2, r3, r3, r2
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	011c      	lsls	r4, r3, #4
 800592a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800592e:	2200      	movs	r2, #0
 8005930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005934:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005938:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800593c:	4642      	mov	r2, r8
 800593e:	464b      	mov	r3, r9
 8005940:	1891      	adds	r1, r2, r2
 8005942:	61b9      	str	r1, [r7, #24]
 8005944:	415b      	adcs	r3, r3
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800594c:	4641      	mov	r1, r8
 800594e:	1851      	adds	r1, r2, r1
 8005950:	6139      	str	r1, [r7, #16]
 8005952:	4649      	mov	r1, r9
 8005954:	414b      	adcs	r3, r1
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005964:	4659      	mov	r1, fp
 8005966:	00cb      	lsls	r3, r1, #3
 8005968:	4651      	mov	r1, sl
 800596a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800596e:	4651      	mov	r1, sl
 8005970:	00ca      	lsls	r2, r1, #3
 8005972:	4610      	mov	r0, r2
 8005974:	4619      	mov	r1, r3
 8005976:	4603      	mov	r3, r0
 8005978:	4642      	mov	r2, r8
 800597a:	189b      	adds	r3, r3, r2
 800597c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005980:	464b      	mov	r3, r9
 8005982:	460a      	mov	r2, r1
 8005984:	eb42 0303 	adc.w	r3, r2, r3
 8005988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	67bb      	str	r3, [r7, #120]	; 0x78
 8005996:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059a4:	4649      	mov	r1, r9
 80059a6:	008b      	lsls	r3, r1, #2
 80059a8:	4641      	mov	r1, r8
 80059aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ae:	4641      	mov	r1, r8
 80059b0:	008a      	lsls	r2, r1, #2
 80059b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059b6:	f7fb f9bf 	bl	8000d38 <__aeabi_uldivmod>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4b39      	ldr	r3, [pc, #228]	; (8005aa4 <UART_SetConfig+0x4e4>)
 80059c0:	fba3 1302 	umull	r1, r3, r3, r2
 80059c4:	095b      	lsrs	r3, r3, #5
 80059c6:	2164      	movs	r1, #100	; 0x64
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	3332      	adds	r3, #50	; 0x32
 80059d2:	4a34      	ldr	r2, [pc, #208]	; (8005aa4 <UART_SetConfig+0x4e4>)
 80059d4:	fba2 2303 	umull	r2, r3, r2, r3
 80059d8:	095b      	lsrs	r3, r3, #5
 80059da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059de:	441c      	add	r4, r3
 80059e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059e4:	2200      	movs	r2, #0
 80059e6:	673b      	str	r3, [r7, #112]	; 0x70
 80059e8:	677a      	str	r2, [r7, #116]	; 0x74
 80059ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059ee:	4642      	mov	r2, r8
 80059f0:	464b      	mov	r3, r9
 80059f2:	1891      	adds	r1, r2, r2
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	415b      	adcs	r3, r3
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059fe:	4641      	mov	r1, r8
 8005a00:	1851      	adds	r1, r2, r1
 8005a02:	6039      	str	r1, [r7, #0]
 8005a04:	4649      	mov	r1, r9
 8005a06:	414b      	adcs	r3, r1
 8005a08:	607b      	str	r3, [r7, #4]
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	f04f 0300 	mov.w	r3, #0
 8005a12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a16:	4659      	mov	r1, fp
 8005a18:	00cb      	lsls	r3, r1, #3
 8005a1a:	4651      	mov	r1, sl
 8005a1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a20:	4651      	mov	r1, sl
 8005a22:	00ca      	lsls	r2, r1, #3
 8005a24:	4610      	mov	r0, r2
 8005a26:	4619      	mov	r1, r3
 8005a28:	4603      	mov	r3, r0
 8005a2a:	4642      	mov	r2, r8
 8005a2c:	189b      	adds	r3, r3, r2
 8005a2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a30:	464b      	mov	r3, r9
 8005a32:	460a      	mov	r2, r1
 8005a34:	eb42 0303 	adc.w	r3, r2, r3
 8005a38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	663b      	str	r3, [r7, #96]	; 0x60
 8005a44:	667a      	str	r2, [r7, #100]	; 0x64
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a52:	4649      	mov	r1, r9
 8005a54:	008b      	lsls	r3, r1, #2
 8005a56:	4641      	mov	r1, r8
 8005a58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a5c:	4641      	mov	r1, r8
 8005a5e:	008a      	lsls	r2, r1, #2
 8005a60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a64:	f7fb f968 	bl	8000d38 <__aeabi_uldivmod>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <UART_SetConfig+0x4e4>)
 8005a6e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	2164      	movs	r1, #100	; 0x64
 8005a76:	fb01 f303 	mul.w	r3, r1, r3
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	3332      	adds	r3, #50	; 0x32
 8005a80:	4a08      	ldr	r2, [pc, #32]	; (8005aa4 <UART_SetConfig+0x4e4>)
 8005a82:	fba2 2303 	umull	r2, r3, r2, r3
 8005a86:	095b      	lsrs	r3, r3, #5
 8005a88:	f003 020f 	and.w	r2, r3, #15
 8005a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4422      	add	r2, r4
 8005a94:	609a      	str	r2, [r3, #8]
}
 8005a96:	bf00      	nop
 8005a98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aa2:	bf00      	nop
 8005aa4:	51eb851f 	.word	0x51eb851f

08005aa8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005aac:	4904      	ldr	r1, [pc, #16]	; (8005ac0 <MX_FATFS_Init+0x18>)
 8005aae:	4805      	ldr	r0, [pc, #20]	; (8005ac4 <MX_FATFS_Init+0x1c>)
 8005ab0:	f000 fd2e 	bl	8006510 <FATFS_LinkDriver>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	4b03      	ldr	r3, [pc, #12]	; (8005ac8 <MX_FATFS_Init+0x20>)
 8005aba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005abc:	bf00      	nop
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	20000600 	.word	0x20000600
 8005ac4:	20000028 	.word	0x20000028
 8005ac8:	200005fc 	.word	0x200005fc

08005acc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005ad6:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <USER_initialize+0x24>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005adc:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <USER_initialize+0x24>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	20000025 	.word	0x20000025

08005af4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005afe:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <USER_status+0x24>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005b04:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <USER_status+0x24>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000025 	.word	0x20000025

08005b1c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	4603      	mov	r3, r0
 8005b2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005b2c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b085      	sub	sp, #20
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
 8005b46:	4603      	mov	r3, r0
 8005b48:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005b4a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	4603      	mov	r3, r0
 8005b60:	603a      	str	r2, [r7, #0]
 8005b62:	71fb      	strb	r3, [r7, #7]
 8005b64:	460b      	mov	r3, r1
 8005b66:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	73fb      	strb	r3, [r7, #15]
    return res;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	4a08      	ldr	r2, [pc, #32]	; (8005bac <disk_status+0x30>)
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	79fa      	ldrb	r2, [r7, #7]
 8005b94:	4905      	ldr	r1, [pc, #20]	; (8005bac <disk_status+0x30>)
 8005b96:	440a      	add	r2, r1
 8005b98:	7a12      	ldrb	r2, [r2, #8]
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	4798      	blx	r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	2000062c 	.word	0x2000062c

08005bb0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	4a0d      	ldr	r2, [pc, #52]	; (8005bf8 <disk_initialize+0x48>)
 8005bc2:	5cd3      	ldrb	r3, [r2, r3]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d111      	bne.n	8005bec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	4a0b      	ldr	r2, [pc, #44]	; (8005bf8 <disk_initialize+0x48>)
 8005bcc:	2101      	movs	r1, #1
 8005bce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	4a09      	ldr	r2, [pc, #36]	; (8005bf8 <disk_initialize+0x48>)
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	79fa      	ldrb	r2, [r7, #7]
 8005bde:	4906      	ldr	r1, [pc, #24]	; (8005bf8 <disk_initialize+0x48>)
 8005be0:	440a      	add	r2, r1
 8005be2:	7a12      	ldrb	r2, [r2, #8]
 8005be4:	4610      	mov	r0, r2
 8005be6:	4798      	blx	r3
 8005be8:	4603      	mov	r3, r0
 8005bea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	2000062c 	.word	0x2000062c

08005bfc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005bfc:	b590      	push	{r4, r7, lr}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	4603      	mov	r3, r0
 8005c0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	4a0a      	ldr	r2, [pc, #40]	; (8005c38 <disk_read+0x3c>)
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	689c      	ldr	r4, [r3, #8]
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	4a07      	ldr	r2, [pc, #28]	; (8005c38 <disk_read+0x3c>)
 8005c1c:	4413      	add	r3, r2
 8005c1e:	7a18      	ldrb	r0, [r3, #8]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	68b9      	ldr	r1, [r7, #8]
 8005c26:	47a0      	blx	r4
 8005c28:	4603      	mov	r3, r0
 8005c2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd90      	pop	{r4, r7, pc}
 8005c36:	bf00      	nop
 8005c38:	2000062c 	.word	0x2000062c

08005c3c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005c3c:	b590      	push	{r4, r7, lr}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	607a      	str	r2, [r7, #4]
 8005c46:	603b      	str	r3, [r7, #0]
 8005c48:	4603      	mov	r3, r0
 8005c4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	4a0a      	ldr	r2, [pc, #40]	; (8005c78 <disk_write+0x3c>)
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	68dc      	ldr	r4, [r3, #12]
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
 8005c5a:	4a07      	ldr	r2, [pc, #28]	; (8005c78 <disk_write+0x3c>)
 8005c5c:	4413      	add	r3, r2
 8005c5e:	7a18      	ldrb	r0, [r3, #8]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	47a0      	blx	r4
 8005c68:	4603      	mov	r3, r0
 8005c6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd90      	pop	{r4, r7, pc}
 8005c76:	bf00      	nop
 8005c78:	2000062c 	.word	0x2000062c

08005c7c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3301      	adds	r3, #1
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c8c:	89fb      	ldrh	r3, [r7, #14]
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	b21a      	sxth	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	b21b      	sxth	r3, r3
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	b21b      	sxth	r3, r3
 8005c9c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c9e:	89fb      	ldrh	r3, [r7, #14]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3303      	adds	r3, #3
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	021b      	lsls	r3, r3, #8
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	3202      	adds	r2, #2
 8005cc4:	7812      	ldrb	r2, [r2, #0]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	3201      	adds	r2, #1
 8005cd2:	7812      	ldrb	r2, [r2, #0]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	7812      	ldrb	r2, [r2, #0]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
	return rv;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	e010      	b.n	8005d24 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005d02:	4a0d      	ldr	r2, [pc, #52]	; (8005d38 <clear_lock+0x44>)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	4413      	add	r3, r2
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d105      	bne.n	8005d1e <clear_lock+0x2a>
 8005d12:	4a09      	ldr	r2, [pc, #36]	; (8005d38 <clear_lock+0x44>)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	4413      	add	r3, r2
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3301      	adds	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d9eb      	bls.n	8005d02 <clear_lock+0xe>
	}
}
 8005d2a:	bf00      	nop
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	2000060c 	.word	0x2000060c

08005d3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	78db      	ldrb	r3, [r3, #3]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d034      	beq.n	8005dba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	7858      	ldrb	r0, [r3, #1]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d60:	2301      	movs	r3, #1
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	f7ff ff6a 	bl	8005c3c <disk_write>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	73fb      	strb	r3, [r7, #15]
 8005d72:	e022      	b.n	8005dba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	1ad2      	subs	r2, r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d217      	bcs.n	8005dba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	789b      	ldrb	r3, [r3, #2]
 8005d8e:	613b      	str	r3, [r7, #16]
 8005d90:	e010      	b.n	8005db4 <sync_window+0x78>
					wsect += fs->fsize;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4413      	add	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	7858      	ldrb	r0, [r3, #1]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005da6:	2301      	movs	r3, #1
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	f7ff ff47 	bl	8005c3c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d8eb      	bhi.n	8005d92 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d01b      	beq.n	8005e14 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff ffad 	bl	8005d3c <sync_window>
 8005de2:	4603      	mov	r3, r0
 8005de4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d113      	bne.n	8005e14 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	7858      	ldrb	r0, [r3, #1]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005df6:	2301      	movs	r3, #1
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	f7ff feff 	bl	8005bfc <disk_read>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005e04:	f04f 33ff 	mov.w	r3, #4294967295
 8005e08:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b087      	sub	sp, #28
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005e26:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d031      	beq.n	8005e98 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	e002      	b.n	8005e42 <get_ldnumber+0x24>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d903      	bls.n	8005e52 <get_ldnumber+0x34>
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b3a      	cmp	r3, #58	; 0x3a
 8005e50:	d1f4      	bne.n	8005e3c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b3a      	cmp	r3, #58	; 0x3a
 8005e58:	d11c      	bne.n	8005e94 <get_ldnumber+0x76>
			tp = *path;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	60fa      	str	r2, [r7, #12]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	3b30      	subs	r3, #48	; 0x30
 8005e6a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b09      	cmp	r3, #9
 8005e70:	d80e      	bhi.n	8005e90 <get_ldnumber+0x72>
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d10a      	bne.n	8005e90 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d107      	bne.n	8005e90 <get_ldnumber+0x72>
					vol = (int)i;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	3301      	adds	r3, #1
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	e002      	b.n	8005e9a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005e94:	2300      	movs	r3, #0
 8005e96:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005e98:	693b      	ldr	r3, [r7, #16]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	371c      	adds	r7, #28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
	...

08005ea8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	70da      	strb	r2, [r3, #3]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f04f 32ff 	mov.w	r2, #4294967295
 8005ebe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7ff ff7e 	bl	8005dc4 <move_window>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <check_fs+0x2a>
 8005ece:	2304      	movs	r3, #4
 8005ed0:	e038      	b.n	8005f44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3330      	adds	r3, #48	; 0x30
 8005ed6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff fece 	bl	8005c7c <ld_word>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d001      	beq.n	8005ef0 <check_fs+0x48>
 8005eec:	2303      	movs	r3, #3
 8005eee:	e029      	b.n	8005f44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ef6:	2be9      	cmp	r3, #233	; 0xe9
 8005ef8:	d009      	beq.n	8005f0e <check_fs+0x66>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f00:	2beb      	cmp	r3, #235	; 0xeb
 8005f02:	d11e      	bne.n	8005f42 <check_fs+0x9a>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f0a:	2b90      	cmp	r3, #144	; 0x90
 8005f0c:	d119      	bne.n	8005f42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	3330      	adds	r3, #48	; 0x30
 8005f12:	3336      	adds	r3, #54	; 0x36
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7ff fec9 	bl	8005cac <ld_dword>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f20:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <check_fs+0xa4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d101      	bne.n	8005f2a <check_fs+0x82>
 8005f26:	2300      	movs	r3, #0
 8005f28:	e00c      	b.n	8005f44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3330      	adds	r3, #48	; 0x30
 8005f2e:	3352      	adds	r3, #82	; 0x52
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff febb 	bl	8005cac <ld_dword>
 8005f36:	4603      	mov	r3, r0
 8005f38:	4a05      	ldr	r2, [pc, #20]	; (8005f50 <check_fs+0xa8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d101      	bne.n	8005f42 <check_fs+0x9a>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e000      	b.n	8005f44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005f42:	2302      	movs	r3, #2
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	00544146 	.word	0x00544146
 8005f50:	33544146 	.word	0x33544146

08005f54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b096      	sub	sp, #88	; 0x58
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f7ff ff58 	bl	8005e1e <get_ldnumber>
 8005f6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	da01      	bge.n	8005f7a <find_volume+0x26>
 8005f76:	230b      	movs	r3, #11
 8005f78:	e22d      	b.n	80063d6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005f7a:	4aa1      	ldr	r2, [pc, #644]	; (8006200 <find_volume+0x2ac>)
 8005f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <find_volume+0x3a>
 8005f8a:	230c      	movs	r3, #12
 8005f8c:	e223      	b.n	80063d6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	f023 0301 	bic.w	r3, r3, #1
 8005f9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01a      	beq.n	8005fda <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff fde7 	bl	8005b7c <disk_status>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005fb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10c      	bne.n	8005fda <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d007      	beq.n	8005fd6 <find_volume+0x82>
 8005fc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005fd2:	230a      	movs	r3, #10
 8005fd4:	e1ff      	b.n	80063d6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e1fd      	b.n	80063d6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	2200      	movs	r2, #0
 8005fde:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fea:	785b      	ldrb	r3, [r3, #1]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff fddf 	bl	8005bb0 <disk_initialize>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005ff8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006004:	2303      	movs	r3, #3
 8006006:	e1e6      	b.n	80063d6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <find_volume+0xca>
 800600e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006012:	f003 0304 	and.w	r3, r3, #4
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800601a:	230a      	movs	r3, #10
 800601c:	e1db      	b.n	80063d6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006022:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006024:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006026:	f7ff ff3f 	bl	8005ea8 <check_fs>
 800602a:	4603      	mov	r3, r0
 800602c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006030:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006034:	2b02      	cmp	r3, #2
 8006036:	d149      	bne.n	80060cc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006038:	2300      	movs	r3, #0
 800603a:	643b      	str	r3, [r7, #64]	; 0x40
 800603c:	e01e      	b.n	800607c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006040:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800604c:	4413      	add	r3, r2
 800604e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	3304      	adds	r3, #4
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d006      	beq.n	8006068 <find_volume+0x114>
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	3308      	adds	r3, #8
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff fe24 	bl	8005cac <ld_dword>
 8006064:	4602      	mov	r2, r0
 8006066:	e000      	b.n	800606a <find_volume+0x116>
 8006068:	2200      	movs	r2, #0
 800606a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	3358      	adds	r3, #88	; 0x58
 8006070:	443b      	add	r3, r7
 8006072:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006078:	3301      	adds	r3, #1
 800607a:	643b      	str	r3, [r7, #64]	; 0x40
 800607c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800607e:	2b03      	cmp	r3, #3
 8006080:	d9dd      	bls.n	800603e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006082:	2300      	movs	r3, #0
 8006084:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <find_volume+0x13e>
 800608c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800608e:	3b01      	subs	r3, #1
 8006090:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	3358      	adds	r3, #88	; 0x58
 8006098:	443b      	add	r3, r7
 800609a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800609e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80060a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d005      	beq.n	80060b2 <find_volume+0x15e>
 80060a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060aa:	f7ff fefd 	bl	8005ea8 <check_fs>
 80060ae:	4603      	mov	r3, r0
 80060b0:	e000      	b.n	80060b4 <find_volume+0x160>
 80060b2:	2303      	movs	r3, #3
 80060b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80060b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d905      	bls.n	80060cc <find_volume+0x178>
 80060c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c2:	3301      	adds	r3, #1
 80060c4:	643b      	str	r3, [r7, #64]	; 0x40
 80060c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d9e2      	bls.n	8006092 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80060cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d101      	bne.n	80060d8 <find_volume+0x184>
 80060d4:	2301      	movs	r3, #1
 80060d6:	e17e      	b.n	80063d6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80060d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d901      	bls.n	80060e4 <find_volume+0x190>
 80060e0:	230d      	movs	r3, #13
 80060e2:	e178      	b.n	80063d6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	3330      	adds	r3, #48	; 0x30
 80060e8:	330b      	adds	r3, #11
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff fdc6 	bl	8005c7c <ld_word>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f6:	d001      	beq.n	80060fc <find_volume+0x1a8>
 80060f8:	230d      	movs	r3, #13
 80060fa:	e16c      	b.n	80063d6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	3330      	adds	r3, #48	; 0x30
 8006100:	3316      	adds	r3, #22
 8006102:	4618      	mov	r0, r3
 8006104:	f7ff fdba 	bl	8005c7c <ld_word>
 8006108:	4603      	mov	r3, r0
 800610a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800610c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <find_volume+0x1cc>
 8006112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006114:	3330      	adds	r3, #48	; 0x30
 8006116:	3324      	adds	r3, #36	; 0x24
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff fdc7 	bl	8005cac <ld_dword>
 800611e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006124:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	789b      	ldrb	r3, [r3, #2]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d005      	beq.n	8006144 <find_volume+0x1f0>
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	789b      	ldrb	r3, [r3, #2]
 800613c:	2b02      	cmp	r3, #2
 800613e:	d001      	beq.n	8006144 <find_volume+0x1f0>
 8006140:	230d      	movs	r3, #13
 8006142:	e148      	b.n	80063d6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	789b      	ldrb	r3, [r3, #2]
 8006148:	461a      	mov	r2, r3
 800614a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800614c:	fb02 f303 	mul.w	r3, r2, r3
 8006150:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006158:	b29a      	uxth	r2, r3
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	895b      	ldrh	r3, [r3, #10]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d008      	beq.n	8006178 <find_volume+0x224>
 8006166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006168:	895b      	ldrh	r3, [r3, #10]
 800616a:	461a      	mov	r2, r3
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	895b      	ldrh	r3, [r3, #10]
 8006170:	3b01      	subs	r3, #1
 8006172:	4013      	ands	r3, r2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <find_volume+0x228>
 8006178:	230d      	movs	r3, #13
 800617a:	e12c      	b.n	80063d6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	3330      	adds	r3, #48	; 0x30
 8006180:	3311      	adds	r3, #17
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff fd7a 	bl	8005c7c <ld_word>
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	891b      	ldrh	r3, [r3, #8]
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <find_volume+0x24e>
 800619e:	230d      	movs	r3, #13
 80061a0:	e119      	b.n	80063d6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	3330      	adds	r3, #48	; 0x30
 80061a6:	3313      	adds	r3, #19
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff fd67 	bl	8005c7c <ld_word>
 80061ae:	4603      	mov	r3, r0
 80061b0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80061b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d106      	bne.n	80061c6 <find_volume+0x272>
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	3330      	adds	r3, #48	; 0x30
 80061bc:	3320      	adds	r3, #32
 80061be:	4618      	mov	r0, r3
 80061c0:	f7ff fd74 	bl	8005cac <ld_dword>
 80061c4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80061c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c8:	3330      	adds	r3, #48	; 0x30
 80061ca:	330e      	adds	r3, #14
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff fd55 	bl	8005c7c <ld_word>
 80061d2:	4603      	mov	r3, r0
 80061d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80061d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <find_volume+0x28c>
 80061dc:	230d      	movs	r3, #13
 80061de:	e0fa      	b.n	80063d6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80061e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e4:	4413      	add	r3, r2
 80061e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061e8:	8912      	ldrh	r2, [r2, #8]
 80061ea:	0912      	lsrs	r2, r2, #4
 80061ec:	b292      	uxth	r2, r2
 80061ee:	4413      	add	r3, r2
 80061f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80061f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d204      	bcs.n	8006204 <find_volume+0x2b0>
 80061fa:	230d      	movs	r3, #13
 80061fc:	e0eb      	b.n	80063d6 <find_volume+0x482>
 80061fe:	bf00      	nop
 8006200:	20000604 	.word	0x20000604
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800620c:	8952      	ldrh	r2, [r2, #10]
 800620e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <find_volume+0x2ca>
 800621a:	230d      	movs	r3, #13
 800621c:	e0db      	b.n	80063d6 <find_volume+0x482>
		fmt = FS_FAT32;
 800621e:	2303      	movs	r3, #3
 8006220:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800622a:	4293      	cmp	r3, r2
 800622c:	d802      	bhi.n	8006234 <find_volume+0x2e0>
 800622e:	2302      	movs	r3, #2
 8006230:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	f640 72f5 	movw	r2, #4085	; 0xff5
 800623a:	4293      	cmp	r3, r2
 800623c:	d802      	bhi.n	8006244 <find_volume+0x2f0>
 800623e:	2301      	movs	r3, #1
 8006240:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	1c9a      	adds	r2, r3, #2
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800624c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006250:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006252:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006256:	441a      	add	r2, r3
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800625c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	441a      	add	r2, r3
 8006262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006264:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006266:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800626a:	2b03      	cmp	r3, #3
 800626c:	d11e      	bne.n	80062ac <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006270:	3330      	adds	r3, #48	; 0x30
 8006272:	332a      	adds	r3, #42	; 0x2a
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff fd01 	bl	8005c7c <ld_word>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <find_volume+0x330>
 8006280:	230d      	movs	r3, #13
 8006282:	e0a8      	b.n	80063d6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006286:	891b      	ldrh	r3, [r3, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <find_volume+0x33c>
 800628c:	230d      	movs	r3, #13
 800628e:	e0a2      	b.n	80063d6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006292:	3330      	adds	r3, #48	; 0x30
 8006294:	332c      	adds	r3, #44	; 0x2c
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff fd08 	bl	8005cac <ld_dword>
 800629c:	4602      	mov	r2, r0
 800629e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	647b      	str	r3, [r7, #68]	; 0x44
 80062aa:	e01f      	b.n	80062ec <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80062ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ae:	891b      	ldrh	r3, [r3, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <find_volume+0x364>
 80062b4:	230d      	movs	r3, #13
 80062b6:	e08e      	b.n	80063d6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80062b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ba:	6a1a      	ldr	r2, [r3, #32]
 80062bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062be:	441a      	add	r2, r3
 80062c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80062c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d103      	bne.n	80062d4 <find_volume+0x380>
 80062cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	e00a      	b.n	80062ea <find_volume+0x396>
 80062d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d6:	695a      	ldr	r2, [r3, #20]
 80062d8:	4613      	mov	r3, r2
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	4413      	add	r3, r2
 80062de:	085a      	lsrs	r2, r3, #1
 80062e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80062ea:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80062ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80062f6:	0a5b      	lsrs	r3, r3, #9
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d201      	bcs.n	8006300 <find_volume+0x3ac>
 80062fc:	230d      	movs	r3, #13
 80062fe:	e06a      	b.n	80063d6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006302:	f04f 32ff 	mov.w	r2, #4294967295
 8006306:	611a      	str	r2, [r3, #16]
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	2280      	movs	r2, #128	; 0x80
 8006314:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006316:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800631a:	2b03      	cmp	r3, #3
 800631c:	d149      	bne.n	80063b2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	3330      	adds	r3, #48	; 0x30
 8006322:	3330      	adds	r3, #48	; 0x30
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff fca9 	bl	8005c7c <ld_word>
 800632a:	4603      	mov	r3, r0
 800632c:	2b01      	cmp	r3, #1
 800632e:	d140      	bne.n	80063b2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006332:	3301      	adds	r3, #1
 8006334:	4619      	mov	r1, r3
 8006336:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006338:	f7ff fd44 	bl	8005dc4 <move_window>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d137      	bne.n	80063b2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	2200      	movs	r2, #0
 8006346:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	3330      	adds	r3, #48	; 0x30
 800634c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff fc93 	bl	8005c7c <ld_word>
 8006356:	4603      	mov	r3, r0
 8006358:	461a      	mov	r2, r3
 800635a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800635e:	429a      	cmp	r2, r3
 8006360:	d127      	bne.n	80063b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006364:	3330      	adds	r3, #48	; 0x30
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff fca0 	bl	8005cac <ld_dword>
 800636c:	4603      	mov	r3, r0
 800636e:	4a1c      	ldr	r2, [pc, #112]	; (80063e0 <find_volume+0x48c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d11e      	bne.n	80063b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	3330      	adds	r3, #48	; 0x30
 8006378:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff fc95 	bl	8005cac <ld_dword>
 8006382:	4603      	mov	r3, r0
 8006384:	4a17      	ldr	r2, [pc, #92]	; (80063e4 <find_volume+0x490>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d113      	bne.n	80063b2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	3330      	adds	r3, #48	; 0x30
 800638e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff fc8a 	bl	8005cac <ld_dword>
 8006398:	4602      	mov	r2, r0
 800639a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a0:	3330      	adds	r3, #48	; 0x30
 80063a2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fc80 	bl	8005cac <ld_dword>
 80063ac:	4602      	mov	r2, r0
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80063b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80063ba:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <find_volume+0x494>)
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	3301      	adds	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	4b09      	ldr	r3, [pc, #36]	; (80063e8 <find_volume+0x494>)
 80063c4:	801a      	strh	r2, [r3, #0]
 80063c6:	4b08      	ldr	r3, [pc, #32]	; (80063e8 <find_volume+0x494>)
 80063c8:	881a      	ldrh	r2, [r3, #0]
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80063ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063d0:	f7ff fc90 	bl	8005cf4 <clear_lock>
#endif
	return FR_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3758      	adds	r7, #88	; 0x58
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	41615252 	.word	0x41615252
 80063e4:	61417272 	.word	0x61417272
 80063e8:	20000608 	.word	0x20000608

080063ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	4613      	mov	r3, r2
 80063f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80063fe:	f107 0310 	add.w	r3, r7, #16
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff fd0b 	bl	8005e1e <get_ldnumber>
 8006408:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	2b00      	cmp	r3, #0
 800640e:	da01      	bge.n	8006414 <f_mount+0x28>
 8006410:	230b      	movs	r3, #11
 8006412:	e02b      	b.n	800646c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006414:	4a17      	ldr	r2, [pc, #92]	; (8006474 <f_mount+0x88>)
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800641c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d005      	beq.n	8006430 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006424:	69b8      	ldr	r0, [r7, #24]
 8006426:	f7ff fc65 	bl	8005cf4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	2200      	movs	r2, #0
 800642e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	490d      	ldr	r1, [pc, #52]	; (8006474 <f_mount+0x88>)
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <f_mount+0x66>
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d001      	beq.n	8006456 <f_mount+0x6a>
 8006452:	2300      	movs	r3, #0
 8006454:	e00a      	b.n	800646c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006456:	f107 010c 	add.w	r1, r7, #12
 800645a:	f107 0308 	add.w	r3, r7, #8
 800645e:	2200      	movs	r2, #0
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff fd77 	bl	8005f54 <find_volume>
 8006466:	4603      	mov	r3, r0
 8006468:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800646a:	7dfb      	ldrb	r3, [r7, #23]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3720      	adds	r7, #32
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20000604 	.word	0x20000604

08006478 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006486:	2301      	movs	r3, #1
 8006488:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800648e:	4b1f      	ldr	r3, [pc, #124]	; (800650c <FATFS_LinkDriverEx+0x94>)
 8006490:	7a5b      	ldrb	r3, [r3, #9]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d131      	bne.n	80064fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006498:	4b1c      	ldr	r3, [pc, #112]	; (800650c <FATFS_LinkDriverEx+0x94>)
 800649a:	7a5b      	ldrb	r3, [r3, #9]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	461a      	mov	r2, r3
 80064a0:	4b1a      	ldr	r3, [pc, #104]	; (800650c <FATFS_LinkDriverEx+0x94>)
 80064a2:	2100      	movs	r1, #0
 80064a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80064a6:	4b19      	ldr	r3, [pc, #100]	; (800650c <FATFS_LinkDriverEx+0x94>)
 80064a8:	7a5b      	ldrb	r3, [r3, #9]
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	4a17      	ldr	r2, [pc, #92]	; (800650c <FATFS_LinkDriverEx+0x94>)
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80064b6:	4b15      	ldr	r3, [pc, #84]	; (800650c <FATFS_LinkDriverEx+0x94>)
 80064b8:	7a5b      	ldrb	r3, [r3, #9]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	4b13      	ldr	r3, [pc, #76]	; (800650c <FATFS_LinkDriverEx+0x94>)
 80064c0:	4413      	add	r3, r2
 80064c2:	79fa      	ldrb	r2, [r7, #7]
 80064c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80064c6:	4b11      	ldr	r3, [pc, #68]	; (800650c <FATFS_LinkDriverEx+0x94>)
 80064c8:	7a5b      	ldrb	r3, [r3, #9]
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	b2d1      	uxtb	r1, r2
 80064d0:	4a0e      	ldr	r2, [pc, #56]	; (800650c <FATFS_LinkDriverEx+0x94>)
 80064d2:	7251      	strb	r1, [r2, #9]
 80064d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80064d6:	7dbb      	ldrb	r3, [r7, #22]
 80064d8:	3330      	adds	r3, #48	; 0x30
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	3301      	adds	r3, #1
 80064e4:	223a      	movs	r2, #58	; 0x3a
 80064e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	3302      	adds	r3, #2
 80064ec:	222f      	movs	r2, #47	; 0x2f
 80064ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	3303      	adds	r3, #3
 80064f4:	2200      	movs	r2, #0
 80064f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80064fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	2000062c 	.word	0x2000062c

08006510 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800651a:	2200      	movs	r2, #0
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff ffaa 	bl	8006478 <FATFS_LinkDriverEx>
 8006524:	4603      	mov	r3, r0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <__errno>:
 8006530:	4b01      	ldr	r3, [pc, #4]	; (8006538 <__errno+0x8>)
 8006532:	6818      	ldr	r0, [r3, #0]
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	2000003c 	.word	0x2000003c

0800653c <__libc_init_array>:
 800653c:	b570      	push	{r4, r5, r6, lr}
 800653e:	4d0d      	ldr	r5, [pc, #52]	; (8006574 <__libc_init_array+0x38>)
 8006540:	4c0d      	ldr	r4, [pc, #52]	; (8006578 <__libc_init_array+0x3c>)
 8006542:	1b64      	subs	r4, r4, r5
 8006544:	10a4      	asrs	r4, r4, #2
 8006546:	2600      	movs	r6, #0
 8006548:	42a6      	cmp	r6, r4
 800654a:	d109      	bne.n	8006560 <__libc_init_array+0x24>
 800654c:	4d0b      	ldr	r5, [pc, #44]	; (800657c <__libc_init_array+0x40>)
 800654e:	4c0c      	ldr	r4, [pc, #48]	; (8006580 <__libc_init_array+0x44>)
 8006550:	f004 fc92 	bl	800ae78 <_init>
 8006554:	1b64      	subs	r4, r4, r5
 8006556:	10a4      	asrs	r4, r4, #2
 8006558:	2600      	movs	r6, #0
 800655a:	42a6      	cmp	r6, r4
 800655c:	d105      	bne.n	800656a <__libc_init_array+0x2e>
 800655e:	bd70      	pop	{r4, r5, r6, pc}
 8006560:	f855 3b04 	ldr.w	r3, [r5], #4
 8006564:	4798      	blx	r3
 8006566:	3601      	adds	r6, #1
 8006568:	e7ee      	b.n	8006548 <__libc_init_array+0xc>
 800656a:	f855 3b04 	ldr.w	r3, [r5], #4
 800656e:	4798      	blx	r3
 8006570:	3601      	adds	r6, #1
 8006572:	e7f2      	b.n	800655a <__libc_init_array+0x1e>
 8006574:	0800b38c 	.word	0x0800b38c
 8006578:	0800b38c 	.word	0x0800b38c
 800657c:	0800b38c 	.word	0x0800b38c
 8006580:	0800b390 	.word	0x0800b390

08006584 <memset>:
 8006584:	4402      	add	r2, r0
 8006586:	4603      	mov	r3, r0
 8006588:	4293      	cmp	r3, r2
 800658a:	d100      	bne.n	800658e <memset+0xa>
 800658c:	4770      	bx	lr
 800658e:	f803 1b01 	strb.w	r1, [r3], #1
 8006592:	e7f9      	b.n	8006588 <memset+0x4>

08006594 <__cvt>:
 8006594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006598:	ec55 4b10 	vmov	r4, r5, d0
 800659c:	2d00      	cmp	r5, #0
 800659e:	460e      	mov	r6, r1
 80065a0:	4619      	mov	r1, r3
 80065a2:	462b      	mov	r3, r5
 80065a4:	bfbb      	ittet	lt
 80065a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80065aa:	461d      	movlt	r5, r3
 80065ac:	2300      	movge	r3, #0
 80065ae:	232d      	movlt	r3, #45	; 0x2d
 80065b0:	700b      	strb	r3, [r1, #0]
 80065b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80065b8:	4691      	mov	r9, r2
 80065ba:	f023 0820 	bic.w	r8, r3, #32
 80065be:	bfbc      	itt	lt
 80065c0:	4622      	movlt	r2, r4
 80065c2:	4614      	movlt	r4, r2
 80065c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065c8:	d005      	beq.n	80065d6 <__cvt+0x42>
 80065ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80065ce:	d100      	bne.n	80065d2 <__cvt+0x3e>
 80065d0:	3601      	adds	r6, #1
 80065d2:	2102      	movs	r1, #2
 80065d4:	e000      	b.n	80065d8 <__cvt+0x44>
 80065d6:	2103      	movs	r1, #3
 80065d8:	ab03      	add	r3, sp, #12
 80065da:	9301      	str	r3, [sp, #4]
 80065dc:	ab02      	add	r3, sp, #8
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	ec45 4b10 	vmov	d0, r4, r5
 80065e4:	4653      	mov	r3, sl
 80065e6:	4632      	mov	r2, r6
 80065e8:	f001 fdae 	bl	8008148 <_dtoa_r>
 80065ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065f0:	4607      	mov	r7, r0
 80065f2:	d102      	bne.n	80065fa <__cvt+0x66>
 80065f4:	f019 0f01 	tst.w	r9, #1
 80065f8:	d022      	beq.n	8006640 <__cvt+0xac>
 80065fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065fe:	eb07 0906 	add.w	r9, r7, r6
 8006602:	d110      	bne.n	8006626 <__cvt+0x92>
 8006604:	783b      	ldrb	r3, [r7, #0]
 8006606:	2b30      	cmp	r3, #48	; 0x30
 8006608:	d10a      	bne.n	8006620 <__cvt+0x8c>
 800660a:	2200      	movs	r2, #0
 800660c:	2300      	movs	r3, #0
 800660e:	4620      	mov	r0, r4
 8006610:	4629      	mov	r1, r5
 8006612:	f7fa fa61 	bl	8000ad8 <__aeabi_dcmpeq>
 8006616:	b918      	cbnz	r0, 8006620 <__cvt+0x8c>
 8006618:	f1c6 0601 	rsb	r6, r6, #1
 800661c:	f8ca 6000 	str.w	r6, [sl]
 8006620:	f8da 3000 	ldr.w	r3, [sl]
 8006624:	4499      	add	r9, r3
 8006626:	2200      	movs	r2, #0
 8006628:	2300      	movs	r3, #0
 800662a:	4620      	mov	r0, r4
 800662c:	4629      	mov	r1, r5
 800662e:	f7fa fa53 	bl	8000ad8 <__aeabi_dcmpeq>
 8006632:	b108      	cbz	r0, 8006638 <__cvt+0xa4>
 8006634:	f8cd 900c 	str.w	r9, [sp, #12]
 8006638:	2230      	movs	r2, #48	; 0x30
 800663a:	9b03      	ldr	r3, [sp, #12]
 800663c:	454b      	cmp	r3, r9
 800663e:	d307      	bcc.n	8006650 <__cvt+0xbc>
 8006640:	9b03      	ldr	r3, [sp, #12]
 8006642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006644:	1bdb      	subs	r3, r3, r7
 8006646:	4638      	mov	r0, r7
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	b004      	add	sp, #16
 800664c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006650:	1c59      	adds	r1, r3, #1
 8006652:	9103      	str	r1, [sp, #12]
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	e7f0      	b.n	800663a <__cvt+0xa6>

08006658 <__exponent>:
 8006658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800665a:	4603      	mov	r3, r0
 800665c:	2900      	cmp	r1, #0
 800665e:	bfb8      	it	lt
 8006660:	4249      	neglt	r1, r1
 8006662:	f803 2b02 	strb.w	r2, [r3], #2
 8006666:	bfb4      	ite	lt
 8006668:	222d      	movlt	r2, #45	; 0x2d
 800666a:	222b      	movge	r2, #43	; 0x2b
 800666c:	2909      	cmp	r1, #9
 800666e:	7042      	strb	r2, [r0, #1]
 8006670:	dd2a      	ble.n	80066c8 <__exponent+0x70>
 8006672:	f10d 0407 	add.w	r4, sp, #7
 8006676:	46a4      	mov	ip, r4
 8006678:	270a      	movs	r7, #10
 800667a:	46a6      	mov	lr, r4
 800667c:	460a      	mov	r2, r1
 800667e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006682:	fb07 1516 	mls	r5, r7, r6, r1
 8006686:	3530      	adds	r5, #48	; 0x30
 8006688:	2a63      	cmp	r2, #99	; 0x63
 800668a:	f104 34ff 	add.w	r4, r4, #4294967295
 800668e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006692:	4631      	mov	r1, r6
 8006694:	dcf1      	bgt.n	800667a <__exponent+0x22>
 8006696:	3130      	adds	r1, #48	; 0x30
 8006698:	f1ae 0502 	sub.w	r5, lr, #2
 800669c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066a0:	1c44      	adds	r4, r0, #1
 80066a2:	4629      	mov	r1, r5
 80066a4:	4561      	cmp	r1, ip
 80066a6:	d30a      	bcc.n	80066be <__exponent+0x66>
 80066a8:	f10d 0209 	add.w	r2, sp, #9
 80066ac:	eba2 020e 	sub.w	r2, r2, lr
 80066b0:	4565      	cmp	r5, ip
 80066b2:	bf88      	it	hi
 80066b4:	2200      	movhi	r2, #0
 80066b6:	4413      	add	r3, r2
 80066b8:	1a18      	subs	r0, r3, r0
 80066ba:	b003      	add	sp, #12
 80066bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066c6:	e7ed      	b.n	80066a4 <__exponent+0x4c>
 80066c8:	2330      	movs	r3, #48	; 0x30
 80066ca:	3130      	adds	r1, #48	; 0x30
 80066cc:	7083      	strb	r3, [r0, #2]
 80066ce:	70c1      	strb	r1, [r0, #3]
 80066d0:	1d03      	adds	r3, r0, #4
 80066d2:	e7f1      	b.n	80066b8 <__exponent+0x60>

080066d4 <_printf_float>:
 80066d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d8:	ed2d 8b02 	vpush	{d8}
 80066dc:	b08d      	sub	sp, #52	; 0x34
 80066de:	460c      	mov	r4, r1
 80066e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80066e4:	4616      	mov	r6, r2
 80066e6:	461f      	mov	r7, r3
 80066e8:	4605      	mov	r5, r0
 80066ea:	f002 fe8b 	bl	8009404 <_localeconv_r>
 80066ee:	f8d0 a000 	ldr.w	sl, [r0]
 80066f2:	4650      	mov	r0, sl
 80066f4:	f7f9 fd74 	bl	80001e0 <strlen>
 80066f8:	2300      	movs	r3, #0
 80066fa:	930a      	str	r3, [sp, #40]	; 0x28
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	9305      	str	r3, [sp, #20]
 8006700:	f8d8 3000 	ldr.w	r3, [r8]
 8006704:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006708:	3307      	adds	r3, #7
 800670a:	f023 0307 	bic.w	r3, r3, #7
 800670e:	f103 0208 	add.w	r2, r3, #8
 8006712:	f8c8 2000 	str.w	r2, [r8]
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800671e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006722:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006726:	9307      	str	r3, [sp, #28]
 8006728:	f8cd 8018 	str.w	r8, [sp, #24]
 800672c:	ee08 0a10 	vmov	s16, r0
 8006730:	4b9f      	ldr	r3, [pc, #636]	; (80069b0 <_printf_float+0x2dc>)
 8006732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006736:	f04f 32ff 	mov.w	r2, #4294967295
 800673a:	f7fa f9ff 	bl	8000b3c <__aeabi_dcmpun>
 800673e:	bb88      	cbnz	r0, 80067a4 <_printf_float+0xd0>
 8006740:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006744:	4b9a      	ldr	r3, [pc, #616]	; (80069b0 <_printf_float+0x2dc>)
 8006746:	f04f 32ff 	mov.w	r2, #4294967295
 800674a:	f7fa f9d9 	bl	8000b00 <__aeabi_dcmple>
 800674e:	bb48      	cbnz	r0, 80067a4 <_printf_float+0xd0>
 8006750:	2200      	movs	r2, #0
 8006752:	2300      	movs	r3, #0
 8006754:	4640      	mov	r0, r8
 8006756:	4649      	mov	r1, r9
 8006758:	f7fa f9c8 	bl	8000aec <__aeabi_dcmplt>
 800675c:	b110      	cbz	r0, 8006764 <_printf_float+0x90>
 800675e:	232d      	movs	r3, #45	; 0x2d
 8006760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006764:	4b93      	ldr	r3, [pc, #588]	; (80069b4 <_printf_float+0x2e0>)
 8006766:	4894      	ldr	r0, [pc, #592]	; (80069b8 <_printf_float+0x2e4>)
 8006768:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800676c:	bf94      	ite	ls
 800676e:	4698      	movls	r8, r3
 8006770:	4680      	movhi	r8, r0
 8006772:	2303      	movs	r3, #3
 8006774:	6123      	str	r3, [r4, #16]
 8006776:	9b05      	ldr	r3, [sp, #20]
 8006778:	f023 0204 	bic.w	r2, r3, #4
 800677c:	6022      	str	r2, [r4, #0]
 800677e:	f04f 0900 	mov.w	r9, #0
 8006782:	9700      	str	r7, [sp, #0]
 8006784:	4633      	mov	r3, r6
 8006786:	aa0b      	add	r2, sp, #44	; 0x2c
 8006788:	4621      	mov	r1, r4
 800678a:	4628      	mov	r0, r5
 800678c:	f000 f9d8 	bl	8006b40 <_printf_common>
 8006790:	3001      	adds	r0, #1
 8006792:	f040 8090 	bne.w	80068b6 <_printf_float+0x1e2>
 8006796:	f04f 30ff 	mov.w	r0, #4294967295
 800679a:	b00d      	add	sp, #52	; 0x34
 800679c:	ecbd 8b02 	vpop	{d8}
 80067a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a4:	4642      	mov	r2, r8
 80067a6:	464b      	mov	r3, r9
 80067a8:	4640      	mov	r0, r8
 80067aa:	4649      	mov	r1, r9
 80067ac:	f7fa f9c6 	bl	8000b3c <__aeabi_dcmpun>
 80067b0:	b140      	cbz	r0, 80067c4 <_printf_float+0xf0>
 80067b2:	464b      	mov	r3, r9
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bfbc      	itt	lt
 80067b8:	232d      	movlt	r3, #45	; 0x2d
 80067ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067be:	487f      	ldr	r0, [pc, #508]	; (80069bc <_printf_float+0x2e8>)
 80067c0:	4b7f      	ldr	r3, [pc, #508]	; (80069c0 <_printf_float+0x2ec>)
 80067c2:	e7d1      	b.n	8006768 <_printf_float+0x94>
 80067c4:	6863      	ldr	r3, [r4, #4]
 80067c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80067ca:	9206      	str	r2, [sp, #24]
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	d13f      	bne.n	8006850 <_printf_float+0x17c>
 80067d0:	2306      	movs	r3, #6
 80067d2:	6063      	str	r3, [r4, #4]
 80067d4:	9b05      	ldr	r3, [sp, #20]
 80067d6:	6861      	ldr	r1, [r4, #4]
 80067d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80067dc:	2300      	movs	r3, #0
 80067de:	9303      	str	r3, [sp, #12]
 80067e0:	ab0a      	add	r3, sp, #40	; 0x28
 80067e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80067e6:	ab09      	add	r3, sp, #36	; 0x24
 80067e8:	ec49 8b10 	vmov	d0, r8, r9
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	6022      	str	r2, [r4, #0]
 80067f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80067f4:	4628      	mov	r0, r5
 80067f6:	f7ff fecd 	bl	8006594 <__cvt>
 80067fa:	9b06      	ldr	r3, [sp, #24]
 80067fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067fe:	2b47      	cmp	r3, #71	; 0x47
 8006800:	4680      	mov	r8, r0
 8006802:	d108      	bne.n	8006816 <_printf_float+0x142>
 8006804:	1cc8      	adds	r0, r1, #3
 8006806:	db02      	blt.n	800680e <_printf_float+0x13a>
 8006808:	6863      	ldr	r3, [r4, #4]
 800680a:	4299      	cmp	r1, r3
 800680c:	dd41      	ble.n	8006892 <_printf_float+0x1be>
 800680e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006812:	fa5f fb8b 	uxtb.w	fp, fp
 8006816:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800681a:	d820      	bhi.n	800685e <_printf_float+0x18a>
 800681c:	3901      	subs	r1, #1
 800681e:	465a      	mov	r2, fp
 8006820:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006824:	9109      	str	r1, [sp, #36]	; 0x24
 8006826:	f7ff ff17 	bl	8006658 <__exponent>
 800682a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800682c:	1813      	adds	r3, r2, r0
 800682e:	2a01      	cmp	r2, #1
 8006830:	4681      	mov	r9, r0
 8006832:	6123      	str	r3, [r4, #16]
 8006834:	dc02      	bgt.n	800683c <_printf_float+0x168>
 8006836:	6822      	ldr	r2, [r4, #0]
 8006838:	07d2      	lsls	r2, r2, #31
 800683a:	d501      	bpl.n	8006840 <_printf_float+0x16c>
 800683c:	3301      	adds	r3, #1
 800683e:	6123      	str	r3, [r4, #16]
 8006840:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006844:	2b00      	cmp	r3, #0
 8006846:	d09c      	beq.n	8006782 <_printf_float+0xae>
 8006848:	232d      	movs	r3, #45	; 0x2d
 800684a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800684e:	e798      	b.n	8006782 <_printf_float+0xae>
 8006850:	9a06      	ldr	r2, [sp, #24]
 8006852:	2a47      	cmp	r2, #71	; 0x47
 8006854:	d1be      	bne.n	80067d4 <_printf_float+0x100>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1bc      	bne.n	80067d4 <_printf_float+0x100>
 800685a:	2301      	movs	r3, #1
 800685c:	e7b9      	b.n	80067d2 <_printf_float+0xfe>
 800685e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006862:	d118      	bne.n	8006896 <_printf_float+0x1c2>
 8006864:	2900      	cmp	r1, #0
 8006866:	6863      	ldr	r3, [r4, #4]
 8006868:	dd0b      	ble.n	8006882 <_printf_float+0x1ae>
 800686a:	6121      	str	r1, [r4, #16]
 800686c:	b913      	cbnz	r3, 8006874 <_printf_float+0x1a0>
 800686e:	6822      	ldr	r2, [r4, #0]
 8006870:	07d0      	lsls	r0, r2, #31
 8006872:	d502      	bpl.n	800687a <_printf_float+0x1a6>
 8006874:	3301      	adds	r3, #1
 8006876:	440b      	add	r3, r1
 8006878:	6123      	str	r3, [r4, #16]
 800687a:	65a1      	str	r1, [r4, #88]	; 0x58
 800687c:	f04f 0900 	mov.w	r9, #0
 8006880:	e7de      	b.n	8006840 <_printf_float+0x16c>
 8006882:	b913      	cbnz	r3, 800688a <_printf_float+0x1b6>
 8006884:	6822      	ldr	r2, [r4, #0]
 8006886:	07d2      	lsls	r2, r2, #31
 8006888:	d501      	bpl.n	800688e <_printf_float+0x1ba>
 800688a:	3302      	adds	r3, #2
 800688c:	e7f4      	b.n	8006878 <_printf_float+0x1a4>
 800688e:	2301      	movs	r3, #1
 8006890:	e7f2      	b.n	8006878 <_printf_float+0x1a4>
 8006892:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006898:	4299      	cmp	r1, r3
 800689a:	db05      	blt.n	80068a8 <_printf_float+0x1d4>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	6121      	str	r1, [r4, #16]
 80068a0:	07d8      	lsls	r0, r3, #31
 80068a2:	d5ea      	bpl.n	800687a <_printf_float+0x1a6>
 80068a4:	1c4b      	adds	r3, r1, #1
 80068a6:	e7e7      	b.n	8006878 <_printf_float+0x1a4>
 80068a8:	2900      	cmp	r1, #0
 80068aa:	bfd4      	ite	le
 80068ac:	f1c1 0202 	rsble	r2, r1, #2
 80068b0:	2201      	movgt	r2, #1
 80068b2:	4413      	add	r3, r2
 80068b4:	e7e0      	b.n	8006878 <_printf_float+0x1a4>
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	055a      	lsls	r2, r3, #21
 80068ba:	d407      	bmi.n	80068cc <_printf_float+0x1f8>
 80068bc:	6923      	ldr	r3, [r4, #16]
 80068be:	4642      	mov	r2, r8
 80068c0:	4631      	mov	r1, r6
 80068c2:	4628      	mov	r0, r5
 80068c4:	47b8      	blx	r7
 80068c6:	3001      	adds	r0, #1
 80068c8:	d12c      	bne.n	8006924 <_printf_float+0x250>
 80068ca:	e764      	b.n	8006796 <_printf_float+0xc2>
 80068cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068d0:	f240 80e0 	bls.w	8006a94 <_printf_float+0x3c0>
 80068d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068d8:	2200      	movs	r2, #0
 80068da:	2300      	movs	r3, #0
 80068dc:	f7fa f8fc 	bl	8000ad8 <__aeabi_dcmpeq>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d034      	beq.n	800694e <_printf_float+0x27a>
 80068e4:	4a37      	ldr	r2, [pc, #220]	; (80069c4 <_printf_float+0x2f0>)
 80068e6:	2301      	movs	r3, #1
 80068e8:	4631      	mov	r1, r6
 80068ea:	4628      	mov	r0, r5
 80068ec:	47b8      	blx	r7
 80068ee:	3001      	adds	r0, #1
 80068f0:	f43f af51 	beq.w	8006796 <_printf_float+0xc2>
 80068f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068f8:	429a      	cmp	r2, r3
 80068fa:	db02      	blt.n	8006902 <_printf_float+0x22e>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	07d8      	lsls	r0, r3, #31
 8006900:	d510      	bpl.n	8006924 <_printf_float+0x250>
 8006902:	ee18 3a10 	vmov	r3, s16
 8006906:	4652      	mov	r2, sl
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	f43f af41 	beq.w	8006796 <_printf_float+0xc2>
 8006914:	f04f 0800 	mov.w	r8, #0
 8006918:	f104 091a 	add.w	r9, r4, #26
 800691c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800691e:	3b01      	subs	r3, #1
 8006920:	4543      	cmp	r3, r8
 8006922:	dc09      	bgt.n	8006938 <_printf_float+0x264>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	079b      	lsls	r3, r3, #30
 8006928:	f100 8105 	bmi.w	8006b36 <_printf_float+0x462>
 800692c:	68e0      	ldr	r0, [r4, #12]
 800692e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006930:	4298      	cmp	r0, r3
 8006932:	bfb8      	it	lt
 8006934:	4618      	movlt	r0, r3
 8006936:	e730      	b.n	800679a <_printf_float+0xc6>
 8006938:	2301      	movs	r3, #1
 800693a:	464a      	mov	r2, r9
 800693c:	4631      	mov	r1, r6
 800693e:	4628      	mov	r0, r5
 8006940:	47b8      	blx	r7
 8006942:	3001      	adds	r0, #1
 8006944:	f43f af27 	beq.w	8006796 <_printf_float+0xc2>
 8006948:	f108 0801 	add.w	r8, r8, #1
 800694c:	e7e6      	b.n	800691c <_printf_float+0x248>
 800694e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006950:	2b00      	cmp	r3, #0
 8006952:	dc39      	bgt.n	80069c8 <_printf_float+0x2f4>
 8006954:	4a1b      	ldr	r2, [pc, #108]	; (80069c4 <_printf_float+0x2f0>)
 8006956:	2301      	movs	r3, #1
 8006958:	4631      	mov	r1, r6
 800695a:	4628      	mov	r0, r5
 800695c:	47b8      	blx	r7
 800695e:	3001      	adds	r0, #1
 8006960:	f43f af19 	beq.w	8006796 <_printf_float+0xc2>
 8006964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006968:	4313      	orrs	r3, r2
 800696a:	d102      	bne.n	8006972 <_printf_float+0x29e>
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	07d9      	lsls	r1, r3, #31
 8006970:	d5d8      	bpl.n	8006924 <_printf_float+0x250>
 8006972:	ee18 3a10 	vmov	r3, s16
 8006976:	4652      	mov	r2, sl
 8006978:	4631      	mov	r1, r6
 800697a:	4628      	mov	r0, r5
 800697c:	47b8      	blx	r7
 800697e:	3001      	adds	r0, #1
 8006980:	f43f af09 	beq.w	8006796 <_printf_float+0xc2>
 8006984:	f04f 0900 	mov.w	r9, #0
 8006988:	f104 0a1a 	add.w	sl, r4, #26
 800698c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800698e:	425b      	negs	r3, r3
 8006990:	454b      	cmp	r3, r9
 8006992:	dc01      	bgt.n	8006998 <_printf_float+0x2c4>
 8006994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006996:	e792      	b.n	80068be <_printf_float+0x1ea>
 8006998:	2301      	movs	r3, #1
 800699a:	4652      	mov	r2, sl
 800699c:	4631      	mov	r1, r6
 800699e:	4628      	mov	r0, r5
 80069a0:	47b8      	blx	r7
 80069a2:	3001      	adds	r0, #1
 80069a4:	f43f aef7 	beq.w	8006796 <_printf_float+0xc2>
 80069a8:	f109 0901 	add.w	r9, r9, #1
 80069ac:	e7ee      	b.n	800698c <_printf_float+0x2b8>
 80069ae:	bf00      	nop
 80069b0:	7fefffff 	.word	0x7fefffff
 80069b4:	0800aee4 	.word	0x0800aee4
 80069b8:	0800aee8 	.word	0x0800aee8
 80069bc:	0800aef0 	.word	0x0800aef0
 80069c0:	0800aeec 	.word	0x0800aeec
 80069c4:	0800aef4 	.word	0x0800aef4
 80069c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069cc:	429a      	cmp	r2, r3
 80069ce:	bfa8      	it	ge
 80069d0:	461a      	movge	r2, r3
 80069d2:	2a00      	cmp	r2, #0
 80069d4:	4691      	mov	r9, r2
 80069d6:	dc37      	bgt.n	8006a48 <_printf_float+0x374>
 80069d8:	f04f 0b00 	mov.w	fp, #0
 80069dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069e0:	f104 021a 	add.w	r2, r4, #26
 80069e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069e6:	9305      	str	r3, [sp, #20]
 80069e8:	eba3 0309 	sub.w	r3, r3, r9
 80069ec:	455b      	cmp	r3, fp
 80069ee:	dc33      	bgt.n	8006a58 <_printf_float+0x384>
 80069f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069f4:	429a      	cmp	r2, r3
 80069f6:	db3b      	blt.n	8006a70 <_printf_float+0x39c>
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	07da      	lsls	r2, r3, #31
 80069fc:	d438      	bmi.n	8006a70 <_printf_float+0x39c>
 80069fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a00:	9a05      	ldr	r2, [sp, #20]
 8006a02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a04:	1a9a      	subs	r2, r3, r2
 8006a06:	eba3 0901 	sub.w	r9, r3, r1
 8006a0a:	4591      	cmp	r9, r2
 8006a0c:	bfa8      	it	ge
 8006a0e:	4691      	movge	r9, r2
 8006a10:	f1b9 0f00 	cmp.w	r9, #0
 8006a14:	dc35      	bgt.n	8006a82 <_printf_float+0x3ae>
 8006a16:	f04f 0800 	mov.w	r8, #0
 8006a1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a1e:	f104 0a1a 	add.w	sl, r4, #26
 8006a22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a26:	1a9b      	subs	r3, r3, r2
 8006a28:	eba3 0309 	sub.w	r3, r3, r9
 8006a2c:	4543      	cmp	r3, r8
 8006a2e:	f77f af79 	ble.w	8006924 <_printf_float+0x250>
 8006a32:	2301      	movs	r3, #1
 8006a34:	4652      	mov	r2, sl
 8006a36:	4631      	mov	r1, r6
 8006a38:	4628      	mov	r0, r5
 8006a3a:	47b8      	blx	r7
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	f43f aeaa 	beq.w	8006796 <_printf_float+0xc2>
 8006a42:	f108 0801 	add.w	r8, r8, #1
 8006a46:	e7ec      	b.n	8006a22 <_printf_float+0x34e>
 8006a48:	4613      	mov	r3, r2
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	4642      	mov	r2, r8
 8006a4e:	4628      	mov	r0, r5
 8006a50:	47b8      	blx	r7
 8006a52:	3001      	adds	r0, #1
 8006a54:	d1c0      	bne.n	80069d8 <_printf_float+0x304>
 8006a56:	e69e      	b.n	8006796 <_printf_float+0xc2>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	9205      	str	r2, [sp, #20]
 8006a60:	47b8      	blx	r7
 8006a62:	3001      	adds	r0, #1
 8006a64:	f43f ae97 	beq.w	8006796 <_printf_float+0xc2>
 8006a68:	9a05      	ldr	r2, [sp, #20]
 8006a6a:	f10b 0b01 	add.w	fp, fp, #1
 8006a6e:	e7b9      	b.n	80069e4 <_printf_float+0x310>
 8006a70:	ee18 3a10 	vmov	r3, s16
 8006a74:	4652      	mov	r2, sl
 8006a76:	4631      	mov	r1, r6
 8006a78:	4628      	mov	r0, r5
 8006a7a:	47b8      	blx	r7
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d1be      	bne.n	80069fe <_printf_float+0x32a>
 8006a80:	e689      	b.n	8006796 <_printf_float+0xc2>
 8006a82:	9a05      	ldr	r2, [sp, #20]
 8006a84:	464b      	mov	r3, r9
 8006a86:	4442      	add	r2, r8
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	47b8      	blx	r7
 8006a8e:	3001      	adds	r0, #1
 8006a90:	d1c1      	bne.n	8006a16 <_printf_float+0x342>
 8006a92:	e680      	b.n	8006796 <_printf_float+0xc2>
 8006a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a96:	2a01      	cmp	r2, #1
 8006a98:	dc01      	bgt.n	8006a9e <_printf_float+0x3ca>
 8006a9a:	07db      	lsls	r3, r3, #31
 8006a9c:	d538      	bpl.n	8006b10 <_printf_float+0x43c>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	47b8      	blx	r7
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	f43f ae74 	beq.w	8006796 <_printf_float+0xc2>
 8006aae:	ee18 3a10 	vmov	r3, s16
 8006ab2:	4652      	mov	r2, sl
 8006ab4:	4631      	mov	r1, r6
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	47b8      	blx	r7
 8006aba:	3001      	adds	r0, #1
 8006abc:	f43f ae6b 	beq.w	8006796 <_printf_float+0xc2>
 8006ac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	f7fa f806 	bl	8000ad8 <__aeabi_dcmpeq>
 8006acc:	b9d8      	cbnz	r0, 8006b06 <_printf_float+0x432>
 8006ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad0:	f108 0201 	add.w	r2, r8, #1
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	4628      	mov	r0, r5
 8006ada:	47b8      	blx	r7
 8006adc:	3001      	adds	r0, #1
 8006ade:	d10e      	bne.n	8006afe <_printf_float+0x42a>
 8006ae0:	e659      	b.n	8006796 <_printf_float+0xc2>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	4652      	mov	r2, sl
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	4628      	mov	r0, r5
 8006aea:	47b8      	blx	r7
 8006aec:	3001      	adds	r0, #1
 8006aee:	f43f ae52 	beq.w	8006796 <_printf_float+0xc2>
 8006af2:	f108 0801 	add.w	r8, r8, #1
 8006af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af8:	3b01      	subs	r3, #1
 8006afa:	4543      	cmp	r3, r8
 8006afc:	dcf1      	bgt.n	8006ae2 <_printf_float+0x40e>
 8006afe:	464b      	mov	r3, r9
 8006b00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b04:	e6dc      	b.n	80068c0 <_printf_float+0x1ec>
 8006b06:	f04f 0800 	mov.w	r8, #0
 8006b0a:	f104 0a1a 	add.w	sl, r4, #26
 8006b0e:	e7f2      	b.n	8006af6 <_printf_float+0x422>
 8006b10:	2301      	movs	r3, #1
 8006b12:	4642      	mov	r2, r8
 8006b14:	e7df      	b.n	8006ad6 <_printf_float+0x402>
 8006b16:	2301      	movs	r3, #1
 8006b18:	464a      	mov	r2, r9
 8006b1a:	4631      	mov	r1, r6
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	47b8      	blx	r7
 8006b20:	3001      	adds	r0, #1
 8006b22:	f43f ae38 	beq.w	8006796 <_printf_float+0xc2>
 8006b26:	f108 0801 	add.w	r8, r8, #1
 8006b2a:	68e3      	ldr	r3, [r4, #12]
 8006b2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b2e:	1a5b      	subs	r3, r3, r1
 8006b30:	4543      	cmp	r3, r8
 8006b32:	dcf0      	bgt.n	8006b16 <_printf_float+0x442>
 8006b34:	e6fa      	b.n	800692c <_printf_float+0x258>
 8006b36:	f04f 0800 	mov.w	r8, #0
 8006b3a:	f104 0919 	add.w	r9, r4, #25
 8006b3e:	e7f4      	b.n	8006b2a <_printf_float+0x456>

08006b40 <_printf_common>:
 8006b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b44:	4616      	mov	r6, r2
 8006b46:	4699      	mov	r9, r3
 8006b48:	688a      	ldr	r2, [r1, #8]
 8006b4a:	690b      	ldr	r3, [r1, #16]
 8006b4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b50:	4293      	cmp	r3, r2
 8006b52:	bfb8      	it	lt
 8006b54:	4613      	movlt	r3, r2
 8006b56:	6033      	str	r3, [r6, #0]
 8006b58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b5c:	4607      	mov	r7, r0
 8006b5e:	460c      	mov	r4, r1
 8006b60:	b10a      	cbz	r2, 8006b66 <_printf_common+0x26>
 8006b62:	3301      	adds	r3, #1
 8006b64:	6033      	str	r3, [r6, #0]
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	0699      	lsls	r1, r3, #26
 8006b6a:	bf42      	ittt	mi
 8006b6c:	6833      	ldrmi	r3, [r6, #0]
 8006b6e:	3302      	addmi	r3, #2
 8006b70:	6033      	strmi	r3, [r6, #0]
 8006b72:	6825      	ldr	r5, [r4, #0]
 8006b74:	f015 0506 	ands.w	r5, r5, #6
 8006b78:	d106      	bne.n	8006b88 <_printf_common+0x48>
 8006b7a:	f104 0a19 	add.w	sl, r4, #25
 8006b7e:	68e3      	ldr	r3, [r4, #12]
 8006b80:	6832      	ldr	r2, [r6, #0]
 8006b82:	1a9b      	subs	r3, r3, r2
 8006b84:	42ab      	cmp	r3, r5
 8006b86:	dc26      	bgt.n	8006bd6 <_printf_common+0x96>
 8006b88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b8c:	1e13      	subs	r3, r2, #0
 8006b8e:	6822      	ldr	r2, [r4, #0]
 8006b90:	bf18      	it	ne
 8006b92:	2301      	movne	r3, #1
 8006b94:	0692      	lsls	r2, r2, #26
 8006b96:	d42b      	bmi.n	8006bf0 <_printf_common+0xb0>
 8006b98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	47c0      	blx	r8
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	d01e      	beq.n	8006be4 <_printf_common+0xa4>
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	68e5      	ldr	r5, [r4, #12]
 8006baa:	6832      	ldr	r2, [r6, #0]
 8006bac:	f003 0306 	and.w	r3, r3, #6
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	bf08      	it	eq
 8006bb4:	1aad      	subeq	r5, r5, r2
 8006bb6:	68a3      	ldr	r3, [r4, #8]
 8006bb8:	6922      	ldr	r2, [r4, #16]
 8006bba:	bf0c      	ite	eq
 8006bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bc0:	2500      	movne	r5, #0
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	bfc4      	itt	gt
 8006bc6:	1a9b      	subgt	r3, r3, r2
 8006bc8:	18ed      	addgt	r5, r5, r3
 8006bca:	2600      	movs	r6, #0
 8006bcc:	341a      	adds	r4, #26
 8006bce:	42b5      	cmp	r5, r6
 8006bd0:	d11a      	bne.n	8006c08 <_printf_common+0xc8>
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	e008      	b.n	8006be8 <_printf_common+0xa8>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	4652      	mov	r2, sl
 8006bda:	4649      	mov	r1, r9
 8006bdc:	4638      	mov	r0, r7
 8006bde:	47c0      	blx	r8
 8006be0:	3001      	adds	r0, #1
 8006be2:	d103      	bne.n	8006bec <_printf_common+0xac>
 8006be4:	f04f 30ff 	mov.w	r0, #4294967295
 8006be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bec:	3501      	adds	r5, #1
 8006bee:	e7c6      	b.n	8006b7e <_printf_common+0x3e>
 8006bf0:	18e1      	adds	r1, r4, r3
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	2030      	movs	r0, #48	; 0x30
 8006bf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bfa:	4422      	add	r2, r4
 8006bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c04:	3302      	adds	r3, #2
 8006c06:	e7c7      	b.n	8006b98 <_printf_common+0x58>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	4622      	mov	r2, r4
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	4638      	mov	r0, r7
 8006c10:	47c0      	blx	r8
 8006c12:	3001      	adds	r0, #1
 8006c14:	d0e6      	beq.n	8006be4 <_printf_common+0xa4>
 8006c16:	3601      	adds	r6, #1
 8006c18:	e7d9      	b.n	8006bce <_printf_common+0x8e>
	...

08006c1c <_printf_i>:
 8006c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c20:	7e0f      	ldrb	r7, [r1, #24]
 8006c22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c24:	2f78      	cmp	r7, #120	; 0x78
 8006c26:	4691      	mov	r9, r2
 8006c28:	4680      	mov	r8, r0
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	469a      	mov	sl, r3
 8006c2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c32:	d807      	bhi.n	8006c44 <_printf_i+0x28>
 8006c34:	2f62      	cmp	r7, #98	; 0x62
 8006c36:	d80a      	bhi.n	8006c4e <_printf_i+0x32>
 8006c38:	2f00      	cmp	r7, #0
 8006c3a:	f000 80d8 	beq.w	8006dee <_printf_i+0x1d2>
 8006c3e:	2f58      	cmp	r7, #88	; 0x58
 8006c40:	f000 80a3 	beq.w	8006d8a <_printf_i+0x16e>
 8006c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c4c:	e03a      	b.n	8006cc4 <_printf_i+0xa8>
 8006c4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c52:	2b15      	cmp	r3, #21
 8006c54:	d8f6      	bhi.n	8006c44 <_printf_i+0x28>
 8006c56:	a101      	add	r1, pc, #4	; (adr r1, 8006c5c <_printf_i+0x40>)
 8006c58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c5c:	08006cb5 	.word	0x08006cb5
 8006c60:	08006cc9 	.word	0x08006cc9
 8006c64:	08006c45 	.word	0x08006c45
 8006c68:	08006c45 	.word	0x08006c45
 8006c6c:	08006c45 	.word	0x08006c45
 8006c70:	08006c45 	.word	0x08006c45
 8006c74:	08006cc9 	.word	0x08006cc9
 8006c78:	08006c45 	.word	0x08006c45
 8006c7c:	08006c45 	.word	0x08006c45
 8006c80:	08006c45 	.word	0x08006c45
 8006c84:	08006c45 	.word	0x08006c45
 8006c88:	08006dd5 	.word	0x08006dd5
 8006c8c:	08006cf9 	.word	0x08006cf9
 8006c90:	08006db7 	.word	0x08006db7
 8006c94:	08006c45 	.word	0x08006c45
 8006c98:	08006c45 	.word	0x08006c45
 8006c9c:	08006df7 	.word	0x08006df7
 8006ca0:	08006c45 	.word	0x08006c45
 8006ca4:	08006cf9 	.word	0x08006cf9
 8006ca8:	08006c45 	.word	0x08006c45
 8006cac:	08006c45 	.word	0x08006c45
 8006cb0:	08006dbf 	.word	0x08006dbf
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	1d1a      	adds	r2, r3, #4
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	602a      	str	r2, [r5, #0]
 8006cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e0a3      	b.n	8006e10 <_printf_i+0x1f4>
 8006cc8:	6820      	ldr	r0, [r4, #0]
 8006cca:	6829      	ldr	r1, [r5, #0]
 8006ccc:	0606      	lsls	r6, r0, #24
 8006cce:	f101 0304 	add.w	r3, r1, #4
 8006cd2:	d50a      	bpl.n	8006cea <_printf_i+0xce>
 8006cd4:	680e      	ldr	r6, [r1, #0]
 8006cd6:	602b      	str	r3, [r5, #0]
 8006cd8:	2e00      	cmp	r6, #0
 8006cda:	da03      	bge.n	8006ce4 <_printf_i+0xc8>
 8006cdc:	232d      	movs	r3, #45	; 0x2d
 8006cde:	4276      	negs	r6, r6
 8006ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce4:	485e      	ldr	r0, [pc, #376]	; (8006e60 <_printf_i+0x244>)
 8006ce6:	230a      	movs	r3, #10
 8006ce8:	e019      	b.n	8006d1e <_printf_i+0x102>
 8006cea:	680e      	ldr	r6, [r1, #0]
 8006cec:	602b      	str	r3, [r5, #0]
 8006cee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cf2:	bf18      	it	ne
 8006cf4:	b236      	sxthne	r6, r6
 8006cf6:	e7ef      	b.n	8006cd8 <_printf_i+0xbc>
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	6820      	ldr	r0, [r4, #0]
 8006cfc:	1d19      	adds	r1, r3, #4
 8006cfe:	6029      	str	r1, [r5, #0]
 8006d00:	0601      	lsls	r1, r0, #24
 8006d02:	d501      	bpl.n	8006d08 <_printf_i+0xec>
 8006d04:	681e      	ldr	r6, [r3, #0]
 8006d06:	e002      	b.n	8006d0e <_printf_i+0xf2>
 8006d08:	0646      	lsls	r6, r0, #25
 8006d0a:	d5fb      	bpl.n	8006d04 <_printf_i+0xe8>
 8006d0c:	881e      	ldrh	r6, [r3, #0]
 8006d0e:	4854      	ldr	r0, [pc, #336]	; (8006e60 <_printf_i+0x244>)
 8006d10:	2f6f      	cmp	r7, #111	; 0x6f
 8006d12:	bf0c      	ite	eq
 8006d14:	2308      	moveq	r3, #8
 8006d16:	230a      	movne	r3, #10
 8006d18:	2100      	movs	r1, #0
 8006d1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d1e:	6865      	ldr	r5, [r4, #4]
 8006d20:	60a5      	str	r5, [r4, #8]
 8006d22:	2d00      	cmp	r5, #0
 8006d24:	bfa2      	ittt	ge
 8006d26:	6821      	ldrge	r1, [r4, #0]
 8006d28:	f021 0104 	bicge.w	r1, r1, #4
 8006d2c:	6021      	strge	r1, [r4, #0]
 8006d2e:	b90e      	cbnz	r6, 8006d34 <_printf_i+0x118>
 8006d30:	2d00      	cmp	r5, #0
 8006d32:	d04d      	beq.n	8006dd0 <_printf_i+0x1b4>
 8006d34:	4615      	mov	r5, r2
 8006d36:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d3a:	fb03 6711 	mls	r7, r3, r1, r6
 8006d3e:	5dc7      	ldrb	r7, [r0, r7]
 8006d40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d44:	4637      	mov	r7, r6
 8006d46:	42bb      	cmp	r3, r7
 8006d48:	460e      	mov	r6, r1
 8006d4a:	d9f4      	bls.n	8006d36 <_printf_i+0x11a>
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	d10b      	bne.n	8006d68 <_printf_i+0x14c>
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	07de      	lsls	r6, r3, #31
 8006d54:	d508      	bpl.n	8006d68 <_printf_i+0x14c>
 8006d56:	6923      	ldr	r3, [r4, #16]
 8006d58:	6861      	ldr	r1, [r4, #4]
 8006d5a:	4299      	cmp	r1, r3
 8006d5c:	bfde      	ittt	le
 8006d5e:	2330      	movle	r3, #48	; 0x30
 8006d60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d68:	1b52      	subs	r2, r2, r5
 8006d6a:	6122      	str	r2, [r4, #16]
 8006d6c:	f8cd a000 	str.w	sl, [sp]
 8006d70:	464b      	mov	r3, r9
 8006d72:	aa03      	add	r2, sp, #12
 8006d74:	4621      	mov	r1, r4
 8006d76:	4640      	mov	r0, r8
 8006d78:	f7ff fee2 	bl	8006b40 <_printf_common>
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	d14c      	bne.n	8006e1a <_printf_i+0x1fe>
 8006d80:	f04f 30ff 	mov.w	r0, #4294967295
 8006d84:	b004      	add	sp, #16
 8006d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d8a:	4835      	ldr	r0, [pc, #212]	; (8006e60 <_printf_i+0x244>)
 8006d8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d90:	6829      	ldr	r1, [r5, #0]
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d98:	6029      	str	r1, [r5, #0]
 8006d9a:	061d      	lsls	r5, r3, #24
 8006d9c:	d514      	bpl.n	8006dc8 <_printf_i+0x1ac>
 8006d9e:	07df      	lsls	r7, r3, #31
 8006da0:	bf44      	itt	mi
 8006da2:	f043 0320 	orrmi.w	r3, r3, #32
 8006da6:	6023      	strmi	r3, [r4, #0]
 8006da8:	b91e      	cbnz	r6, 8006db2 <_printf_i+0x196>
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	f023 0320 	bic.w	r3, r3, #32
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	2310      	movs	r3, #16
 8006db4:	e7b0      	b.n	8006d18 <_printf_i+0xfc>
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	f043 0320 	orr.w	r3, r3, #32
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	2378      	movs	r3, #120	; 0x78
 8006dc0:	4828      	ldr	r0, [pc, #160]	; (8006e64 <_printf_i+0x248>)
 8006dc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dc6:	e7e3      	b.n	8006d90 <_printf_i+0x174>
 8006dc8:	0659      	lsls	r1, r3, #25
 8006dca:	bf48      	it	mi
 8006dcc:	b2b6      	uxthmi	r6, r6
 8006dce:	e7e6      	b.n	8006d9e <_printf_i+0x182>
 8006dd0:	4615      	mov	r5, r2
 8006dd2:	e7bb      	b.n	8006d4c <_printf_i+0x130>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	6826      	ldr	r6, [r4, #0]
 8006dd8:	6961      	ldr	r1, [r4, #20]
 8006dda:	1d18      	adds	r0, r3, #4
 8006ddc:	6028      	str	r0, [r5, #0]
 8006dde:	0635      	lsls	r5, r6, #24
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	d501      	bpl.n	8006de8 <_printf_i+0x1cc>
 8006de4:	6019      	str	r1, [r3, #0]
 8006de6:	e002      	b.n	8006dee <_printf_i+0x1d2>
 8006de8:	0670      	lsls	r0, r6, #25
 8006dea:	d5fb      	bpl.n	8006de4 <_printf_i+0x1c8>
 8006dec:	8019      	strh	r1, [r3, #0]
 8006dee:	2300      	movs	r3, #0
 8006df0:	6123      	str	r3, [r4, #16]
 8006df2:	4615      	mov	r5, r2
 8006df4:	e7ba      	b.n	8006d6c <_printf_i+0x150>
 8006df6:	682b      	ldr	r3, [r5, #0]
 8006df8:	1d1a      	adds	r2, r3, #4
 8006dfa:	602a      	str	r2, [r5, #0]
 8006dfc:	681d      	ldr	r5, [r3, #0]
 8006dfe:	6862      	ldr	r2, [r4, #4]
 8006e00:	2100      	movs	r1, #0
 8006e02:	4628      	mov	r0, r5
 8006e04:	f7f9 f9f4 	bl	80001f0 <memchr>
 8006e08:	b108      	cbz	r0, 8006e0e <_printf_i+0x1f2>
 8006e0a:	1b40      	subs	r0, r0, r5
 8006e0c:	6060      	str	r0, [r4, #4]
 8006e0e:	6863      	ldr	r3, [r4, #4]
 8006e10:	6123      	str	r3, [r4, #16]
 8006e12:	2300      	movs	r3, #0
 8006e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e18:	e7a8      	b.n	8006d6c <_printf_i+0x150>
 8006e1a:	6923      	ldr	r3, [r4, #16]
 8006e1c:	462a      	mov	r2, r5
 8006e1e:	4649      	mov	r1, r9
 8006e20:	4640      	mov	r0, r8
 8006e22:	47d0      	blx	sl
 8006e24:	3001      	adds	r0, #1
 8006e26:	d0ab      	beq.n	8006d80 <_printf_i+0x164>
 8006e28:	6823      	ldr	r3, [r4, #0]
 8006e2a:	079b      	lsls	r3, r3, #30
 8006e2c:	d413      	bmi.n	8006e56 <_printf_i+0x23a>
 8006e2e:	68e0      	ldr	r0, [r4, #12]
 8006e30:	9b03      	ldr	r3, [sp, #12]
 8006e32:	4298      	cmp	r0, r3
 8006e34:	bfb8      	it	lt
 8006e36:	4618      	movlt	r0, r3
 8006e38:	e7a4      	b.n	8006d84 <_printf_i+0x168>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4632      	mov	r2, r6
 8006e3e:	4649      	mov	r1, r9
 8006e40:	4640      	mov	r0, r8
 8006e42:	47d0      	blx	sl
 8006e44:	3001      	adds	r0, #1
 8006e46:	d09b      	beq.n	8006d80 <_printf_i+0x164>
 8006e48:	3501      	adds	r5, #1
 8006e4a:	68e3      	ldr	r3, [r4, #12]
 8006e4c:	9903      	ldr	r1, [sp, #12]
 8006e4e:	1a5b      	subs	r3, r3, r1
 8006e50:	42ab      	cmp	r3, r5
 8006e52:	dcf2      	bgt.n	8006e3a <_printf_i+0x21e>
 8006e54:	e7eb      	b.n	8006e2e <_printf_i+0x212>
 8006e56:	2500      	movs	r5, #0
 8006e58:	f104 0619 	add.w	r6, r4, #25
 8006e5c:	e7f5      	b.n	8006e4a <_printf_i+0x22e>
 8006e5e:	bf00      	nop
 8006e60:	0800aef6 	.word	0x0800aef6
 8006e64:	0800af07 	.word	0x0800af07

08006e68 <_scanf_float>:
 8006e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6c:	b087      	sub	sp, #28
 8006e6e:	4617      	mov	r7, r2
 8006e70:	9303      	str	r3, [sp, #12]
 8006e72:	688b      	ldr	r3, [r1, #8]
 8006e74:	1e5a      	subs	r2, r3, #1
 8006e76:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006e7a:	bf83      	ittte	hi
 8006e7c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006e80:	195b      	addhi	r3, r3, r5
 8006e82:	9302      	strhi	r3, [sp, #8]
 8006e84:	2300      	movls	r3, #0
 8006e86:	bf86      	itte	hi
 8006e88:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006e8c:	608b      	strhi	r3, [r1, #8]
 8006e8e:	9302      	strls	r3, [sp, #8]
 8006e90:	680b      	ldr	r3, [r1, #0]
 8006e92:	468b      	mov	fp, r1
 8006e94:	2500      	movs	r5, #0
 8006e96:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006e9a:	f84b 3b1c 	str.w	r3, [fp], #28
 8006e9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ea2:	4680      	mov	r8, r0
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	465e      	mov	r6, fp
 8006ea8:	46aa      	mov	sl, r5
 8006eaa:	46a9      	mov	r9, r5
 8006eac:	9501      	str	r5, [sp, #4]
 8006eae:	68a2      	ldr	r2, [r4, #8]
 8006eb0:	b152      	cbz	r2, 8006ec8 <_scanf_float+0x60>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b4e      	cmp	r3, #78	; 0x4e
 8006eb8:	d864      	bhi.n	8006f84 <_scanf_float+0x11c>
 8006eba:	2b40      	cmp	r3, #64	; 0x40
 8006ebc:	d83c      	bhi.n	8006f38 <_scanf_float+0xd0>
 8006ebe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006ec2:	b2c8      	uxtb	r0, r1
 8006ec4:	280e      	cmp	r0, #14
 8006ec6:	d93a      	bls.n	8006f3e <_scanf_float+0xd6>
 8006ec8:	f1b9 0f00 	cmp.w	r9, #0
 8006ecc:	d003      	beq.n	8006ed6 <_scanf_float+0x6e>
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006eda:	f1ba 0f01 	cmp.w	sl, #1
 8006ede:	f200 8113 	bhi.w	8007108 <_scanf_float+0x2a0>
 8006ee2:	455e      	cmp	r6, fp
 8006ee4:	f200 8105 	bhi.w	80070f2 <_scanf_float+0x28a>
 8006ee8:	2501      	movs	r5, #1
 8006eea:	4628      	mov	r0, r5
 8006eec:	b007      	add	sp, #28
 8006eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006ef6:	2a0d      	cmp	r2, #13
 8006ef8:	d8e6      	bhi.n	8006ec8 <_scanf_float+0x60>
 8006efa:	a101      	add	r1, pc, #4	; (adr r1, 8006f00 <_scanf_float+0x98>)
 8006efc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f00:	0800703f 	.word	0x0800703f
 8006f04:	08006ec9 	.word	0x08006ec9
 8006f08:	08006ec9 	.word	0x08006ec9
 8006f0c:	08006ec9 	.word	0x08006ec9
 8006f10:	0800709f 	.word	0x0800709f
 8006f14:	08007077 	.word	0x08007077
 8006f18:	08006ec9 	.word	0x08006ec9
 8006f1c:	08006ec9 	.word	0x08006ec9
 8006f20:	0800704d 	.word	0x0800704d
 8006f24:	08006ec9 	.word	0x08006ec9
 8006f28:	08006ec9 	.word	0x08006ec9
 8006f2c:	08006ec9 	.word	0x08006ec9
 8006f30:	08006ec9 	.word	0x08006ec9
 8006f34:	08007005 	.word	0x08007005
 8006f38:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006f3c:	e7db      	b.n	8006ef6 <_scanf_float+0x8e>
 8006f3e:	290e      	cmp	r1, #14
 8006f40:	d8c2      	bhi.n	8006ec8 <_scanf_float+0x60>
 8006f42:	a001      	add	r0, pc, #4	; (adr r0, 8006f48 <_scanf_float+0xe0>)
 8006f44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f48:	08006ff7 	.word	0x08006ff7
 8006f4c:	08006ec9 	.word	0x08006ec9
 8006f50:	08006ff7 	.word	0x08006ff7
 8006f54:	0800708b 	.word	0x0800708b
 8006f58:	08006ec9 	.word	0x08006ec9
 8006f5c:	08006fa5 	.word	0x08006fa5
 8006f60:	08006fe1 	.word	0x08006fe1
 8006f64:	08006fe1 	.word	0x08006fe1
 8006f68:	08006fe1 	.word	0x08006fe1
 8006f6c:	08006fe1 	.word	0x08006fe1
 8006f70:	08006fe1 	.word	0x08006fe1
 8006f74:	08006fe1 	.word	0x08006fe1
 8006f78:	08006fe1 	.word	0x08006fe1
 8006f7c:	08006fe1 	.word	0x08006fe1
 8006f80:	08006fe1 	.word	0x08006fe1
 8006f84:	2b6e      	cmp	r3, #110	; 0x6e
 8006f86:	d809      	bhi.n	8006f9c <_scanf_float+0x134>
 8006f88:	2b60      	cmp	r3, #96	; 0x60
 8006f8a:	d8b2      	bhi.n	8006ef2 <_scanf_float+0x8a>
 8006f8c:	2b54      	cmp	r3, #84	; 0x54
 8006f8e:	d077      	beq.n	8007080 <_scanf_float+0x218>
 8006f90:	2b59      	cmp	r3, #89	; 0x59
 8006f92:	d199      	bne.n	8006ec8 <_scanf_float+0x60>
 8006f94:	2d07      	cmp	r5, #7
 8006f96:	d197      	bne.n	8006ec8 <_scanf_float+0x60>
 8006f98:	2508      	movs	r5, #8
 8006f9a:	e029      	b.n	8006ff0 <_scanf_float+0x188>
 8006f9c:	2b74      	cmp	r3, #116	; 0x74
 8006f9e:	d06f      	beq.n	8007080 <_scanf_float+0x218>
 8006fa0:	2b79      	cmp	r3, #121	; 0x79
 8006fa2:	e7f6      	b.n	8006f92 <_scanf_float+0x12a>
 8006fa4:	6821      	ldr	r1, [r4, #0]
 8006fa6:	05c8      	lsls	r0, r1, #23
 8006fa8:	d51a      	bpl.n	8006fe0 <_scanf_float+0x178>
 8006faa:	9b02      	ldr	r3, [sp, #8]
 8006fac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006fb0:	6021      	str	r1, [r4, #0]
 8006fb2:	f109 0901 	add.w	r9, r9, #1
 8006fb6:	b11b      	cbz	r3, 8006fc0 <_scanf_float+0x158>
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	3201      	adds	r2, #1
 8006fbc:	9302      	str	r3, [sp, #8]
 8006fbe:	60a2      	str	r2, [r4, #8]
 8006fc0:	68a3      	ldr	r3, [r4, #8]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	60a3      	str	r3, [r4, #8]
 8006fc6:	6923      	ldr	r3, [r4, #16]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	6123      	str	r3, [r4, #16]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	607b      	str	r3, [r7, #4]
 8006fd4:	f340 8084 	ble.w	80070e0 <_scanf_float+0x278>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	e766      	b.n	8006eae <_scanf_float+0x46>
 8006fe0:	eb1a 0f05 	cmn.w	sl, r5
 8006fe4:	f47f af70 	bne.w	8006ec8 <_scanf_float+0x60>
 8006fe8:	6822      	ldr	r2, [r4, #0]
 8006fea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006fee:	6022      	str	r2, [r4, #0]
 8006ff0:	f806 3b01 	strb.w	r3, [r6], #1
 8006ff4:	e7e4      	b.n	8006fc0 <_scanf_float+0x158>
 8006ff6:	6822      	ldr	r2, [r4, #0]
 8006ff8:	0610      	lsls	r0, r2, #24
 8006ffa:	f57f af65 	bpl.w	8006ec8 <_scanf_float+0x60>
 8006ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007002:	e7f4      	b.n	8006fee <_scanf_float+0x186>
 8007004:	f1ba 0f00 	cmp.w	sl, #0
 8007008:	d10e      	bne.n	8007028 <_scanf_float+0x1c0>
 800700a:	f1b9 0f00 	cmp.w	r9, #0
 800700e:	d10e      	bne.n	800702e <_scanf_float+0x1c6>
 8007010:	6822      	ldr	r2, [r4, #0]
 8007012:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007016:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800701a:	d108      	bne.n	800702e <_scanf_float+0x1c6>
 800701c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007020:	6022      	str	r2, [r4, #0]
 8007022:	f04f 0a01 	mov.w	sl, #1
 8007026:	e7e3      	b.n	8006ff0 <_scanf_float+0x188>
 8007028:	f1ba 0f02 	cmp.w	sl, #2
 800702c:	d055      	beq.n	80070da <_scanf_float+0x272>
 800702e:	2d01      	cmp	r5, #1
 8007030:	d002      	beq.n	8007038 <_scanf_float+0x1d0>
 8007032:	2d04      	cmp	r5, #4
 8007034:	f47f af48 	bne.w	8006ec8 <_scanf_float+0x60>
 8007038:	3501      	adds	r5, #1
 800703a:	b2ed      	uxtb	r5, r5
 800703c:	e7d8      	b.n	8006ff0 <_scanf_float+0x188>
 800703e:	f1ba 0f01 	cmp.w	sl, #1
 8007042:	f47f af41 	bne.w	8006ec8 <_scanf_float+0x60>
 8007046:	f04f 0a02 	mov.w	sl, #2
 800704a:	e7d1      	b.n	8006ff0 <_scanf_float+0x188>
 800704c:	b97d      	cbnz	r5, 800706e <_scanf_float+0x206>
 800704e:	f1b9 0f00 	cmp.w	r9, #0
 8007052:	f47f af3c 	bne.w	8006ece <_scanf_float+0x66>
 8007056:	6822      	ldr	r2, [r4, #0]
 8007058:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800705c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007060:	f47f af39 	bne.w	8006ed6 <_scanf_float+0x6e>
 8007064:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007068:	6022      	str	r2, [r4, #0]
 800706a:	2501      	movs	r5, #1
 800706c:	e7c0      	b.n	8006ff0 <_scanf_float+0x188>
 800706e:	2d03      	cmp	r5, #3
 8007070:	d0e2      	beq.n	8007038 <_scanf_float+0x1d0>
 8007072:	2d05      	cmp	r5, #5
 8007074:	e7de      	b.n	8007034 <_scanf_float+0x1cc>
 8007076:	2d02      	cmp	r5, #2
 8007078:	f47f af26 	bne.w	8006ec8 <_scanf_float+0x60>
 800707c:	2503      	movs	r5, #3
 800707e:	e7b7      	b.n	8006ff0 <_scanf_float+0x188>
 8007080:	2d06      	cmp	r5, #6
 8007082:	f47f af21 	bne.w	8006ec8 <_scanf_float+0x60>
 8007086:	2507      	movs	r5, #7
 8007088:	e7b2      	b.n	8006ff0 <_scanf_float+0x188>
 800708a:	6822      	ldr	r2, [r4, #0]
 800708c:	0591      	lsls	r1, r2, #22
 800708e:	f57f af1b 	bpl.w	8006ec8 <_scanf_float+0x60>
 8007092:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007096:	6022      	str	r2, [r4, #0]
 8007098:	f8cd 9004 	str.w	r9, [sp, #4]
 800709c:	e7a8      	b.n	8006ff0 <_scanf_float+0x188>
 800709e:	6822      	ldr	r2, [r4, #0]
 80070a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80070a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80070a8:	d006      	beq.n	80070b8 <_scanf_float+0x250>
 80070aa:	0550      	lsls	r0, r2, #21
 80070ac:	f57f af0c 	bpl.w	8006ec8 <_scanf_float+0x60>
 80070b0:	f1b9 0f00 	cmp.w	r9, #0
 80070b4:	f43f af0f 	beq.w	8006ed6 <_scanf_float+0x6e>
 80070b8:	0591      	lsls	r1, r2, #22
 80070ba:	bf58      	it	pl
 80070bc:	9901      	ldrpl	r1, [sp, #4]
 80070be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80070c2:	bf58      	it	pl
 80070c4:	eba9 0101 	subpl.w	r1, r9, r1
 80070c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80070cc:	bf58      	it	pl
 80070ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80070d2:	6022      	str	r2, [r4, #0]
 80070d4:	f04f 0900 	mov.w	r9, #0
 80070d8:	e78a      	b.n	8006ff0 <_scanf_float+0x188>
 80070da:	f04f 0a03 	mov.w	sl, #3
 80070de:	e787      	b.n	8006ff0 <_scanf_float+0x188>
 80070e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80070e4:	4639      	mov	r1, r7
 80070e6:	4640      	mov	r0, r8
 80070e8:	4798      	blx	r3
 80070ea:	2800      	cmp	r0, #0
 80070ec:	f43f aedf 	beq.w	8006eae <_scanf_float+0x46>
 80070f0:	e6ea      	b.n	8006ec8 <_scanf_float+0x60>
 80070f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070fa:	463a      	mov	r2, r7
 80070fc:	4640      	mov	r0, r8
 80070fe:	4798      	blx	r3
 8007100:	6923      	ldr	r3, [r4, #16]
 8007102:	3b01      	subs	r3, #1
 8007104:	6123      	str	r3, [r4, #16]
 8007106:	e6ec      	b.n	8006ee2 <_scanf_float+0x7a>
 8007108:	1e6b      	subs	r3, r5, #1
 800710a:	2b06      	cmp	r3, #6
 800710c:	d825      	bhi.n	800715a <_scanf_float+0x2f2>
 800710e:	2d02      	cmp	r5, #2
 8007110:	d836      	bhi.n	8007180 <_scanf_float+0x318>
 8007112:	455e      	cmp	r6, fp
 8007114:	f67f aee8 	bls.w	8006ee8 <_scanf_float+0x80>
 8007118:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800711c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007120:	463a      	mov	r2, r7
 8007122:	4640      	mov	r0, r8
 8007124:	4798      	blx	r3
 8007126:	6923      	ldr	r3, [r4, #16]
 8007128:	3b01      	subs	r3, #1
 800712a:	6123      	str	r3, [r4, #16]
 800712c:	e7f1      	b.n	8007112 <_scanf_float+0x2aa>
 800712e:	9802      	ldr	r0, [sp, #8]
 8007130:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007134:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007138:	9002      	str	r0, [sp, #8]
 800713a:	463a      	mov	r2, r7
 800713c:	4640      	mov	r0, r8
 800713e:	4798      	blx	r3
 8007140:	6923      	ldr	r3, [r4, #16]
 8007142:	3b01      	subs	r3, #1
 8007144:	6123      	str	r3, [r4, #16]
 8007146:	f10a 3aff 	add.w	sl, sl, #4294967295
 800714a:	fa5f fa8a 	uxtb.w	sl, sl
 800714e:	f1ba 0f02 	cmp.w	sl, #2
 8007152:	d1ec      	bne.n	800712e <_scanf_float+0x2c6>
 8007154:	3d03      	subs	r5, #3
 8007156:	b2ed      	uxtb	r5, r5
 8007158:	1b76      	subs	r6, r6, r5
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	05da      	lsls	r2, r3, #23
 800715e:	d52f      	bpl.n	80071c0 <_scanf_float+0x358>
 8007160:	055b      	lsls	r3, r3, #21
 8007162:	d510      	bpl.n	8007186 <_scanf_float+0x31e>
 8007164:	455e      	cmp	r6, fp
 8007166:	f67f aebf 	bls.w	8006ee8 <_scanf_float+0x80>
 800716a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800716e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007172:	463a      	mov	r2, r7
 8007174:	4640      	mov	r0, r8
 8007176:	4798      	blx	r3
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	3b01      	subs	r3, #1
 800717c:	6123      	str	r3, [r4, #16]
 800717e:	e7f1      	b.n	8007164 <_scanf_float+0x2fc>
 8007180:	46aa      	mov	sl, r5
 8007182:	9602      	str	r6, [sp, #8]
 8007184:	e7df      	b.n	8007146 <_scanf_float+0x2de>
 8007186:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800718a:	6923      	ldr	r3, [r4, #16]
 800718c:	2965      	cmp	r1, #101	; 0x65
 800718e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007192:	f106 35ff 	add.w	r5, r6, #4294967295
 8007196:	6123      	str	r3, [r4, #16]
 8007198:	d00c      	beq.n	80071b4 <_scanf_float+0x34c>
 800719a:	2945      	cmp	r1, #69	; 0x45
 800719c:	d00a      	beq.n	80071b4 <_scanf_float+0x34c>
 800719e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071a2:	463a      	mov	r2, r7
 80071a4:	4640      	mov	r0, r8
 80071a6:	4798      	blx	r3
 80071a8:	6923      	ldr	r3, [r4, #16]
 80071aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	1eb5      	subs	r5, r6, #2
 80071b2:	6123      	str	r3, [r4, #16]
 80071b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071b8:	463a      	mov	r2, r7
 80071ba:	4640      	mov	r0, r8
 80071bc:	4798      	blx	r3
 80071be:	462e      	mov	r6, r5
 80071c0:	6825      	ldr	r5, [r4, #0]
 80071c2:	f015 0510 	ands.w	r5, r5, #16
 80071c6:	d159      	bne.n	800727c <_scanf_float+0x414>
 80071c8:	7035      	strb	r5, [r6, #0]
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d4:	d11b      	bne.n	800720e <_scanf_float+0x3a6>
 80071d6:	9b01      	ldr	r3, [sp, #4]
 80071d8:	454b      	cmp	r3, r9
 80071da:	eba3 0209 	sub.w	r2, r3, r9
 80071de:	d123      	bne.n	8007228 <_scanf_float+0x3c0>
 80071e0:	2200      	movs	r2, #0
 80071e2:	4659      	mov	r1, fp
 80071e4:	4640      	mov	r0, r8
 80071e6:	f000 fe99 	bl	8007f1c <_strtod_r>
 80071ea:	6822      	ldr	r2, [r4, #0]
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	f012 0f02 	tst.w	r2, #2
 80071f2:	ec57 6b10 	vmov	r6, r7, d0
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	d021      	beq.n	800723e <_scanf_float+0x3d6>
 80071fa:	9903      	ldr	r1, [sp, #12]
 80071fc:	1d1a      	adds	r2, r3, #4
 80071fe:	600a      	str	r2, [r1, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	e9c3 6700 	strd	r6, r7, [r3]
 8007206:	68e3      	ldr	r3, [r4, #12]
 8007208:	3301      	adds	r3, #1
 800720a:	60e3      	str	r3, [r4, #12]
 800720c:	e66d      	b.n	8006eea <_scanf_float+0x82>
 800720e:	9b04      	ldr	r3, [sp, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0e5      	beq.n	80071e0 <_scanf_float+0x378>
 8007214:	9905      	ldr	r1, [sp, #20]
 8007216:	230a      	movs	r3, #10
 8007218:	462a      	mov	r2, r5
 800721a:	3101      	adds	r1, #1
 800721c:	4640      	mov	r0, r8
 800721e:	f000 ff05 	bl	800802c <_strtol_r>
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	9e05      	ldr	r6, [sp, #20]
 8007226:	1ac2      	subs	r2, r0, r3
 8007228:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800722c:	429e      	cmp	r6, r3
 800722e:	bf28      	it	cs
 8007230:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007234:	4912      	ldr	r1, [pc, #72]	; (8007280 <_scanf_float+0x418>)
 8007236:	4630      	mov	r0, r6
 8007238:	f000 f82c 	bl	8007294 <siprintf>
 800723c:	e7d0      	b.n	80071e0 <_scanf_float+0x378>
 800723e:	9903      	ldr	r1, [sp, #12]
 8007240:	f012 0f04 	tst.w	r2, #4
 8007244:	f103 0204 	add.w	r2, r3, #4
 8007248:	600a      	str	r2, [r1, #0]
 800724a:	d1d9      	bne.n	8007200 <_scanf_float+0x398>
 800724c:	f8d3 8000 	ldr.w	r8, [r3]
 8007250:	ee10 2a10 	vmov	r2, s0
 8007254:	ee10 0a10 	vmov	r0, s0
 8007258:	463b      	mov	r3, r7
 800725a:	4639      	mov	r1, r7
 800725c:	f7f9 fc6e 	bl	8000b3c <__aeabi_dcmpun>
 8007260:	b128      	cbz	r0, 800726e <_scanf_float+0x406>
 8007262:	4808      	ldr	r0, [pc, #32]	; (8007284 <_scanf_float+0x41c>)
 8007264:	f000 f810 	bl	8007288 <nanf>
 8007268:	ed88 0a00 	vstr	s0, [r8]
 800726c:	e7cb      	b.n	8007206 <_scanf_float+0x39e>
 800726e:	4630      	mov	r0, r6
 8007270:	4639      	mov	r1, r7
 8007272:	f7f9 fcc1 	bl	8000bf8 <__aeabi_d2f>
 8007276:	f8c8 0000 	str.w	r0, [r8]
 800727a:	e7c4      	b.n	8007206 <_scanf_float+0x39e>
 800727c:	2500      	movs	r5, #0
 800727e:	e634      	b.n	8006eea <_scanf_float+0x82>
 8007280:	0800af18 	.word	0x0800af18
 8007284:	0800b320 	.word	0x0800b320

08007288 <nanf>:
 8007288:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007290 <nanf+0x8>
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	7fc00000 	.word	0x7fc00000

08007294 <siprintf>:
 8007294:	b40e      	push	{r1, r2, r3}
 8007296:	b500      	push	{lr}
 8007298:	b09c      	sub	sp, #112	; 0x70
 800729a:	ab1d      	add	r3, sp, #116	; 0x74
 800729c:	9002      	str	r0, [sp, #8]
 800729e:	9006      	str	r0, [sp, #24]
 80072a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072a4:	4809      	ldr	r0, [pc, #36]	; (80072cc <siprintf+0x38>)
 80072a6:	9107      	str	r1, [sp, #28]
 80072a8:	9104      	str	r1, [sp, #16]
 80072aa:	4909      	ldr	r1, [pc, #36]	; (80072d0 <siprintf+0x3c>)
 80072ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b0:	9105      	str	r1, [sp, #20]
 80072b2:	6800      	ldr	r0, [r0, #0]
 80072b4:	9301      	str	r3, [sp, #4]
 80072b6:	a902      	add	r1, sp, #8
 80072b8:	f002 fee4 	bl	800a084 <_svfiprintf_r>
 80072bc:	9b02      	ldr	r3, [sp, #8]
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	b01c      	add	sp, #112	; 0x70
 80072c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80072c8:	b003      	add	sp, #12
 80072ca:	4770      	bx	lr
 80072cc:	2000003c 	.word	0x2000003c
 80072d0:	ffff0208 	.word	0xffff0208

080072d4 <sulp>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	4604      	mov	r4, r0
 80072d8:	460d      	mov	r5, r1
 80072da:	ec45 4b10 	vmov	d0, r4, r5
 80072de:	4616      	mov	r6, r2
 80072e0:	f002 fc2e 	bl	8009b40 <__ulp>
 80072e4:	ec51 0b10 	vmov	r0, r1, d0
 80072e8:	b17e      	cbz	r6, 800730a <sulp+0x36>
 80072ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80072ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	dd09      	ble.n	800730a <sulp+0x36>
 80072f6:	051b      	lsls	r3, r3, #20
 80072f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80072fc:	2400      	movs	r4, #0
 80072fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007302:	4622      	mov	r2, r4
 8007304:	462b      	mov	r3, r5
 8007306:	f7f9 f97f 	bl	8000608 <__aeabi_dmul>
 800730a:	bd70      	pop	{r4, r5, r6, pc}
 800730c:	0000      	movs	r0, r0
	...

08007310 <_strtod_l>:
 8007310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	ed2d 8b02 	vpush	{d8}
 8007318:	b09d      	sub	sp, #116	; 0x74
 800731a:	461f      	mov	r7, r3
 800731c:	2300      	movs	r3, #0
 800731e:	9318      	str	r3, [sp, #96]	; 0x60
 8007320:	4ba2      	ldr	r3, [pc, #648]	; (80075ac <_strtod_l+0x29c>)
 8007322:	9213      	str	r2, [sp, #76]	; 0x4c
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	9305      	str	r3, [sp, #20]
 8007328:	4604      	mov	r4, r0
 800732a:	4618      	mov	r0, r3
 800732c:	4688      	mov	r8, r1
 800732e:	f7f8 ff57 	bl	80001e0 <strlen>
 8007332:	f04f 0a00 	mov.w	sl, #0
 8007336:	4605      	mov	r5, r0
 8007338:	f04f 0b00 	mov.w	fp, #0
 800733c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007342:	781a      	ldrb	r2, [r3, #0]
 8007344:	2a2b      	cmp	r2, #43	; 0x2b
 8007346:	d04e      	beq.n	80073e6 <_strtod_l+0xd6>
 8007348:	d83b      	bhi.n	80073c2 <_strtod_l+0xb2>
 800734a:	2a0d      	cmp	r2, #13
 800734c:	d834      	bhi.n	80073b8 <_strtod_l+0xa8>
 800734e:	2a08      	cmp	r2, #8
 8007350:	d834      	bhi.n	80073bc <_strtod_l+0xac>
 8007352:	2a00      	cmp	r2, #0
 8007354:	d03e      	beq.n	80073d4 <_strtod_l+0xc4>
 8007356:	2300      	movs	r3, #0
 8007358:	930a      	str	r3, [sp, #40]	; 0x28
 800735a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800735c:	7833      	ldrb	r3, [r6, #0]
 800735e:	2b30      	cmp	r3, #48	; 0x30
 8007360:	f040 80b0 	bne.w	80074c4 <_strtod_l+0x1b4>
 8007364:	7873      	ldrb	r3, [r6, #1]
 8007366:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800736a:	2b58      	cmp	r3, #88	; 0x58
 800736c:	d168      	bne.n	8007440 <_strtod_l+0x130>
 800736e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007370:	9301      	str	r3, [sp, #4]
 8007372:	ab18      	add	r3, sp, #96	; 0x60
 8007374:	9702      	str	r7, [sp, #8]
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	4a8d      	ldr	r2, [pc, #564]	; (80075b0 <_strtod_l+0x2a0>)
 800737a:	ab19      	add	r3, sp, #100	; 0x64
 800737c:	a917      	add	r1, sp, #92	; 0x5c
 800737e:	4620      	mov	r0, r4
 8007380:	f001 fd38 	bl	8008df4 <__gethex>
 8007384:	f010 0707 	ands.w	r7, r0, #7
 8007388:	4605      	mov	r5, r0
 800738a:	d005      	beq.n	8007398 <_strtod_l+0x88>
 800738c:	2f06      	cmp	r7, #6
 800738e:	d12c      	bne.n	80073ea <_strtod_l+0xda>
 8007390:	3601      	adds	r6, #1
 8007392:	2300      	movs	r3, #0
 8007394:	9617      	str	r6, [sp, #92]	; 0x5c
 8007396:	930a      	str	r3, [sp, #40]	; 0x28
 8007398:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800739a:	2b00      	cmp	r3, #0
 800739c:	f040 8590 	bne.w	8007ec0 <_strtod_l+0xbb0>
 80073a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a2:	b1eb      	cbz	r3, 80073e0 <_strtod_l+0xd0>
 80073a4:	4652      	mov	r2, sl
 80073a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80073aa:	ec43 2b10 	vmov	d0, r2, r3
 80073ae:	b01d      	add	sp, #116	; 0x74
 80073b0:	ecbd 8b02 	vpop	{d8}
 80073b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b8:	2a20      	cmp	r2, #32
 80073ba:	d1cc      	bne.n	8007356 <_strtod_l+0x46>
 80073bc:	3301      	adds	r3, #1
 80073be:	9317      	str	r3, [sp, #92]	; 0x5c
 80073c0:	e7be      	b.n	8007340 <_strtod_l+0x30>
 80073c2:	2a2d      	cmp	r2, #45	; 0x2d
 80073c4:	d1c7      	bne.n	8007356 <_strtod_l+0x46>
 80073c6:	2201      	movs	r2, #1
 80073c8:	920a      	str	r2, [sp, #40]	; 0x28
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80073ce:	785b      	ldrb	r3, [r3, #1]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1c2      	bne.n	800735a <_strtod_l+0x4a>
 80073d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f040 856e 	bne.w	8007ebc <_strtod_l+0xbac>
 80073e0:	4652      	mov	r2, sl
 80073e2:	465b      	mov	r3, fp
 80073e4:	e7e1      	b.n	80073aa <_strtod_l+0x9a>
 80073e6:	2200      	movs	r2, #0
 80073e8:	e7ee      	b.n	80073c8 <_strtod_l+0xb8>
 80073ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80073ec:	b13a      	cbz	r2, 80073fe <_strtod_l+0xee>
 80073ee:	2135      	movs	r1, #53	; 0x35
 80073f0:	a81a      	add	r0, sp, #104	; 0x68
 80073f2:	f002 fcb0 	bl	8009d56 <__copybits>
 80073f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80073f8:	4620      	mov	r0, r4
 80073fa:	f002 f86f 	bl	80094dc <_Bfree>
 80073fe:	3f01      	subs	r7, #1
 8007400:	2f04      	cmp	r7, #4
 8007402:	d806      	bhi.n	8007412 <_strtod_l+0x102>
 8007404:	e8df f007 	tbb	[pc, r7]
 8007408:	1714030a 	.word	0x1714030a
 800740c:	0a          	.byte	0x0a
 800740d:	00          	.byte	0x00
 800740e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007412:	0728      	lsls	r0, r5, #28
 8007414:	d5c0      	bpl.n	8007398 <_strtod_l+0x88>
 8007416:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800741a:	e7bd      	b.n	8007398 <_strtod_l+0x88>
 800741c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007420:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007422:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007426:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800742a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800742e:	e7f0      	b.n	8007412 <_strtod_l+0x102>
 8007430:	f8df b180 	ldr.w	fp, [pc, #384]	; 80075b4 <_strtod_l+0x2a4>
 8007434:	e7ed      	b.n	8007412 <_strtod_l+0x102>
 8007436:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800743a:	f04f 3aff 	mov.w	sl, #4294967295
 800743e:	e7e8      	b.n	8007412 <_strtod_l+0x102>
 8007440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	9217      	str	r2, [sp, #92]	; 0x5c
 8007446:	785b      	ldrb	r3, [r3, #1]
 8007448:	2b30      	cmp	r3, #48	; 0x30
 800744a:	d0f9      	beq.n	8007440 <_strtod_l+0x130>
 800744c:	2b00      	cmp	r3, #0
 800744e:	d0a3      	beq.n	8007398 <_strtod_l+0x88>
 8007450:	2301      	movs	r3, #1
 8007452:	f04f 0900 	mov.w	r9, #0
 8007456:	9304      	str	r3, [sp, #16]
 8007458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800745a:	9308      	str	r3, [sp, #32]
 800745c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007460:	464f      	mov	r7, r9
 8007462:	220a      	movs	r2, #10
 8007464:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007466:	7806      	ldrb	r6, [r0, #0]
 8007468:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800746c:	b2d9      	uxtb	r1, r3
 800746e:	2909      	cmp	r1, #9
 8007470:	d92a      	bls.n	80074c8 <_strtod_l+0x1b8>
 8007472:	9905      	ldr	r1, [sp, #20]
 8007474:	462a      	mov	r2, r5
 8007476:	f002 ff1f 	bl	800a2b8 <strncmp>
 800747a:	b398      	cbz	r0, 80074e4 <_strtod_l+0x1d4>
 800747c:	2000      	movs	r0, #0
 800747e:	4632      	mov	r2, r6
 8007480:	463d      	mov	r5, r7
 8007482:	9005      	str	r0, [sp, #20]
 8007484:	4603      	mov	r3, r0
 8007486:	2a65      	cmp	r2, #101	; 0x65
 8007488:	d001      	beq.n	800748e <_strtod_l+0x17e>
 800748a:	2a45      	cmp	r2, #69	; 0x45
 800748c:	d118      	bne.n	80074c0 <_strtod_l+0x1b0>
 800748e:	b91d      	cbnz	r5, 8007498 <_strtod_l+0x188>
 8007490:	9a04      	ldr	r2, [sp, #16]
 8007492:	4302      	orrs	r2, r0
 8007494:	d09e      	beq.n	80073d4 <_strtod_l+0xc4>
 8007496:	2500      	movs	r5, #0
 8007498:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800749c:	f108 0201 	add.w	r2, r8, #1
 80074a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80074a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80074a6:	2a2b      	cmp	r2, #43	; 0x2b
 80074a8:	d075      	beq.n	8007596 <_strtod_l+0x286>
 80074aa:	2a2d      	cmp	r2, #45	; 0x2d
 80074ac:	d07b      	beq.n	80075a6 <_strtod_l+0x296>
 80074ae:	f04f 0c00 	mov.w	ip, #0
 80074b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80074b6:	2909      	cmp	r1, #9
 80074b8:	f240 8082 	bls.w	80075c0 <_strtod_l+0x2b0>
 80074bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80074c0:	2600      	movs	r6, #0
 80074c2:	e09d      	b.n	8007600 <_strtod_l+0x2f0>
 80074c4:	2300      	movs	r3, #0
 80074c6:	e7c4      	b.n	8007452 <_strtod_l+0x142>
 80074c8:	2f08      	cmp	r7, #8
 80074ca:	bfd8      	it	le
 80074cc:	9907      	ldrle	r1, [sp, #28]
 80074ce:	f100 0001 	add.w	r0, r0, #1
 80074d2:	bfda      	itte	le
 80074d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80074d8:	9307      	strle	r3, [sp, #28]
 80074da:	fb02 3909 	mlagt	r9, r2, r9, r3
 80074de:	3701      	adds	r7, #1
 80074e0:	9017      	str	r0, [sp, #92]	; 0x5c
 80074e2:	e7bf      	b.n	8007464 <_strtod_l+0x154>
 80074e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074e6:	195a      	adds	r2, r3, r5
 80074e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80074ea:	5d5a      	ldrb	r2, [r3, r5]
 80074ec:	2f00      	cmp	r7, #0
 80074ee:	d037      	beq.n	8007560 <_strtod_l+0x250>
 80074f0:	9005      	str	r0, [sp, #20]
 80074f2:	463d      	mov	r5, r7
 80074f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80074f8:	2b09      	cmp	r3, #9
 80074fa:	d912      	bls.n	8007522 <_strtod_l+0x212>
 80074fc:	2301      	movs	r3, #1
 80074fe:	e7c2      	b.n	8007486 <_strtod_l+0x176>
 8007500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	9217      	str	r2, [sp, #92]	; 0x5c
 8007506:	785a      	ldrb	r2, [r3, #1]
 8007508:	3001      	adds	r0, #1
 800750a:	2a30      	cmp	r2, #48	; 0x30
 800750c:	d0f8      	beq.n	8007500 <_strtod_l+0x1f0>
 800750e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007512:	2b08      	cmp	r3, #8
 8007514:	f200 84d9 	bhi.w	8007eca <_strtod_l+0xbba>
 8007518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800751a:	9005      	str	r0, [sp, #20]
 800751c:	2000      	movs	r0, #0
 800751e:	9308      	str	r3, [sp, #32]
 8007520:	4605      	mov	r5, r0
 8007522:	3a30      	subs	r2, #48	; 0x30
 8007524:	f100 0301 	add.w	r3, r0, #1
 8007528:	d014      	beq.n	8007554 <_strtod_l+0x244>
 800752a:	9905      	ldr	r1, [sp, #20]
 800752c:	4419      	add	r1, r3
 800752e:	9105      	str	r1, [sp, #20]
 8007530:	462b      	mov	r3, r5
 8007532:	eb00 0e05 	add.w	lr, r0, r5
 8007536:	210a      	movs	r1, #10
 8007538:	4573      	cmp	r3, lr
 800753a:	d113      	bne.n	8007564 <_strtod_l+0x254>
 800753c:	182b      	adds	r3, r5, r0
 800753e:	2b08      	cmp	r3, #8
 8007540:	f105 0501 	add.w	r5, r5, #1
 8007544:	4405      	add	r5, r0
 8007546:	dc1c      	bgt.n	8007582 <_strtod_l+0x272>
 8007548:	9907      	ldr	r1, [sp, #28]
 800754a:	230a      	movs	r3, #10
 800754c:	fb03 2301 	mla	r3, r3, r1, r2
 8007550:	9307      	str	r3, [sp, #28]
 8007552:	2300      	movs	r3, #0
 8007554:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007556:	1c51      	adds	r1, r2, #1
 8007558:	9117      	str	r1, [sp, #92]	; 0x5c
 800755a:	7852      	ldrb	r2, [r2, #1]
 800755c:	4618      	mov	r0, r3
 800755e:	e7c9      	b.n	80074f4 <_strtod_l+0x1e4>
 8007560:	4638      	mov	r0, r7
 8007562:	e7d2      	b.n	800750a <_strtod_l+0x1fa>
 8007564:	2b08      	cmp	r3, #8
 8007566:	dc04      	bgt.n	8007572 <_strtod_l+0x262>
 8007568:	9e07      	ldr	r6, [sp, #28]
 800756a:	434e      	muls	r6, r1
 800756c:	9607      	str	r6, [sp, #28]
 800756e:	3301      	adds	r3, #1
 8007570:	e7e2      	b.n	8007538 <_strtod_l+0x228>
 8007572:	f103 0c01 	add.w	ip, r3, #1
 8007576:	f1bc 0f10 	cmp.w	ip, #16
 800757a:	bfd8      	it	le
 800757c:	fb01 f909 	mulle.w	r9, r1, r9
 8007580:	e7f5      	b.n	800756e <_strtod_l+0x25e>
 8007582:	2d10      	cmp	r5, #16
 8007584:	bfdc      	itt	le
 8007586:	230a      	movle	r3, #10
 8007588:	fb03 2909 	mlale	r9, r3, r9, r2
 800758c:	e7e1      	b.n	8007552 <_strtod_l+0x242>
 800758e:	2300      	movs	r3, #0
 8007590:	9305      	str	r3, [sp, #20]
 8007592:	2301      	movs	r3, #1
 8007594:	e77c      	b.n	8007490 <_strtod_l+0x180>
 8007596:	f04f 0c00 	mov.w	ip, #0
 800759a:	f108 0202 	add.w	r2, r8, #2
 800759e:	9217      	str	r2, [sp, #92]	; 0x5c
 80075a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80075a4:	e785      	b.n	80074b2 <_strtod_l+0x1a2>
 80075a6:	f04f 0c01 	mov.w	ip, #1
 80075aa:	e7f6      	b.n	800759a <_strtod_l+0x28a>
 80075ac:	0800b168 	.word	0x0800b168
 80075b0:	0800af20 	.word	0x0800af20
 80075b4:	7ff00000 	.word	0x7ff00000
 80075b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80075ba:	1c51      	adds	r1, r2, #1
 80075bc:	9117      	str	r1, [sp, #92]	; 0x5c
 80075be:	7852      	ldrb	r2, [r2, #1]
 80075c0:	2a30      	cmp	r2, #48	; 0x30
 80075c2:	d0f9      	beq.n	80075b8 <_strtod_l+0x2a8>
 80075c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80075c8:	2908      	cmp	r1, #8
 80075ca:	f63f af79 	bhi.w	80074c0 <_strtod_l+0x1b0>
 80075ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80075d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80075d4:	9206      	str	r2, [sp, #24]
 80075d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80075d8:	1c51      	adds	r1, r2, #1
 80075da:	9117      	str	r1, [sp, #92]	; 0x5c
 80075dc:	7852      	ldrb	r2, [r2, #1]
 80075de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80075e2:	2e09      	cmp	r6, #9
 80075e4:	d937      	bls.n	8007656 <_strtod_l+0x346>
 80075e6:	9e06      	ldr	r6, [sp, #24]
 80075e8:	1b89      	subs	r1, r1, r6
 80075ea:	2908      	cmp	r1, #8
 80075ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80075f0:	dc02      	bgt.n	80075f8 <_strtod_l+0x2e8>
 80075f2:	4576      	cmp	r6, lr
 80075f4:	bfa8      	it	ge
 80075f6:	4676      	movge	r6, lr
 80075f8:	f1bc 0f00 	cmp.w	ip, #0
 80075fc:	d000      	beq.n	8007600 <_strtod_l+0x2f0>
 80075fe:	4276      	negs	r6, r6
 8007600:	2d00      	cmp	r5, #0
 8007602:	d14d      	bne.n	80076a0 <_strtod_l+0x390>
 8007604:	9904      	ldr	r1, [sp, #16]
 8007606:	4301      	orrs	r1, r0
 8007608:	f47f aec6 	bne.w	8007398 <_strtod_l+0x88>
 800760c:	2b00      	cmp	r3, #0
 800760e:	f47f aee1 	bne.w	80073d4 <_strtod_l+0xc4>
 8007612:	2a69      	cmp	r2, #105	; 0x69
 8007614:	d027      	beq.n	8007666 <_strtod_l+0x356>
 8007616:	dc24      	bgt.n	8007662 <_strtod_l+0x352>
 8007618:	2a49      	cmp	r2, #73	; 0x49
 800761a:	d024      	beq.n	8007666 <_strtod_l+0x356>
 800761c:	2a4e      	cmp	r2, #78	; 0x4e
 800761e:	f47f aed9 	bne.w	80073d4 <_strtod_l+0xc4>
 8007622:	499f      	ldr	r1, [pc, #636]	; (80078a0 <_strtod_l+0x590>)
 8007624:	a817      	add	r0, sp, #92	; 0x5c
 8007626:	f001 fe3d 	bl	80092a4 <__match>
 800762a:	2800      	cmp	r0, #0
 800762c:	f43f aed2 	beq.w	80073d4 <_strtod_l+0xc4>
 8007630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b28      	cmp	r3, #40	; 0x28
 8007636:	d12d      	bne.n	8007694 <_strtod_l+0x384>
 8007638:	499a      	ldr	r1, [pc, #616]	; (80078a4 <_strtod_l+0x594>)
 800763a:	aa1a      	add	r2, sp, #104	; 0x68
 800763c:	a817      	add	r0, sp, #92	; 0x5c
 800763e:	f001 fe45 	bl	80092cc <__hexnan>
 8007642:	2805      	cmp	r0, #5
 8007644:	d126      	bne.n	8007694 <_strtod_l+0x384>
 8007646:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007648:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800764c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007650:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007654:	e6a0      	b.n	8007398 <_strtod_l+0x88>
 8007656:	210a      	movs	r1, #10
 8007658:	fb01 2e0e 	mla	lr, r1, lr, r2
 800765c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007660:	e7b9      	b.n	80075d6 <_strtod_l+0x2c6>
 8007662:	2a6e      	cmp	r2, #110	; 0x6e
 8007664:	e7db      	b.n	800761e <_strtod_l+0x30e>
 8007666:	4990      	ldr	r1, [pc, #576]	; (80078a8 <_strtod_l+0x598>)
 8007668:	a817      	add	r0, sp, #92	; 0x5c
 800766a:	f001 fe1b 	bl	80092a4 <__match>
 800766e:	2800      	cmp	r0, #0
 8007670:	f43f aeb0 	beq.w	80073d4 <_strtod_l+0xc4>
 8007674:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007676:	498d      	ldr	r1, [pc, #564]	; (80078ac <_strtod_l+0x59c>)
 8007678:	3b01      	subs	r3, #1
 800767a:	a817      	add	r0, sp, #92	; 0x5c
 800767c:	9317      	str	r3, [sp, #92]	; 0x5c
 800767e:	f001 fe11 	bl	80092a4 <__match>
 8007682:	b910      	cbnz	r0, 800768a <_strtod_l+0x37a>
 8007684:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007686:	3301      	adds	r3, #1
 8007688:	9317      	str	r3, [sp, #92]	; 0x5c
 800768a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80078bc <_strtod_l+0x5ac>
 800768e:	f04f 0a00 	mov.w	sl, #0
 8007692:	e681      	b.n	8007398 <_strtod_l+0x88>
 8007694:	4886      	ldr	r0, [pc, #536]	; (80078b0 <_strtod_l+0x5a0>)
 8007696:	f002 fdf7 	bl	800a288 <nan>
 800769a:	ec5b ab10 	vmov	sl, fp, d0
 800769e:	e67b      	b.n	8007398 <_strtod_l+0x88>
 80076a0:	9b05      	ldr	r3, [sp, #20]
 80076a2:	9807      	ldr	r0, [sp, #28]
 80076a4:	1af3      	subs	r3, r6, r3
 80076a6:	2f00      	cmp	r7, #0
 80076a8:	bf08      	it	eq
 80076aa:	462f      	moveq	r7, r5
 80076ac:	2d10      	cmp	r5, #16
 80076ae:	9306      	str	r3, [sp, #24]
 80076b0:	46a8      	mov	r8, r5
 80076b2:	bfa8      	it	ge
 80076b4:	f04f 0810 	movge.w	r8, #16
 80076b8:	f7f8 ff2c 	bl	8000514 <__aeabi_ui2d>
 80076bc:	2d09      	cmp	r5, #9
 80076be:	4682      	mov	sl, r0
 80076c0:	468b      	mov	fp, r1
 80076c2:	dd13      	ble.n	80076ec <_strtod_l+0x3dc>
 80076c4:	4b7b      	ldr	r3, [pc, #492]	; (80078b4 <_strtod_l+0x5a4>)
 80076c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80076ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80076ce:	f7f8 ff9b 	bl	8000608 <__aeabi_dmul>
 80076d2:	4682      	mov	sl, r0
 80076d4:	4648      	mov	r0, r9
 80076d6:	468b      	mov	fp, r1
 80076d8:	f7f8 ff1c 	bl	8000514 <__aeabi_ui2d>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4650      	mov	r0, sl
 80076e2:	4659      	mov	r1, fp
 80076e4:	f7f8 fdda 	bl	800029c <__adddf3>
 80076e8:	4682      	mov	sl, r0
 80076ea:	468b      	mov	fp, r1
 80076ec:	2d0f      	cmp	r5, #15
 80076ee:	dc38      	bgt.n	8007762 <_strtod_l+0x452>
 80076f0:	9b06      	ldr	r3, [sp, #24]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f43f ae50 	beq.w	8007398 <_strtod_l+0x88>
 80076f8:	dd24      	ble.n	8007744 <_strtod_l+0x434>
 80076fa:	2b16      	cmp	r3, #22
 80076fc:	dc0b      	bgt.n	8007716 <_strtod_l+0x406>
 80076fe:	496d      	ldr	r1, [pc, #436]	; (80078b4 <_strtod_l+0x5a4>)
 8007700:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007704:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007708:	4652      	mov	r2, sl
 800770a:	465b      	mov	r3, fp
 800770c:	f7f8 ff7c 	bl	8000608 <__aeabi_dmul>
 8007710:	4682      	mov	sl, r0
 8007712:	468b      	mov	fp, r1
 8007714:	e640      	b.n	8007398 <_strtod_l+0x88>
 8007716:	9a06      	ldr	r2, [sp, #24]
 8007718:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800771c:	4293      	cmp	r3, r2
 800771e:	db20      	blt.n	8007762 <_strtod_l+0x452>
 8007720:	4c64      	ldr	r4, [pc, #400]	; (80078b4 <_strtod_l+0x5a4>)
 8007722:	f1c5 050f 	rsb	r5, r5, #15
 8007726:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800772a:	4652      	mov	r2, sl
 800772c:	465b      	mov	r3, fp
 800772e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007732:	f7f8 ff69 	bl	8000608 <__aeabi_dmul>
 8007736:	9b06      	ldr	r3, [sp, #24]
 8007738:	1b5d      	subs	r5, r3, r5
 800773a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800773e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007742:	e7e3      	b.n	800770c <_strtod_l+0x3fc>
 8007744:	9b06      	ldr	r3, [sp, #24]
 8007746:	3316      	adds	r3, #22
 8007748:	db0b      	blt.n	8007762 <_strtod_l+0x452>
 800774a:	9b05      	ldr	r3, [sp, #20]
 800774c:	1b9e      	subs	r6, r3, r6
 800774e:	4b59      	ldr	r3, [pc, #356]	; (80078b4 <_strtod_l+0x5a4>)
 8007750:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007754:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007758:	4650      	mov	r0, sl
 800775a:	4659      	mov	r1, fp
 800775c:	f7f9 f87e 	bl	800085c <__aeabi_ddiv>
 8007760:	e7d6      	b.n	8007710 <_strtod_l+0x400>
 8007762:	9b06      	ldr	r3, [sp, #24]
 8007764:	eba5 0808 	sub.w	r8, r5, r8
 8007768:	4498      	add	r8, r3
 800776a:	f1b8 0f00 	cmp.w	r8, #0
 800776e:	dd74      	ble.n	800785a <_strtod_l+0x54a>
 8007770:	f018 030f 	ands.w	r3, r8, #15
 8007774:	d00a      	beq.n	800778c <_strtod_l+0x47c>
 8007776:	494f      	ldr	r1, [pc, #316]	; (80078b4 <_strtod_l+0x5a4>)
 8007778:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800777c:	4652      	mov	r2, sl
 800777e:	465b      	mov	r3, fp
 8007780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007784:	f7f8 ff40 	bl	8000608 <__aeabi_dmul>
 8007788:	4682      	mov	sl, r0
 800778a:	468b      	mov	fp, r1
 800778c:	f038 080f 	bics.w	r8, r8, #15
 8007790:	d04f      	beq.n	8007832 <_strtod_l+0x522>
 8007792:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007796:	dd22      	ble.n	80077de <_strtod_l+0x4ce>
 8007798:	2500      	movs	r5, #0
 800779a:	462e      	mov	r6, r5
 800779c:	9507      	str	r5, [sp, #28]
 800779e:	9505      	str	r5, [sp, #20]
 80077a0:	2322      	movs	r3, #34	; 0x22
 80077a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80078bc <_strtod_l+0x5ac>
 80077a6:	6023      	str	r3, [r4, #0]
 80077a8:	f04f 0a00 	mov.w	sl, #0
 80077ac:	9b07      	ldr	r3, [sp, #28]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f43f adf2 	beq.w	8007398 <_strtod_l+0x88>
 80077b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80077b6:	4620      	mov	r0, r4
 80077b8:	f001 fe90 	bl	80094dc <_Bfree>
 80077bc:	9905      	ldr	r1, [sp, #20]
 80077be:	4620      	mov	r0, r4
 80077c0:	f001 fe8c 	bl	80094dc <_Bfree>
 80077c4:	4631      	mov	r1, r6
 80077c6:	4620      	mov	r0, r4
 80077c8:	f001 fe88 	bl	80094dc <_Bfree>
 80077cc:	9907      	ldr	r1, [sp, #28]
 80077ce:	4620      	mov	r0, r4
 80077d0:	f001 fe84 	bl	80094dc <_Bfree>
 80077d4:	4629      	mov	r1, r5
 80077d6:	4620      	mov	r0, r4
 80077d8:	f001 fe80 	bl	80094dc <_Bfree>
 80077dc:	e5dc      	b.n	8007398 <_strtod_l+0x88>
 80077de:	4b36      	ldr	r3, [pc, #216]	; (80078b8 <_strtod_l+0x5a8>)
 80077e0:	9304      	str	r3, [sp, #16]
 80077e2:	2300      	movs	r3, #0
 80077e4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80077e8:	4650      	mov	r0, sl
 80077ea:	4659      	mov	r1, fp
 80077ec:	4699      	mov	r9, r3
 80077ee:	f1b8 0f01 	cmp.w	r8, #1
 80077f2:	dc21      	bgt.n	8007838 <_strtod_l+0x528>
 80077f4:	b10b      	cbz	r3, 80077fa <_strtod_l+0x4ea>
 80077f6:	4682      	mov	sl, r0
 80077f8:	468b      	mov	fp, r1
 80077fa:	4b2f      	ldr	r3, [pc, #188]	; (80078b8 <_strtod_l+0x5a8>)
 80077fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007800:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007804:	4652      	mov	r2, sl
 8007806:	465b      	mov	r3, fp
 8007808:	e9d9 0100 	ldrd	r0, r1, [r9]
 800780c:	f7f8 fefc 	bl	8000608 <__aeabi_dmul>
 8007810:	4b2a      	ldr	r3, [pc, #168]	; (80078bc <_strtod_l+0x5ac>)
 8007812:	460a      	mov	r2, r1
 8007814:	400b      	ands	r3, r1
 8007816:	492a      	ldr	r1, [pc, #168]	; (80078c0 <_strtod_l+0x5b0>)
 8007818:	428b      	cmp	r3, r1
 800781a:	4682      	mov	sl, r0
 800781c:	d8bc      	bhi.n	8007798 <_strtod_l+0x488>
 800781e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007822:	428b      	cmp	r3, r1
 8007824:	bf86      	itte	hi
 8007826:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80078c4 <_strtod_l+0x5b4>
 800782a:	f04f 3aff 	movhi.w	sl, #4294967295
 800782e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007832:	2300      	movs	r3, #0
 8007834:	9304      	str	r3, [sp, #16]
 8007836:	e084      	b.n	8007942 <_strtod_l+0x632>
 8007838:	f018 0f01 	tst.w	r8, #1
 800783c:	d005      	beq.n	800784a <_strtod_l+0x53a>
 800783e:	9b04      	ldr	r3, [sp, #16]
 8007840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007844:	f7f8 fee0 	bl	8000608 <__aeabi_dmul>
 8007848:	2301      	movs	r3, #1
 800784a:	9a04      	ldr	r2, [sp, #16]
 800784c:	3208      	adds	r2, #8
 800784e:	f109 0901 	add.w	r9, r9, #1
 8007852:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007856:	9204      	str	r2, [sp, #16]
 8007858:	e7c9      	b.n	80077ee <_strtod_l+0x4de>
 800785a:	d0ea      	beq.n	8007832 <_strtod_l+0x522>
 800785c:	f1c8 0800 	rsb	r8, r8, #0
 8007860:	f018 020f 	ands.w	r2, r8, #15
 8007864:	d00a      	beq.n	800787c <_strtod_l+0x56c>
 8007866:	4b13      	ldr	r3, [pc, #76]	; (80078b4 <_strtod_l+0x5a4>)
 8007868:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800786c:	4650      	mov	r0, sl
 800786e:	4659      	mov	r1, fp
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	f7f8 fff2 	bl	800085c <__aeabi_ddiv>
 8007878:	4682      	mov	sl, r0
 800787a:	468b      	mov	fp, r1
 800787c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007880:	d0d7      	beq.n	8007832 <_strtod_l+0x522>
 8007882:	f1b8 0f1f 	cmp.w	r8, #31
 8007886:	dd1f      	ble.n	80078c8 <_strtod_l+0x5b8>
 8007888:	2500      	movs	r5, #0
 800788a:	462e      	mov	r6, r5
 800788c:	9507      	str	r5, [sp, #28]
 800788e:	9505      	str	r5, [sp, #20]
 8007890:	2322      	movs	r3, #34	; 0x22
 8007892:	f04f 0a00 	mov.w	sl, #0
 8007896:	f04f 0b00 	mov.w	fp, #0
 800789a:	6023      	str	r3, [r4, #0]
 800789c:	e786      	b.n	80077ac <_strtod_l+0x49c>
 800789e:	bf00      	nop
 80078a0:	0800aef1 	.word	0x0800aef1
 80078a4:	0800af34 	.word	0x0800af34
 80078a8:	0800aee9 	.word	0x0800aee9
 80078ac:	0800b074 	.word	0x0800b074
 80078b0:	0800b320 	.word	0x0800b320
 80078b4:	0800b200 	.word	0x0800b200
 80078b8:	0800b1d8 	.word	0x0800b1d8
 80078bc:	7ff00000 	.word	0x7ff00000
 80078c0:	7ca00000 	.word	0x7ca00000
 80078c4:	7fefffff 	.word	0x7fefffff
 80078c8:	f018 0310 	ands.w	r3, r8, #16
 80078cc:	bf18      	it	ne
 80078ce:	236a      	movne	r3, #106	; 0x6a
 80078d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007c80 <_strtod_l+0x970>
 80078d4:	9304      	str	r3, [sp, #16]
 80078d6:	4650      	mov	r0, sl
 80078d8:	4659      	mov	r1, fp
 80078da:	2300      	movs	r3, #0
 80078dc:	f018 0f01 	tst.w	r8, #1
 80078e0:	d004      	beq.n	80078ec <_strtod_l+0x5dc>
 80078e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80078e6:	f7f8 fe8f 	bl	8000608 <__aeabi_dmul>
 80078ea:	2301      	movs	r3, #1
 80078ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 80078f0:	f109 0908 	add.w	r9, r9, #8
 80078f4:	d1f2      	bne.n	80078dc <_strtod_l+0x5cc>
 80078f6:	b10b      	cbz	r3, 80078fc <_strtod_l+0x5ec>
 80078f8:	4682      	mov	sl, r0
 80078fa:	468b      	mov	fp, r1
 80078fc:	9b04      	ldr	r3, [sp, #16]
 80078fe:	b1c3      	cbz	r3, 8007932 <_strtod_l+0x622>
 8007900:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007904:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007908:	2b00      	cmp	r3, #0
 800790a:	4659      	mov	r1, fp
 800790c:	dd11      	ble.n	8007932 <_strtod_l+0x622>
 800790e:	2b1f      	cmp	r3, #31
 8007910:	f340 8124 	ble.w	8007b5c <_strtod_l+0x84c>
 8007914:	2b34      	cmp	r3, #52	; 0x34
 8007916:	bfde      	ittt	le
 8007918:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800791c:	f04f 33ff 	movle.w	r3, #4294967295
 8007920:	fa03 f202 	lslle.w	r2, r3, r2
 8007924:	f04f 0a00 	mov.w	sl, #0
 8007928:	bfcc      	ite	gt
 800792a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800792e:	ea02 0b01 	andle.w	fp, r2, r1
 8007932:	2200      	movs	r2, #0
 8007934:	2300      	movs	r3, #0
 8007936:	4650      	mov	r0, sl
 8007938:	4659      	mov	r1, fp
 800793a:	f7f9 f8cd 	bl	8000ad8 <__aeabi_dcmpeq>
 800793e:	2800      	cmp	r0, #0
 8007940:	d1a2      	bne.n	8007888 <_strtod_l+0x578>
 8007942:	9b07      	ldr	r3, [sp, #28]
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	9908      	ldr	r1, [sp, #32]
 8007948:	462b      	mov	r3, r5
 800794a:	463a      	mov	r2, r7
 800794c:	4620      	mov	r0, r4
 800794e:	f001 fe2d 	bl	80095ac <__s2b>
 8007952:	9007      	str	r0, [sp, #28]
 8007954:	2800      	cmp	r0, #0
 8007956:	f43f af1f 	beq.w	8007798 <_strtod_l+0x488>
 800795a:	9b05      	ldr	r3, [sp, #20]
 800795c:	1b9e      	subs	r6, r3, r6
 800795e:	9b06      	ldr	r3, [sp, #24]
 8007960:	2b00      	cmp	r3, #0
 8007962:	bfb4      	ite	lt
 8007964:	4633      	movlt	r3, r6
 8007966:	2300      	movge	r3, #0
 8007968:	930c      	str	r3, [sp, #48]	; 0x30
 800796a:	9b06      	ldr	r3, [sp, #24]
 800796c:	2500      	movs	r5, #0
 800796e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007972:	9312      	str	r3, [sp, #72]	; 0x48
 8007974:	462e      	mov	r6, r5
 8007976:	9b07      	ldr	r3, [sp, #28]
 8007978:	4620      	mov	r0, r4
 800797a:	6859      	ldr	r1, [r3, #4]
 800797c:	f001 fd6e 	bl	800945c <_Balloc>
 8007980:	9005      	str	r0, [sp, #20]
 8007982:	2800      	cmp	r0, #0
 8007984:	f43f af0c 	beq.w	80077a0 <_strtod_l+0x490>
 8007988:	9b07      	ldr	r3, [sp, #28]
 800798a:	691a      	ldr	r2, [r3, #16]
 800798c:	3202      	adds	r2, #2
 800798e:	f103 010c 	add.w	r1, r3, #12
 8007992:	0092      	lsls	r2, r2, #2
 8007994:	300c      	adds	r0, #12
 8007996:	f001 fd53 	bl	8009440 <memcpy>
 800799a:	ec4b ab10 	vmov	d0, sl, fp
 800799e:	aa1a      	add	r2, sp, #104	; 0x68
 80079a0:	a919      	add	r1, sp, #100	; 0x64
 80079a2:	4620      	mov	r0, r4
 80079a4:	f002 f948 	bl	8009c38 <__d2b>
 80079a8:	ec4b ab18 	vmov	d8, sl, fp
 80079ac:	9018      	str	r0, [sp, #96]	; 0x60
 80079ae:	2800      	cmp	r0, #0
 80079b0:	f43f aef6 	beq.w	80077a0 <_strtod_l+0x490>
 80079b4:	2101      	movs	r1, #1
 80079b6:	4620      	mov	r0, r4
 80079b8:	f001 fe92 	bl	80096e0 <__i2b>
 80079bc:	4606      	mov	r6, r0
 80079be:	2800      	cmp	r0, #0
 80079c0:	f43f aeee 	beq.w	80077a0 <_strtod_l+0x490>
 80079c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079c6:	9904      	ldr	r1, [sp, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	bfab      	itete	ge
 80079cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80079ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80079d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80079d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80079d6:	bfac      	ite	ge
 80079d8:	eb03 0902 	addge.w	r9, r3, r2
 80079dc:	1ad7      	sublt	r7, r2, r3
 80079de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80079e0:	eba3 0801 	sub.w	r8, r3, r1
 80079e4:	4490      	add	r8, r2
 80079e6:	4ba1      	ldr	r3, [pc, #644]	; (8007c6c <_strtod_l+0x95c>)
 80079e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80079ec:	4598      	cmp	r8, r3
 80079ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80079f2:	f280 80c7 	bge.w	8007b84 <_strtod_l+0x874>
 80079f6:	eba3 0308 	sub.w	r3, r3, r8
 80079fa:	2b1f      	cmp	r3, #31
 80079fc:	eba2 0203 	sub.w	r2, r2, r3
 8007a00:	f04f 0101 	mov.w	r1, #1
 8007a04:	f300 80b1 	bgt.w	8007b6a <_strtod_l+0x85a>
 8007a08:	fa01 f303 	lsl.w	r3, r1, r3
 8007a0c:	930d      	str	r3, [sp, #52]	; 0x34
 8007a0e:	2300      	movs	r3, #0
 8007a10:	9308      	str	r3, [sp, #32]
 8007a12:	eb09 0802 	add.w	r8, r9, r2
 8007a16:	9b04      	ldr	r3, [sp, #16]
 8007a18:	45c1      	cmp	r9, r8
 8007a1a:	4417      	add	r7, r2
 8007a1c:	441f      	add	r7, r3
 8007a1e:	464b      	mov	r3, r9
 8007a20:	bfa8      	it	ge
 8007a22:	4643      	movge	r3, r8
 8007a24:	42bb      	cmp	r3, r7
 8007a26:	bfa8      	it	ge
 8007a28:	463b      	movge	r3, r7
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	bfc2      	ittt	gt
 8007a2e:	eba8 0803 	subgt.w	r8, r8, r3
 8007a32:	1aff      	subgt	r7, r7, r3
 8007a34:	eba9 0903 	subgt.w	r9, r9, r3
 8007a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	dd17      	ble.n	8007a6e <_strtod_l+0x75e>
 8007a3e:	4631      	mov	r1, r6
 8007a40:	461a      	mov	r2, r3
 8007a42:	4620      	mov	r0, r4
 8007a44:	f001 ff0c 	bl	8009860 <__pow5mult>
 8007a48:	4606      	mov	r6, r0
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	f43f aea8 	beq.w	80077a0 <_strtod_l+0x490>
 8007a50:	4601      	mov	r1, r0
 8007a52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007a54:	4620      	mov	r0, r4
 8007a56:	f001 fe59 	bl	800970c <__multiply>
 8007a5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	f43f ae9f 	beq.w	80077a0 <_strtod_l+0x490>
 8007a62:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a64:	4620      	mov	r0, r4
 8007a66:	f001 fd39 	bl	80094dc <_Bfree>
 8007a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a6c:	9318      	str	r3, [sp, #96]	; 0x60
 8007a6e:	f1b8 0f00 	cmp.w	r8, #0
 8007a72:	f300 808c 	bgt.w	8007b8e <_strtod_l+0x87e>
 8007a76:	9b06      	ldr	r3, [sp, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	dd08      	ble.n	8007a8e <_strtod_l+0x77e>
 8007a7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a7e:	9905      	ldr	r1, [sp, #20]
 8007a80:	4620      	mov	r0, r4
 8007a82:	f001 feed 	bl	8009860 <__pow5mult>
 8007a86:	9005      	str	r0, [sp, #20]
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	f43f ae89 	beq.w	80077a0 <_strtod_l+0x490>
 8007a8e:	2f00      	cmp	r7, #0
 8007a90:	dd08      	ble.n	8007aa4 <_strtod_l+0x794>
 8007a92:	9905      	ldr	r1, [sp, #20]
 8007a94:	463a      	mov	r2, r7
 8007a96:	4620      	mov	r0, r4
 8007a98:	f001 ff3c 	bl	8009914 <__lshift>
 8007a9c:	9005      	str	r0, [sp, #20]
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f43f ae7e 	beq.w	80077a0 <_strtod_l+0x490>
 8007aa4:	f1b9 0f00 	cmp.w	r9, #0
 8007aa8:	dd08      	ble.n	8007abc <_strtod_l+0x7ac>
 8007aaa:	4631      	mov	r1, r6
 8007aac:	464a      	mov	r2, r9
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f001 ff30 	bl	8009914 <__lshift>
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	f43f ae72 	beq.w	80077a0 <_strtod_l+0x490>
 8007abc:	9a05      	ldr	r2, [sp, #20]
 8007abe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f001 ffb3 	bl	8009a2c <__mdiff>
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	f43f ae69 	beq.w	80077a0 <_strtod_l+0x490>
 8007ace:	68c3      	ldr	r3, [r0, #12]
 8007ad0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60c3      	str	r3, [r0, #12]
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	f001 ff8c 	bl	80099f4 <__mcmp>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	da60      	bge.n	8007ba2 <_strtod_l+0x892>
 8007ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae2:	ea53 030a 	orrs.w	r3, r3, sl
 8007ae6:	f040 8082 	bne.w	8007bee <_strtod_l+0x8de>
 8007aea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d17d      	bne.n	8007bee <_strtod_l+0x8de>
 8007af2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007af6:	0d1b      	lsrs	r3, r3, #20
 8007af8:	051b      	lsls	r3, r3, #20
 8007afa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007afe:	d976      	bls.n	8007bee <_strtod_l+0x8de>
 8007b00:	696b      	ldr	r3, [r5, #20]
 8007b02:	b913      	cbnz	r3, 8007b0a <_strtod_l+0x7fa>
 8007b04:	692b      	ldr	r3, [r5, #16]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	dd71      	ble.n	8007bee <_strtod_l+0x8de>
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f001 ff00 	bl	8009914 <__lshift>
 8007b14:	4631      	mov	r1, r6
 8007b16:	4605      	mov	r5, r0
 8007b18:	f001 ff6c 	bl	80099f4 <__mcmp>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	dd66      	ble.n	8007bee <_strtod_l+0x8de>
 8007b20:	9904      	ldr	r1, [sp, #16]
 8007b22:	4a53      	ldr	r2, [pc, #332]	; (8007c70 <_strtod_l+0x960>)
 8007b24:	465b      	mov	r3, fp
 8007b26:	2900      	cmp	r1, #0
 8007b28:	f000 8081 	beq.w	8007c2e <_strtod_l+0x91e>
 8007b2c:	ea02 010b 	and.w	r1, r2, fp
 8007b30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007b34:	dc7b      	bgt.n	8007c2e <_strtod_l+0x91e>
 8007b36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b3a:	f77f aea9 	ble.w	8007890 <_strtod_l+0x580>
 8007b3e:	4b4d      	ldr	r3, [pc, #308]	; (8007c74 <_strtod_l+0x964>)
 8007b40:	4650      	mov	r0, sl
 8007b42:	4659      	mov	r1, fp
 8007b44:	2200      	movs	r2, #0
 8007b46:	f7f8 fd5f 	bl	8000608 <__aeabi_dmul>
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4303      	orrs	r3, r0
 8007b4e:	bf08      	it	eq
 8007b50:	2322      	moveq	r3, #34	; 0x22
 8007b52:	4682      	mov	sl, r0
 8007b54:	468b      	mov	fp, r1
 8007b56:	bf08      	it	eq
 8007b58:	6023      	streq	r3, [r4, #0]
 8007b5a:	e62b      	b.n	80077b4 <_strtod_l+0x4a4>
 8007b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b60:	fa02 f303 	lsl.w	r3, r2, r3
 8007b64:	ea03 0a0a 	and.w	sl, r3, sl
 8007b68:	e6e3      	b.n	8007932 <_strtod_l+0x622>
 8007b6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007b6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007b72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007b76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007b7a:	fa01 f308 	lsl.w	r3, r1, r8
 8007b7e:	9308      	str	r3, [sp, #32]
 8007b80:	910d      	str	r1, [sp, #52]	; 0x34
 8007b82:	e746      	b.n	8007a12 <_strtod_l+0x702>
 8007b84:	2300      	movs	r3, #0
 8007b86:	9308      	str	r3, [sp, #32]
 8007b88:	2301      	movs	r3, #1
 8007b8a:	930d      	str	r3, [sp, #52]	; 0x34
 8007b8c:	e741      	b.n	8007a12 <_strtod_l+0x702>
 8007b8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b90:	4642      	mov	r2, r8
 8007b92:	4620      	mov	r0, r4
 8007b94:	f001 febe 	bl	8009914 <__lshift>
 8007b98:	9018      	str	r0, [sp, #96]	; 0x60
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	f47f af6b 	bne.w	8007a76 <_strtod_l+0x766>
 8007ba0:	e5fe      	b.n	80077a0 <_strtod_l+0x490>
 8007ba2:	465f      	mov	r7, fp
 8007ba4:	d16e      	bne.n	8007c84 <_strtod_l+0x974>
 8007ba6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ba8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bac:	b342      	cbz	r2, 8007c00 <_strtod_l+0x8f0>
 8007bae:	4a32      	ldr	r2, [pc, #200]	; (8007c78 <_strtod_l+0x968>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d128      	bne.n	8007c06 <_strtod_l+0x8f6>
 8007bb4:	9b04      	ldr	r3, [sp, #16]
 8007bb6:	4651      	mov	r1, sl
 8007bb8:	b1eb      	cbz	r3, 8007bf6 <_strtod_l+0x8e6>
 8007bba:	4b2d      	ldr	r3, [pc, #180]	; (8007c70 <_strtod_l+0x960>)
 8007bbc:	403b      	ands	r3, r7
 8007bbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc6:	d819      	bhi.n	8007bfc <_strtod_l+0x8ec>
 8007bc8:	0d1b      	lsrs	r3, r3, #20
 8007bca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007bce:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd2:	4299      	cmp	r1, r3
 8007bd4:	d117      	bne.n	8007c06 <_strtod_l+0x8f6>
 8007bd6:	4b29      	ldr	r3, [pc, #164]	; (8007c7c <_strtod_l+0x96c>)
 8007bd8:	429f      	cmp	r7, r3
 8007bda:	d102      	bne.n	8007be2 <_strtod_l+0x8d2>
 8007bdc:	3101      	adds	r1, #1
 8007bde:	f43f addf 	beq.w	80077a0 <_strtod_l+0x490>
 8007be2:	4b23      	ldr	r3, [pc, #140]	; (8007c70 <_strtod_l+0x960>)
 8007be4:	403b      	ands	r3, r7
 8007be6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007bea:	f04f 0a00 	mov.w	sl, #0
 8007bee:	9b04      	ldr	r3, [sp, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1a4      	bne.n	8007b3e <_strtod_l+0x82e>
 8007bf4:	e5de      	b.n	80077b4 <_strtod_l+0x4a4>
 8007bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bfa:	e7ea      	b.n	8007bd2 <_strtod_l+0x8c2>
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	e7e8      	b.n	8007bd2 <_strtod_l+0x8c2>
 8007c00:	ea53 030a 	orrs.w	r3, r3, sl
 8007c04:	d08c      	beq.n	8007b20 <_strtod_l+0x810>
 8007c06:	9b08      	ldr	r3, [sp, #32]
 8007c08:	b1db      	cbz	r3, 8007c42 <_strtod_l+0x932>
 8007c0a:	423b      	tst	r3, r7
 8007c0c:	d0ef      	beq.n	8007bee <_strtod_l+0x8de>
 8007c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c10:	9a04      	ldr	r2, [sp, #16]
 8007c12:	4650      	mov	r0, sl
 8007c14:	4659      	mov	r1, fp
 8007c16:	b1c3      	cbz	r3, 8007c4a <_strtod_l+0x93a>
 8007c18:	f7ff fb5c 	bl	80072d4 <sulp>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	ec51 0b18 	vmov	r0, r1, d8
 8007c24:	f7f8 fb3a 	bl	800029c <__adddf3>
 8007c28:	4682      	mov	sl, r0
 8007c2a:	468b      	mov	fp, r1
 8007c2c:	e7df      	b.n	8007bee <_strtod_l+0x8de>
 8007c2e:	4013      	ands	r3, r2
 8007c30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c3c:	f04f 3aff 	mov.w	sl, #4294967295
 8007c40:	e7d5      	b.n	8007bee <_strtod_l+0x8de>
 8007c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c44:	ea13 0f0a 	tst.w	r3, sl
 8007c48:	e7e0      	b.n	8007c0c <_strtod_l+0x8fc>
 8007c4a:	f7ff fb43 	bl	80072d4 <sulp>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	ec51 0b18 	vmov	r0, r1, d8
 8007c56:	f7f8 fb1f 	bl	8000298 <__aeabi_dsub>
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4682      	mov	sl, r0
 8007c60:	468b      	mov	fp, r1
 8007c62:	f7f8 ff39 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d0c1      	beq.n	8007bee <_strtod_l+0x8de>
 8007c6a:	e611      	b.n	8007890 <_strtod_l+0x580>
 8007c6c:	fffffc02 	.word	0xfffffc02
 8007c70:	7ff00000 	.word	0x7ff00000
 8007c74:	39500000 	.word	0x39500000
 8007c78:	000fffff 	.word	0x000fffff
 8007c7c:	7fefffff 	.word	0x7fefffff
 8007c80:	0800af48 	.word	0x0800af48
 8007c84:	4631      	mov	r1, r6
 8007c86:	4628      	mov	r0, r5
 8007c88:	f002 f832 	bl	8009cf0 <__ratio>
 8007c8c:	ec59 8b10 	vmov	r8, r9, d0
 8007c90:	ee10 0a10 	vmov	r0, s0
 8007c94:	2200      	movs	r2, #0
 8007c96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	f7f8 ff30 	bl	8000b00 <__aeabi_dcmple>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d07a      	beq.n	8007d9a <_strtod_l+0xa8a>
 8007ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d04a      	beq.n	8007d40 <_strtod_l+0xa30>
 8007caa:	4b95      	ldr	r3, [pc, #596]	; (8007f00 <_strtod_l+0xbf0>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007cb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007f00 <_strtod_l+0xbf0>
 8007cb6:	f04f 0800 	mov.w	r8, #0
 8007cba:	4b92      	ldr	r3, [pc, #584]	; (8007f04 <_strtod_l+0xbf4>)
 8007cbc:	403b      	ands	r3, r7
 8007cbe:	930d      	str	r3, [sp, #52]	; 0x34
 8007cc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cc2:	4b91      	ldr	r3, [pc, #580]	; (8007f08 <_strtod_l+0xbf8>)
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	f040 80b0 	bne.w	8007e2a <_strtod_l+0xb1a>
 8007cca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007cd2:	ec4b ab10 	vmov	d0, sl, fp
 8007cd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007cda:	f001 ff31 	bl	8009b40 <__ulp>
 8007cde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ce2:	ec53 2b10 	vmov	r2, r3, d0
 8007ce6:	f7f8 fc8f 	bl	8000608 <__aeabi_dmul>
 8007cea:	4652      	mov	r2, sl
 8007cec:	465b      	mov	r3, fp
 8007cee:	f7f8 fad5 	bl	800029c <__adddf3>
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4983      	ldr	r1, [pc, #524]	; (8007f04 <_strtod_l+0xbf4>)
 8007cf6:	4a85      	ldr	r2, [pc, #532]	; (8007f0c <_strtod_l+0xbfc>)
 8007cf8:	4019      	ands	r1, r3
 8007cfa:	4291      	cmp	r1, r2
 8007cfc:	4682      	mov	sl, r0
 8007cfe:	d960      	bls.n	8007dc2 <_strtod_l+0xab2>
 8007d00:	ee18 3a90 	vmov	r3, s17
 8007d04:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d104      	bne.n	8007d16 <_strtod_l+0xa06>
 8007d0c:	ee18 3a10 	vmov	r3, s16
 8007d10:	3301      	adds	r3, #1
 8007d12:	f43f ad45 	beq.w	80077a0 <_strtod_l+0x490>
 8007d16:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007f18 <_strtod_l+0xc08>
 8007d1a:	f04f 3aff 	mov.w	sl, #4294967295
 8007d1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d20:	4620      	mov	r0, r4
 8007d22:	f001 fbdb 	bl	80094dc <_Bfree>
 8007d26:	9905      	ldr	r1, [sp, #20]
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f001 fbd7 	bl	80094dc <_Bfree>
 8007d2e:	4631      	mov	r1, r6
 8007d30:	4620      	mov	r0, r4
 8007d32:	f001 fbd3 	bl	80094dc <_Bfree>
 8007d36:	4629      	mov	r1, r5
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f001 fbcf 	bl	80094dc <_Bfree>
 8007d3e:	e61a      	b.n	8007976 <_strtod_l+0x666>
 8007d40:	f1ba 0f00 	cmp.w	sl, #0
 8007d44:	d11b      	bne.n	8007d7e <_strtod_l+0xa6e>
 8007d46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d4a:	b9f3      	cbnz	r3, 8007d8a <_strtod_l+0xa7a>
 8007d4c:	4b6c      	ldr	r3, [pc, #432]	; (8007f00 <_strtod_l+0xbf0>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	4640      	mov	r0, r8
 8007d52:	4649      	mov	r1, r9
 8007d54:	f7f8 feca 	bl	8000aec <__aeabi_dcmplt>
 8007d58:	b9d0      	cbnz	r0, 8007d90 <_strtod_l+0xa80>
 8007d5a:	4640      	mov	r0, r8
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	4b6c      	ldr	r3, [pc, #432]	; (8007f10 <_strtod_l+0xc00>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	f7f8 fc51 	bl	8000608 <__aeabi_dmul>
 8007d66:	4680      	mov	r8, r0
 8007d68:	4689      	mov	r9, r1
 8007d6a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007d6e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007d72:	9315      	str	r3, [sp, #84]	; 0x54
 8007d74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007d78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d7c:	e79d      	b.n	8007cba <_strtod_l+0x9aa>
 8007d7e:	f1ba 0f01 	cmp.w	sl, #1
 8007d82:	d102      	bne.n	8007d8a <_strtod_l+0xa7a>
 8007d84:	2f00      	cmp	r7, #0
 8007d86:	f43f ad83 	beq.w	8007890 <_strtod_l+0x580>
 8007d8a:	4b62      	ldr	r3, [pc, #392]	; (8007f14 <_strtod_l+0xc04>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	e78e      	b.n	8007cae <_strtod_l+0x99e>
 8007d90:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007f10 <_strtod_l+0xc00>
 8007d94:	f04f 0800 	mov.w	r8, #0
 8007d98:	e7e7      	b.n	8007d6a <_strtod_l+0xa5a>
 8007d9a:	4b5d      	ldr	r3, [pc, #372]	; (8007f10 <_strtod_l+0xc00>)
 8007d9c:	4640      	mov	r0, r8
 8007d9e:	4649      	mov	r1, r9
 8007da0:	2200      	movs	r2, #0
 8007da2:	f7f8 fc31 	bl	8000608 <__aeabi_dmul>
 8007da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007da8:	4680      	mov	r8, r0
 8007daa:	4689      	mov	r9, r1
 8007dac:	b933      	cbnz	r3, 8007dbc <_strtod_l+0xaac>
 8007dae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007db2:	900e      	str	r0, [sp, #56]	; 0x38
 8007db4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007db6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007dba:	e7dd      	b.n	8007d78 <_strtod_l+0xa68>
 8007dbc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007dc0:	e7f9      	b.n	8007db6 <_strtod_l+0xaa6>
 8007dc2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007dc6:	9b04      	ldr	r3, [sp, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1a8      	bne.n	8007d1e <_strtod_l+0xa0e>
 8007dcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007dd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dd2:	0d1b      	lsrs	r3, r3, #20
 8007dd4:	051b      	lsls	r3, r3, #20
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d1a1      	bne.n	8007d1e <_strtod_l+0xa0e>
 8007dda:	4640      	mov	r0, r8
 8007ddc:	4649      	mov	r1, r9
 8007dde:	f7f8 ffc3 	bl	8000d68 <__aeabi_d2lz>
 8007de2:	f7f8 fbe3 	bl	80005ac <__aeabi_l2d>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	4640      	mov	r0, r8
 8007dec:	4649      	mov	r1, r9
 8007dee:	f7f8 fa53 	bl	8000298 <__aeabi_dsub>
 8007df2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007df4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007df8:	ea43 030a 	orr.w	r3, r3, sl
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	4680      	mov	r8, r0
 8007e00:	4689      	mov	r9, r1
 8007e02:	d055      	beq.n	8007eb0 <_strtod_l+0xba0>
 8007e04:	a336      	add	r3, pc, #216	; (adr r3, 8007ee0 <_strtod_l+0xbd0>)
 8007e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0a:	f7f8 fe6f 	bl	8000aec <__aeabi_dcmplt>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	f47f acd0 	bne.w	80077b4 <_strtod_l+0x4a4>
 8007e14:	a334      	add	r3, pc, #208	; (adr r3, 8007ee8 <_strtod_l+0xbd8>)
 8007e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1a:	4640      	mov	r0, r8
 8007e1c:	4649      	mov	r1, r9
 8007e1e:	f7f8 fe83 	bl	8000b28 <__aeabi_dcmpgt>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	f43f af7b 	beq.w	8007d1e <_strtod_l+0xa0e>
 8007e28:	e4c4      	b.n	80077b4 <_strtod_l+0x4a4>
 8007e2a:	9b04      	ldr	r3, [sp, #16]
 8007e2c:	b333      	cbz	r3, 8007e7c <_strtod_l+0xb6c>
 8007e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e30:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e34:	d822      	bhi.n	8007e7c <_strtod_l+0xb6c>
 8007e36:	a32e      	add	r3, pc, #184	; (adr r3, 8007ef0 <_strtod_l+0xbe0>)
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	4640      	mov	r0, r8
 8007e3e:	4649      	mov	r1, r9
 8007e40:	f7f8 fe5e 	bl	8000b00 <__aeabi_dcmple>
 8007e44:	b1a0      	cbz	r0, 8007e70 <_strtod_l+0xb60>
 8007e46:	4649      	mov	r1, r9
 8007e48:	4640      	mov	r0, r8
 8007e4a:	f7f8 feb5 	bl	8000bb8 <__aeabi_d2uiz>
 8007e4e:	2801      	cmp	r0, #1
 8007e50:	bf38      	it	cc
 8007e52:	2001      	movcc	r0, #1
 8007e54:	f7f8 fb5e 	bl	8000514 <__aeabi_ui2d>
 8007e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e5a:	4680      	mov	r8, r0
 8007e5c:	4689      	mov	r9, r1
 8007e5e:	bb23      	cbnz	r3, 8007eaa <_strtod_l+0xb9a>
 8007e60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e64:	9010      	str	r0, [sp, #64]	; 0x40
 8007e66:	9311      	str	r3, [sp, #68]	; 0x44
 8007e68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e74:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007e78:	1a9b      	subs	r3, r3, r2
 8007e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e80:	eeb0 0a48 	vmov.f32	s0, s16
 8007e84:	eef0 0a68 	vmov.f32	s1, s17
 8007e88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e8c:	f001 fe58 	bl	8009b40 <__ulp>
 8007e90:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e94:	ec53 2b10 	vmov	r2, r3, d0
 8007e98:	f7f8 fbb6 	bl	8000608 <__aeabi_dmul>
 8007e9c:	ec53 2b18 	vmov	r2, r3, d8
 8007ea0:	f7f8 f9fc 	bl	800029c <__adddf3>
 8007ea4:	4682      	mov	sl, r0
 8007ea6:	468b      	mov	fp, r1
 8007ea8:	e78d      	b.n	8007dc6 <_strtod_l+0xab6>
 8007eaa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007eae:	e7db      	b.n	8007e68 <_strtod_l+0xb58>
 8007eb0:	a311      	add	r3, pc, #68	; (adr r3, 8007ef8 <_strtod_l+0xbe8>)
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	f7f8 fe19 	bl	8000aec <__aeabi_dcmplt>
 8007eba:	e7b2      	b.n	8007e22 <_strtod_l+0xb12>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ec2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ec4:	6013      	str	r3, [r2, #0]
 8007ec6:	f7ff ba6b 	b.w	80073a0 <_strtod_l+0x90>
 8007eca:	2a65      	cmp	r2, #101	; 0x65
 8007ecc:	f43f ab5f 	beq.w	800758e <_strtod_l+0x27e>
 8007ed0:	2a45      	cmp	r2, #69	; 0x45
 8007ed2:	f43f ab5c 	beq.w	800758e <_strtod_l+0x27e>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	f7ff bb94 	b.w	8007604 <_strtod_l+0x2f4>
 8007edc:	f3af 8000 	nop.w
 8007ee0:	94a03595 	.word	0x94a03595
 8007ee4:	3fdfffff 	.word	0x3fdfffff
 8007ee8:	35afe535 	.word	0x35afe535
 8007eec:	3fe00000 	.word	0x3fe00000
 8007ef0:	ffc00000 	.word	0xffc00000
 8007ef4:	41dfffff 	.word	0x41dfffff
 8007ef8:	94a03595 	.word	0x94a03595
 8007efc:	3fcfffff 	.word	0x3fcfffff
 8007f00:	3ff00000 	.word	0x3ff00000
 8007f04:	7ff00000 	.word	0x7ff00000
 8007f08:	7fe00000 	.word	0x7fe00000
 8007f0c:	7c9fffff 	.word	0x7c9fffff
 8007f10:	3fe00000 	.word	0x3fe00000
 8007f14:	bff00000 	.word	0xbff00000
 8007f18:	7fefffff 	.word	0x7fefffff

08007f1c <_strtod_r>:
 8007f1c:	4b01      	ldr	r3, [pc, #4]	; (8007f24 <_strtod_r+0x8>)
 8007f1e:	f7ff b9f7 	b.w	8007310 <_strtod_l>
 8007f22:	bf00      	nop
 8007f24:	200000a4 	.word	0x200000a4

08007f28 <_strtol_l.constprop.0>:
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f2e:	d001      	beq.n	8007f34 <_strtol_l.constprop.0+0xc>
 8007f30:	2b24      	cmp	r3, #36	; 0x24
 8007f32:	d906      	bls.n	8007f42 <_strtol_l.constprop.0+0x1a>
 8007f34:	f7fe fafc 	bl	8006530 <__errno>
 8007f38:	2316      	movs	r3, #22
 8007f3a:	6003      	str	r3, [r0, #0]
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008028 <_strtol_l.constprop.0+0x100>
 8007f46:	460d      	mov	r5, r1
 8007f48:	462e      	mov	r6, r5
 8007f4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f4e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007f52:	f017 0708 	ands.w	r7, r7, #8
 8007f56:	d1f7      	bne.n	8007f48 <_strtol_l.constprop.0+0x20>
 8007f58:	2c2d      	cmp	r4, #45	; 0x2d
 8007f5a:	d132      	bne.n	8007fc2 <_strtol_l.constprop.0+0x9a>
 8007f5c:	782c      	ldrb	r4, [r5, #0]
 8007f5e:	2701      	movs	r7, #1
 8007f60:	1cb5      	adds	r5, r6, #2
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d05b      	beq.n	800801e <_strtol_l.constprop.0+0xf6>
 8007f66:	2b10      	cmp	r3, #16
 8007f68:	d109      	bne.n	8007f7e <_strtol_l.constprop.0+0x56>
 8007f6a:	2c30      	cmp	r4, #48	; 0x30
 8007f6c:	d107      	bne.n	8007f7e <_strtol_l.constprop.0+0x56>
 8007f6e:	782c      	ldrb	r4, [r5, #0]
 8007f70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f74:	2c58      	cmp	r4, #88	; 0x58
 8007f76:	d14d      	bne.n	8008014 <_strtol_l.constprop.0+0xec>
 8007f78:	786c      	ldrb	r4, [r5, #1]
 8007f7a:	2310      	movs	r3, #16
 8007f7c:	3502      	adds	r5, #2
 8007f7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007f82:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f86:	f04f 0c00 	mov.w	ip, #0
 8007f8a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007f8e:	4666      	mov	r6, ip
 8007f90:	fb03 8a19 	mls	sl, r3, r9, r8
 8007f94:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007f98:	f1be 0f09 	cmp.w	lr, #9
 8007f9c:	d816      	bhi.n	8007fcc <_strtol_l.constprop.0+0xa4>
 8007f9e:	4674      	mov	r4, lr
 8007fa0:	42a3      	cmp	r3, r4
 8007fa2:	dd24      	ble.n	8007fee <_strtol_l.constprop.0+0xc6>
 8007fa4:	f1bc 0f00 	cmp.w	ip, #0
 8007fa8:	db1e      	blt.n	8007fe8 <_strtol_l.constprop.0+0xc0>
 8007faa:	45b1      	cmp	r9, r6
 8007fac:	d31c      	bcc.n	8007fe8 <_strtol_l.constprop.0+0xc0>
 8007fae:	d101      	bne.n	8007fb4 <_strtol_l.constprop.0+0x8c>
 8007fb0:	45a2      	cmp	sl, r4
 8007fb2:	db19      	blt.n	8007fe8 <_strtol_l.constprop.0+0xc0>
 8007fb4:	fb06 4603 	mla	r6, r6, r3, r4
 8007fb8:	f04f 0c01 	mov.w	ip, #1
 8007fbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fc0:	e7e8      	b.n	8007f94 <_strtol_l.constprop.0+0x6c>
 8007fc2:	2c2b      	cmp	r4, #43	; 0x2b
 8007fc4:	bf04      	itt	eq
 8007fc6:	782c      	ldrbeq	r4, [r5, #0]
 8007fc8:	1cb5      	addeq	r5, r6, #2
 8007fca:	e7ca      	b.n	8007f62 <_strtol_l.constprop.0+0x3a>
 8007fcc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007fd0:	f1be 0f19 	cmp.w	lr, #25
 8007fd4:	d801      	bhi.n	8007fda <_strtol_l.constprop.0+0xb2>
 8007fd6:	3c37      	subs	r4, #55	; 0x37
 8007fd8:	e7e2      	b.n	8007fa0 <_strtol_l.constprop.0+0x78>
 8007fda:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007fde:	f1be 0f19 	cmp.w	lr, #25
 8007fe2:	d804      	bhi.n	8007fee <_strtol_l.constprop.0+0xc6>
 8007fe4:	3c57      	subs	r4, #87	; 0x57
 8007fe6:	e7db      	b.n	8007fa0 <_strtol_l.constprop.0+0x78>
 8007fe8:	f04f 3cff 	mov.w	ip, #4294967295
 8007fec:	e7e6      	b.n	8007fbc <_strtol_l.constprop.0+0x94>
 8007fee:	f1bc 0f00 	cmp.w	ip, #0
 8007ff2:	da05      	bge.n	8008000 <_strtol_l.constprop.0+0xd8>
 8007ff4:	2322      	movs	r3, #34	; 0x22
 8007ff6:	6003      	str	r3, [r0, #0]
 8007ff8:	4646      	mov	r6, r8
 8007ffa:	b942      	cbnz	r2, 800800e <_strtol_l.constprop.0+0xe6>
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	e79e      	b.n	8007f3e <_strtol_l.constprop.0+0x16>
 8008000:	b107      	cbz	r7, 8008004 <_strtol_l.constprop.0+0xdc>
 8008002:	4276      	negs	r6, r6
 8008004:	2a00      	cmp	r2, #0
 8008006:	d0f9      	beq.n	8007ffc <_strtol_l.constprop.0+0xd4>
 8008008:	f1bc 0f00 	cmp.w	ip, #0
 800800c:	d000      	beq.n	8008010 <_strtol_l.constprop.0+0xe8>
 800800e:	1e69      	subs	r1, r5, #1
 8008010:	6011      	str	r1, [r2, #0]
 8008012:	e7f3      	b.n	8007ffc <_strtol_l.constprop.0+0xd4>
 8008014:	2430      	movs	r4, #48	; 0x30
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1b1      	bne.n	8007f7e <_strtol_l.constprop.0+0x56>
 800801a:	2308      	movs	r3, #8
 800801c:	e7af      	b.n	8007f7e <_strtol_l.constprop.0+0x56>
 800801e:	2c30      	cmp	r4, #48	; 0x30
 8008020:	d0a5      	beq.n	8007f6e <_strtol_l.constprop.0+0x46>
 8008022:	230a      	movs	r3, #10
 8008024:	e7ab      	b.n	8007f7e <_strtol_l.constprop.0+0x56>
 8008026:	bf00      	nop
 8008028:	0800af71 	.word	0x0800af71

0800802c <_strtol_r>:
 800802c:	f7ff bf7c 	b.w	8007f28 <_strtol_l.constprop.0>

08008030 <quorem>:
 8008030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	6903      	ldr	r3, [r0, #16]
 8008036:	690c      	ldr	r4, [r1, #16]
 8008038:	42a3      	cmp	r3, r4
 800803a:	4607      	mov	r7, r0
 800803c:	f2c0 8081 	blt.w	8008142 <quorem+0x112>
 8008040:	3c01      	subs	r4, #1
 8008042:	f101 0814 	add.w	r8, r1, #20
 8008046:	f100 0514 	add.w	r5, r0, #20
 800804a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800804e:	9301      	str	r3, [sp, #4]
 8008050:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008054:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008058:	3301      	adds	r3, #1
 800805a:	429a      	cmp	r2, r3
 800805c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008060:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008064:	fbb2 f6f3 	udiv	r6, r2, r3
 8008068:	d331      	bcc.n	80080ce <quorem+0x9e>
 800806a:	f04f 0e00 	mov.w	lr, #0
 800806e:	4640      	mov	r0, r8
 8008070:	46ac      	mov	ip, r5
 8008072:	46f2      	mov	sl, lr
 8008074:	f850 2b04 	ldr.w	r2, [r0], #4
 8008078:	b293      	uxth	r3, r2
 800807a:	fb06 e303 	mla	r3, r6, r3, lr
 800807e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008082:	b29b      	uxth	r3, r3
 8008084:	ebaa 0303 	sub.w	r3, sl, r3
 8008088:	f8dc a000 	ldr.w	sl, [ip]
 800808c:	0c12      	lsrs	r2, r2, #16
 800808e:	fa13 f38a 	uxtah	r3, r3, sl
 8008092:	fb06 e202 	mla	r2, r6, r2, lr
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	9b00      	ldr	r3, [sp, #0]
 800809a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800809e:	b292      	uxth	r2, r2
 80080a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80080a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80080ac:	4581      	cmp	r9, r0
 80080ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080b2:	f84c 3b04 	str.w	r3, [ip], #4
 80080b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080ba:	d2db      	bcs.n	8008074 <quorem+0x44>
 80080bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80080c0:	b92b      	cbnz	r3, 80080ce <quorem+0x9e>
 80080c2:	9b01      	ldr	r3, [sp, #4]
 80080c4:	3b04      	subs	r3, #4
 80080c6:	429d      	cmp	r5, r3
 80080c8:	461a      	mov	r2, r3
 80080ca:	d32e      	bcc.n	800812a <quorem+0xfa>
 80080cc:	613c      	str	r4, [r7, #16]
 80080ce:	4638      	mov	r0, r7
 80080d0:	f001 fc90 	bl	80099f4 <__mcmp>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	db24      	blt.n	8008122 <quorem+0xf2>
 80080d8:	3601      	adds	r6, #1
 80080da:	4628      	mov	r0, r5
 80080dc:	f04f 0c00 	mov.w	ip, #0
 80080e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80080e4:	f8d0 e000 	ldr.w	lr, [r0]
 80080e8:	b293      	uxth	r3, r2
 80080ea:	ebac 0303 	sub.w	r3, ip, r3
 80080ee:	0c12      	lsrs	r2, r2, #16
 80080f0:	fa13 f38e 	uxtah	r3, r3, lr
 80080f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008102:	45c1      	cmp	r9, r8
 8008104:	f840 3b04 	str.w	r3, [r0], #4
 8008108:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800810c:	d2e8      	bcs.n	80080e0 <quorem+0xb0>
 800810e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008116:	b922      	cbnz	r2, 8008122 <quorem+0xf2>
 8008118:	3b04      	subs	r3, #4
 800811a:	429d      	cmp	r5, r3
 800811c:	461a      	mov	r2, r3
 800811e:	d30a      	bcc.n	8008136 <quorem+0x106>
 8008120:	613c      	str	r4, [r7, #16]
 8008122:	4630      	mov	r0, r6
 8008124:	b003      	add	sp, #12
 8008126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800812a:	6812      	ldr	r2, [r2, #0]
 800812c:	3b04      	subs	r3, #4
 800812e:	2a00      	cmp	r2, #0
 8008130:	d1cc      	bne.n	80080cc <quorem+0x9c>
 8008132:	3c01      	subs	r4, #1
 8008134:	e7c7      	b.n	80080c6 <quorem+0x96>
 8008136:	6812      	ldr	r2, [r2, #0]
 8008138:	3b04      	subs	r3, #4
 800813a:	2a00      	cmp	r2, #0
 800813c:	d1f0      	bne.n	8008120 <quorem+0xf0>
 800813e:	3c01      	subs	r4, #1
 8008140:	e7eb      	b.n	800811a <quorem+0xea>
 8008142:	2000      	movs	r0, #0
 8008144:	e7ee      	b.n	8008124 <quorem+0xf4>
	...

08008148 <_dtoa_r>:
 8008148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814c:	ed2d 8b04 	vpush	{d8-d9}
 8008150:	ec57 6b10 	vmov	r6, r7, d0
 8008154:	b093      	sub	sp, #76	; 0x4c
 8008156:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008158:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800815c:	9106      	str	r1, [sp, #24]
 800815e:	ee10 aa10 	vmov	sl, s0
 8008162:	4604      	mov	r4, r0
 8008164:	9209      	str	r2, [sp, #36]	; 0x24
 8008166:	930c      	str	r3, [sp, #48]	; 0x30
 8008168:	46bb      	mov	fp, r7
 800816a:	b975      	cbnz	r5, 800818a <_dtoa_r+0x42>
 800816c:	2010      	movs	r0, #16
 800816e:	f001 f94d 	bl	800940c <malloc>
 8008172:	4602      	mov	r2, r0
 8008174:	6260      	str	r0, [r4, #36]	; 0x24
 8008176:	b920      	cbnz	r0, 8008182 <_dtoa_r+0x3a>
 8008178:	4ba7      	ldr	r3, [pc, #668]	; (8008418 <_dtoa_r+0x2d0>)
 800817a:	21ea      	movs	r1, #234	; 0xea
 800817c:	48a7      	ldr	r0, [pc, #668]	; (800841c <_dtoa_r+0x2d4>)
 800817e:	f002 f8bd 	bl	800a2fc <__assert_func>
 8008182:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008186:	6005      	str	r5, [r0, #0]
 8008188:	60c5      	str	r5, [r0, #12]
 800818a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800818c:	6819      	ldr	r1, [r3, #0]
 800818e:	b151      	cbz	r1, 80081a6 <_dtoa_r+0x5e>
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	604a      	str	r2, [r1, #4]
 8008194:	2301      	movs	r3, #1
 8008196:	4093      	lsls	r3, r2
 8008198:	608b      	str	r3, [r1, #8]
 800819a:	4620      	mov	r0, r4
 800819c:	f001 f99e 	bl	80094dc <_Bfree>
 80081a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	1e3b      	subs	r3, r7, #0
 80081a8:	bfaa      	itet	ge
 80081aa:	2300      	movge	r3, #0
 80081ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80081b0:	f8c8 3000 	strge.w	r3, [r8]
 80081b4:	4b9a      	ldr	r3, [pc, #616]	; (8008420 <_dtoa_r+0x2d8>)
 80081b6:	bfbc      	itt	lt
 80081b8:	2201      	movlt	r2, #1
 80081ba:	f8c8 2000 	strlt.w	r2, [r8]
 80081be:	ea33 030b 	bics.w	r3, r3, fp
 80081c2:	d11b      	bne.n	80081fc <_dtoa_r+0xb4>
 80081c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081d0:	4333      	orrs	r3, r6
 80081d2:	f000 8592 	beq.w	8008cfa <_dtoa_r+0xbb2>
 80081d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081d8:	b963      	cbnz	r3, 80081f4 <_dtoa_r+0xac>
 80081da:	4b92      	ldr	r3, [pc, #584]	; (8008424 <_dtoa_r+0x2dc>)
 80081dc:	e022      	b.n	8008224 <_dtoa_r+0xdc>
 80081de:	4b92      	ldr	r3, [pc, #584]	; (8008428 <_dtoa_r+0x2e0>)
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	3308      	adds	r3, #8
 80081e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081e6:	6013      	str	r3, [r2, #0]
 80081e8:	9801      	ldr	r0, [sp, #4]
 80081ea:	b013      	add	sp, #76	; 0x4c
 80081ec:	ecbd 8b04 	vpop	{d8-d9}
 80081f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f4:	4b8b      	ldr	r3, [pc, #556]	; (8008424 <_dtoa_r+0x2dc>)
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	3303      	adds	r3, #3
 80081fa:	e7f3      	b.n	80081e4 <_dtoa_r+0x9c>
 80081fc:	2200      	movs	r2, #0
 80081fe:	2300      	movs	r3, #0
 8008200:	4650      	mov	r0, sl
 8008202:	4659      	mov	r1, fp
 8008204:	f7f8 fc68 	bl	8000ad8 <__aeabi_dcmpeq>
 8008208:	ec4b ab19 	vmov	d9, sl, fp
 800820c:	4680      	mov	r8, r0
 800820e:	b158      	cbz	r0, 8008228 <_dtoa_r+0xe0>
 8008210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008212:	2301      	movs	r3, #1
 8008214:	6013      	str	r3, [r2, #0]
 8008216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 856b 	beq.w	8008cf4 <_dtoa_r+0xbac>
 800821e:	4883      	ldr	r0, [pc, #524]	; (800842c <_dtoa_r+0x2e4>)
 8008220:	6018      	str	r0, [r3, #0]
 8008222:	1e43      	subs	r3, r0, #1
 8008224:	9301      	str	r3, [sp, #4]
 8008226:	e7df      	b.n	80081e8 <_dtoa_r+0xa0>
 8008228:	ec4b ab10 	vmov	d0, sl, fp
 800822c:	aa10      	add	r2, sp, #64	; 0x40
 800822e:	a911      	add	r1, sp, #68	; 0x44
 8008230:	4620      	mov	r0, r4
 8008232:	f001 fd01 	bl	8009c38 <__d2b>
 8008236:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800823a:	ee08 0a10 	vmov	s16, r0
 800823e:	2d00      	cmp	r5, #0
 8008240:	f000 8084 	beq.w	800834c <_dtoa_r+0x204>
 8008244:	ee19 3a90 	vmov	r3, s19
 8008248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800824c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008250:	4656      	mov	r6, sl
 8008252:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800825a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800825e:	4b74      	ldr	r3, [pc, #464]	; (8008430 <_dtoa_r+0x2e8>)
 8008260:	2200      	movs	r2, #0
 8008262:	4630      	mov	r0, r6
 8008264:	4639      	mov	r1, r7
 8008266:	f7f8 f817 	bl	8000298 <__aeabi_dsub>
 800826a:	a365      	add	r3, pc, #404	; (adr r3, 8008400 <_dtoa_r+0x2b8>)
 800826c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008270:	f7f8 f9ca 	bl	8000608 <__aeabi_dmul>
 8008274:	a364      	add	r3, pc, #400	; (adr r3, 8008408 <_dtoa_r+0x2c0>)
 8008276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827a:	f7f8 f80f 	bl	800029c <__adddf3>
 800827e:	4606      	mov	r6, r0
 8008280:	4628      	mov	r0, r5
 8008282:	460f      	mov	r7, r1
 8008284:	f7f8 f956 	bl	8000534 <__aeabi_i2d>
 8008288:	a361      	add	r3, pc, #388	; (adr r3, 8008410 <_dtoa_r+0x2c8>)
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	f7f8 f9bb 	bl	8000608 <__aeabi_dmul>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	4630      	mov	r0, r6
 8008298:	4639      	mov	r1, r7
 800829a:	f7f7 ffff 	bl	800029c <__adddf3>
 800829e:	4606      	mov	r6, r0
 80082a0:	460f      	mov	r7, r1
 80082a2:	f7f8 fc61 	bl	8000b68 <__aeabi_d2iz>
 80082a6:	2200      	movs	r2, #0
 80082a8:	9000      	str	r0, [sp, #0]
 80082aa:	2300      	movs	r3, #0
 80082ac:	4630      	mov	r0, r6
 80082ae:	4639      	mov	r1, r7
 80082b0:	f7f8 fc1c 	bl	8000aec <__aeabi_dcmplt>
 80082b4:	b150      	cbz	r0, 80082cc <_dtoa_r+0x184>
 80082b6:	9800      	ldr	r0, [sp, #0]
 80082b8:	f7f8 f93c 	bl	8000534 <__aeabi_i2d>
 80082bc:	4632      	mov	r2, r6
 80082be:	463b      	mov	r3, r7
 80082c0:	f7f8 fc0a 	bl	8000ad8 <__aeabi_dcmpeq>
 80082c4:	b910      	cbnz	r0, 80082cc <_dtoa_r+0x184>
 80082c6:	9b00      	ldr	r3, [sp, #0]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	9b00      	ldr	r3, [sp, #0]
 80082ce:	2b16      	cmp	r3, #22
 80082d0:	d85a      	bhi.n	8008388 <_dtoa_r+0x240>
 80082d2:	9a00      	ldr	r2, [sp, #0]
 80082d4:	4b57      	ldr	r3, [pc, #348]	; (8008434 <_dtoa_r+0x2ec>)
 80082d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	ec51 0b19 	vmov	r0, r1, d9
 80082e2:	f7f8 fc03 	bl	8000aec <__aeabi_dcmplt>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d050      	beq.n	800838c <_dtoa_r+0x244>
 80082ea:	9b00      	ldr	r3, [sp, #0]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	2300      	movs	r3, #0
 80082f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80082f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082f6:	1b5d      	subs	r5, r3, r5
 80082f8:	1e6b      	subs	r3, r5, #1
 80082fa:	9305      	str	r3, [sp, #20]
 80082fc:	bf45      	ittet	mi
 80082fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008302:	9304      	strmi	r3, [sp, #16]
 8008304:	2300      	movpl	r3, #0
 8008306:	2300      	movmi	r3, #0
 8008308:	bf4c      	ite	mi
 800830a:	9305      	strmi	r3, [sp, #20]
 800830c:	9304      	strpl	r3, [sp, #16]
 800830e:	9b00      	ldr	r3, [sp, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	db3d      	blt.n	8008390 <_dtoa_r+0x248>
 8008314:	9b05      	ldr	r3, [sp, #20]
 8008316:	9a00      	ldr	r2, [sp, #0]
 8008318:	920a      	str	r2, [sp, #40]	; 0x28
 800831a:	4413      	add	r3, r2
 800831c:	9305      	str	r3, [sp, #20]
 800831e:	2300      	movs	r3, #0
 8008320:	9307      	str	r3, [sp, #28]
 8008322:	9b06      	ldr	r3, [sp, #24]
 8008324:	2b09      	cmp	r3, #9
 8008326:	f200 8089 	bhi.w	800843c <_dtoa_r+0x2f4>
 800832a:	2b05      	cmp	r3, #5
 800832c:	bfc4      	itt	gt
 800832e:	3b04      	subgt	r3, #4
 8008330:	9306      	strgt	r3, [sp, #24]
 8008332:	9b06      	ldr	r3, [sp, #24]
 8008334:	f1a3 0302 	sub.w	r3, r3, #2
 8008338:	bfcc      	ite	gt
 800833a:	2500      	movgt	r5, #0
 800833c:	2501      	movle	r5, #1
 800833e:	2b03      	cmp	r3, #3
 8008340:	f200 8087 	bhi.w	8008452 <_dtoa_r+0x30a>
 8008344:	e8df f003 	tbb	[pc, r3]
 8008348:	59383a2d 	.word	0x59383a2d
 800834c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008350:	441d      	add	r5, r3
 8008352:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008356:	2b20      	cmp	r3, #32
 8008358:	bfc1      	itttt	gt
 800835a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800835e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008362:	fa0b f303 	lslgt.w	r3, fp, r3
 8008366:	fa26 f000 	lsrgt.w	r0, r6, r0
 800836a:	bfda      	itte	le
 800836c:	f1c3 0320 	rsble	r3, r3, #32
 8008370:	fa06 f003 	lslle.w	r0, r6, r3
 8008374:	4318      	orrgt	r0, r3
 8008376:	f7f8 f8cd 	bl	8000514 <__aeabi_ui2d>
 800837a:	2301      	movs	r3, #1
 800837c:	4606      	mov	r6, r0
 800837e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008382:	3d01      	subs	r5, #1
 8008384:	930e      	str	r3, [sp, #56]	; 0x38
 8008386:	e76a      	b.n	800825e <_dtoa_r+0x116>
 8008388:	2301      	movs	r3, #1
 800838a:	e7b2      	b.n	80082f2 <_dtoa_r+0x1aa>
 800838c:	900b      	str	r0, [sp, #44]	; 0x2c
 800838e:	e7b1      	b.n	80082f4 <_dtoa_r+0x1ac>
 8008390:	9b04      	ldr	r3, [sp, #16]
 8008392:	9a00      	ldr	r2, [sp, #0]
 8008394:	1a9b      	subs	r3, r3, r2
 8008396:	9304      	str	r3, [sp, #16]
 8008398:	4253      	negs	r3, r2
 800839a:	9307      	str	r3, [sp, #28]
 800839c:	2300      	movs	r3, #0
 800839e:	930a      	str	r3, [sp, #40]	; 0x28
 80083a0:	e7bf      	b.n	8008322 <_dtoa_r+0x1da>
 80083a2:	2300      	movs	r3, #0
 80083a4:	9308      	str	r3, [sp, #32]
 80083a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	dc55      	bgt.n	8008458 <_dtoa_r+0x310>
 80083ac:	2301      	movs	r3, #1
 80083ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083b2:	461a      	mov	r2, r3
 80083b4:	9209      	str	r2, [sp, #36]	; 0x24
 80083b6:	e00c      	b.n	80083d2 <_dtoa_r+0x28a>
 80083b8:	2301      	movs	r3, #1
 80083ba:	e7f3      	b.n	80083a4 <_dtoa_r+0x25c>
 80083bc:	2300      	movs	r3, #0
 80083be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083c0:	9308      	str	r3, [sp, #32]
 80083c2:	9b00      	ldr	r3, [sp, #0]
 80083c4:	4413      	add	r3, r2
 80083c6:	9302      	str	r3, [sp, #8]
 80083c8:	3301      	adds	r3, #1
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	9303      	str	r3, [sp, #12]
 80083ce:	bfb8      	it	lt
 80083d0:	2301      	movlt	r3, #1
 80083d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80083d4:	2200      	movs	r2, #0
 80083d6:	6042      	str	r2, [r0, #4]
 80083d8:	2204      	movs	r2, #4
 80083da:	f102 0614 	add.w	r6, r2, #20
 80083de:	429e      	cmp	r6, r3
 80083e0:	6841      	ldr	r1, [r0, #4]
 80083e2:	d93d      	bls.n	8008460 <_dtoa_r+0x318>
 80083e4:	4620      	mov	r0, r4
 80083e6:	f001 f839 	bl	800945c <_Balloc>
 80083ea:	9001      	str	r0, [sp, #4]
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d13b      	bne.n	8008468 <_dtoa_r+0x320>
 80083f0:	4b11      	ldr	r3, [pc, #68]	; (8008438 <_dtoa_r+0x2f0>)
 80083f2:	4602      	mov	r2, r0
 80083f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083f8:	e6c0      	b.n	800817c <_dtoa_r+0x34>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e7df      	b.n	80083be <_dtoa_r+0x276>
 80083fe:	bf00      	nop
 8008400:	636f4361 	.word	0x636f4361
 8008404:	3fd287a7 	.word	0x3fd287a7
 8008408:	8b60c8b3 	.word	0x8b60c8b3
 800840c:	3fc68a28 	.word	0x3fc68a28
 8008410:	509f79fb 	.word	0x509f79fb
 8008414:	3fd34413 	.word	0x3fd34413
 8008418:	0800b07e 	.word	0x0800b07e
 800841c:	0800b095 	.word	0x0800b095
 8008420:	7ff00000 	.word	0x7ff00000
 8008424:	0800b07a 	.word	0x0800b07a
 8008428:	0800b071 	.word	0x0800b071
 800842c:	0800aef5 	.word	0x0800aef5
 8008430:	3ff80000 	.word	0x3ff80000
 8008434:	0800b200 	.word	0x0800b200
 8008438:	0800b0f0 	.word	0x0800b0f0
 800843c:	2501      	movs	r5, #1
 800843e:	2300      	movs	r3, #0
 8008440:	9306      	str	r3, [sp, #24]
 8008442:	9508      	str	r5, [sp, #32]
 8008444:	f04f 33ff 	mov.w	r3, #4294967295
 8008448:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800844c:	2200      	movs	r2, #0
 800844e:	2312      	movs	r3, #18
 8008450:	e7b0      	b.n	80083b4 <_dtoa_r+0x26c>
 8008452:	2301      	movs	r3, #1
 8008454:	9308      	str	r3, [sp, #32]
 8008456:	e7f5      	b.n	8008444 <_dtoa_r+0x2fc>
 8008458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800845a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800845e:	e7b8      	b.n	80083d2 <_dtoa_r+0x28a>
 8008460:	3101      	adds	r1, #1
 8008462:	6041      	str	r1, [r0, #4]
 8008464:	0052      	lsls	r2, r2, #1
 8008466:	e7b8      	b.n	80083da <_dtoa_r+0x292>
 8008468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800846a:	9a01      	ldr	r2, [sp, #4]
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	9b03      	ldr	r3, [sp, #12]
 8008470:	2b0e      	cmp	r3, #14
 8008472:	f200 809d 	bhi.w	80085b0 <_dtoa_r+0x468>
 8008476:	2d00      	cmp	r5, #0
 8008478:	f000 809a 	beq.w	80085b0 <_dtoa_r+0x468>
 800847c:	9b00      	ldr	r3, [sp, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	dd32      	ble.n	80084e8 <_dtoa_r+0x3a0>
 8008482:	4ab7      	ldr	r2, [pc, #732]	; (8008760 <_dtoa_r+0x618>)
 8008484:	f003 030f 	and.w	r3, r3, #15
 8008488:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800848c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008490:	9b00      	ldr	r3, [sp, #0]
 8008492:	05d8      	lsls	r0, r3, #23
 8008494:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008498:	d516      	bpl.n	80084c8 <_dtoa_r+0x380>
 800849a:	4bb2      	ldr	r3, [pc, #712]	; (8008764 <_dtoa_r+0x61c>)
 800849c:	ec51 0b19 	vmov	r0, r1, d9
 80084a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084a4:	f7f8 f9da 	bl	800085c <__aeabi_ddiv>
 80084a8:	f007 070f 	and.w	r7, r7, #15
 80084ac:	4682      	mov	sl, r0
 80084ae:	468b      	mov	fp, r1
 80084b0:	2503      	movs	r5, #3
 80084b2:	4eac      	ldr	r6, [pc, #688]	; (8008764 <_dtoa_r+0x61c>)
 80084b4:	b957      	cbnz	r7, 80084cc <_dtoa_r+0x384>
 80084b6:	4642      	mov	r2, r8
 80084b8:	464b      	mov	r3, r9
 80084ba:	4650      	mov	r0, sl
 80084bc:	4659      	mov	r1, fp
 80084be:	f7f8 f9cd 	bl	800085c <__aeabi_ddiv>
 80084c2:	4682      	mov	sl, r0
 80084c4:	468b      	mov	fp, r1
 80084c6:	e028      	b.n	800851a <_dtoa_r+0x3d2>
 80084c8:	2502      	movs	r5, #2
 80084ca:	e7f2      	b.n	80084b2 <_dtoa_r+0x36a>
 80084cc:	07f9      	lsls	r1, r7, #31
 80084ce:	d508      	bpl.n	80084e2 <_dtoa_r+0x39a>
 80084d0:	4640      	mov	r0, r8
 80084d2:	4649      	mov	r1, r9
 80084d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084d8:	f7f8 f896 	bl	8000608 <__aeabi_dmul>
 80084dc:	3501      	adds	r5, #1
 80084de:	4680      	mov	r8, r0
 80084e0:	4689      	mov	r9, r1
 80084e2:	107f      	asrs	r7, r7, #1
 80084e4:	3608      	adds	r6, #8
 80084e6:	e7e5      	b.n	80084b4 <_dtoa_r+0x36c>
 80084e8:	f000 809b 	beq.w	8008622 <_dtoa_r+0x4da>
 80084ec:	9b00      	ldr	r3, [sp, #0]
 80084ee:	4f9d      	ldr	r7, [pc, #628]	; (8008764 <_dtoa_r+0x61c>)
 80084f0:	425e      	negs	r6, r3
 80084f2:	4b9b      	ldr	r3, [pc, #620]	; (8008760 <_dtoa_r+0x618>)
 80084f4:	f006 020f 	and.w	r2, r6, #15
 80084f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	ec51 0b19 	vmov	r0, r1, d9
 8008504:	f7f8 f880 	bl	8000608 <__aeabi_dmul>
 8008508:	1136      	asrs	r6, r6, #4
 800850a:	4682      	mov	sl, r0
 800850c:	468b      	mov	fp, r1
 800850e:	2300      	movs	r3, #0
 8008510:	2502      	movs	r5, #2
 8008512:	2e00      	cmp	r6, #0
 8008514:	d17a      	bne.n	800860c <_dtoa_r+0x4c4>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1d3      	bne.n	80084c2 <_dtoa_r+0x37a>
 800851a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 8082 	beq.w	8008626 <_dtoa_r+0x4de>
 8008522:	4b91      	ldr	r3, [pc, #580]	; (8008768 <_dtoa_r+0x620>)
 8008524:	2200      	movs	r2, #0
 8008526:	4650      	mov	r0, sl
 8008528:	4659      	mov	r1, fp
 800852a:	f7f8 fadf 	bl	8000aec <__aeabi_dcmplt>
 800852e:	2800      	cmp	r0, #0
 8008530:	d079      	beq.n	8008626 <_dtoa_r+0x4de>
 8008532:	9b03      	ldr	r3, [sp, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d076      	beq.n	8008626 <_dtoa_r+0x4de>
 8008538:	9b02      	ldr	r3, [sp, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	dd36      	ble.n	80085ac <_dtoa_r+0x464>
 800853e:	9b00      	ldr	r3, [sp, #0]
 8008540:	4650      	mov	r0, sl
 8008542:	4659      	mov	r1, fp
 8008544:	1e5f      	subs	r7, r3, #1
 8008546:	2200      	movs	r2, #0
 8008548:	4b88      	ldr	r3, [pc, #544]	; (800876c <_dtoa_r+0x624>)
 800854a:	f7f8 f85d 	bl	8000608 <__aeabi_dmul>
 800854e:	9e02      	ldr	r6, [sp, #8]
 8008550:	4682      	mov	sl, r0
 8008552:	468b      	mov	fp, r1
 8008554:	3501      	adds	r5, #1
 8008556:	4628      	mov	r0, r5
 8008558:	f7f7 ffec 	bl	8000534 <__aeabi_i2d>
 800855c:	4652      	mov	r2, sl
 800855e:	465b      	mov	r3, fp
 8008560:	f7f8 f852 	bl	8000608 <__aeabi_dmul>
 8008564:	4b82      	ldr	r3, [pc, #520]	; (8008770 <_dtoa_r+0x628>)
 8008566:	2200      	movs	r2, #0
 8008568:	f7f7 fe98 	bl	800029c <__adddf3>
 800856c:	46d0      	mov	r8, sl
 800856e:	46d9      	mov	r9, fp
 8008570:	4682      	mov	sl, r0
 8008572:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008576:	2e00      	cmp	r6, #0
 8008578:	d158      	bne.n	800862c <_dtoa_r+0x4e4>
 800857a:	4b7e      	ldr	r3, [pc, #504]	; (8008774 <_dtoa_r+0x62c>)
 800857c:	2200      	movs	r2, #0
 800857e:	4640      	mov	r0, r8
 8008580:	4649      	mov	r1, r9
 8008582:	f7f7 fe89 	bl	8000298 <__aeabi_dsub>
 8008586:	4652      	mov	r2, sl
 8008588:	465b      	mov	r3, fp
 800858a:	4680      	mov	r8, r0
 800858c:	4689      	mov	r9, r1
 800858e:	f7f8 facb 	bl	8000b28 <__aeabi_dcmpgt>
 8008592:	2800      	cmp	r0, #0
 8008594:	f040 8295 	bne.w	8008ac2 <_dtoa_r+0x97a>
 8008598:	4652      	mov	r2, sl
 800859a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800859e:	4640      	mov	r0, r8
 80085a0:	4649      	mov	r1, r9
 80085a2:	f7f8 faa3 	bl	8000aec <__aeabi_dcmplt>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	f040 8289 	bne.w	8008abe <_dtoa_r+0x976>
 80085ac:	ec5b ab19 	vmov	sl, fp, d9
 80085b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f2c0 8148 	blt.w	8008848 <_dtoa_r+0x700>
 80085b8:	9a00      	ldr	r2, [sp, #0]
 80085ba:	2a0e      	cmp	r2, #14
 80085bc:	f300 8144 	bgt.w	8008848 <_dtoa_r+0x700>
 80085c0:	4b67      	ldr	r3, [pc, #412]	; (8008760 <_dtoa_r+0x618>)
 80085c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f280 80d5 	bge.w	800877c <_dtoa_r+0x634>
 80085d2:	9b03      	ldr	r3, [sp, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f300 80d1 	bgt.w	800877c <_dtoa_r+0x634>
 80085da:	f040 826f 	bne.w	8008abc <_dtoa_r+0x974>
 80085de:	4b65      	ldr	r3, [pc, #404]	; (8008774 <_dtoa_r+0x62c>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	4640      	mov	r0, r8
 80085e4:	4649      	mov	r1, r9
 80085e6:	f7f8 f80f 	bl	8000608 <__aeabi_dmul>
 80085ea:	4652      	mov	r2, sl
 80085ec:	465b      	mov	r3, fp
 80085ee:	f7f8 fa91 	bl	8000b14 <__aeabi_dcmpge>
 80085f2:	9e03      	ldr	r6, [sp, #12]
 80085f4:	4637      	mov	r7, r6
 80085f6:	2800      	cmp	r0, #0
 80085f8:	f040 8245 	bne.w	8008a86 <_dtoa_r+0x93e>
 80085fc:	9d01      	ldr	r5, [sp, #4]
 80085fe:	2331      	movs	r3, #49	; 0x31
 8008600:	f805 3b01 	strb.w	r3, [r5], #1
 8008604:	9b00      	ldr	r3, [sp, #0]
 8008606:	3301      	adds	r3, #1
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	e240      	b.n	8008a8e <_dtoa_r+0x946>
 800860c:	07f2      	lsls	r2, r6, #31
 800860e:	d505      	bpl.n	800861c <_dtoa_r+0x4d4>
 8008610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008614:	f7f7 fff8 	bl	8000608 <__aeabi_dmul>
 8008618:	3501      	adds	r5, #1
 800861a:	2301      	movs	r3, #1
 800861c:	1076      	asrs	r6, r6, #1
 800861e:	3708      	adds	r7, #8
 8008620:	e777      	b.n	8008512 <_dtoa_r+0x3ca>
 8008622:	2502      	movs	r5, #2
 8008624:	e779      	b.n	800851a <_dtoa_r+0x3d2>
 8008626:	9f00      	ldr	r7, [sp, #0]
 8008628:	9e03      	ldr	r6, [sp, #12]
 800862a:	e794      	b.n	8008556 <_dtoa_r+0x40e>
 800862c:	9901      	ldr	r1, [sp, #4]
 800862e:	4b4c      	ldr	r3, [pc, #304]	; (8008760 <_dtoa_r+0x618>)
 8008630:	4431      	add	r1, r6
 8008632:	910d      	str	r1, [sp, #52]	; 0x34
 8008634:	9908      	ldr	r1, [sp, #32]
 8008636:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800863a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800863e:	2900      	cmp	r1, #0
 8008640:	d043      	beq.n	80086ca <_dtoa_r+0x582>
 8008642:	494d      	ldr	r1, [pc, #308]	; (8008778 <_dtoa_r+0x630>)
 8008644:	2000      	movs	r0, #0
 8008646:	f7f8 f909 	bl	800085c <__aeabi_ddiv>
 800864a:	4652      	mov	r2, sl
 800864c:	465b      	mov	r3, fp
 800864e:	f7f7 fe23 	bl	8000298 <__aeabi_dsub>
 8008652:	9d01      	ldr	r5, [sp, #4]
 8008654:	4682      	mov	sl, r0
 8008656:	468b      	mov	fp, r1
 8008658:	4649      	mov	r1, r9
 800865a:	4640      	mov	r0, r8
 800865c:	f7f8 fa84 	bl	8000b68 <__aeabi_d2iz>
 8008660:	4606      	mov	r6, r0
 8008662:	f7f7 ff67 	bl	8000534 <__aeabi_i2d>
 8008666:	4602      	mov	r2, r0
 8008668:	460b      	mov	r3, r1
 800866a:	4640      	mov	r0, r8
 800866c:	4649      	mov	r1, r9
 800866e:	f7f7 fe13 	bl	8000298 <__aeabi_dsub>
 8008672:	3630      	adds	r6, #48	; 0x30
 8008674:	f805 6b01 	strb.w	r6, [r5], #1
 8008678:	4652      	mov	r2, sl
 800867a:	465b      	mov	r3, fp
 800867c:	4680      	mov	r8, r0
 800867e:	4689      	mov	r9, r1
 8008680:	f7f8 fa34 	bl	8000aec <__aeabi_dcmplt>
 8008684:	2800      	cmp	r0, #0
 8008686:	d163      	bne.n	8008750 <_dtoa_r+0x608>
 8008688:	4642      	mov	r2, r8
 800868a:	464b      	mov	r3, r9
 800868c:	4936      	ldr	r1, [pc, #216]	; (8008768 <_dtoa_r+0x620>)
 800868e:	2000      	movs	r0, #0
 8008690:	f7f7 fe02 	bl	8000298 <__aeabi_dsub>
 8008694:	4652      	mov	r2, sl
 8008696:	465b      	mov	r3, fp
 8008698:	f7f8 fa28 	bl	8000aec <__aeabi_dcmplt>
 800869c:	2800      	cmp	r0, #0
 800869e:	f040 80b5 	bne.w	800880c <_dtoa_r+0x6c4>
 80086a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086a4:	429d      	cmp	r5, r3
 80086a6:	d081      	beq.n	80085ac <_dtoa_r+0x464>
 80086a8:	4b30      	ldr	r3, [pc, #192]	; (800876c <_dtoa_r+0x624>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	4650      	mov	r0, sl
 80086ae:	4659      	mov	r1, fp
 80086b0:	f7f7 ffaa 	bl	8000608 <__aeabi_dmul>
 80086b4:	4b2d      	ldr	r3, [pc, #180]	; (800876c <_dtoa_r+0x624>)
 80086b6:	4682      	mov	sl, r0
 80086b8:	468b      	mov	fp, r1
 80086ba:	4640      	mov	r0, r8
 80086bc:	4649      	mov	r1, r9
 80086be:	2200      	movs	r2, #0
 80086c0:	f7f7 ffa2 	bl	8000608 <__aeabi_dmul>
 80086c4:	4680      	mov	r8, r0
 80086c6:	4689      	mov	r9, r1
 80086c8:	e7c6      	b.n	8008658 <_dtoa_r+0x510>
 80086ca:	4650      	mov	r0, sl
 80086cc:	4659      	mov	r1, fp
 80086ce:	f7f7 ff9b 	bl	8000608 <__aeabi_dmul>
 80086d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086d4:	9d01      	ldr	r5, [sp, #4]
 80086d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80086d8:	4682      	mov	sl, r0
 80086da:	468b      	mov	fp, r1
 80086dc:	4649      	mov	r1, r9
 80086de:	4640      	mov	r0, r8
 80086e0:	f7f8 fa42 	bl	8000b68 <__aeabi_d2iz>
 80086e4:	4606      	mov	r6, r0
 80086e6:	f7f7 ff25 	bl	8000534 <__aeabi_i2d>
 80086ea:	3630      	adds	r6, #48	; 0x30
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4640      	mov	r0, r8
 80086f2:	4649      	mov	r1, r9
 80086f4:	f7f7 fdd0 	bl	8000298 <__aeabi_dsub>
 80086f8:	f805 6b01 	strb.w	r6, [r5], #1
 80086fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086fe:	429d      	cmp	r5, r3
 8008700:	4680      	mov	r8, r0
 8008702:	4689      	mov	r9, r1
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	d124      	bne.n	8008754 <_dtoa_r+0x60c>
 800870a:	4b1b      	ldr	r3, [pc, #108]	; (8008778 <_dtoa_r+0x630>)
 800870c:	4650      	mov	r0, sl
 800870e:	4659      	mov	r1, fp
 8008710:	f7f7 fdc4 	bl	800029c <__adddf3>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	4640      	mov	r0, r8
 800871a:	4649      	mov	r1, r9
 800871c:	f7f8 fa04 	bl	8000b28 <__aeabi_dcmpgt>
 8008720:	2800      	cmp	r0, #0
 8008722:	d173      	bne.n	800880c <_dtoa_r+0x6c4>
 8008724:	4652      	mov	r2, sl
 8008726:	465b      	mov	r3, fp
 8008728:	4913      	ldr	r1, [pc, #76]	; (8008778 <_dtoa_r+0x630>)
 800872a:	2000      	movs	r0, #0
 800872c:	f7f7 fdb4 	bl	8000298 <__aeabi_dsub>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	4640      	mov	r0, r8
 8008736:	4649      	mov	r1, r9
 8008738:	f7f8 f9d8 	bl	8000aec <__aeabi_dcmplt>
 800873c:	2800      	cmp	r0, #0
 800873e:	f43f af35 	beq.w	80085ac <_dtoa_r+0x464>
 8008742:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008744:	1e6b      	subs	r3, r5, #1
 8008746:	930f      	str	r3, [sp, #60]	; 0x3c
 8008748:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800874c:	2b30      	cmp	r3, #48	; 0x30
 800874e:	d0f8      	beq.n	8008742 <_dtoa_r+0x5fa>
 8008750:	9700      	str	r7, [sp, #0]
 8008752:	e049      	b.n	80087e8 <_dtoa_r+0x6a0>
 8008754:	4b05      	ldr	r3, [pc, #20]	; (800876c <_dtoa_r+0x624>)
 8008756:	f7f7 ff57 	bl	8000608 <__aeabi_dmul>
 800875a:	4680      	mov	r8, r0
 800875c:	4689      	mov	r9, r1
 800875e:	e7bd      	b.n	80086dc <_dtoa_r+0x594>
 8008760:	0800b200 	.word	0x0800b200
 8008764:	0800b1d8 	.word	0x0800b1d8
 8008768:	3ff00000 	.word	0x3ff00000
 800876c:	40240000 	.word	0x40240000
 8008770:	401c0000 	.word	0x401c0000
 8008774:	40140000 	.word	0x40140000
 8008778:	3fe00000 	.word	0x3fe00000
 800877c:	9d01      	ldr	r5, [sp, #4]
 800877e:	4656      	mov	r6, sl
 8008780:	465f      	mov	r7, fp
 8008782:	4642      	mov	r2, r8
 8008784:	464b      	mov	r3, r9
 8008786:	4630      	mov	r0, r6
 8008788:	4639      	mov	r1, r7
 800878a:	f7f8 f867 	bl	800085c <__aeabi_ddiv>
 800878e:	f7f8 f9eb 	bl	8000b68 <__aeabi_d2iz>
 8008792:	4682      	mov	sl, r0
 8008794:	f7f7 fece 	bl	8000534 <__aeabi_i2d>
 8008798:	4642      	mov	r2, r8
 800879a:	464b      	mov	r3, r9
 800879c:	f7f7 ff34 	bl	8000608 <__aeabi_dmul>
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	4630      	mov	r0, r6
 80087a6:	4639      	mov	r1, r7
 80087a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80087ac:	f7f7 fd74 	bl	8000298 <__aeabi_dsub>
 80087b0:	f805 6b01 	strb.w	r6, [r5], #1
 80087b4:	9e01      	ldr	r6, [sp, #4]
 80087b6:	9f03      	ldr	r7, [sp, #12]
 80087b8:	1bae      	subs	r6, r5, r6
 80087ba:	42b7      	cmp	r7, r6
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	d135      	bne.n	800882e <_dtoa_r+0x6e6>
 80087c2:	f7f7 fd6b 	bl	800029c <__adddf3>
 80087c6:	4642      	mov	r2, r8
 80087c8:	464b      	mov	r3, r9
 80087ca:	4606      	mov	r6, r0
 80087cc:	460f      	mov	r7, r1
 80087ce:	f7f8 f9ab 	bl	8000b28 <__aeabi_dcmpgt>
 80087d2:	b9d0      	cbnz	r0, 800880a <_dtoa_r+0x6c2>
 80087d4:	4642      	mov	r2, r8
 80087d6:	464b      	mov	r3, r9
 80087d8:	4630      	mov	r0, r6
 80087da:	4639      	mov	r1, r7
 80087dc:	f7f8 f97c 	bl	8000ad8 <__aeabi_dcmpeq>
 80087e0:	b110      	cbz	r0, 80087e8 <_dtoa_r+0x6a0>
 80087e2:	f01a 0f01 	tst.w	sl, #1
 80087e6:	d110      	bne.n	800880a <_dtoa_r+0x6c2>
 80087e8:	4620      	mov	r0, r4
 80087ea:	ee18 1a10 	vmov	r1, s16
 80087ee:	f000 fe75 	bl	80094dc <_Bfree>
 80087f2:	2300      	movs	r3, #0
 80087f4:	9800      	ldr	r0, [sp, #0]
 80087f6:	702b      	strb	r3, [r5, #0]
 80087f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087fa:	3001      	adds	r0, #1
 80087fc:	6018      	str	r0, [r3, #0]
 80087fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008800:	2b00      	cmp	r3, #0
 8008802:	f43f acf1 	beq.w	80081e8 <_dtoa_r+0xa0>
 8008806:	601d      	str	r5, [r3, #0]
 8008808:	e4ee      	b.n	80081e8 <_dtoa_r+0xa0>
 800880a:	9f00      	ldr	r7, [sp, #0]
 800880c:	462b      	mov	r3, r5
 800880e:	461d      	mov	r5, r3
 8008810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008814:	2a39      	cmp	r2, #57	; 0x39
 8008816:	d106      	bne.n	8008826 <_dtoa_r+0x6de>
 8008818:	9a01      	ldr	r2, [sp, #4]
 800881a:	429a      	cmp	r2, r3
 800881c:	d1f7      	bne.n	800880e <_dtoa_r+0x6c6>
 800881e:	9901      	ldr	r1, [sp, #4]
 8008820:	2230      	movs	r2, #48	; 0x30
 8008822:	3701      	adds	r7, #1
 8008824:	700a      	strb	r2, [r1, #0]
 8008826:	781a      	ldrb	r2, [r3, #0]
 8008828:	3201      	adds	r2, #1
 800882a:	701a      	strb	r2, [r3, #0]
 800882c:	e790      	b.n	8008750 <_dtoa_r+0x608>
 800882e:	4ba6      	ldr	r3, [pc, #664]	; (8008ac8 <_dtoa_r+0x980>)
 8008830:	2200      	movs	r2, #0
 8008832:	f7f7 fee9 	bl	8000608 <__aeabi_dmul>
 8008836:	2200      	movs	r2, #0
 8008838:	2300      	movs	r3, #0
 800883a:	4606      	mov	r6, r0
 800883c:	460f      	mov	r7, r1
 800883e:	f7f8 f94b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008842:	2800      	cmp	r0, #0
 8008844:	d09d      	beq.n	8008782 <_dtoa_r+0x63a>
 8008846:	e7cf      	b.n	80087e8 <_dtoa_r+0x6a0>
 8008848:	9a08      	ldr	r2, [sp, #32]
 800884a:	2a00      	cmp	r2, #0
 800884c:	f000 80d7 	beq.w	80089fe <_dtoa_r+0x8b6>
 8008850:	9a06      	ldr	r2, [sp, #24]
 8008852:	2a01      	cmp	r2, #1
 8008854:	f300 80ba 	bgt.w	80089cc <_dtoa_r+0x884>
 8008858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800885a:	2a00      	cmp	r2, #0
 800885c:	f000 80b2 	beq.w	80089c4 <_dtoa_r+0x87c>
 8008860:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008864:	9e07      	ldr	r6, [sp, #28]
 8008866:	9d04      	ldr	r5, [sp, #16]
 8008868:	9a04      	ldr	r2, [sp, #16]
 800886a:	441a      	add	r2, r3
 800886c:	9204      	str	r2, [sp, #16]
 800886e:	9a05      	ldr	r2, [sp, #20]
 8008870:	2101      	movs	r1, #1
 8008872:	441a      	add	r2, r3
 8008874:	4620      	mov	r0, r4
 8008876:	9205      	str	r2, [sp, #20]
 8008878:	f000 ff32 	bl	80096e0 <__i2b>
 800887c:	4607      	mov	r7, r0
 800887e:	2d00      	cmp	r5, #0
 8008880:	dd0c      	ble.n	800889c <_dtoa_r+0x754>
 8008882:	9b05      	ldr	r3, [sp, #20]
 8008884:	2b00      	cmp	r3, #0
 8008886:	dd09      	ble.n	800889c <_dtoa_r+0x754>
 8008888:	42ab      	cmp	r3, r5
 800888a:	9a04      	ldr	r2, [sp, #16]
 800888c:	bfa8      	it	ge
 800888e:	462b      	movge	r3, r5
 8008890:	1ad2      	subs	r2, r2, r3
 8008892:	9204      	str	r2, [sp, #16]
 8008894:	9a05      	ldr	r2, [sp, #20]
 8008896:	1aed      	subs	r5, r5, r3
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	9305      	str	r3, [sp, #20]
 800889c:	9b07      	ldr	r3, [sp, #28]
 800889e:	b31b      	cbz	r3, 80088e8 <_dtoa_r+0x7a0>
 80088a0:	9b08      	ldr	r3, [sp, #32]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 80af 	beq.w	8008a06 <_dtoa_r+0x8be>
 80088a8:	2e00      	cmp	r6, #0
 80088aa:	dd13      	ble.n	80088d4 <_dtoa_r+0x78c>
 80088ac:	4639      	mov	r1, r7
 80088ae:	4632      	mov	r2, r6
 80088b0:	4620      	mov	r0, r4
 80088b2:	f000 ffd5 	bl	8009860 <__pow5mult>
 80088b6:	ee18 2a10 	vmov	r2, s16
 80088ba:	4601      	mov	r1, r0
 80088bc:	4607      	mov	r7, r0
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 ff24 	bl	800970c <__multiply>
 80088c4:	ee18 1a10 	vmov	r1, s16
 80088c8:	4680      	mov	r8, r0
 80088ca:	4620      	mov	r0, r4
 80088cc:	f000 fe06 	bl	80094dc <_Bfree>
 80088d0:	ee08 8a10 	vmov	s16, r8
 80088d4:	9b07      	ldr	r3, [sp, #28]
 80088d6:	1b9a      	subs	r2, r3, r6
 80088d8:	d006      	beq.n	80088e8 <_dtoa_r+0x7a0>
 80088da:	ee18 1a10 	vmov	r1, s16
 80088de:	4620      	mov	r0, r4
 80088e0:	f000 ffbe 	bl	8009860 <__pow5mult>
 80088e4:	ee08 0a10 	vmov	s16, r0
 80088e8:	2101      	movs	r1, #1
 80088ea:	4620      	mov	r0, r4
 80088ec:	f000 fef8 	bl	80096e0 <__i2b>
 80088f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	4606      	mov	r6, r0
 80088f6:	f340 8088 	ble.w	8008a0a <_dtoa_r+0x8c2>
 80088fa:	461a      	mov	r2, r3
 80088fc:	4601      	mov	r1, r0
 80088fe:	4620      	mov	r0, r4
 8008900:	f000 ffae 	bl	8009860 <__pow5mult>
 8008904:	9b06      	ldr	r3, [sp, #24]
 8008906:	2b01      	cmp	r3, #1
 8008908:	4606      	mov	r6, r0
 800890a:	f340 8081 	ble.w	8008a10 <_dtoa_r+0x8c8>
 800890e:	f04f 0800 	mov.w	r8, #0
 8008912:	6933      	ldr	r3, [r6, #16]
 8008914:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008918:	6918      	ldr	r0, [r3, #16]
 800891a:	f000 fe91 	bl	8009640 <__hi0bits>
 800891e:	f1c0 0020 	rsb	r0, r0, #32
 8008922:	9b05      	ldr	r3, [sp, #20]
 8008924:	4418      	add	r0, r3
 8008926:	f010 001f 	ands.w	r0, r0, #31
 800892a:	f000 8092 	beq.w	8008a52 <_dtoa_r+0x90a>
 800892e:	f1c0 0320 	rsb	r3, r0, #32
 8008932:	2b04      	cmp	r3, #4
 8008934:	f340 808a 	ble.w	8008a4c <_dtoa_r+0x904>
 8008938:	f1c0 001c 	rsb	r0, r0, #28
 800893c:	9b04      	ldr	r3, [sp, #16]
 800893e:	4403      	add	r3, r0
 8008940:	9304      	str	r3, [sp, #16]
 8008942:	9b05      	ldr	r3, [sp, #20]
 8008944:	4403      	add	r3, r0
 8008946:	4405      	add	r5, r0
 8008948:	9305      	str	r3, [sp, #20]
 800894a:	9b04      	ldr	r3, [sp, #16]
 800894c:	2b00      	cmp	r3, #0
 800894e:	dd07      	ble.n	8008960 <_dtoa_r+0x818>
 8008950:	ee18 1a10 	vmov	r1, s16
 8008954:	461a      	mov	r2, r3
 8008956:	4620      	mov	r0, r4
 8008958:	f000 ffdc 	bl	8009914 <__lshift>
 800895c:	ee08 0a10 	vmov	s16, r0
 8008960:	9b05      	ldr	r3, [sp, #20]
 8008962:	2b00      	cmp	r3, #0
 8008964:	dd05      	ble.n	8008972 <_dtoa_r+0x82a>
 8008966:	4631      	mov	r1, r6
 8008968:	461a      	mov	r2, r3
 800896a:	4620      	mov	r0, r4
 800896c:	f000 ffd2 	bl	8009914 <__lshift>
 8008970:	4606      	mov	r6, r0
 8008972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008974:	2b00      	cmp	r3, #0
 8008976:	d06e      	beq.n	8008a56 <_dtoa_r+0x90e>
 8008978:	ee18 0a10 	vmov	r0, s16
 800897c:	4631      	mov	r1, r6
 800897e:	f001 f839 	bl	80099f4 <__mcmp>
 8008982:	2800      	cmp	r0, #0
 8008984:	da67      	bge.n	8008a56 <_dtoa_r+0x90e>
 8008986:	9b00      	ldr	r3, [sp, #0]
 8008988:	3b01      	subs	r3, #1
 800898a:	ee18 1a10 	vmov	r1, s16
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	220a      	movs	r2, #10
 8008992:	2300      	movs	r3, #0
 8008994:	4620      	mov	r0, r4
 8008996:	f000 fdc3 	bl	8009520 <__multadd>
 800899a:	9b08      	ldr	r3, [sp, #32]
 800899c:	ee08 0a10 	vmov	s16, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f000 81b1 	beq.w	8008d08 <_dtoa_r+0xbc0>
 80089a6:	2300      	movs	r3, #0
 80089a8:	4639      	mov	r1, r7
 80089aa:	220a      	movs	r2, #10
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 fdb7 	bl	8009520 <__multadd>
 80089b2:	9b02      	ldr	r3, [sp, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	4607      	mov	r7, r0
 80089b8:	f300 808e 	bgt.w	8008ad8 <_dtoa_r+0x990>
 80089bc:	9b06      	ldr	r3, [sp, #24]
 80089be:	2b02      	cmp	r3, #2
 80089c0:	dc51      	bgt.n	8008a66 <_dtoa_r+0x91e>
 80089c2:	e089      	b.n	8008ad8 <_dtoa_r+0x990>
 80089c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089ca:	e74b      	b.n	8008864 <_dtoa_r+0x71c>
 80089cc:	9b03      	ldr	r3, [sp, #12]
 80089ce:	1e5e      	subs	r6, r3, #1
 80089d0:	9b07      	ldr	r3, [sp, #28]
 80089d2:	42b3      	cmp	r3, r6
 80089d4:	bfbf      	itttt	lt
 80089d6:	9b07      	ldrlt	r3, [sp, #28]
 80089d8:	9607      	strlt	r6, [sp, #28]
 80089da:	1af2      	sublt	r2, r6, r3
 80089dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80089de:	bfb6      	itet	lt
 80089e0:	189b      	addlt	r3, r3, r2
 80089e2:	1b9e      	subge	r6, r3, r6
 80089e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80089e6:	9b03      	ldr	r3, [sp, #12]
 80089e8:	bfb8      	it	lt
 80089ea:	2600      	movlt	r6, #0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	bfb7      	itett	lt
 80089f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80089f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80089f8:	1a9d      	sublt	r5, r3, r2
 80089fa:	2300      	movlt	r3, #0
 80089fc:	e734      	b.n	8008868 <_dtoa_r+0x720>
 80089fe:	9e07      	ldr	r6, [sp, #28]
 8008a00:	9d04      	ldr	r5, [sp, #16]
 8008a02:	9f08      	ldr	r7, [sp, #32]
 8008a04:	e73b      	b.n	800887e <_dtoa_r+0x736>
 8008a06:	9a07      	ldr	r2, [sp, #28]
 8008a08:	e767      	b.n	80088da <_dtoa_r+0x792>
 8008a0a:	9b06      	ldr	r3, [sp, #24]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	dc18      	bgt.n	8008a42 <_dtoa_r+0x8fa>
 8008a10:	f1ba 0f00 	cmp.w	sl, #0
 8008a14:	d115      	bne.n	8008a42 <_dtoa_r+0x8fa>
 8008a16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a1a:	b993      	cbnz	r3, 8008a42 <_dtoa_r+0x8fa>
 8008a1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a20:	0d1b      	lsrs	r3, r3, #20
 8008a22:	051b      	lsls	r3, r3, #20
 8008a24:	b183      	cbz	r3, 8008a48 <_dtoa_r+0x900>
 8008a26:	9b04      	ldr	r3, [sp, #16]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	9304      	str	r3, [sp, #16]
 8008a2c:	9b05      	ldr	r3, [sp, #20]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	9305      	str	r3, [sp, #20]
 8008a32:	f04f 0801 	mov.w	r8, #1
 8008a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f47f af6a 	bne.w	8008912 <_dtoa_r+0x7ca>
 8008a3e:	2001      	movs	r0, #1
 8008a40:	e76f      	b.n	8008922 <_dtoa_r+0x7da>
 8008a42:	f04f 0800 	mov.w	r8, #0
 8008a46:	e7f6      	b.n	8008a36 <_dtoa_r+0x8ee>
 8008a48:	4698      	mov	r8, r3
 8008a4a:	e7f4      	b.n	8008a36 <_dtoa_r+0x8ee>
 8008a4c:	f43f af7d 	beq.w	800894a <_dtoa_r+0x802>
 8008a50:	4618      	mov	r0, r3
 8008a52:	301c      	adds	r0, #28
 8008a54:	e772      	b.n	800893c <_dtoa_r+0x7f4>
 8008a56:	9b03      	ldr	r3, [sp, #12]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	dc37      	bgt.n	8008acc <_dtoa_r+0x984>
 8008a5c:	9b06      	ldr	r3, [sp, #24]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	dd34      	ble.n	8008acc <_dtoa_r+0x984>
 8008a62:	9b03      	ldr	r3, [sp, #12]
 8008a64:	9302      	str	r3, [sp, #8]
 8008a66:	9b02      	ldr	r3, [sp, #8]
 8008a68:	b96b      	cbnz	r3, 8008a86 <_dtoa_r+0x93e>
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	2205      	movs	r2, #5
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f000 fd56 	bl	8009520 <__multadd>
 8008a74:	4601      	mov	r1, r0
 8008a76:	4606      	mov	r6, r0
 8008a78:	ee18 0a10 	vmov	r0, s16
 8008a7c:	f000 ffba 	bl	80099f4 <__mcmp>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	f73f adbb 	bgt.w	80085fc <_dtoa_r+0x4b4>
 8008a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a88:	9d01      	ldr	r5, [sp, #4]
 8008a8a:	43db      	mvns	r3, r3
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	f04f 0800 	mov.w	r8, #0
 8008a92:	4631      	mov	r1, r6
 8008a94:	4620      	mov	r0, r4
 8008a96:	f000 fd21 	bl	80094dc <_Bfree>
 8008a9a:	2f00      	cmp	r7, #0
 8008a9c:	f43f aea4 	beq.w	80087e8 <_dtoa_r+0x6a0>
 8008aa0:	f1b8 0f00 	cmp.w	r8, #0
 8008aa4:	d005      	beq.n	8008ab2 <_dtoa_r+0x96a>
 8008aa6:	45b8      	cmp	r8, r7
 8008aa8:	d003      	beq.n	8008ab2 <_dtoa_r+0x96a>
 8008aaa:	4641      	mov	r1, r8
 8008aac:	4620      	mov	r0, r4
 8008aae:	f000 fd15 	bl	80094dc <_Bfree>
 8008ab2:	4639      	mov	r1, r7
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f000 fd11 	bl	80094dc <_Bfree>
 8008aba:	e695      	b.n	80087e8 <_dtoa_r+0x6a0>
 8008abc:	2600      	movs	r6, #0
 8008abe:	4637      	mov	r7, r6
 8008ac0:	e7e1      	b.n	8008a86 <_dtoa_r+0x93e>
 8008ac2:	9700      	str	r7, [sp, #0]
 8008ac4:	4637      	mov	r7, r6
 8008ac6:	e599      	b.n	80085fc <_dtoa_r+0x4b4>
 8008ac8:	40240000 	.word	0x40240000
 8008acc:	9b08      	ldr	r3, [sp, #32]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f000 80ca 	beq.w	8008c68 <_dtoa_r+0xb20>
 8008ad4:	9b03      	ldr	r3, [sp, #12]
 8008ad6:	9302      	str	r3, [sp, #8]
 8008ad8:	2d00      	cmp	r5, #0
 8008ada:	dd05      	ble.n	8008ae8 <_dtoa_r+0x9a0>
 8008adc:	4639      	mov	r1, r7
 8008ade:	462a      	mov	r2, r5
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f000 ff17 	bl	8009914 <__lshift>
 8008ae6:	4607      	mov	r7, r0
 8008ae8:	f1b8 0f00 	cmp.w	r8, #0
 8008aec:	d05b      	beq.n	8008ba6 <_dtoa_r+0xa5e>
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	4620      	mov	r0, r4
 8008af2:	f000 fcb3 	bl	800945c <_Balloc>
 8008af6:	4605      	mov	r5, r0
 8008af8:	b928      	cbnz	r0, 8008b06 <_dtoa_r+0x9be>
 8008afa:	4b87      	ldr	r3, [pc, #540]	; (8008d18 <_dtoa_r+0xbd0>)
 8008afc:	4602      	mov	r2, r0
 8008afe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b02:	f7ff bb3b 	b.w	800817c <_dtoa_r+0x34>
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	3202      	adds	r2, #2
 8008b0a:	0092      	lsls	r2, r2, #2
 8008b0c:	f107 010c 	add.w	r1, r7, #12
 8008b10:	300c      	adds	r0, #12
 8008b12:	f000 fc95 	bl	8009440 <memcpy>
 8008b16:	2201      	movs	r2, #1
 8008b18:	4629      	mov	r1, r5
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 fefa 	bl	8009914 <__lshift>
 8008b20:	9b01      	ldr	r3, [sp, #4]
 8008b22:	f103 0901 	add.w	r9, r3, #1
 8008b26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	9305      	str	r3, [sp, #20]
 8008b2e:	f00a 0301 	and.w	r3, sl, #1
 8008b32:	46b8      	mov	r8, r7
 8008b34:	9304      	str	r3, [sp, #16]
 8008b36:	4607      	mov	r7, r0
 8008b38:	4631      	mov	r1, r6
 8008b3a:	ee18 0a10 	vmov	r0, s16
 8008b3e:	f7ff fa77 	bl	8008030 <quorem>
 8008b42:	4641      	mov	r1, r8
 8008b44:	9002      	str	r0, [sp, #8]
 8008b46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b4a:	ee18 0a10 	vmov	r0, s16
 8008b4e:	f000 ff51 	bl	80099f4 <__mcmp>
 8008b52:	463a      	mov	r2, r7
 8008b54:	9003      	str	r0, [sp, #12]
 8008b56:	4631      	mov	r1, r6
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f000 ff67 	bl	8009a2c <__mdiff>
 8008b5e:	68c2      	ldr	r2, [r0, #12]
 8008b60:	f109 3bff 	add.w	fp, r9, #4294967295
 8008b64:	4605      	mov	r5, r0
 8008b66:	bb02      	cbnz	r2, 8008baa <_dtoa_r+0xa62>
 8008b68:	4601      	mov	r1, r0
 8008b6a:	ee18 0a10 	vmov	r0, s16
 8008b6e:	f000 ff41 	bl	80099f4 <__mcmp>
 8008b72:	4602      	mov	r2, r0
 8008b74:	4629      	mov	r1, r5
 8008b76:	4620      	mov	r0, r4
 8008b78:	9207      	str	r2, [sp, #28]
 8008b7a:	f000 fcaf 	bl	80094dc <_Bfree>
 8008b7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008b82:	ea43 0102 	orr.w	r1, r3, r2
 8008b86:	9b04      	ldr	r3, [sp, #16]
 8008b88:	430b      	orrs	r3, r1
 8008b8a:	464d      	mov	r5, r9
 8008b8c:	d10f      	bne.n	8008bae <_dtoa_r+0xa66>
 8008b8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b92:	d02a      	beq.n	8008bea <_dtoa_r+0xaa2>
 8008b94:	9b03      	ldr	r3, [sp, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	dd02      	ble.n	8008ba0 <_dtoa_r+0xa58>
 8008b9a:	9b02      	ldr	r3, [sp, #8]
 8008b9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008ba0:	f88b a000 	strb.w	sl, [fp]
 8008ba4:	e775      	b.n	8008a92 <_dtoa_r+0x94a>
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	e7ba      	b.n	8008b20 <_dtoa_r+0x9d8>
 8008baa:	2201      	movs	r2, #1
 8008bac:	e7e2      	b.n	8008b74 <_dtoa_r+0xa2c>
 8008bae:	9b03      	ldr	r3, [sp, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	db04      	blt.n	8008bbe <_dtoa_r+0xa76>
 8008bb4:	9906      	ldr	r1, [sp, #24]
 8008bb6:	430b      	orrs	r3, r1
 8008bb8:	9904      	ldr	r1, [sp, #16]
 8008bba:	430b      	orrs	r3, r1
 8008bbc:	d122      	bne.n	8008c04 <_dtoa_r+0xabc>
 8008bbe:	2a00      	cmp	r2, #0
 8008bc0:	ddee      	ble.n	8008ba0 <_dtoa_r+0xa58>
 8008bc2:	ee18 1a10 	vmov	r1, s16
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 fea3 	bl	8009914 <__lshift>
 8008bce:	4631      	mov	r1, r6
 8008bd0:	ee08 0a10 	vmov	s16, r0
 8008bd4:	f000 ff0e 	bl	80099f4 <__mcmp>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	dc03      	bgt.n	8008be4 <_dtoa_r+0xa9c>
 8008bdc:	d1e0      	bne.n	8008ba0 <_dtoa_r+0xa58>
 8008bde:	f01a 0f01 	tst.w	sl, #1
 8008be2:	d0dd      	beq.n	8008ba0 <_dtoa_r+0xa58>
 8008be4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008be8:	d1d7      	bne.n	8008b9a <_dtoa_r+0xa52>
 8008bea:	2339      	movs	r3, #57	; 0x39
 8008bec:	f88b 3000 	strb.w	r3, [fp]
 8008bf0:	462b      	mov	r3, r5
 8008bf2:	461d      	mov	r5, r3
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008bfa:	2a39      	cmp	r2, #57	; 0x39
 8008bfc:	d071      	beq.n	8008ce2 <_dtoa_r+0xb9a>
 8008bfe:	3201      	adds	r2, #1
 8008c00:	701a      	strb	r2, [r3, #0]
 8008c02:	e746      	b.n	8008a92 <_dtoa_r+0x94a>
 8008c04:	2a00      	cmp	r2, #0
 8008c06:	dd07      	ble.n	8008c18 <_dtoa_r+0xad0>
 8008c08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c0c:	d0ed      	beq.n	8008bea <_dtoa_r+0xaa2>
 8008c0e:	f10a 0301 	add.w	r3, sl, #1
 8008c12:	f88b 3000 	strb.w	r3, [fp]
 8008c16:	e73c      	b.n	8008a92 <_dtoa_r+0x94a>
 8008c18:	9b05      	ldr	r3, [sp, #20]
 8008c1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008c1e:	4599      	cmp	r9, r3
 8008c20:	d047      	beq.n	8008cb2 <_dtoa_r+0xb6a>
 8008c22:	ee18 1a10 	vmov	r1, s16
 8008c26:	2300      	movs	r3, #0
 8008c28:	220a      	movs	r2, #10
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 fc78 	bl	8009520 <__multadd>
 8008c30:	45b8      	cmp	r8, r7
 8008c32:	ee08 0a10 	vmov	s16, r0
 8008c36:	f04f 0300 	mov.w	r3, #0
 8008c3a:	f04f 020a 	mov.w	r2, #10
 8008c3e:	4641      	mov	r1, r8
 8008c40:	4620      	mov	r0, r4
 8008c42:	d106      	bne.n	8008c52 <_dtoa_r+0xb0a>
 8008c44:	f000 fc6c 	bl	8009520 <__multadd>
 8008c48:	4680      	mov	r8, r0
 8008c4a:	4607      	mov	r7, r0
 8008c4c:	f109 0901 	add.w	r9, r9, #1
 8008c50:	e772      	b.n	8008b38 <_dtoa_r+0x9f0>
 8008c52:	f000 fc65 	bl	8009520 <__multadd>
 8008c56:	4639      	mov	r1, r7
 8008c58:	4680      	mov	r8, r0
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	220a      	movs	r2, #10
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f000 fc5e 	bl	8009520 <__multadd>
 8008c64:	4607      	mov	r7, r0
 8008c66:	e7f1      	b.n	8008c4c <_dtoa_r+0xb04>
 8008c68:	9b03      	ldr	r3, [sp, #12]
 8008c6a:	9302      	str	r3, [sp, #8]
 8008c6c:	9d01      	ldr	r5, [sp, #4]
 8008c6e:	ee18 0a10 	vmov	r0, s16
 8008c72:	4631      	mov	r1, r6
 8008c74:	f7ff f9dc 	bl	8008030 <quorem>
 8008c78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c7c:	9b01      	ldr	r3, [sp, #4]
 8008c7e:	f805 ab01 	strb.w	sl, [r5], #1
 8008c82:	1aea      	subs	r2, r5, r3
 8008c84:	9b02      	ldr	r3, [sp, #8]
 8008c86:	4293      	cmp	r3, r2
 8008c88:	dd09      	ble.n	8008c9e <_dtoa_r+0xb56>
 8008c8a:	ee18 1a10 	vmov	r1, s16
 8008c8e:	2300      	movs	r3, #0
 8008c90:	220a      	movs	r2, #10
 8008c92:	4620      	mov	r0, r4
 8008c94:	f000 fc44 	bl	8009520 <__multadd>
 8008c98:	ee08 0a10 	vmov	s16, r0
 8008c9c:	e7e7      	b.n	8008c6e <_dtoa_r+0xb26>
 8008c9e:	9b02      	ldr	r3, [sp, #8]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	bfc8      	it	gt
 8008ca4:	461d      	movgt	r5, r3
 8008ca6:	9b01      	ldr	r3, [sp, #4]
 8008ca8:	bfd8      	it	le
 8008caa:	2501      	movle	r5, #1
 8008cac:	441d      	add	r5, r3
 8008cae:	f04f 0800 	mov.w	r8, #0
 8008cb2:	ee18 1a10 	vmov	r1, s16
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f000 fe2b 	bl	8009914 <__lshift>
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	ee08 0a10 	vmov	s16, r0
 8008cc4:	f000 fe96 	bl	80099f4 <__mcmp>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	dc91      	bgt.n	8008bf0 <_dtoa_r+0xaa8>
 8008ccc:	d102      	bne.n	8008cd4 <_dtoa_r+0xb8c>
 8008cce:	f01a 0f01 	tst.w	sl, #1
 8008cd2:	d18d      	bne.n	8008bf0 <_dtoa_r+0xaa8>
 8008cd4:	462b      	mov	r3, r5
 8008cd6:	461d      	mov	r5, r3
 8008cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cdc:	2a30      	cmp	r2, #48	; 0x30
 8008cde:	d0fa      	beq.n	8008cd6 <_dtoa_r+0xb8e>
 8008ce0:	e6d7      	b.n	8008a92 <_dtoa_r+0x94a>
 8008ce2:	9a01      	ldr	r2, [sp, #4]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d184      	bne.n	8008bf2 <_dtoa_r+0xaaa>
 8008ce8:	9b00      	ldr	r3, [sp, #0]
 8008cea:	3301      	adds	r3, #1
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	2331      	movs	r3, #49	; 0x31
 8008cf0:	7013      	strb	r3, [r2, #0]
 8008cf2:	e6ce      	b.n	8008a92 <_dtoa_r+0x94a>
 8008cf4:	4b09      	ldr	r3, [pc, #36]	; (8008d1c <_dtoa_r+0xbd4>)
 8008cf6:	f7ff ba95 	b.w	8008224 <_dtoa_r+0xdc>
 8008cfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f47f aa6e 	bne.w	80081de <_dtoa_r+0x96>
 8008d02:	4b07      	ldr	r3, [pc, #28]	; (8008d20 <_dtoa_r+0xbd8>)
 8008d04:	f7ff ba8e 	b.w	8008224 <_dtoa_r+0xdc>
 8008d08:	9b02      	ldr	r3, [sp, #8]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	dcae      	bgt.n	8008c6c <_dtoa_r+0xb24>
 8008d0e:	9b06      	ldr	r3, [sp, #24]
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	f73f aea8 	bgt.w	8008a66 <_dtoa_r+0x91e>
 8008d16:	e7a9      	b.n	8008c6c <_dtoa_r+0xb24>
 8008d18:	0800b0f0 	.word	0x0800b0f0
 8008d1c:	0800aef4 	.word	0x0800aef4
 8008d20:	0800b071 	.word	0x0800b071

08008d24 <rshift>:
 8008d24:	6903      	ldr	r3, [r0, #16]
 8008d26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d32:	f100 0414 	add.w	r4, r0, #20
 8008d36:	dd45      	ble.n	8008dc4 <rshift+0xa0>
 8008d38:	f011 011f 	ands.w	r1, r1, #31
 8008d3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d44:	d10c      	bne.n	8008d60 <rshift+0x3c>
 8008d46:	f100 0710 	add.w	r7, r0, #16
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	42b1      	cmp	r1, r6
 8008d4e:	d334      	bcc.n	8008dba <rshift+0x96>
 8008d50:	1a9b      	subs	r3, r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	1eea      	subs	r2, r5, #3
 8008d56:	4296      	cmp	r6, r2
 8008d58:	bf38      	it	cc
 8008d5a:	2300      	movcc	r3, #0
 8008d5c:	4423      	add	r3, r4
 8008d5e:	e015      	b.n	8008d8c <rshift+0x68>
 8008d60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d64:	f1c1 0820 	rsb	r8, r1, #32
 8008d68:	40cf      	lsrs	r7, r1
 8008d6a:	f105 0e04 	add.w	lr, r5, #4
 8008d6e:	46a1      	mov	r9, r4
 8008d70:	4576      	cmp	r6, lr
 8008d72:	46f4      	mov	ip, lr
 8008d74:	d815      	bhi.n	8008da2 <rshift+0x7e>
 8008d76:	1a9a      	subs	r2, r3, r2
 8008d78:	0092      	lsls	r2, r2, #2
 8008d7a:	3a04      	subs	r2, #4
 8008d7c:	3501      	adds	r5, #1
 8008d7e:	42ae      	cmp	r6, r5
 8008d80:	bf38      	it	cc
 8008d82:	2200      	movcc	r2, #0
 8008d84:	18a3      	adds	r3, r4, r2
 8008d86:	50a7      	str	r7, [r4, r2]
 8008d88:	b107      	cbz	r7, 8008d8c <rshift+0x68>
 8008d8a:	3304      	adds	r3, #4
 8008d8c:	1b1a      	subs	r2, r3, r4
 8008d8e:	42a3      	cmp	r3, r4
 8008d90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d94:	bf08      	it	eq
 8008d96:	2300      	moveq	r3, #0
 8008d98:	6102      	str	r2, [r0, #16]
 8008d9a:	bf08      	it	eq
 8008d9c:	6143      	streq	r3, [r0, #20]
 8008d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008da2:	f8dc c000 	ldr.w	ip, [ip]
 8008da6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008daa:	ea4c 0707 	orr.w	r7, ip, r7
 8008dae:	f849 7b04 	str.w	r7, [r9], #4
 8008db2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008db6:	40cf      	lsrs	r7, r1
 8008db8:	e7da      	b.n	8008d70 <rshift+0x4c>
 8008dba:	f851 cb04 	ldr.w	ip, [r1], #4
 8008dbe:	f847 cf04 	str.w	ip, [r7, #4]!
 8008dc2:	e7c3      	b.n	8008d4c <rshift+0x28>
 8008dc4:	4623      	mov	r3, r4
 8008dc6:	e7e1      	b.n	8008d8c <rshift+0x68>

08008dc8 <__hexdig_fun>:
 8008dc8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008dcc:	2b09      	cmp	r3, #9
 8008dce:	d802      	bhi.n	8008dd6 <__hexdig_fun+0xe>
 8008dd0:	3820      	subs	r0, #32
 8008dd2:	b2c0      	uxtb	r0, r0
 8008dd4:	4770      	bx	lr
 8008dd6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008dda:	2b05      	cmp	r3, #5
 8008ddc:	d801      	bhi.n	8008de2 <__hexdig_fun+0x1a>
 8008dde:	3847      	subs	r0, #71	; 0x47
 8008de0:	e7f7      	b.n	8008dd2 <__hexdig_fun+0xa>
 8008de2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008de6:	2b05      	cmp	r3, #5
 8008de8:	d801      	bhi.n	8008dee <__hexdig_fun+0x26>
 8008dea:	3827      	subs	r0, #39	; 0x27
 8008dec:	e7f1      	b.n	8008dd2 <__hexdig_fun+0xa>
 8008dee:	2000      	movs	r0, #0
 8008df0:	4770      	bx	lr
	...

08008df4 <__gethex>:
 8008df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df8:	ed2d 8b02 	vpush	{d8}
 8008dfc:	b089      	sub	sp, #36	; 0x24
 8008dfe:	ee08 0a10 	vmov	s16, r0
 8008e02:	9304      	str	r3, [sp, #16]
 8008e04:	4bb4      	ldr	r3, [pc, #720]	; (80090d8 <__gethex+0x2e4>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	9301      	str	r3, [sp, #4]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	468b      	mov	fp, r1
 8008e0e:	4690      	mov	r8, r2
 8008e10:	f7f7 f9e6 	bl	80001e0 <strlen>
 8008e14:	9b01      	ldr	r3, [sp, #4]
 8008e16:	f8db 2000 	ldr.w	r2, [fp]
 8008e1a:	4403      	add	r3, r0
 8008e1c:	4682      	mov	sl, r0
 8008e1e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008e22:	9305      	str	r3, [sp, #20]
 8008e24:	1c93      	adds	r3, r2, #2
 8008e26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008e2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008e2e:	32fe      	adds	r2, #254	; 0xfe
 8008e30:	18d1      	adds	r1, r2, r3
 8008e32:	461f      	mov	r7, r3
 8008e34:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e38:	9100      	str	r1, [sp, #0]
 8008e3a:	2830      	cmp	r0, #48	; 0x30
 8008e3c:	d0f8      	beq.n	8008e30 <__gethex+0x3c>
 8008e3e:	f7ff ffc3 	bl	8008dc8 <__hexdig_fun>
 8008e42:	4604      	mov	r4, r0
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d13a      	bne.n	8008ebe <__gethex+0xca>
 8008e48:	9901      	ldr	r1, [sp, #4]
 8008e4a:	4652      	mov	r2, sl
 8008e4c:	4638      	mov	r0, r7
 8008e4e:	f001 fa33 	bl	800a2b8 <strncmp>
 8008e52:	4605      	mov	r5, r0
 8008e54:	2800      	cmp	r0, #0
 8008e56:	d168      	bne.n	8008f2a <__gethex+0x136>
 8008e58:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008e5c:	eb07 060a 	add.w	r6, r7, sl
 8008e60:	f7ff ffb2 	bl	8008dc8 <__hexdig_fun>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d062      	beq.n	8008f2e <__gethex+0x13a>
 8008e68:	4633      	mov	r3, r6
 8008e6a:	7818      	ldrb	r0, [r3, #0]
 8008e6c:	2830      	cmp	r0, #48	; 0x30
 8008e6e:	461f      	mov	r7, r3
 8008e70:	f103 0301 	add.w	r3, r3, #1
 8008e74:	d0f9      	beq.n	8008e6a <__gethex+0x76>
 8008e76:	f7ff ffa7 	bl	8008dc8 <__hexdig_fun>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	fab0 f480 	clz	r4, r0
 8008e80:	0964      	lsrs	r4, r4, #5
 8008e82:	4635      	mov	r5, r6
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	463a      	mov	r2, r7
 8008e88:	4616      	mov	r6, r2
 8008e8a:	3201      	adds	r2, #1
 8008e8c:	7830      	ldrb	r0, [r6, #0]
 8008e8e:	f7ff ff9b 	bl	8008dc8 <__hexdig_fun>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d1f8      	bne.n	8008e88 <__gethex+0x94>
 8008e96:	9901      	ldr	r1, [sp, #4]
 8008e98:	4652      	mov	r2, sl
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f001 fa0c 	bl	800a2b8 <strncmp>
 8008ea0:	b980      	cbnz	r0, 8008ec4 <__gethex+0xd0>
 8008ea2:	b94d      	cbnz	r5, 8008eb8 <__gethex+0xc4>
 8008ea4:	eb06 050a 	add.w	r5, r6, sl
 8008ea8:	462a      	mov	r2, r5
 8008eaa:	4616      	mov	r6, r2
 8008eac:	3201      	adds	r2, #1
 8008eae:	7830      	ldrb	r0, [r6, #0]
 8008eb0:	f7ff ff8a 	bl	8008dc8 <__hexdig_fun>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d1f8      	bne.n	8008eaa <__gethex+0xb6>
 8008eb8:	1bad      	subs	r5, r5, r6
 8008eba:	00ad      	lsls	r5, r5, #2
 8008ebc:	e004      	b.n	8008ec8 <__gethex+0xd4>
 8008ebe:	2400      	movs	r4, #0
 8008ec0:	4625      	mov	r5, r4
 8008ec2:	e7e0      	b.n	8008e86 <__gethex+0x92>
 8008ec4:	2d00      	cmp	r5, #0
 8008ec6:	d1f7      	bne.n	8008eb8 <__gethex+0xc4>
 8008ec8:	7833      	ldrb	r3, [r6, #0]
 8008eca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ece:	2b50      	cmp	r3, #80	; 0x50
 8008ed0:	d13b      	bne.n	8008f4a <__gethex+0x156>
 8008ed2:	7873      	ldrb	r3, [r6, #1]
 8008ed4:	2b2b      	cmp	r3, #43	; 0x2b
 8008ed6:	d02c      	beq.n	8008f32 <__gethex+0x13e>
 8008ed8:	2b2d      	cmp	r3, #45	; 0x2d
 8008eda:	d02e      	beq.n	8008f3a <__gethex+0x146>
 8008edc:	1c71      	adds	r1, r6, #1
 8008ede:	f04f 0900 	mov.w	r9, #0
 8008ee2:	7808      	ldrb	r0, [r1, #0]
 8008ee4:	f7ff ff70 	bl	8008dc8 <__hexdig_fun>
 8008ee8:	1e43      	subs	r3, r0, #1
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	2b18      	cmp	r3, #24
 8008eee:	d82c      	bhi.n	8008f4a <__gethex+0x156>
 8008ef0:	f1a0 0210 	sub.w	r2, r0, #16
 8008ef4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ef8:	f7ff ff66 	bl	8008dc8 <__hexdig_fun>
 8008efc:	1e43      	subs	r3, r0, #1
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b18      	cmp	r3, #24
 8008f02:	d91d      	bls.n	8008f40 <__gethex+0x14c>
 8008f04:	f1b9 0f00 	cmp.w	r9, #0
 8008f08:	d000      	beq.n	8008f0c <__gethex+0x118>
 8008f0a:	4252      	negs	r2, r2
 8008f0c:	4415      	add	r5, r2
 8008f0e:	f8cb 1000 	str.w	r1, [fp]
 8008f12:	b1e4      	cbz	r4, 8008f4e <__gethex+0x15a>
 8008f14:	9b00      	ldr	r3, [sp, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	bf14      	ite	ne
 8008f1a:	2700      	movne	r7, #0
 8008f1c:	2706      	moveq	r7, #6
 8008f1e:	4638      	mov	r0, r7
 8008f20:	b009      	add	sp, #36	; 0x24
 8008f22:	ecbd 8b02 	vpop	{d8}
 8008f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f2a:	463e      	mov	r6, r7
 8008f2c:	4625      	mov	r5, r4
 8008f2e:	2401      	movs	r4, #1
 8008f30:	e7ca      	b.n	8008ec8 <__gethex+0xd4>
 8008f32:	f04f 0900 	mov.w	r9, #0
 8008f36:	1cb1      	adds	r1, r6, #2
 8008f38:	e7d3      	b.n	8008ee2 <__gethex+0xee>
 8008f3a:	f04f 0901 	mov.w	r9, #1
 8008f3e:	e7fa      	b.n	8008f36 <__gethex+0x142>
 8008f40:	230a      	movs	r3, #10
 8008f42:	fb03 0202 	mla	r2, r3, r2, r0
 8008f46:	3a10      	subs	r2, #16
 8008f48:	e7d4      	b.n	8008ef4 <__gethex+0x100>
 8008f4a:	4631      	mov	r1, r6
 8008f4c:	e7df      	b.n	8008f0e <__gethex+0x11a>
 8008f4e:	1bf3      	subs	r3, r6, r7
 8008f50:	3b01      	subs	r3, #1
 8008f52:	4621      	mov	r1, r4
 8008f54:	2b07      	cmp	r3, #7
 8008f56:	dc0b      	bgt.n	8008f70 <__gethex+0x17c>
 8008f58:	ee18 0a10 	vmov	r0, s16
 8008f5c:	f000 fa7e 	bl	800945c <_Balloc>
 8008f60:	4604      	mov	r4, r0
 8008f62:	b940      	cbnz	r0, 8008f76 <__gethex+0x182>
 8008f64:	4b5d      	ldr	r3, [pc, #372]	; (80090dc <__gethex+0x2e8>)
 8008f66:	4602      	mov	r2, r0
 8008f68:	21de      	movs	r1, #222	; 0xde
 8008f6a:	485d      	ldr	r0, [pc, #372]	; (80090e0 <__gethex+0x2ec>)
 8008f6c:	f001 f9c6 	bl	800a2fc <__assert_func>
 8008f70:	3101      	adds	r1, #1
 8008f72:	105b      	asrs	r3, r3, #1
 8008f74:	e7ee      	b.n	8008f54 <__gethex+0x160>
 8008f76:	f100 0914 	add.w	r9, r0, #20
 8008f7a:	f04f 0b00 	mov.w	fp, #0
 8008f7e:	f1ca 0301 	rsb	r3, sl, #1
 8008f82:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f86:	f8cd b000 	str.w	fp, [sp]
 8008f8a:	9306      	str	r3, [sp, #24]
 8008f8c:	42b7      	cmp	r7, r6
 8008f8e:	d340      	bcc.n	8009012 <__gethex+0x21e>
 8008f90:	9802      	ldr	r0, [sp, #8]
 8008f92:	9b00      	ldr	r3, [sp, #0]
 8008f94:	f840 3b04 	str.w	r3, [r0], #4
 8008f98:	eba0 0009 	sub.w	r0, r0, r9
 8008f9c:	1080      	asrs	r0, r0, #2
 8008f9e:	0146      	lsls	r6, r0, #5
 8008fa0:	6120      	str	r0, [r4, #16]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 fb4c 	bl	8009640 <__hi0bits>
 8008fa8:	1a30      	subs	r0, r6, r0
 8008faa:	f8d8 6000 	ldr.w	r6, [r8]
 8008fae:	42b0      	cmp	r0, r6
 8008fb0:	dd63      	ble.n	800907a <__gethex+0x286>
 8008fb2:	1b87      	subs	r7, r0, r6
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f000 fef0 	bl	8009d9c <__any_on>
 8008fbc:	4682      	mov	sl, r0
 8008fbe:	b1a8      	cbz	r0, 8008fec <__gethex+0x1f8>
 8008fc0:	1e7b      	subs	r3, r7, #1
 8008fc2:	1159      	asrs	r1, r3, #5
 8008fc4:	f003 021f 	and.w	r2, r3, #31
 8008fc8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008fcc:	f04f 0a01 	mov.w	sl, #1
 8008fd0:	fa0a f202 	lsl.w	r2, sl, r2
 8008fd4:	420a      	tst	r2, r1
 8008fd6:	d009      	beq.n	8008fec <__gethex+0x1f8>
 8008fd8:	4553      	cmp	r3, sl
 8008fda:	dd05      	ble.n	8008fe8 <__gethex+0x1f4>
 8008fdc:	1eb9      	subs	r1, r7, #2
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f000 fedc 	bl	8009d9c <__any_on>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	d145      	bne.n	8009074 <__gethex+0x280>
 8008fe8:	f04f 0a02 	mov.w	sl, #2
 8008fec:	4639      	mov	r1, r7
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f7ff fe98 	bl	8008d24 <rshift>
 8008ff4:	443d      	add	r5, r7
 8008ff6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ffa:	42ab      	cmp	r3, r5
 8008ffc:	da4c      	bge.n	8009098 <__gethex+0x2a4>
 8008ffe:	ee18 0a10 	vmov	r0, s16
 8009002:	4621      	mov	r1, r4
 8009004:	f000 fa6a 	bl	80094dc <_Bfree>
 8009008:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800900a:	2300      	movs	r3, #0
 800900c:	6013      	str	r3, [r2, #0]
 800900e:	27a3      	movs	r7, #163	; 0xa3
 8009010:	e785      	b.n	8008f1e <__gethex+0x12a>
 8009012:	1e73      	subs	r3, r6, #1
 8009014:	9a05      	ldr	r2, [sp, #20]
 8009016:	9303      	str	r3, [sp, #12]
 8009018:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800901c:	4293      	cmp	r3, r2
 800901e:	d019      	beq.n	8009054 <__gethex+0x260>
 8009020:	f1bb 0f20 	cmp.w	fp, #32
 8009024:	d107      	bne.n	8009036 <__gethex+0x242>
 8009026:	9b02      	ldr	r3, [sp, #8]
 8009028:	9a00      	ldr	r2, [sp, #0]
 800902a:	f843 2b04 	str.w	r2, [r3], #4
 800902e:	9302      	str	r3, [sp, #8]
 8009030:	2300      	movs	r3, #0
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	469b      	mov	fp, r3
 8009036:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800903a:	f7ff fec5 	bl	8008dc8 <__hexdig_fun>
 800903e:	9b00      	ldr	r3, [sp, #0]
 8009040:	f000 000f 	and.w	r0, r0, #15
 8009044:	fa00 f00b 	lsl.w	r0, r0, fp
 8009048:	4303      	orrs	r3, r0
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	f10b 0b04 	add.w	fp, fp, #4
 8009050:	9b03      	ldr	r3, [sp, #12]
 8009052:	e00d      	b.n	8009070 <__gethex+0x27c>
 8009054:	9b03      	ldr	r3, [sp, #12]
 8009056:	9a06      	ldr	r2, [sp, #24]
 8009058:	4413      	add	r3, r2
 800905a:	42bb      	cmp	r3, r7
 800905c:	d3e0      	bcc.n	8009020 <__gethex+0x22c>
 800905e:	4618      	mov	r0, r3
 8009060:	9901      	ldr	r1, [sp, #4]
 8009062:	9307      	str	r3, [sp, #28]
 8009064:	4652      	mov	r2, sl
 8009066:	f001 f927 	bl	800a2b8 <strncmp>
 800906a:	9b07      	ldr	r3, [sp, #28]
 800906c:	2800      	cmp	r0, #0
 800906e:	d1d7      	bne.n	8009020 <__gethex+0x22c>
 8009070:	461e      	mov	r6, r3
 8009072:	e78b      	b.n	8008f8c <__gethex+0x198>
 8009074:	f04f 0a03 	mov.w	sl, #3
 8009078:	e7b8      	b.n	8008fec <__gethex+0x1f8>
 800907a:	da0a      	bge.n	8009092 <__gethex+0x29e>
 800907c:	1a37      	subs	r7, r6, r0
 800907e:	4621      	mov	r1, r4
 8009080:	ee18 0a10 	vmov	r0, s16
 8009084:	463a      	mov	r2, r7
 8009086:	f000 fc45 	bl	8009914 <__lshift>
 800908a:	1bed      	subs	r5, r5, r7
 800908c:	4604      	mov	r4, r0
 800908e:	f100 0914 	add.w	r9, r0, #20
 8009092:	f04f 0a00 	mov.w	sl, #0
 8009096:	e7ae      	b.n	8008ff6 <__gethex+0x202>
 8009098:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800909c:	42a8      	cmp	r0, r5
 800909e:	dd72      	ble.n	8009186 <__gethex+0x392>
 80090a0:	1b45      	subs	r5, r0, r5
 80090a2:	42ae      	cmp	r6, r5
 80090a4:	dc36      	bgt.n	8009114 <__gethex+0x320>
 80090a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d02a      	beq.n	8009104 <__gethex+0x310>
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d02c      	beq.n	800910c <__gethex+0x318>
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d11c      	bne.n	80090f0 <__gethex+0x2fc>
 80090b6:	42ae      	cmp	r6, r5
 80090b8:	d11a      	bne.n	80090f0 <__gethex+0x2fc>
 80090ba:	2e01      	cmp	r6, #1
 80090bc:	d112      	bne.n	80090e4 <__gethex+0x2f0>
 80090be:	9a04      	ldr	r2, [sp, #16]
 80090c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	2301      	movs	r3, #1
 80090c8:	6123      	str	r3, [r4, #16]
 80090ca:	f8c9 3000 	str.w	r3, [r9]
 80090ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090d0:	2762      	movs	r7, #98	; 0x62
 80090d2:	601c      	str	r4, [r3, #0]
 80090d4:	e723      	b.n	8008f1e <__gethex+0x12a>
 80090d6:	bf00      	nop
 80090d8:	0800b168 	.word	0x0800b168
 80090dc:	0800b0f0 	.word	0x0800b0f0
 80090e0:	0800b101 	.word	0x0800b101
 80090e4:	1e71      	subs	r1, r6, #1
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 fe58 	bl	8009d9c <__any_on>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d1e6      	bne.n	80090be <__gethex+0x2ca>
 80090f0:	ee18 0a10 	vmov	r0, s16
 80090f4:	4621      	mov	r1, r4
 80090f6:	f000 f9f1 	bl	80094dc <_Bfree>
 80090fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090fc:	2300      	movs	r3, #0
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	2750      	movs	r7, #80	; 0x50
 8009102:	e70c      	b.n	8008f1e <__gethex+0x12a>
 8009104:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1f2      	bne.n	80090f0 <__gethex+0x2fc>
 800910a:	e7d8      	b.n	80090be <__gethex+0x2ca>
 800910c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1d5      	bne.n	80090be <__gethex+0x2ca>
 8009112:	e7ed      	b.n	80090f0 <__gethex+0x2fc>
 8009114:	1e6f      	subs	r7, r5, #1
 8009116:	f1ba 0f00 	cmp.w	sl, #0
 800911a:	d131      	bne.n	8009180 <__gethex+0x38c>
 800911c:	b127      	cbz	r7, 8009128 <__gethex+0x334>
 800911e:	4639      	mov	r1, r7
 8009120:	4620      	mov	r0, r4
 8009122:	f000 fe3b 	bl	8009d9c <__any_on>
 8009126:	4682      	mov	sl, r0
 8009128:	117b      	asrs	r3, r7, #5
 800912a:	2101      	movs	r1, #1
 800912c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009130:	f007 071f 	and.w	r7, r7, #31
 8009134:	fa01 f707 	lsl.w	r7, r1, r7
 8009138:	421f      	tst	r7, r3
 800913a:	4629      	mov	r1, r5
 800913c:	4620      	mov	r0, r4
 800913e:	bf18      	it	ne
 8009140:	f04a 0a02 	orrne.w	sl, sl, #2
 8009144:	1b76      	subs	r6, r6, r5
 8009146:	f7ff fded 	bl	8008d24 <rshift>
 800914a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800914e:	2702      	movs	r7, #2
 8009150:	f1ba 0f00 	cmp.w	sl, #0
 8009154:	d048      	beq.n	80091e8 <__gethex+0x3f4>
 8009156:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800915a:	2b02      	cmp	r3, #2
 800915c:	d015      	beq.n	800918a <__gethex+0x396>
 800915e:	2b03      	cmp	r3, #3
 8009160:	d017      	beq.n	8009192 <__gethex+0x39e>
 8009162:	2b01      	cmp	r3, #1
 8009164:	d109      	bne.n	800917a <__gethex+0x386>
 8009166:	f01a 0f02 	tst.w	sl, #2
 800916a:	d006      	beq.n	800917a <__gethex+0x386>
 800916c:	f8d9 0000 	ldr.w	r0, [r9]
 8009170:	ea4a 0a00 	orr.w	sl, sl, r0
 8009174:	f01a 0f01 	tst.w	sl, #1
 8009178:	d10e      	bne.n	8009198 <__gethex+0x3a4>
 800917a:	f047 0710 	orr.w	r7, r7, #16
 800917e:	e033      	b.n	80091e8 <__gethex+0x3f4>
 8009180:	f04f 0a01 	mov.w	sl, #1
 8009184:	e7d0      	b.n	8009128 <__gethex+0x334>
 8009186:	2701      	movs	r7, #1
 8009188:	e7e2      	b.n	8009150 <__gethex+0x35c>
 800918a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800918c:	f1c3 0301 	rsb	r3, r3, #1
 8009190:	9315      	str	r3, [sp, #84]	; 0x54
 8009192:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009194:	2b00      	cmp	r3, #0
 8009196:	d0f0      	beq.n	800917a <__gethex+0x386>
 8009198:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800919c:	f104 0314 	add.w	r3, r4, #20
 80091a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80091a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80091a8:	f04f 0c00 	mov.w	ip, #0
 80091ac:	4618      	mov	r0, r3
 80091ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80091b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091b6:	d01c      	beq.n	80091f2 <__gethex+0x3fe>
 80091b8:	3201      	adds	r2, #1
 80091ba:	6002      	str	r2, [r0, #0]
 80091bc:	2f02      	cmp	r7, #2
 80091be:	f104 0314 	add.w	r3, r4, #20
 80091c2:	d13f      	bne.n	8009244 <__gethex+0x450>
 80091c4:	f8d8 2000 	ldr.w	r2, [r8]
 80091c8:	3a01      	subs	r2, #1
 80091ca:	42b2      	cmp	r2, r6
 80091cc:	d10a      	bne.n	80091e4 <__gethex+0x3f0>
 80091ce:	1171      	asrs	r1, r6, #5
 80091d0:	2201      	movs	r2, #1
 80091d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091d6:	f006 061f 	and.w	r6, r6, #31
 80091da:	fa02 f606 	lsl.w	r6, r2, r6
 80091de:	421e      	tst	r6, r3
 80091e0:	bf18      	it	ne
 80091e2:	4617      	movne	r7, r2
 80091e4:	f047 0720 	orr.w	r7, r7, #32
 80091e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091ea:	601c      	str	r4, [r3, #0]
 80091ec:	9b04      	ldr	r3, [sp, #16]
 80091ee:	601d      	str	r5, [r3, #0]
 80091f0:	e695      	b.n	8008f1e <__gethex+0x12a>
 80091f2:	4299      	cmp	r1, r3
 80091f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80091f8:	d8d8      	bhi.n	80091ac <__gethex+0x3b8>
 80091fa:	68a3      	ldr	r3, [r4, #8]
 80091fc:	459b      	cmp	fp, r3
 80091fe:	db19      	blt.n	8009234 <__gethex+0x440>
 8009200:	6861      	ldr	r1, [r4, #4]
 8009202:	ee18 0a10 	vmov	r0, s16
 8009206:	3101      	adds	r1, #1
 8009208:	f000 f928 	bl	800945c <_Balloc>
 800920c:	4681      	mov	r9, r0
 800920e:	b918      	cbnz	r0, 8009218 <__gethex+0x424>
 8009210:	4b1a      	ldr	r3, [pc, #104]	; (800927c <__gethex+0x488>)
 8009212:	4602      	mov	r2, r0
 8009214:	2184      	movs	r1, #132	; 0x84
 8009216:	e6a8      	b.n	8008f6a <__gethex+0x176>
 8009218:	6922      	ldr	r2, [r4, #16]
 800921a:	3202      	adds	r2, #2
 800921c:	f104 010c 	add.w	r1, r4, #12
 8009220:	0092      	lsls	r2, r2, #2
 8009222:	300c      	adds	r0, #12
 8009224:	f000 f90c 	bl	8009440 <memcpy>
 8009228:	4621      	mov	r1, r4
 800922a:	ee18 0a10 	vmov	r0, s16
 800922e:	f000 f955 	bl	80094dc <_Bfree>
 8009232:	464c      	mov	r4, r9
 8009234:	6923      	ldr	r3, [r4, #16]
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800923c:	6122      	str	r2, [r4, #16]
 800923e:	2201      	movs	r2, #1
 8009240:	615a      	str	r2, [r3, #20]
 8009242:	e7bb      	b.n	80091bc <__gethex+0x3c8>
 8009244:	6922      	ldr	r2, [r4, #16]
 8009246:	455a      	cmp	r2, fp
 8009248:	dd0b      	ble.n	8009262 <__gethex+0x46e>
 800924a:	2101      	movs	r1, #1
 800924c:	4620      	mov	r0, r4
 800924e:	f7ff fd69 	bl	8008d24 <rshift>
 8009252:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009256:	3501      	adds	r5, #1
 8009258:	42ab      	cmp	r3, r5
 800925a:	f6ff aed0 	blt.w	8008ffe <__gethex+0x20a>
 800925e:	2701      	movs	r7, #1
 8009260:	e7c0      	b.n	80091e4 <__gethex+0x3f0>
 8009262:	f016 061f 	ands.w	r6, r6, #31
 8009266:	d0fa      	beq.n	800925e <__gethex+0x46a>
 8009268:	4453      	add	r3, sl
 800926a:	f1c6 0620 	rsb	r6, r6, #32
 800926e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009272:	f000 f9e5 	bl	8009640 <__hi0bits>
 8009276:	42b0      	cmp	r0, r6
 8009278:	dbe7      	blt.n	800924a <__gethex+0x456>
 800927a:	e7f0      	b.n	800925e <__gethex+0x46a>
 800927c:	0800b0f0 	.word	0x0800b0f0

08009280 <L_shift>:
 8009280:	f1c2 0208 	rsb	r2, r2, #8
 8009284:	0092      	lsls	r2, r2, #2
 8009286:	b570      	push	{r4, r5, r6, lr}
 8009288:	f1c2 0620 	rsb	r6, r2, #32
 800928c:	6843      	ldr	r3, [r0, #4]
 800928e:	6804      	ldr	r4, [r0, #0]
 8009290:	fa03 f506 	lsl.w	r5, r3, r6
 8009294:	432c      	orrs	r4, r5
 8009296:	40d3      	lsrs	r3, r2
 8009298:	6004      	str	r4, [r0, #0]
 800929a:	f840 3f04 	str.w	r3, [r0, #4]!
 800929e:	4288      	cmp	r0, r1
 80092a0:	d3f4      	bcc.n	800928c <L_shift+0xc>
 80092a2:	bd70      	pop	{r4, r5, r6, pc}

080092a4 <__match>:
 80092a4:	b530      	push	{r4, r5, lr}
 80092a6:	6803      	ldr	r3, [r0, #0]
 80092a8:	3301      	adds	r3, #1
 80092aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ae:	b914      	cbnz	r4, 80092b6 <__match+0x12>
 80092b0:	6003      	str	r3, [r0, #0]
 80092b2:	2001      	movs	r0, #1
 80092b4:	bd30      	pop	{r4, r5, pc}
 80092b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80092be:	2d19      	cmp	r5, #25
 80092c0:	bf98      	it	ls
 80092c2:	3220      	addls	r2, #32
 80092c4:	42a2      	cmp	r2, r4
 80092c6:	d0f0      	beq.n	80092aa <__match+0x6>
 80092c8:	2000      	movs	r0, #0
 80092ca:	e7f3      	b.n	80092b4 <__match+0x10>

080092cc <__hexnan>:
 80092cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d0:	680b      	ldr	r3, [r1, #0]
 80092d2:	115e      	asrs	r6, r3, #5
 80092d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80092d8:	f013 031f 	ands.w	r3, r3, #31
 80092dc:	b087      	sub	sp, #28
 80092de:	bf18      	it	ne
 80092e0:	3604      	addne	r6, #4
 80092e2:	2500      	movs	r5, #0
 80092e4:	1f37      	subs	r7, r6, #4
 80092e6:	4690      	mov	r8, r2
 80092e8:	6802      	ldr	r2, [r0, #0]
 80092ea:	9301      	str	r3, [sp, #4]
 80092ec:	4682      	mov	sl, r0
 80092ee:	f846 5c04 	str.w	r5, [r6, #-4]
 80092f2:	46b9      	mov	r9, r7
 80092f4:	463c      	mov	r4, r7
 80092f6:	9502      	str	r5, [sp, #8]
 80092f8:	46ab      	mov	fp, r5
 80092fa:	7851      	ldrb	r1, [r2, #1]
 80092fc:	1c53      	adds	r3, r2, #1
 80092fe:	9303      	str	r3, [sp, #12]
 8009300:	b341      	cbz	r1, 8009354 <__hexnan+0x88>
 8009302:	4608      	mov	r0, r1
 8009304:	9205      	str	r2, [sp, #20]
 8009306:	9104      	str	r1, [sp, #16]
 8009308:	f7ff fd5e 	bl	8008dc8 <__hexdig_fun>
 800930c:	2800      	cmp	r0, #0
 800930e:	d14f      	bne.n	80093b0 <__hexnan+0xe4>
 8009310:	9904      	ldr	r1, [sp, #16]
 8009312:	9a05      	ldr	r2, [sp, #20]
 8009314:	2920      	cmp	r1, #32
 8009316:	d818      	bhi.n	800934a <__hexnan+0x7e>
 8009318:	9b02      	ldr	r3, [sp, #8]
 800931a:	459b      	cmp	fp, r3
 800931c:	dd13      	ble.n	8009346 <__hexnan+0x7a>
 800931e:	454c      	cmp	r4, r9
 8009320:	d206      	bcs.n	8009330 <__hexnan+0x64>
 8009322:	2d07      	cmp	r5, #7
 8009324:	dc04      	bgt.n	8009330 <__hexnan+0x64>
 8009326:	462a      	mov	r2, r5
 8009328:	4649      	mov	r1, r9
 800932a:	4620      	mov	r0, r4
 800932c:	f7ff ffa8 	bl	8009280 <L_shift>
 8009330:	4544      	cmp	r4, r8
 8009332:	d950      	bls.n	80093d6 <__hexnan+0x10a>
 8009334:	2300      	movs	r3, #0
 8009336:	f1a4 0904 	sub.w	r9, r4, #4
 800933a:	f844 3c04 	str.w	r3, [r4, #-4]
 800933e:	f8cd b008 	str.w	fp, [sp, #8]
 8009342:	464c      	mov	r4, r9
 8009344:	461d      	mov	r5, r3
 8009346:	9a03      	ldr	r2, [sp, #12]
 8009348:	e7d7      	b.n	80092fa <__hexnan+0x2e>
 800934a:	2929      	cmp	r1, #41	; 0x29
 800934c:	d156      	bne.n	80093fc <__hexnan+0x130>
 800934e:	3202      	adds	r2, #2
 8009350:	f8ca 2000 	str.w	r2, [sl]
 8009354:	f1bb 0f00 	cmp.w	fp, #0
 8009358:	d050      	beq.n	80093fc <__hexnan+0x130>
 800935a:	454c      	cmp	r4, r9
 800935c:	d206      	bcs.n	800936c <__hexnan+0xa0>
 800935e:	2d07      	cmp	r5, #7
 8009360:	dc04      	bgt.n	800936c <__hexnan+0xa0>
 8009362:	462a      	mov	r2, r5
 8009364:	4649      	mov	r1, r9
 8009366:	4620      	mov	r0, r4
 8009368:	f7ff ff8a 	bl	8009280 <L_shift>
 800936c:	4544      	cmp	r4, r8
 800936e:	d934      	bls.n	80093da <__hexnan+0x10e>
 8009370:	f1a8 0204 	sub.w	r2, r8, #4
 8009374:	4623      	mov	r3, r4
 8009376:	f853 1b04 	ldr.w	r1, [r3], #4
 800937a:	f842 1f04 	str.w	r1, [r2, #4]!
 800937e:	429f      	cmp	r7, r3
 8009380:	d2f9      	bcs.n	8009376 <__hexnan+0xaa>
 8009382:	1b3b      	subs	r3, r7, r4
 8009384:	f023 0303 	bic.w	r3, r3, #3
 8009388:	3304      	adds	r3, #4
 800938a:	3401      	adds	r4, #1
 800938c:	3e03      	subs	r6, #3
 800938e:	42b4      	cmp	r4, r6
 8009390:	bf88      	it	hi
 8009392:	2304      	movhi	r3, #4
 8009394:	4443      	add	r3, r8
 8009396:	2200      	movs	r2, #0
 8009398:	f843 2b04 	str.w	r2, [r3], #4
 800939c:	429f      	cmp	r7, r3
 800939e:	d2fb      	bcs.n	8009398 <__hexnan+0xcc>
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	b91b      	cbnz	r3, 80093ac <__hexnan+0xe0>
 80093a4:	4547      	cmp	r7, r8
 80093a6:	d127      	bne.n	80093f8 <__hexnan+0x12c>
 80093a8:	2301      	movs	r3, #1
 80093aa:	603b      	str	r3, [r7, #0]
 80093ac:	2005      	movs	r0, #5
 80093ae:	e026      	b.n	80093fe <__hexnan+0x132>
 80093b0:	3501      	adds	r5, #1
 80093b2:	2d08      	cmp	r5, #8
 80093b4:	f10b 0b01 	add.w	fp, fp, #1
 80093b8:	dd06      	ble.n	80093c8 <__hexnan+0xfc>
 80093ba:	4544      	cmp	r4, r8
 80093bc:	d9c3      	bls.n	8009346 <__hexnan+0x7a>
 80093be:	2300      	movs	r3, #0
 80093c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80093c4:	2501      	movs	r5, #1
 80093c6:	3c04      	subs	r4, #4
 80093c8:	6822      	ldr	r2, [r4, #0]
 80093ca:	f000 000f 	and.w	r0, r0, #15
 80093ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80093d2:	6022      	str	r2, [r4, #0]
 80093d4:	e7b7      	b.n	8009346 <__hexnan+0x7a>
 80093d6:	2508      	movs	r5, #8
 80093d8:	e7b5      	b.n	8009346 <__hexnan+0x7a>
 80093da:	9b01      	ldr	r3, [sp, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d0df      	beq.n	80093a0 <__hexnan+0xd4>
 80093e0:	f04f 32ff 	mov.w	r2, #4294967295
 80093e4:	f1c3 0320 	rsb	r3, r3, #32
 80093e8:	fa22 f303 	lsr.w	r3, r2, r3
 80093ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80093f0:	401a      	ands	r2, r3
 80093f2:	f846 2c04 	str.w	r2, [r6, #-4]
 80093f6:	e7d3      	b.n	80093a0 <__hexnan+0xd4>
 80093f8:	3f04      	subs	r7, #4
 80093fa:	e7d1      	b.n	80093a0 <__hexnan+0xd4>
 80093fc:	2004      	movs	r0, #4
 80093fe:	b007      	add	sp, #28
 8009400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009404 <_localeconv_r>:
 8009404:	4800      	ldr	r0, [pc, #0]	; (8009408 <_localeconv_r+0x4>)
 8009406:	4770      	bx	lr
 8009408:	20000194 	.word	0x20000194

0800940c <malloc>:
 800940c:	4b02      	ldr	r3, [pc, #8]	; (8009418 <malloc+0xc>)
 800940e:	4601      	mov	r1, r0
 8009410:	6818      	ldr	r0, [r3, #0]
 8009412:	f000 bd67 	b.w	8009ee4 <_malloc_r>
 8009416:	bf00      	nop
 8009418:	2000003c 	.word	0x2000003c

0800941c <__ascii_mbtowc>:
 800941c:	b082      	sub	sp, #8
 800941e:	b901      	cbnz	r1, 8009422 <__ascii_mbtowc+0x6>
 8009420:	a901      	add	r1, sp, #4
 8009422:	b142      	cbz	r2, 8009436 <__ascii_mbtowc+0x1a>
 8009424:	b14b      	cbz	r3, 800943a <__ascii_mbtowc+0x1e>
 8009426:	7813      	ldrb	r3, [r2, #0]
 8009428:	600b      	str	r3, [r1, #0]
 800942a:	7812      	ldrb	r2, [r2, #0]
 800942c:	1e10      	subs	r0, r2, #0
 800942e:	bf18      	it	ne
 8009430:	2001      	movne	r0, #1
 8009432:	b002      	add	sp, #8
 8009434:	4770      	bx	lr
 8009436:	4610      	mov	r0, r2
 8009438:	e7fb      	b.n	8009432 <__ascii_mbtowc+0x16>
 800943a:	f06f 0001 	mvn.w	r0, #1
 800943e:	e7f8      	b.n	8009432 <__ascii_mbtowc+0x16>

08009440 <memcpy>:
 8009440:	440a      	add	r2, r1
 8009442:	4291      	cmp	r1, r2
 8009444:	f100 33ff 	add.w	r3, r0, #4294967295
 8009448:	d100      	bne.n	800944c <memcpy+0xc>
 800944a:	4770      	bx	lr
 800944c:	b510      	push	{r4, lr}
 800944e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009452:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009456:	4291      	cmp	r1, r2
 8009458:	d1f9      	bne.n	800944e <memcpy+0xe>
 800945a:	bd10      	pop	{r4, pc}

0800945c <_Balloc>:
 800945c:	b570      	push	{r4, r5, r6, lr}
 800945e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009460:	4604      	mov	r4, r0
 8009462:	460d      	mov	r5, r1
 8009464:	b976      	cbnz	r6, 8009484 <_Balloc+0x28>
 8009466:	2010      	movs	r0, #16
 8009468:	f7ff ffd0 	bl	800940c <malloc>
 800946c:	4602      	mov	r2, r0
 800946e:	6260      	str	r0, [r4, #36]	; 0x24
 8009470:	b920      	cbnz	r0, 800947c <_Balloc+0x20>
 8009472:	4b18      	ldr	r3, [pc, #96]	; (80094d4 <_Balloc+0x78>)
 8009474:	4818      	ldr	r0, [pc, #96]	; (80094d8 <_Balloc+0x7c>)
 8009476:	2166      	movs	r1, #102	; 0x66
 8009478:	f000 ff40 	bl	800a2fc <__assert_func>
 800947c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009480:	6006      	str	r6, [r0, #0]
 8009482:	60c6      	str	r6, [r0, #12]
 8009484:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009486:	68f3      	ldr	r3, [r6, #12]
 8009488:	b183      	cbz	r3, 80094ac <_Balloc+0x50>
 800948a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009492:	b9b8      	cbnz	r0, 80094c4 <_Balloc+0x68>
 8009494:	2101      	movs	r1, #1
 8009496:	fa01 f605 	lsl.w	r6, r1, r5
 800949a:	1d72      	adds	r2, r6, #5
 800949c:	0092      	lsls	r2, r2, #2
 800949e:	4620      	mov	r0, r4
 80094a0:	f000 fc9d 	bl	8009dde <_calloc_r>
 80094a4:	b160      	cbz	r0, 80094c0 <_Balloc+0x64>
 80094a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094aa:	e00e      	b.n	80094ca <_Balloc+0x6e>
 80094ac:	2221      	movs	r2, #33	; 0x21
 80094ae:	2104      	movs	r1, #4
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 fc94 	bl	8009dde <_calloc_r>
 80094b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094b8:	60f0      	str	r0, [r6, #12]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1e4      	bne.n	800948a <_Balloc+0x2e>
 80094c0:	2000      	movs	r0, #0
 80094c2:	bd70      	pop	{r4, r5, r6, pc}
 80094c4:	6802      	ldr	r2, [r0, #0]
 80094c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80094ca:	2300      	movs	r3, #0
 80094cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094d0:	e7f7      	b.n	80094c2 <_Balloc+0x66>
 80094d2:	bf00      	nop
 80094d4:	0800b07e 	.word	0x0800b07e
 80094d8:	0800b17c 	.word	0x0800b17c

080094dc <_Bfree>:
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094e0:	4605      	mov	r5, r0
 80094e2:	460c      	mov	r4, r1
 80094e4:	b976      	cbnz	r6, 8009504 <_Bfree+0x28>
 80094e6:	2010      	movs	r0, #16
 80094e8:	f7ff ff90 	bl	800940c <malloc>
 80094ec:	4602      	mov	r2, r0
 80094ee:	6268      	str	r0, [r5, #36]	; 0x24
 80094f0:	b920      	cbnz	r0, 80094fc <_Bfree+0x20>
 80094f2:	4b09      	ldr	r3, [pc, #36]	; (8009518 <_Bfree+0x3c>)
 80094f4:	4809      	ldr	r0, [pc, #36]	; (800951c <_Bfree+0x40>)
 80094f6:	218a      	movs	r1, #138	; 0x8a
 80094f8:	f000 ff00 	bl	800a2fc <__assert_func>
 80094fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009500:	6006      	str	r6, [r0, #0]
 8009502:	60c6      	str	r6, [r0, #12]
 8009504:	b13c      	cbz	r4, 8009516 <_Bfree+0x3a>
 8009506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009508:	6862      	ldr	r2, [r4, #4]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009510:	6021      	str	r1, [r4, #0]
 8009512:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009516:	bd70      	pop	{r4, r5, r6, pc}
 8009518:	0800b07e 	.word	0x0800b07e
 800951c:	0800b17c 	.word	0x0800b17c

08009520 <__multadd>:
 8009520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009524:	690d      	ldr	r5, [r1, #16]
 8009526:	4607      	mov	r7, r0
 8009528:	460c      	mov	r4, r1
 800952a:	461e      	mov	r6, r3
 800952c:	f101 0c14 	add.w	ip, r1, #20
 8009530:	2000      	movs	r0, #0
 8009532:	f8dc 3000 	ldr.w	r3, [ip]
 8009536:	b299      	uxth	r1, r3
 8009538:	fb02 6101 	mla	r1, r2, r1, r6
 800953c:	0c1e      	lsrs	r6, r3, #16
 800953e:	0c0b      	lsrs	r3, r1, #16
 8009540:	fb02 3306 	mla	r3, r2, r6, r3
 8009544:	b289      	uxth	r1, r1
 8009546:	3001      	adds	r0, #1
 8009548:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800954c:	4285      	cmp	r5, r0
 800954e:	f84c 1b04 	str.w	r1, [ip], #4
 8009552:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009556:	dcec      	bgt.n	8009532 <__multadd+0x12>
 8009558:	b30e      	cbz	r6, 800959e <__multadd+0x7e>
 800955a:	68a3      	ldr	r3, [r4, #8]
 800955c:	42ab      	cmp	r3, r5
 800955e:	dc19      	bgt.n	8009594 <__multadd+0x74>
 8009560:	6861      	ldr	r1, [r4, #4]
 8009562:	4638      	mov	r0, r7
 8009564:	3101      	adds	r1, #1
 8009566:	f7ff ff79 	bl	800945c <_Balloc>
 800956a:	4680      	mov	r8, r0
 800956c:	b928      	cbnz	r0, 800957a <__multadd+0x5a>
 800956e:	4602      	mov	r2, r0
 8009570:	4b0c      	ldr	r3, [pc, #48]	; (80095a4 <__multadd+0x84>)
 8009572:	480d      	ldr	r0, [pc, #52]	; (80095a8 <__multadd+0x88>)
 8009574:	21b5      	movs	r1, #181	; 0xb5
 8009576:	f000 fec1 	bl	800a2fc <__assert_func>
 800957a:	6922      	ldr	r2, [r4, #16]
 800957c:	3202      	adds	r2, #2
 800957e:	f104 010c 	add.w	r1, r4, #12
 8009582:	0092      	lsls	r2, r2, #2
 8009584:	300c      	adds	r0, #12
 8009586:	f7ff ff5b 	bl	8009440 <memcpy>
 800958a:	4621      	mov	r1, r4
 800958c:	4638      	mov	r0, r7
 800958e:	f7ff ffa5 	bl	80094dc <_Bfree>
 8009592:	4644      	mov	r4, r8
 8009594:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009598:	3501      	adds	r5, #1
 800959a:	615e      	str	r6, [r3, #20]
 800959c:	6125      	str	r5, [r4, #16]
 800959e:	4620      	mov	r0, r4
 80095a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a4:	0800b0f0 	.word	0x0800b0f0
 80095a8:	0800b17c 	.word	0x0800b17c

080095ac <__s2b>:
 80095ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b0:	460c      	mov	r4, r1
 80095b2:	4615      	mov	r5, r2
 80095b4:	461f      	mov	r7, r3
 80095b6:	2209      	movs	r2, #9
 80095b8:	3308      	adds	r3, #8
 80095ba:	4606      	mov	r6, r0
 80095bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80095c0:	2100      	movs	r1, #0
 80095c2:	2201      	movs	r2, #1
 80095c4:	429a      	cmp	r2, r3
 80095c6:	db09      	blt.n	80095dc <__s2b+0x30>
 80095c8:	4630      	mov	r0, r6
 80095ca:	f7ff ff47 	bl	800945c <_Balloc>
 80095ce:	b940      	cbnz	r0, 80095e2 <__s2b+0x36>
 80095d0:	4602      	mov	r2, r0
 80095d2:	4b19      	ldr	r3, [pc, #100]	; (8009638 <__s2b+0x8c>)
 80095d4:	4819      	ldr	r0, [pc, #100]	; (800963c <__s2b+0x90>)
 80095d6:	21ce      	movs	r1, #206	; 0xce
 80095d8:	f000 fe90 	bl	800a2fc <__assert_func>
 80095dc:	0052      	lsls	r2, r2, #1
 80095de:	3101      	adds	r1, #1
 80095e0:	e7f0      	b.n	80095c4 <__s2b+0x18>
 80095e2:	9b08      	ldr	r3, [sp, #32]
 80095e4:	6143      	str	r3, [r0, #20]
 80095e6:	2d09      	cmp	r5, #9
 80095e8:	f04f 0301 	mov.w	r3, #1
 80095ec:	6103      	str	r3, [r0, #16]
 80095ee:	dd16      	ble.n	800961e <__s2b+0x72>
 80095f0:	f104 0909 	add.w	r9, r4, #9
 80095f4:	46c8      	mov	r8, r9
 80095f6:	442c      	add	r4, r5
 80095f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095fc:	4601      	mov	r1, r0
 80095fe:	3b30      	subs	r3, #48	; 0x30
 8009600:	220a      	movs	r2, #10
 8009602:	4630      	mov	r0, r6
 8009604:	f7ff ff8c 	bl	8009520 <__multadd>
 8009608:	45a0      	cmp	r8, r4
 800960a:	d1f5      	bne.n	80095f8 <__s2b+0x4c>
 800960c:	f1a5 0408 	sub.w	r4, r5, #8
 8009610:	444c      	add	r4, r9
 8009612:	1b2d      	subs	r5, r5, r4
 8009614:	1963      	adds	r3, r4, r5
 8009616:	42bb      	cmp	r3, r7
 8009618:	db04      	blt.n	8009624 <__s2b+0x78>
 800961a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800961e:	340a      	adds	r4, #10
 8009620:	2509      	movs	r5, #9
 8009622:	e7f6      	b.n	8009612 <__s2b+0x66>
 8009624:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009628:	4601      	mov	r1, r0
 800962a:	3b30      	subs	r3, #48	; 0x30
 800962c:	220a      	movs	r2, #10
 800962e:	4630      	mov	r0, r6
 8009630:	f7ff ff76 	bl	8009520 <__multadd>
 8009634:	e7ee      	b.n	8009614 <__s2b+0x68>
 8009636:	bf00      	nop
 8009638:	0800b0f0 	.word	0x0800b0f0
 800963c:	0800b17c 	.word	0x0800b17c

08009640 <__hi0bits>:
 8009640:	0c03      	lsrs	r3, r0, #16
 8009642:	041b      	lsls	r3, r3, #16
 8009644:	b9d3      	cbnz	r3, 800967c <__hi0bits+0x3c>
 8009646:	0400      	lsls	r0, r0, #16
 8009648:	2310      	movs	r3, #16
 800964a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800964e:	bf04      	itt	eq
 8009650:	0200      	lsleq	r0, r0, #8
 8009652:	3308      	addeq	r3, #8
 8009654:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009658:	bf04      	itt	eq
 800965a:	0100      	lsleq	r0, r0, #4
 800965c:	3304      	addeq	r3, #4
 800965e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009662:	bf04      	itt	eq
 8009664:	0080      	lsleq	r0, r0, #2
 8009666:	3302      	addeq	r3, #2
 8009668:	2800      	cmp	r0, #0
 800966a:	db05      	blt.n	8009678 <__hi0bits+0x38>
 800966c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009670:	f103 0301 	add.w	r3, r3, #1
 8009674:	bf08      	it	eq
 8009676:	2320      	moveq	r3, #32
 8009678:	4618      	mov	r0, r3
 800967a:	4770      	bx	lr
 800967c:	2300      	movs	r3, #0
 800967e:	e7e4      	b.n	800964a <__hi0bits+0xa>

08009680 <__lo0bits>:
 8009680:	6803      	ldr	r3, [r0, #0]
 8009682:	f013 0207 	ands.w	r2, r3, #7
 8009686:	4601      	mov	r1, r0
 8009688:	d00b      	beq.n	80096a2 <__lo0bits+0x22>
 800968a:	07da      	lsls	r2, r3, #31
 800968c:	d423      	bmi.n	80096d6 <__lo0bits+0x56>
 800968e:	0798      	lsls	r0, r3, #30
 8009690:	bf49      	itett	mi
 8009692:	085b      	lsrmi	r3, r3, #1
 8009694:	089b      	lsrpl	r3, r3, #2
 8009696:	2001      	movmi	r0, #1
 8009698:	600b      	strmi	r3, [r1, #0]
 800969a:	bf5c      	itt	pl
 800969c:	600b      	strpl	r3, [r1, #0]
 800969e:	2002      	movpl	r0, #2
 80096a0:	4770      	bx	lr
 80096a2:	b298      	uxth	r0, r3
 80096a4:	b9a8      	cbnz	r0, 80096d2 <__lo0bits+0x52>
 80096a6:	0c1b      	lsrs	r3, r3, #16
 80096a8:	2010      	movs	r0, #16
 80096aa:	b2da      	uxtb	r2, r3
 80096ac:	b90a      	cbnz	r2, 80096b2 <__lo0bits+0x32>
 80096ae:	3008      	adds	r0, #8
 80096b0:	0a1b      	lsrs	r3, r3, #8
 80096b2:	071a      	lsls	r2, r3, #28
 80096b4:	bf04      	itt	eq
 80096b6:	091b      	lsreq	r3, r3, #4
 80096b8:	3004      	addeq	r0, #4
 80096ba:	079a      	lsls	r2, r3, #30
 80096bc:	bf04      	itt	eq
 80096be:	089b      	lsreq	r3, r3, #2
 80096c0:	3002      	addeq	r0, #2
 80096c2:	07da      	lsls	r2, r3, #31
 80096c4:	d403      	bmi.n	80096ce <__lo0bits+0x4e>
 80096c6:	085b      	lsrs	r3, r3, #1
 80096c8:	f100 0001 	add.w	r0, r0, #1
 80096cc:	d005      	beq.n	80096da <__lo0bits+0x5a>
 80096ce:	600b      	str	r3, [r1, #0]
 80096d0:	4770      	bx	lr
 80096d2:	4610      	mov	r0, r2
 80096d4:	e7e9      	b.n	80096aa <__lo0bits+0x2a>
 80096d6:	2000      	movs	r0, #0
 80096d8:	4770      	bx	lr
 80096da:	2020      	movs	r0, #32
 80096dc:	4770      	bx	lr
	...

080096e0 <__i2b>:
 80096e0:	b510      	push	{r4, lr}
 80096e2:	460c      	mov	r4, r1
 80096e4:	2101      	movs	r1, #1
 80096e6:	f7ff feb9 	bl	800945c <_Balloc>
 80096ea:	4602      	mov	r2, r0
 80096ec:	b928      	cbnz	r0, 80096fa <__i2b+0x1a>
 80096ee:	4b05      	ldr	r3, [pc, #20]	; (8009704 <__i2b+0x24>)
 80096f0:	4805      	ldr	r0, [pc, #20]	; (8009708 <__i2b+0x28>)
 80096f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096f6:	f000 fe01 	bl	800a2fc <__assert_func>
 80096fa:	2301      	movs	r3, #1
 80096fc:	6144      	str	r4, [r0, #20]
 80096fe:	6103      	str	r3, [r0, #16]
 8009700:	bd10      	pop	{r4, pc}
 8009702:	bf00      	nop
 8009704:	0800b0f0 	.word	0x0800b0f0
 8009708:	0800b17c 	.word	0x0800b17c

0800970c <__multiply>:
 800970c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009710:	4691      	mov	r9, r2
 8009712:	690a      	ldr	r2, [r1, #16]
 8009714:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009718:	429a      	cmp	r2, r3
 800971a:	bfb8      	it	lt
 800971c:	460b      	movlt	r3, r1
 800971e:	460c      	mov	r4, r1
 8009720:	bfbc      	itt	lt
 8009722:	464c      	movlt	r4, r9
 8009724:	4699      	movlt	r9, r3
 8009726:	6927      	ldr	r7, [r4, #16]
 8009728:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800972c:	68a3      	ldr	r3, [r4, #8]
 800972e:	6861      	ldr	r1, [r4, #4]
 8009730:	eb07 060a 	add.w	r6, r7, sl
 8009734:	42b3      	cmp	r3, r6
 8009736:	b085      	sub	sp, #20
 8009738:	bfb8      	it	lt
 800973a:	3101      	addlt	r1, #1
 800973c:	f7ff fe8e 	bl	800945c <_Balloc>
 8009740:	b930      	cbnz	r0, 8009750 <__multiply+0x44>
 8009742:	4602      	mov	r2, r0
 8009744:	4b44      	ldr	r3, [pc, #272]	; (8009858 <__multiply+0x14c>)
 8009746:	4845      	ldr	r0, [pc, #276]	; (800985c <__multiply+0x150>)
 8009748:	f240 115d 	movw	r1, #349	; 0x15d
 800974c:	f000 fdd6 	bl	800a2fc <__assert_func>
 8009750:	f100 0514 	add.w	r5, r0, #20
 8009754:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009758:	462b      	mov	r3, r5
 800975a:	2200      	movs	r2, #0
 800975c:	4543      	cmp	r3, r8
 800975e:	d321      	bcc.n	80097a4 <__multiply+0x98>
 8009760:	f104 0314 	add.w	r3, r4, #20
 8009764:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009768:	f109 0314 	add.w	r3, r9, #20
 800976c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009770:	9202      	str	r2, [sp, #8]
 8009772:	1b3a      	subs	r2, r7, r4
 8009774:	3a15      	subs	r2, #21
 8009776:	f022 0203 	bic.w	r2, r2, #3
 800977a:	3204      	adds	r2, #4
 800977c:	f104 0115 	add.w	r1, r4, #21
 8009780:	428f      	cmp	r7, r1
 8009782:	bf38      	it	cc
 8009784:	2204      	movcc	r2, #4
 8009786:	9201      	str	r2, [sp, #4]
 8009788:	9a02      	ldr	r2, [sp, #8]
 800978a:	9303      	str	r3, [sp, #12]
 800978c:	429a      	cmp	r2, r3
 800978e:	d80c      	bhi.n	80097aa <__multiply+0x9e>
 8009790:	2e00      	cmp	r6, #0
 8009792:	dd03      	ble.n	800979c <__multiply+0x90>
 8009794:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009798:	2b00      	cmp	r3, #0
 800979a:	d05a      	beq.n	8009852 <__multiply+0x146>
 800979c:	6106      	str	r6, [r0, #16]
 800979e:	b005      	add	sp, #20
 80097a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a4:	f843 2b04 	str.w	r2, [r3], #4
 80097a8:	e7d8      	b.n	800975c <__multiply+0x50>
 80097aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80097ae:	f1ba 0f00 	cmp.w	sl, #0
 80097b2:	d024      	beq.n	80097fe <__multiply+0xf2>
 80097b4:	f104 0e14 	add.w	lr, r4, #20
 80097b8:	46a9      	mov	r9, r5
 80097ba:	f04f 0c00 	mov.w	ip, #0
 80097be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80097c2:	f8d9 1000 	ldr.w	r1, [r9]
 80097c6:	fa1f fb82 	uxth.w	fp, r2
 80097ca:	b289      	uxth	r1, r1
 80097cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80097d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80097d4:	f8d9 2000 	ldr.w	r2, [r9]
 80097d8:	4461      	add	r1, ip
 80097da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097de:	fb0a c20b 	mla	r2, sl, fp, ip
 80097e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80097e6:	b289      	uxth	r1, r1
 80097e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097ec:	4577      	cmp	r7, lr
 80097ee:	f849 1b04 	str.w	r1, [r9], #4
 80097f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097f6:	d8e2      	bhi.n	80097be <__multiply+0xb2>
 80097f8:	9a01      	ldr	r2, [sp, #4]
 80097fa:	f845 c002 	str.w	ip, [r5, r2]
 80097fe:	9a03      	ldr	r2, [sp, #12]
 8009800:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009804:	3304      	adds	r3, #4
 8009806:	f1b9 0f00 	cmp.w	r9, #0
 800980a:	d020      	beq.n	800984e <__multiply+0x142>
 800980c:	6829      	ldr	r1, [r5, #0]
 800980e:	f104 0c14 	add.w	ip, r4, #20
 8009812:	46ae      	mov	lr, r5
 8009814:	f04f 0a00 	mov.w	sl, #0
 8009818:	f8bc b000 	ldrh.w	fp, [ip]
 800981c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009820:	fb09 220b 	mla	r2, r9, fp, r2
 8009824:	4492      	add	sl, r2
 8009826:	b289      	uxth	r1, r1
 8009828:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800982c:	f84e 1b04 	str.w	r1, [lr], #4
 8009830:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009834:	f8be 1000 	ldrh.w	r1, [lr]
 8009838:	0c12      	lsrs	r2, r2, #16
 800983a:	fb09 1102 	mla	r1, r9, r2, r1
 800983e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009842:	4567      	cmp	r7, ip
 8009844:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009848:	d8e6      	bhi.n	8009818 <__multiply+0x10c>
 800984a:	9a01      	ldr	r2, [sp, #4]
 800984c:	50a9      	str	r1, [r5, r2]
 800984e:	3504      	adds	r5, #4
 8009850:	e79a      	b.n	8009788 <__multiply+0x7c>
 8009852:	3e01      	subs	r6, #1
 8009854:	e79c      	b.n	8009790 <__multiply+0x84>
 8009856:	bf00      	nop
 8009858:	0800b0f0 	.word	0x0800b0f0
 800985c:	0800b17c 	.word	0x0800b17c

08009860 <__pow5mult>:
 8009860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009864:	4615      	mov	r5, r2
 8009866:	f012 0203 	ands.w	r2, r2, #3
 800986a:	4606      	mov	r6, r0
 800986c:	460f      	mov	r7, r1
 800986e:	d007      	beq.n	8009880 <__pow5mult+0x20>
 8009870:	4c25      	ldr	r4, [pc, #148]	; (8009908 <__pow5mult+0xa8>)
 8009872:	3a01      	subs	r2, #1
 8009874:	2300      	movs	r3, #0
 8009876:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800987a:	f7ff fe51 	bl	8009520 <__multadd>
 800987e:	4607      	mov	r7, r0
 8009880:	10ad      	asrs	r5, r5, #2
 8009882:	d03d      	beq.n	8009900 <__pow5mult+0xa0>
 8009884:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009886:	b97c      	cbnz	r4, 80098a8 <__pow5mult+0x48>
 8009888:	2010      	movs	r0, #16
 800988a:	f7ff fdbf 	bl	800940c <malloc>
 800988e:	4602      	mov	r2, r0
 8009890:	6270      	str	r0, [r6, #36]	; 0x24
 8009892:	b928      	cbnz	r0, 80098a0 <__pow5mult+0x40>
 8009894:	4b1d      	ldr	r3, [pc, #116]	; (800990c <__pow5mult+0xac>)
 8009896:	481e      	ldr	r0, [pc, #120]	; (8009910 <__pow5mult+0xb0>)
 8009898:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800989c:	f000 fd2e 	bl	800a2fc <__assert_func>
 80098a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098a4:	6004      	str	r4, [r0, #0]
 80098a6:	60c4      	str	r4, [r0, #12]
 80098a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80098ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098b0:	b94c      	cbnz	r4, 80098c6 <__pow5mult+0x66>
 80098b2:	f240 2171 	movw	r1, #625	; 0x271
 80098b6:	4630      	mov	r0, r6
 80098b8:	f7ff ff12 	bl	80096e0 <__i2b>
 80098bc:	2300      	movs	r3, #0
 80098be:	f8c8 0008 	str.w	r0, [r8, #8]
 80098c2:	4604      	mov	r4, r0
 80098c4:	6003      	str	r3, [r0, #0]
 80098c6:	f04f 0900 	mov.w	r9, #0
 80098ca:	07eb      	lsls	r3, r5, #31
 80098cc:	d50a      	bpl.n	80098e4 <__pow5mult+0x84>
 80098ce:	4639      	mov	r1, r7
 80098d0:	4622      	mov	r2, r4
 80098d2:	4630      	mov	r0, r6
 80098d4:	f7ff ff1a 	bl	800970c <__multiply>
 80098d8:	4639      	mov	r1, r7
 80098da:	4680      	mov	r8, r0
 80098dc:	4630      	mov	r0, r6
 80098de:	f7ff fdfd 	bl	80094dc <_Bfree>
 80098e2:	4647      	mov	r7, r8
 80098e4:	106d      	asrs	r5, r5, #1
 80098e6:	d00b      	beq.n	8009900 <__pow5mult+0xa0>
 80098e8:	6820      	ldr	r0, [r4, #0]
 80098ea:	b938      	cbnz	r0, 80098fc <__pow5mult+0x9c>
 80098ec:	4622      	mov	r2, r4
 80098ee:	4621      	mov	r1, r4
 80098f0:	4630      	mov	r0, r6
 80098f2:	f7ff ff0b 	bl	800970c <__multiply>
 80098f6:	6020      	str	r0, [r4, #0]
 80098f8:	f8c0 9000 	str.w	r9, [r0]
 80098fc:	4604      	mov	r4, r0
 80098fe:	e7e4      	b.n	80098ca <__pow5mult+0x6a>
 8009900:	4638      	mov	r0, r7
 8009902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009906:	bf00      	nop
 8009908:	0800b2c8 	.word	0x0800b2c8
 800990c:	0800b07e 	.word	0x0800b07e
 8009910:	0800b17c 	.word	0x0800b17c

08009914 <__lshift>:
 8009914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009918:	460c      	mov	r4, r1
 800991a:	6849      	ldr	r1, [r1, #4]
 800991c:	6923      	ldr	r3, [r4, #16]
 800991e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009922:	68a3      	ldr	r3, [r4, #8]
 8009924:	4607      	mov	r7, r0
 8009926:	4691      	mov	r9, r2
 8009928:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800992c:	f108 0601 	add.w	r6, r8, #1
 8009930:	42b3      	cmp	r3, r6
 8009932:	db0b      	blt.n	800994c <__lshift+0x38>
 8009934:	4638      	mov	r0, r7
 8009936:	f7ff fd91 	bl	800945c <_Balloc>
 800993a:	4605      	mov	r5, r0
 800993c:	b948      	cbnz	r0, 8009952 <__lshift+0x3e>
 800993e:	4602      	mov	r2, r0
 8009940:	4b2a      	ldr	r3, [pc, #168]	; (80099ec <__lshift+0xd8>)
 8009942:	482b      	ldr	r0, [pc, #172]	; (80099f0 <__lshift+0xdc>)
 8009944:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009948:	f000 fcd8 	bl	800a2fc <__assert_func>
 800994c:	3101      	adds	r1, #1
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	e7ee      	b.n	8009930 <__lshift+0x1c>
 8009952:	2300      	movs	r3, #0
 8009954:	f100 0114 	add.w	r1, r0, #20
 8009958:	f100 0210 	add.w	r2, r0, #16
 800995c:	4618      	mov	r0, r3
 800995e:	4553      	cmp	r3, sl
 8009960:	db37      	blt.n	80099d2 <__lshift+0xbe>
 8009962:	6920      	ldr	r0, [r4, #16]
 8009964:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009968:	f104 0314 	add.w	r3, r4, #20
 800996c:	f019 091f 	ands.w	r9, r9, #31
 8009970:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009974:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009978:	d02f      	beq.n	80099da <__lshift+0xc6>
 800997a:	f1c9 0e20 	rsb	lr, r9, #32
 800997e:	468a      	mov	sl, r1
 8009980:	f04f 0c00 	mov.w	ip, #0
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	fa02 f209 	lsl.w	r2, r2, r9
 800998a:	ea42 020c 	orr.w	r2, r2, ip
 800998e:	f84a 2b04 	str.w	r2, [sl], #4
 8009992:	f853 2b04 	ldr.w	r2, [r3], #4
 8009996:	4298      	cmp	r0, r3
 8009998:	fa22 fc0e 	lsr.w	ip, r2, lr
 800999c:	d8f2      	bhi.n	8009984 <__lshift+0x70>
 800999e:	1b03      	subs	r3, r0, r4
 80099a0:	3b15      	subs	r3, #21
 80099a2:	f023 0303 	bic.w	r3, r3, #3
 80099a6:	3304      	adds	r3, #4
 80099a8:	f104 0215 	add.w	r2, r4, #21
 80099ac:	4290      	cmp	r0, r2
 80099ae:	bf38      	it	cc
 80099b0:	2304      	movcc	r3, #4
 80099b2:	f841 c003 	str.w	ip, [r1, r3]
 80099b6:	f1bc 0f00 	cmp.w	ip, #0
 80099ba:	d001      	beq.n	80099c0 <__lshift+0xac>
 80099bc:	f108 0602 	add.w	r6, r8, #2
 80099c0:	3e01      	subs	r6, #1
 80099c2:	4638      	mov	r0, r7
 80099c4:	612e      	str	r6, [r5, #16]
 80099c6:	4621      	mov	r1, r4
 80099c8:	f7ff fd88 	bl	80094dc <_Bfree>
 80099cc:	4628      	mov	r0, r5
 80099ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80099d6:	3301      	adds	r3, #1
 80099d8:	e7c1      	b.n	800995e <__lshift+0x4a>
 80099da:	3904      	subs	r1, #4
 80099dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80099e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80099e4:	4298      	cmp	r0, r3
 80099e6:	d8f9      	bhi.n	80099dc <__lshift+0xc8>
 80099e8:	e7ea      	b.n	80099c0 <__lshift+0xac>
 80099ea:	bf00      	nop
 80099ec:	0800b0f0 	.word	0x0800b0f0
 80099f0:	0800b17c 	.word	0x0800b17c

080099f4 <__mcmp>:
 80099f4:	b530      	push	{r4, r5, lr}
 80099f6:	6902      	ldr	r2, [r0, #16]
 80099f8:	690c      	ldr	r4, [r1, #16]
 80099fa:	1b12      	subs	r2, r2, r4
 80099fc:	d10e      	bne.n	8009a1c <__mcmp+0x28>
 80099fe:	f100 0314 	add.w	r3, r0, #20
 8009a02:	3114      	adds	r1, #20
 8009a04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009a08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009a0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009a10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009a14:	42a5      	cmp	r5, r4
 8009a16:	d003      	beq.n	8009a20 <__mcmp+0x2c>
 8009a18:	d305      	bcc.n	8009a26 <__mcmp+0x32>
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	bd30      	pop	{r4, r5, pc}
 8009a20:	4283      	cmp	r3, r0
 8009a22:	d3f3      	bcc.n	8009a0c <__mcmp+0x18>
 8009a24:	e7fa      	b.n	8009a1c <__mcmp+0x28>
 8009a26:	f04f 32ff 	mov.w	r2, #4294967295
 8009a2a:	e7f7      	b.n	8009a1c <__mcmp+0x28>

08009a2c <__mdiff>:
 8009a2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a30:	460c      	mov	r4, r1
 8009a32:	4606      	mov	r6, r0
 8009a34:	4611      	mov	r1, r2
 8009a36:	4620      	mov	r0, r4
 8009a38:	4690      	mov	r8, r2
 8009a3a:	f7ff ffdb 	bl	80099f4 <__mcmp>
 8009a3e:	1e05      	subs	r5, r0, #0
 8009a40:	d110      	bne.n	8009a64 <__mdiff+0x38>
 8009a42:	4629      	mov	r1, r5
 8009a44:	4630      	mov	r0, r6
 8009a46:	f7ff fd09 	bl	800945c <_Balloc>
 8009a4a:	b930      	cbnz	r0, 8009a5a <__mdiff+0x2e>
 8009a4c:	4b3a      	ldr	r3, [pc, #232]	; (8009b38 <__mdiff+0x10c>)
 8009a4e:	4602      	mov	r2, r0
 8009a50:	f240 2132 	movw	r1, #562	; 0x232
 8009a54:	4839      	ldr	r0, [pc, #228]	; (8009b3c <__mdiff+0x110>)
 8009a56:	f000 fc51 	bl	800a2fc <__assert_func>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a64:	bfa4      	itt	ge
 8009a66:	4643      	movge	r3, r8
 8009a68:	46a0      	movge	r8, r4
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a70:	bfa6      	itte	ge
 8009a72:	461c      	movge	r4, r3
 8009a74:	2500      	movge	r5, #0
 8009a76:	2501      	movlt	r5, #1
 8009a78:	f7ff fcf0 	bl	800945c <_Balloc>
 8009a7c:	b920      	cbnz	r0, 8009a88 <__mdiff+0x5c>
 8009a7e:	4b2e      	ldr	r3, [pc, #184]	; (8009b38 <__mdiff+0x10c>)
 8009a80:	4602      	mov	r2, r0
 8009a82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a86:	e7e5      	b.n	8009a54 <__mdiff+0x28>
 8009a88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a8c:	6926      	ldr	r6, [r4, #16]
 8009a8e:	60c5      	str	r5, [r0, #12]
 8009a90:	f104 0914 	add.w	r9, r4, #20
 8009a94:	f108 0514 	add.w	r5, r8, #20
 8009a98:	f100 0e14 	add.w	lr, r0, #20
 8009a9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009aa0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009aa4:	f108 0210 	add.w	r2, r8, #16
 8009aa8:	46f2      	mov	sl, lr
 8009aaa:	2100      	movs	r1, #0
 8009aac:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ab0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ab4:	fa1f f883 	uxth.w	r8, r3
 8009ab8:	fa11 f18b 	uxtah	r1, r1, fp
 8009abc:	0c1b      	lsrs	r3, r3, #16
 8009abe:	eba1 0808 	sub.w	r8, r1, r8
 8009ac2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ac6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009aca:	fa1f f888 	uxth.w	r8, r8
 8009ace:	1419      	asrs	r1, r3, #16
 8009ad0:	454e      	cmp	r6, r9
 8009ad2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ad6:	f84a 3b04 	str.w	r3, [sl], #4
 8009ada:	d8e7      	bhi.n	8009aac <__mdiff+0x80>
 8009adc:	1b33      	subs	r3, r6, r4
 8009ade:	3b15      	subs	r3, #21
 8009ae0:	f023 0303 	bic.w	r3, r3, #3
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	3415      	adds	r4, #21
 8009ae8:	42a6      	cmp	r6, r4
 8009aea:	bf38      	it	cc
 8009aec:	2304      	movcc	r3, #4
 8009aee:	441d      	add	r5, r3
 8009af0:	4473      	add	r3, lr
 8009af2:	469e      	mov	lr, r3
 8009af4:	462e      	mov	r6, r5
 8009af6:	4566      	cmp	r6, ip
 8009af8:	d30e      	bcc.n	8009b18 <__mdiff+0xec>
 8009afa:	f10c 0203 	add.w	r2, ip, #3
 8009afe:	1b52      	subs	r2, r2, r5
 8009b00:	f022 0203 	bic.w	r2, r2, #3
 8009b04:	3d03      	subs	r5, #3
 8009b06:	45ac      	cmp	ip, r5
 8009b08:	bf38      	it	cc
 8009b0a:	2200      	movcc	r2, #0
 8009b0c:	441a      	add	r2, r3
 8009b0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009b12:	b17b      	cbz	r3, 8009b34 <__mdiff+0x108>
 8009b14:	6107      	str	r7, [r0, #16]
 8009b16:	e7a3      	b.n	8009a60 <__mdiff+0x34>
 8009b18:	f856 8b04 	ldr.w	r8, [r6], #4
 8009b1c:	fa11 f288 	uxtah	r2, r1, r8
 8009b20:	1414      	asrs	r4, r2, #16
 8009b22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009b26:	b292      	uxth	r2, r2
 8009b28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009b2c:	f84e 2b04 	str.w	r2, [lr], #4
 8009b30:	1421      	asrs	r1, r4, #16
 8009b32:	e7e0      	b.n	8009af6 <__mdiff+0xca>
 8009b34:	3f01      	subs	r7, #1
 8009b36:	e7ea      	b.n	8009b0e <__mdiff+0xe2>
 8009b38:	0800b0f0 	.word	0x0800b0f0
 8009b3c:	0800b17c 	.word	0x0800b17c

08009b40 <__ulp>:
 8009b40:	b082      	sub	sp, #8
 8009b42:	ed8d 0b00 	vstr	d0, [sp]
 8009b46:	9b01      	ldr	r3, [sp, #4]
 8009b48:	4912      	ldr	r1, [pc, #72]	; (8009b94 <__ulp+0x54>)
 8009b4a:	4019      	ands	r1, r3
 8009b4c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009b50:	2900      	cmp	r1, #0
 8009b52:	dd05      	ble.n	8009b60 <__ulp+0x20>
 8009b54:	2200      	movs	r2, #0
 8009b56:	460b      	mov	r3, r1
 8009b58:	ec43 2b10 	vmov	d0, r2, r3
 8009b5c:	b002      	add	sp, #8
 8009b5e:	4770      	bx	lr
 8009b60:	4249      	negs	r1, r1
 8009b62:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009b66:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009b6a:	f04f 0200 	mov.w	r2, #0
 8009b6e:	f04f 0300 	mov.w	r3, #0
 8009b72:	da04      	bge.n	8009b7e <__ulp+0x3e>
 8009b74:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009b78:	fa41 f300 	asr.w	r3, r1, r0
 8009b7c:	e7ec      	b.n	8009b58 <__ulp+0x18>
 8009b7e:	f1a0 0114 	sub.w	r1, r0, #20
 8009b82:	291e      	cmp	r1, #30
 8009b84:	bfda      	itte	le
 8009b86:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009b8a:	fa20 f101 	lsrle.w	r1, r0, r1
 8009b8e:	2101      	movgt	r1, #1
 8009b90:	460a      	mov	r2, r1
 8009b92:	e7e1      	b.n	8009b58 <__ulp+0x18>
 8009b94:	7ff00000 	.word	0x7ff00000

08009b98 <__b2d>:
 8009b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9a:	6905      	ldr	r5, [r0, #16]
 8009b9c:	f100 0714 	add.w	r7, r0, #20
 8009ba0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009ba4:	1f2e      	subs	r6, r5, #4
 8009ba6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009baa:	4620      	mov	r0, r4
 8009bac:	f7ff fd48 	bl	8009640 <__hi0bits>
 8009bb0:	f1c0 0320 	rsb	r3, r0, #32
 8009bb4:	280a      	cmp	r0, #10
 8009bb6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009c34 <__b2d+0x9c>
 8009bba:	600b      	str	r3, [r1, #0]
 8009bbc:	dc14      	bgt.n	8009be8 <__b2d+0x50>
 8009bbe:	f1c0 0e0b 	rsb	lr, r0, #11
 8009bc2:	fa24 f10e 	lsr.w	r1, r4, lr
 8009bc6:	42b7      	cmp	r7, r6
 8009bc8:	ea41 030c 	orr.w	r3, r1, ip
 8009bcc:	bf34      	ite	cc
 8009bce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009bd2:	2100      	movcs	r1, #0
 8009bd4:	3015      	adds	r0, #21
 8009bd6:	fa04 f000 	lsl.w	r0, r4, r0
 8009bda:	fa21 f10e 	lsr.w	r1, r1, lr
 8009bde:	ea40 0201 	orr.w	r2, r0, r1
 8009be2:	ec43 2b10 	vmov	d0, r2, r3
 8009be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be8:	42b7      	cmp	r7, r6
 8009bea:	bf3a      	itte	cc
 8009bec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009bf0:	f1a5 0608 	subcc.w	r6, r5, #8
 8009bf4:	2100      	movcs	r1, #0
 8009bf6:	380b      	subs	r0, #11
 8009bf8:	d017      	beq.n	8009c2a <__b2d+0x92>
 8009bfa:	f1c0 0c20 	rsb	ip, r0, #32
 8009bfe:	fa04 f500 	lsl.w	r5, r4, r0
 8009c02:	42be      	cmp	r6, r7
 8009c04:	fa21 f40c 	lsr.w	r4, r1, ip
 8009c08:	ea45 0504 	orr.w	r5, r5, r4
 8009c0c:	bf8c      	ite	hi
 8009c0e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009c12:	2400      	movls	r4, #0
 8009c14:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009c18:	fa01 f000 	lsl.w	r0, r1, r0
 8009c1c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009c20:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009c24:	ea40 0204 	orr.w	r2, r0, r4
 8009c28:	e7db      	b.n	8009be2 <__b2d+0x4a>
 8009c2a:	ea44 030c 	orr.w	r3, r4, ip
 8009c2e:	460a      	mov	r2, r1
 8009c30:	e7d7      	b.n	8009be2 <__b2d+0x4a>
 8009c32:	bf00      	nop
 8009c34:	3ff00000 	.word	0x3ff00000

08009c38 <__d2b>:
 8009c38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c3c:	4689      	mov	r9, r1
 8009c3e:	2101      	movs	r1, #1
 8009c40:	ec57 6b10 	vmov	r6, r7, d0
 8009c44:	4690      	mov	r8, r2
 8009c46:	f7ff fc09 	bl	800945c <_Balloc>
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	b930      	cbnz	r0, 8009c5c <__d2b+0x24>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	4b25      	ldr	r3, [pc, #148]	; (8009ce8 <__d2b+0xb0>)
 8009c52:	4826      	ldr	r0, [pc, #152]	; (8009cec <__d2b+0xb4>)
 8009c54:	f240 310a 	movw	r1, #778	; 0x30a
 8009c58:	f000 fb50 	bl	800a2fc <__assert_func>
 8009c5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c64:	bb35      	cbnz	r5, 8009cb4 <__d2b+0x7c>
 8009c66:	2e00      	cmp	r6, #0
 8009c68:	9301      	str	r3, [sp, #4]
 8009c6a:	d028      	beq.n	8009cbe <__d2b+0x86>
 8009c6c:	4668      	mov	r0, sp
 8009c6e:	9600      	str	r6, [sp, #0]
 8009c70:	f7ff fd06 	bl	8009680 <__lo0bits>
 8009c74:	9900      	ldr	r1, [sp, #0]
 8009c76:	b300      	cbz	r0, 8009cba <__d2b+0x82>
 8009c78:	9a01      	ldr	r2, [sp, #4]
 8009c7a:	f1c0 0320 	rsb	r3, r0, #32
 8009c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c82:	430b      	orrs	r3, r1
 8009c84:	40c2      	lsrs	r2, r0
 8009c86:	6163      	str	r3, [r4, #20]
 8009c88:	9201      	str	r2, [sp, #4]
 8009c8a:	9b01      	ldr	r3, [sp, #4]
 8009c8c:	61a3      	str	r3, [r4, #24]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	bf14      	ite	ne
 8009c92:	2202      	movne	r2, #2
 8009c94:	2201      	moveq	r2, #1
 8009c96:	6122      	str	r2, [r4, #16]
 8009c98:	b1d5      	cbz	r5, 8009cd0 <__d2b+0x98>
 8009c9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c9e:	4405      	add	r5, r0
 8009ca0:	f8c9 5000 	str.w	r5, [r9]
 8009ca4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ca8:	f8c8 0000 	str.w	r0, [r8]
 8009cac:	4620      	mov	r0, r4
 8009cae:	b003      	add	sp, #12
 8009cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cb8:	e7d5      	b.n	8009c66 <__d2b+0x2e>
 8009cba:	6161      	str	r1, [r4, #20]
 8009cbc:	e7e5      	b.n	8009c8a <__d2b+0x52>
 8009cbe:	a801      	add	r0, sp, #4
 8009cc0:	f7ff fcde 	bl	8009680 <__lo0bits>
 8009cc4:	9b01      	ldr	r3, [sp, #4]
 8009cc6:	6163      	str	r3, [r4, #20]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	6122      	str	r2, [r4, #16]
 8009ccc:	3020      	adds	r0, #32
 8009cce:	e7e3      	b.n	8009c98 <__d2b+0x60>
 8009cd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009cd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009cd8:	f8c9 0000 	str.w	r0, [r9]
 8009cdc:	6918      	ldr	r0, [r3, #16]
 8009cde:	f7ff fcaf 	bl	8009640 <__hi0bits>
 8009ce2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ce6:	e7df      	b.n	8009ca8 <__d2b+0x70>
 8009ce8:	0800b0f0 	.word	0x0800b0f0
 8009cec:	0800b17c 	.word	0x0800b17c

08009cf0 <__ratio>:
 8009cf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	4688      	mov	r8, r1
 8009cf6:	4669      	mov	r1, sp
 8009cf8:	4681      	mov	r9, r0
 8009cfa:	f7ff ff4d 	bl	8009b98 <__b2d>
 8009cfe:	a901      	add	r1, sp, #4
 8009d00:	4640      	mov	r0, r8
 8009d02:	ec55 4b10 	vmov	r4, r5, d0
 8009d06:	f7ff ff47 	bl	8009b98 <__b2d>
 8009d0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009d12:	eba3 0c02 	sub.w	ip, r3, r2
 8009d16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009d1a:	1a9b      	subs	r3, r3, r2
 8009d1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009d20:	ec51 0b10 	vmov	r0, r1, d0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	bfd6      	itet	le
 8009d28:	460a      	movle	r2, r1
 8009d2a:	462a      	movgt	r2, r5
 8009d2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d30:	468b      	mov	fp, r1
 8009d32:	462f      	mov	r7, r5
 8009d34:	bfd4      	ite	le
 8009d36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009d3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009d3e:	4620      	mov	r0, r4
 8009d40:	ee10 2a10 	vmov	r2, s0
 8009d44:	465b      	mov	r3, fp
 8009d46:	4639      	mov	r1, r7
 8009d48:	f7f6 fd88 	bl	800085c <__aeabi_ddiv>
 8009d4c:	ec41 0b10 	vmov	d0, r0, r1
 8009d50:	b003      	add	sp, #12
 8009d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d56 <__copybits>:
 8009d56:	3901      	subs	r1, #1
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	1149      	asrs	r1, r1, #5
 8009d5c:	6914      	ldr	r4, [r2, #16]
 8009d5e:	3101      	adds	r1, #1
 8009d60:	f102 0314 	add.w	r3, r2, #20
 8009d64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d6c:	1f05      	subs	r5, r0, #4
 8009d6e:	42a3      	cmp	r3, r4
 8009d70:	d30c      	bcc.n	8009d8c <__copybits+0x36>
 8009d72:	1aa3      	subs	r3, r4, r2
 8009d74:	3b11      	subs	r3, #17
 8009d76:	f023 0303 	bic.w	r3, r3, #3
 8009d7a:	3211      	adds	r2, #17
 8009d7c:	42a2      	cmp	r2, r4
 8009d7e:	bf88      	it	hi
 8009d80:	2300      	movhi	r3, #0
 8009d82:	4418      	add	r0, r3
 8009d84:	2300      	movs	r3, #0
 8009d86:	4288      	cmp	r0, r1
 8009d88:	d305      	bcc.n	8009d96 <__copybits+0x40>
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}
 8009d8c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d90:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d94:	e7eb      	b.n	8009d6e <__copybits+0x18>
 8009d96:	f840 3b04 	str.w	r3, [r0], #4
 8009d9a:	e7f4      	b.n	8009d86 <__copybits+0x30>

08009d9c <__any_on>:
 8009d9c:	f100 0214 	add.w	r2, r0, #20
 8009da0:	6900      	ldr	r0, [r0, #16]
 8009da2:	114b      	asrs	r3, r1, #5
 8009da4:	4298      	cmp	r0, r3
 8009da6:	b510      	push	{r4, lr}
 8009da8:	db11      	blt.n	8009dce <__any_on+0x32>
 8009daa:	dd0a      	ble.n	8009dc2 <__any_on+0x26>
 8009dac:	f011 011f 	ands.w	r1, r1, #31
 8009db0:	d007      	beq.n	8009dc2 <__any_on+0x26>
 8009db2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009db6:	fa24 f001 	lsr.w	r0, r4, r1
 8009dba:	fa00 f101 	lsl.w	r1, r0, r1
 8009dbe:	428c      	cmp	r4, r1
 8009dc0:	d10b      	bne.n	8009dda <__any_on+0x3e>
 8009dc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d803      	bhi.n	8009dd2 <__any_on+0x36>
 8009dca:	2000      	movs	r0, #0
 8009dcc:	bd10      	pop	{r4, pc}
 8009dce:	4603      	mov	r3, r0
 8009dd0:	e7f7      	b.n	8009dc2 <__any_on+0x26>
 8009dd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009dd6:	2900      	cmp	r1, #0
 8009dd8:	d0f5      	beq.n	8009dc6 <__any_on+0x2a>
 8009dda:	2001      	movs	r0, #1
 8009ddc:	e7f6      	b.n	8009dcc <__any_on+0x30>

08009dde <_calloc_r>:
 8009dde:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009de0:	fba1 2402 	umull	r2, r4, r1, r2
 8009de4:	b94c      	cbnz	r4, 8009dfa <_calloc_r+0x1c>
 8009de6:	4611      	mov	r1, r2
 8009de8:	9201      	str	r2, [sp, #4]
 8009dea:	f000 f87b 	bl	8009ee4 <_malloc_r>
 8009dee:	9a01      	ldr	r2, [sp, #4]
 8009df0:	4605      	mov	r5, r0
 8009df2:	b930      	cbnz	r0, 8009e02 <_calloc_r+0x24>
 8009df4:	4628      	mov	r0, r5
 8009df6:	b003      	add	sp, #12
 8009df8:	bd30      	pop	{r4, r5, pc}
 8009dfa:	220c      	movs	r2, #12
 8009dfc:	6002      	str	r2, [r0, #0]
 8009dfe:	2500      	movs	r5, #0
 8009e00:	e7f8      	b.n	8009df4 <_calloc_r+0x16>
 8009e02:	4621      	mov	r1, r4
 8009e04:	f7fc fbbe 	bl	8006584 <memset>
 8009e08:	e7f4      	b.n	8009df4 <_calloc_r+0x16>
	...

08009e0c <_free_r>:
 8009e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e0e:	2900      	cmp	r1, #0
 8009e10:	d044      	beq.n	8009e9c <_free_r+0x90>
 8009e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e16:	9001      	str	r0, [sp, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f1a1 0404 	sub.w	r4, r1, #4
 8009e1e:	bfb8      	it	lt
 8009e20:	18e4      	addlt	r4, r4, r3
 8009e22:	f000 fab5 	bl	800a390 <__malloc_lock>
 8009e26:	4a1e      	ldr	r2, [pc, #120]	; (8009ea0 <_free_r+0x94>)
 8009e28:	9801      	ldr	r0, [sp, #4]
 8009e2a:	6813      	ldr	r3, [r2, #0]
 8009e2c:	b933      	cbnz	r3, 8009e3c <_free_r+0x30>
 8009e2e:	6063      	str	r3, [r4, #4]
 8009e30:	6014      	str	r4, [r2, #0]
 8009e32:	b003      	add	sp, #12
 8009e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e38:	f000 bab0 	b.w	800a39c <__malloc_unlock>
 8009e3c:	42a3      	cmp	r3, r4
 8009e3e:	d908      	bls.n	8009e52 <_free_r+0x46>
 8009e40:	6825      	ldr	r5, [r4, #0]
 8009e42:	1961      	adds	r1, r4, r5
 8009e44:	428b      	cmp	r3, r1
 8009e46:	bf01      	itttt	eq
 8009e48:	6819      	ldreq	r1, [r3, #0]
 8009e4a:	685b      	ldreq	r3, [r3, #4]
 8009e4c:	1949      	addeq	r1, r1, r5
 8009e4e:	6021      	streq	r1, [r4, #0]
 8009e50:	e7ed      	b.n	8009e2e <_free_r+0x22>
 8009e52:	461a      	mov	r2, r3
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	b10b      	cbz	r3, 8009e5c <_free_r+0x50>
 8009e58:	42a3      	cmp	r3, r4
 8009e5a:	d9fa      	bls.n	8009e52 <_free_r+0x46>
 8009e5c:	6811      	ldr	r1, [r2, #0]
 8009e5e:	1855      	adds	r5, r2, r1
 8009e60:	42a5      	cmp	r5, r4
 8009e62:	d10b      	bne.n	8009e7c <_free_r+0x70>
 8009e64:	6824      	ldr	r4, [r4, #0]
 8009e66:	4421      	add	r1, r4
 8009e68:	1854      	adds	r4, r2, r1
 8009e6a:	42a3      	cmp	r3, r4
 8009e6c:	6011      	str	r1, [r2, #0]
 8009e6e:	d1e0      	bne.n	8009e32 <_free_r+0x26>
 8009e70:	681c      	ldr	r4, [r3, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	6053      	str	r3, [r2, #4]
 8009e76:	4421      	add	r1, r4
 8009e78:	6011      	str	r1, [r2, #0]
 8009e7a:	e7da      	b.n	8009e32 <_free_r+0x26>
 8009e7c:	d902      	bls.n	8009e84 <_free_r+0x78>
 8009e7e:	230c      	movs	r3, #12
 8009e80:	6003      	str	r3, [r0, #0]
 8009e82:	e7d6      	b.n	8009e32 <_free_r+0x26>
 8009e84:	6825      	ldr	r5, [r4, #0]
 8009e86:	1961      	adds	r1, r4, r5
 8009e88:	428b      	cmp	r3, r1
 8009e8a:	bf04      	itt	eq
 8009e8c:	6819      	ldreq	r1, [r3, #0]
 8009e8e:	685b      	ldreq	r3, [r3, #4]
 8009e90:	6063      	str	r3, [r4, #4]
 8009e92:	bf04      	itt	eq
 8009e94:	1949      	addeq	r1, r1, r5
 8009e96:	6021      	streq	r1, [r4, #0]
 8009e98:	6054      	str	r4, [r2, #4]
 8009e9a:	e7ca      	b.n	8009e32 <_free_r+0x26>
 8009e9c:	b003      	add	sp, #12
 8009e9e:	bd30      	pop	{r4, r5, pc}
 8009ea0:	20000638 	.word	0x20000638

08009ea4 <sbrk_aligned>:
 8009ea4:	b570      	push	{r4, r5, r6, lr}
 8009ea6:	4e0e      	ldr	r6, [pc, #56]	; (8009ee0 <sbrk_aligned+0x3c>)
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	6831      	ldr	r1, [r6, #0]
 8009eac:	4605      	mov	r5, r0
 8009eae:	b911      	cbnz	r1, 8009eb6 <sbrk_aligned+0x12>
 8009eb0:	f000 f9f2 	bl	800a298 <_sbrk_r>
 8009eb4:	6030      	str	r0, [r6, #0]
 8009eb6:	4621      	mov	r1, r4
 8009eb8:	4628      	mov	r0, r5
 8009eba:	f000 f9ed 	bl	800a298 <_sbrk_r>
 8009ebe:	1c43      	adds	r3, r0, #1
 8009ec0:	d00a      	beq.n	8009ed8 <sbrk_aligned+0x34>
 8009ec2:	1cc4      	adds	r4, r0, #3
 8009ec4:	f024 0403 	bic.w	r4, r4, #3
 8009ec8:	42a0      	cmp	r0, r4
 8009eca:	d007      	beq.n	8009edc <sbrk_aligned+0x38>
 8009ecc:	1a21      	subs	r1, r4, r0
 8009ece:	4628      	mov	r0, r5
 8009ed0:	f000 f9e2 	bl	800a298 <_sbrk_r>
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	d101      	bne.n	8009edc <sbrk_aligned+0x38>
 8009ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8009edc:	4620      	mov	r0, r4
 8009ede:	bd70      	pop	{r4, r5, r6, pc}
 8009ee0:	2000063c 	.word	0x2000063c

08009ee4 <_malloc_r>:
 8009ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee8:	1ccd      	adds	r5, r1, #3
 8009eea:	f025 0503 	bic.w	r5, r5, #3
 8009eee:	3508      	adds	r5, #8
 8009ef0:	2d0c      	cmp	r5, #12
 8009ef2:	bf38      	it	cc
 8009ef4:	250c      	movcc	r5, #12
 8009ef6:	2d00      	cmp	r5, #0
 8009ef8:	4607      	mov	r7, r0
 8009efa:	db01      	blt.n	8009f00 <_malloc_r+0x1c>
 8009efc:	42a9      	cmp	r1, r5
 8009efe:	d905      	bls.n	8009f0c <_malloc_r+0x28>
 8009f00:	230c      	movs	r3, #12
 8009f02:	603b      	str	r3, [r7, #0]
 8009f04:	2600      	movs	r6, #0
 8009f06:	4630      	mov	r0, r6
 8009f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f0c:	4e2e      	ldr	r6, [pc, #184]	; (8009fc8 <_malloc_r+0xe4>)
 8009f0e:	f000 fa3f 	bl	800a390 <__malloc_lock>
 8009f12:	6833      	ldr	r3, [r6, #0]
 8009f14:	461c      	mov	r4, r3
 8009f16:	bb34      	cbnz	r4, 8009f66 <_malloc_r+0x82>
 8009f18:	4629      	mov	r1, r5
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	f7ff ffc2 	bl	8009ea4 <sbrk_aligned>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	4604      	mov	r4, r0
 8009f24:	d14d      	bne.n	8009fc2 <_malloc_r+0xde>
 8009f26:	6834      	ldr	r4, [r6, #0]
 8009f28:	4626      	mov	r6, r4
 8009f2a:	2e00      	cmp	r6, #0
 8009f2c:	d140      	bne.n	8009fb0 <_malloc_r+0xcc>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	4631      	mov	r1, r6
 8009f32:	4638      	mov	r0, r7
 8009f34:	eb04 0803 	add.w	r8, r4, r3
 8009f38:	f000 f9ae 	bl	800a298 <_sbrk_r>
 8009f3c:	4580      	cmp	r8, r0
 8009f3e:	d13a      	bne.n	8009fb6 <_malloc_r+0xd2>
 8009f40:	6821      	ldr	r1, [r4, #0]
 8009f42:	3503      	adds	r5, #3
 8009f44:	1a6d      	subs	r5, r5, r1
 8009f46:	f025 0503 	bic.w	r5, r5, #3
 8009f4a:	3508      	adds	r5, #8
 8009f4c:	2d0c      	cmp	r5, #12
 8009f4e:	bf38      	it	cc
 8009f50:	250c      	movcc	r5, #12
 8009f52:	4629      	mov	r1, r5
 8009f54:	4638      	mov	r0, r7
 8009f56:	f7ff ffa5 	bl	8009ea4 <sbrk_aligned>
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	d02b      	beq.n	8009fb6 <_malloc_r+0xd2>
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	442b      	add	r3, r5
 8009f62:	6023      	str	r3, [r4, #0]
 8009f64:	e00e      	b.n	8009f84 <_malloc_r+0xa0>
 8009f66:	6822      	ldr	r2, [r4, #0]
 8009f68:	1b52      	subs	r2, r2, r5
 8009f6a:	d41e      	bmi.n	8009faa <_malloc_r+0xc6>
 8009f6c:	2a0b      	cmp	r2, #11
 8009f6e:	d916      	bls.n	8009f9e <_malloc_r+0xba>
 8009f70:	1961      	adds	r1, r4, r5
 8009f72:	42a3      	cmp	r3, r4
 8009f74:	6025      	str	r5, [r4, #0]
 8009f76:	bf18      	it	ne
 8009f78:	6059      	strne	r1, [r3, #4]
 8009f7a:	6863      	ldr	r3, [r4, #4]
 8009f7c:	bf08      	it	eq
 8009f7e:	6031      	streq	r1, [r6, #0]
 8009f80:	5162      	str	r2, [r4, r5]
 8009f82:	604b      	str	r3, [r1, #4]
 8009f84:	4638      	mov	r0, r7
 8009f86:	f104 060b 	add.w	r6, r4, #11
 8009f8a:	f000 fa07 	bl	800a39c <__malloc_unlock>
 8009f8e:	f026 0607 	bic.w	r6, r6, #7
 8009f92:	1d23      	adds	r3, r4, #4
 8009f94:	1af2      	subs	r2, r6, r3
 8009f96:	d0b6      	beq.n	8009f06 <_malloc_r+0x22>
 8009f98:	1b9b      	subs	r3, r3, r6
 8009f9a:	50a3      	str	r3, [r4, r2]
 8009f9c:	e7b3      	b.n	8009f06 <_malloc_r+0x22>
 8009f9e:	6862      	ldr	r2, [r4, #4]
 8009fa0:	42a3      	cmp	r3, r4
 8009fa2:	bf0c      	ite	eq
 8009fa4:	6032      	streq	r2, [r6, #0]
 8009fa6:	605a      	strne	r2, [r3, #4]
 8009fa8:	e7ec      	b.n	8009f84 <_malloc_r+0xa0>
 8009faa:	4623      	mov	r3, r4
 8009fac:	6864      	ldr	r4, [r4, #4]
 8009fae:	e7b2      	b.n	8009f16 <_malloc_r+0x32>
 8009fb0:	4634      	mov	r4, r6
 8009fb2:	6876      	ldr	r6, [r6, #4]
 8009fb4:	e7b9      	b.n	8009f2a <_malloc_r+0x46>
 8009fb6:	230c      	movs	r3, #12
 8009fb8:	603b      	str	r3, [r7, #0]
 8009fba:	4638      	mov	r0, r7
 8009fbc:	f000 f9ee 	bl	800a39c <__malloc_unlock>
 8009fc0:	e7a1      	b.n	8009f06 <_malloc_r+0x22>
 8009fc2:	6025      	str	r5, [r4, #0]
 8009fc4:	e7de      	b.n	8009f84 <_malloc_r+0xa0>
 8009fc6:	bf00      	nop
 8009fc8:	20000638 	.word	0x20000638

08009fcc <__ssputs_r>:
 8009fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd0:	688e      	ldr	r6, [r1, #8]
 8009fd2:	429e      	cmp	r6, r3
 8009fd4:	4682      	mov	sl, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	4690      	mov	r8, r2
 8009fda:	461f      	mov	r7, r3
 8009fdc:	d838      	bhi.n	800a050 <__ssputs_r+0x84>
 8009fde:	898a      	ldrh	r2, [r1, #12]
 8009fe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fe4:	d032      	beq.n	800a04c <__ssputs_r+0x80>
 8009fe6:	6825      	ldr	r5, [r4, #0]
 8009fe8:	6909      	ldr	r1, [r1, #16]
 8009fea:	eba5 0901 	sub.w	r9, r5, r1
 8009fee:	6965      	ldr	r5, [r4, #20]
 8009ff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	444b      	add	r3, r9
 8009ffc:	106d      	asrs	r5, r5, #1
 8009ffe:	429d      	cmp	r5, r3
 800a000:	bf38      	it	cc
 800a002:	461d      	movcc	r5, r3
 800a004:	0553      	lsls	r3, r2, #21
 800a006:	d531      	bpl.n	800a06c <__ssputs_r+0xa0>
 800a008:	4629      	mov	r1, r5
 800a00a:	f7ff ff6b 	bl	8009ee4 <_malloc_r>
 800a00e:	4606      	mov	r6, r0
 800a010:	b950      	cbnz	r0, 800a028 <__ssputs_r+0x5c>
 800a012:	230c      	movs	r3, #12
 800a014:	f8ca 3000 	str.w	r3, [sl]
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	f04f 30ff 	mov.w	r0, #4294967295
 800a024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a028:	6921      	ldr	r1, [r4, #16]
 800a02a:	464a      	mov	r2, r9
 800a02c:	f7ff fa08 	bl	8009440 <memcpy>
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a03a:	81a3      	strh	r3, [r4, #12]
 800a03c:	6126      	str	r6, [r4, #16]
 800a03e:	6165      	str	r5, [r4, #20]
 800a040:	444e      	add	r6, r9
 800a042:	eba5 0509 	sub.w	r5, r5, r9
 800a046:	6026      	str	r6, [r4, #0]
 800a048:	60a5      	str	r5, [r4, #8]
 800a04a:	463e      	mov	r6, r7
 800a04c:	42be      	cmp	r6, r7
 800a04e:	d900      	bls.n	800a052 <__ssputs_r+0x86>
 800a050:	463e      	mov	r6, r7
 800a052:	6820      	ldr	r0, [r4, #0]
 800a054:	4632      	mov	r2, r6
 800a056:	4641      	mov	r1, r8
 800a058:	f000 f980 	bl	800a35c <memmove>
 800a05c:	68a3      	ldr	r3, [r4, #8]
 800a05e:	1b9b      	subs	r3, r3, r6
 800a060:	60a3      	str	r3, [r4, #8]
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	4433      	add	r3, r6
 800a066:	6023      	str	r3, [r4, #0]
 800a068:	2000      	movs	r0, #0
 800a06a:	e7db      	b.n	800a024 <__ssputs_r+0x58>
 800a06c:	462a      	mov	r2, r5
 800a06e:	f000 f99b 	bl	800a3a8 <_realloc_r>
 800a072:	4606      	mov	r6, r0
 800a074:	2800      	cmp	r0, #0
 800a076:	d1e1      	bne.n	800a03c <__ssputs_r+0x70>
 800a078:	6921      	ldr	r1, [r4, #16]
 800a07a:	4650      	mov	r0, sl
 800a07c:	f7ff fec6 	bl	8009e0c <_free_r>
 800a080:	e7c7      	b.n	800a012 <__ssputs_r+0x46>
	...

0800a084 <_svfiprintf_r>:
 800a084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a088:	4698      	mov	r8, r3
 800a08a:	898b      	ldrh	r3, [r1, #12]
 800a08c:	061b      	lsls	r3, r3, #24
 800a08e:	b09d      	sub	sp, #116	; 0x74
 800a090:	4607      	mov	r7, r0
 800a092:	460d      	mov	r5, r1
 800a094:	4614      	mov	r4, r2
 800a096:	d50e      	bpl.n	800a0b6 <_svfiprintf_r+0x32>
 800a098:	690b      	ldr	r3, [r1, #16]
 800a09a:	b963      	cbnz	r3, 800a0b6 <_svfiprintf_r+0x32>
 800a09c:	2140      	movs	r1, #64	; 0x40
 800a09e:	f7ff ff21 	bl	8009ee4 <_malloc_r>
 800a0a2:	6028      	str	r0, [r5, #0]
 800a0a4:	6128      	str	r0, [r5, #16]
 800a0a6:	b920      	cbnz	r0, 800a0b2 <_svfiprintf_r+0x2e>
 800a0a8:	230c      	movs	r3, #12
 800a0aa:	603b      	str	r3, [r7, #0]
 800a0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b0:	e0d1      	b.n	800a256 <_svfiprintf_r+0x1d2>
 800a0b2:	2340      	movs	r3, #64	; 0x40
 800a0b4:	616b      	str	r3, [r5, #20]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ba:	2320      	movs	r3, #32
 800a0bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0c4:	2330      	movs	r3, #48	; 0x30
 800a0c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a270 <_svfiprintf_r+0x1ec>
 800a0ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0ce:	f04f 0901 	mov.w	r9, #1
 800a0d2:	4623      	mov	r3, r4
 800a0d4:	469a      	mov	sl, r3
 800a0d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0da:	b10a      	cbz	r2, 800a0e0 <_svfiprintf_r+0x5c>
 800a0dc:	2a25      	cmp	r2, #37	; 0x25
 800a0de:	d1f9      	bne.n	800a0d4 <_svfiprintf_r+0x50>
 800a0e0:	ebba 0b04 	subs.w	fp, sl, r4
 800a0e4:	d00b      	beq.n	800a0fe <_svfiprintf_r+0x7a>
 800a0e6:	465b      	mov	r3, fp
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	4638      	mov	r0, r7
 800a0ee:	f7ff ff6d 	bl	8009fcc <__ssputs_r>
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	f000 80aa 	beq.w	800a24c <_svfiprintf_r+0x1c8>
 800a0f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0fa:	445a      	add	r2, fp
 800a0fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a102:	2b00      	cmp	r3, #0
 800a104:	f000 80a2 	beq.w	800a24c <_svfiprintf_r+0x1c8>
 800a108:	2300      	movs	r3, #0
 800a10a:	f04f 32ff 	mov.w	r2, #4294967295
 800a10e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a112:	f10a 0a01 	add.w	sl, sl, #1
 800a116:	9304      	str	r3, [sp, #16]
 800a118:	9307      	str	r3, [sp, #28]
 800a11a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a11e:	931a      	str	r3, [sp, #104]	; 0x68
 800a120:	4654      	mov	r4, sl
 800a122:	2205      	movs	r2, #5
 800a124:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a128:	4851      	ldr	r0, [pc, #324]	; (800a270 <_svfiprintf_r+0x1ec>)
 800a12a:	f7f6 f861 	bl	80001f0 <memchr>
 800a12e:	9a04      	ldr	r2, [sp, #16]
 800a130:	b9d8      	cbnz	r0, 800a16a <_svfiprintf_r+0xe6>
 800a132:	06d0      	lsls	r0, r2, #27
 800a134:	bf44      	itt	mi
 800a136:	2320      	movmi	r3, #32
 800a138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a13c:	0711      	lsls	r1, r2, #28
 800a13e:	bf44      	itt	mi
 800a140:	232b      	movmi	r3, #43	; 0x2b
 800a142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a146:	f89a 3000 	ldrb.w	r3, [sl]
 800a14a:	2b2a      	cmp	r3, #42	; 0x2a
 800a14c:	d015      	beq.n	800a17a <_svfiprintf_r+0xf6>
 800a14e:	9a07      	ldr	r2, [sp, #28]
 800a150:	4654      	mov	r4, sl
 800a152:	2000      	movs	r0, #0
 800a154:	f04f 0c0a 	mov.w	ip, #10
 800a158:	4621      	mov	r1, r4
 800a15a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a15e:	3b30      	subs	r3, #48	; 0x30
 800a160:	2b09      	cmp	r3, #9
 800a162:	d94e      	bls.n	800a202 <_svfiprintf_r+0x17e>
 800a164:	b1b0      	cbz	r0, 800a194 <_svfiprintf_r+0x110>
 800a166:	9207      	str	r2, [sp, #28]
 800a168:	e014      	b.n	800a194 <_svfiprintf_r+0x110>
 800a16a:	eba0 0308 	sub.w	r3, r0, r8
 800a16e:	fa09 f303 	lsl.w	r3, r9, r3
 800a172:	4313      	orrs	r3, r2
 800a174:	9304      	str	r3, [sp, #16]
 800a176:	46a2      	mov	sl, r4
 800a178:	e7d2      	b.n	800a120 <_svfiprintf_r+0x9c>
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	1d19      	adds	r1, r3, #4
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	9103      	str	r1, [sp, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	bfbb      	ittet	lt
 800a186:	425b      	neglt	r3, r3
 800a188:	f042 0202 	orrlt.w	r2, r2, #2
 800a18c:	9307      	strge	r3, [sp, #28]
 800a18e:	9307      	strlt	r3, [sp, #28]
 800a190:	bfb8      	it	lt
 800a192:	9204      	strlt	r2, [sp, #16]
 800a194:	7823      	ldrb	r3, [r4, #0]
 800a196:	2b2e      	cmp	r3, #46	; 0x2e
 800a198:	d10c      	bne.n	800a1b4 <_svfiprintf_r+0x130>
 800a19a:	7863      	ldrb	r3, [r4, #1]
 800a19c:	2b2a      	cmp	r3, #42	; 0x2a
 800a19e:	d135      	bne.n	800a20c <_svfiprintf_r+0x188>
 800a1a0:	9b03      	ldr	r3, [sp, #12]
 800a1a2:	1d1a      	adds	r2, r3, #4
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	9203      	str	r2, [sp, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	bfb8      	it	lt
 800a1ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1b0:	3402      	adds	r4, #2
 800a1b2:	9305      	str	r3, [sp, #20]
 800a1b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a280 <_svfiprintf_r+0x1fc>
 800a1b8:	7821      	ldrb	r1, [r4, #0]
 800a1ba:	2203      	movs	r2, #3
 800a1bc:	4650      	mov	r0, sl
 800a1be:	f7f6 f817 	bl	80001f0 <memchr>
 800a1c2:	b140      	cbz	r0, 800a1d6 <_svfiprintf_r+0x152>
 800a1c4:	2340      	movs	r3, #64	; 0x40
 800a1c6:	eba0 000a 	sub.w	r0, r0, sl
 800a1ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a1ce:	9b04      	ldr	r3, [sp, #16]
 800a1d0:	4303      	orrs	r3, r0
 800a1d2:	3401      	adds	r4, #1
 800a1d4:	9304      	str	r3, [sp, #16]
 800a1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1da:	4826      	ldr	r0, [pc, #152]	; (800a274 <_svfiprintf_r+0x1f0>)
 800a1dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1e0:	2206      	movs	r2, #6
 800a1e2:	f7f6 f805 	bl	80001f0 <memchr>
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	d038      	beq.n	800a25c <_svfiprintf_r+0x1d8>
 800a1ea:	4b23      	ldr	r3, [pc, #140]	; (800a278 <_svfiprintf_r+0x1f4>)
 800a1ec:	bb1b      	cbnz	r3, 800a236 <_svfiprintf_r+0x1b2>
 800a1ee:	9b03      	ldr	r3, [sp, #12]
 800a1f0:	3307      	adds	r3, #7
 800a1f2:	f023 0307 	bic.w	r3, r3, #7
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	9303      	str	r3, [sp, #12]
 800a1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fc:	4433      	add	r3, r6
 800a1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a200:	e767      	b.n	800a0d2 <_svfiprintf_r+0x4e>
 800a202:	fb0c 3202 	mla	r2, ip, r2, r3
 800a206:	460c      	mov	r4, r1
 800a208:	2001      	movs	r0, #1
 800a20a:	e7a5      	b.n	800a158 <_svfiprintf_r+0xd4>
 800a20c:	2300      	movs	r3, #0
 800a20e:	3401      	adds	r4, #1
 800a210:	9305      	str	r3, [sp, #20]
 800a212:	4619      	mov	r1, r3
 800a214:	f04f 0c0a 	mov.w	ip, #10
 800a218:	4620      	mov	r0, r4
 800a21a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a21e:	3a30      	subs	r2, #48	; 0x30
 800a220:	2a09      	cmp	r2, #9
 800a222:	d903      	bls.n	800a22c <_svfiprintf_r+0x1a8>
 800a224:	2b00      	cmp	r3, #0
 800a226:	d0c5      	beq.n	800a1b4 <_svfiprintf_r+0x130>
 800a228:	9105      	str	r1, [sp, #20]
 800a22a:	e7c3      	b.n	800a1b4 <_svfiprintf_r+0x130>
 800a22c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a230:	4604      	mov	r4, r0
 800a232:	2301      	movs	r3, #1
 800a234:	e7f0      	b.n	800a218 <_svfiprintf_r+0x194>
 800a236:	ab03      	add	r3, sp, #12
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	462a      	mov	r2, r5
 800a23c:	4b0f      	ldr	r3, [pc, #60]	; (800a27c <_svfiprintf_r+0x1f8>)
 800a23e:	a904      	add	r1, sp, #16
 800a240:	4638      	mov	r0, r7
 800a242:	f7fc fa47 	bl	80066d4 <_printf_float>
 800a246:	1c42      	adds	r2, r0, #1
 800a248:	4606      	mov	r6, r0
 800a24a:	d1d6      	bne.n	800a1fa <_svfiprintf_r+0x176>
 800a24c:	89ab      	ldrh	r3, [r5, #12]
 800a24e:	065b      	lsls	r3, r3, #25
 800a250:	f53f af2c 	bmi.w	800a0ac <_svfiprintf_r+0x28>
 800a254:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a256:	b01d      	add	sp, #116	; 0x74
 800a258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25c:	ab03      	add	r3, sp, #12
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	462a      	mov	r2, r5
 800a262:	4b06      	ldr	r3, [pc, #24]	; (800a27c <_svfiprintf_r+0x1f8>)
 800a264:	a904      	add	r1, sp, #16
 800a266:	4638      	mov	r0, r7
 800a268:	f7fc fcd8 	bl	8006c1c <_printf_i>
 800a26c:	e7eb      	b.n	800a246 <_svfiprintf_r+0x1c2>
 800a26e:	bf00      	nop
 800a270:	0800b2d4 	.word	0x0800b2d4
 800a274:	0800b2de 	.word	0x0800b2de
 800a278:	080066d5 	.word	0x080066d5
 800a27c:	08009fcd 	.word	0x08009fcd
 800a280:	0800b2da 	.word	0x0800b2da
 800a284:	00000000 	.word	0x00000000

0800a288 <nan>:
 800a288:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a290 <nan+0x8>
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	00000000 	.word	0x00000000
 800a294:	7ff80000 	.word	0x7ff80000

0800a298 <_sbrk_r>:
 800a298:	b538      	push	{r3, r4, r5, lr}
 800a29a:	4d06      	ldr	r5, [pc, #24]	; (800a2b4 <_sbrk_r+0x1c>)
 800a29c:	2300      	movs	r3, #0
 800a29e:	4604      	mov	r4, r0
 800a2a0:	4608      	mov	r0, r1
 800a2a2:	602b      	str	r3, [r5, #0]
 800a2a4:	f7f8 fb58 	bl	8002958 <_sbrk>
 800a2a8:	1c43      	adds	r3, r0, #1
 800a2aa:	d102      	bne.n	800a2b2 <_sbrk_r+0x1a>
 800a2ac:	682b      	ldr	r3, [r5, #0]
 800a2ae:	b103      	cbz	r3, 800a2b2 <_sbrk_r+0x1a>
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	bd38      	pop	{r3, r4, r5, pc}
 800a2b4:	20000640 	.word	0x20000640

0800a2b8 <strncmp>:
 800a2b8:	b510      	push	{r4, lr}
 800a2ba:	b17a      	cbz	r2, 800a2dc <strncmp+0x24>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	3901      	subs	r1, #1
 800a2c0:	1884      	adds	r4, r0, r2
 800a2c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a2c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a2ca:	4290      	cmp	r0, r2
 800a2cc:	d101      	bne.n	800a2d2 <strncmp+0x1a>
 800a2ce:	42a3      	cmp	r3, r4
 800a2d0:	d101      	bne.n	800a2d6 <strncmp+0x1e>
 800a2d2:	1a80      	subs	r0, r0, r2
 800a2d4:	bd10      	pop	{r4, pc}
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d1f3      	bne.n	800a2c2 <strncmp+0xa>
 800a2da:	e7fa      	b.n	800a2d2 <strncmp+0x1a>
 800a2dc:	4610      	mov	r0, r2
 800a2de:	e7f9      	b.n	800a2d4 <strncmp+0x1c>

0800a2e0 <__ascii_wctomb>:
 800a2e0:	b149      	cbz	r1, 800a2f6 <__ascii_wctomb+0x16>
 800a2e2:	2aff      	cmp	r2, #255	; 0xff
 800a2e4:	bf85      	ittet	hi
 800a2e6:	238a      	movhi	r3, #138	; 0x8a
 800a2e8:	6003      	strhi	r3, [r0, #0]
 800a2ea:	700a      	strbls	r2, [r1, #0]
 800a2ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800a2f0:	bf98      	it	ls
 800a2f2:	2001      	movls	r0, #1
 800a2f4:	4770      	bx	lr
 800a2f6:	4608      	mov	r0, r1
 800a2f8:	4770      	bx	lr
	...

0800a2fc <__assert_func>:
 800a2fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2fe:	4614      	mov	r4, r2
 800a300:	461a      	mov	r2, r3
 800a302:	4b09      	ldr	r3, [pc, #36]	; (800a328 <__assert_func+0x2c>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4605      	mov	r5, r0
 800a308:	68d8      	ldr	r0, [r3, #12]
 800a30a:	b14c      	cbz	r4, 800a320 <__assert_func+0x24>
 800a30c:	4b07      	ldr	r3, [pc, #28]	; (800a32c <__assert_func+0x30>)
 800a30e:	9100      	str	r1, [sp, #0]
 800a310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a314:	4906      	ldr	r1, [pc, #24]	; (800a330 <__assert_func+0x34>)
 800a316:	462b      	mov	r3, r5
 800a318:	f000 f80e 	bl	800a338 <fiprintf>
 800a31c:	f000 fa8c 	bl	800a838 <abort>
 800a320:	4b04      	ldr	r3, [pc, #16]	; (800a334 <__assert_func+0x38>)
 800a322:	461c      	mov	r4, r3
 800a324:	e7f3      	b.n	800a30e <__assert_func+0x12>
 800a326:	bf00      	nop
 800a328:	2000003c 	.word	0x2000003c
 800a32c:	0800b2e5 	.word	0x0800b2e5
 800a330:	0800b2f2 	.word	0x0800b2f2
 800a334:	0800b320 	.word	0x0800b320

0800a338 <fiprintf>:
 800a338:	b40e      	push	{r1, r2, r3}
 800a33a:	b503      	push	{r0, r1, lr}
 800a33c:	4601      	mov	r1, r0
 800a33e:	ab03      	add	r3, sp, #12
 800a340:	4805      	ldr	r0, [pc, #20]	; (800a358 <fiprintf+0x20>)
 800a342:	f853 2b04 	ldr.w	r2, [r3], #4
 800a346:	6800      	ldr	r0, [r0, #0]
 800a348:	9301      	str	r3, [sp, #4]
 800a34a:	f000 f885 	bl	800a458 <_vfiprintf_r>
 800a34e:	b002      	add	sp, #8
 800a350:	f85d eb04 	ldr.w	lr, [sp], #4
 800a354:	b003      	add	sp, #12
 800a356:	4770      	bx	lr
 800a358:	2000003c 	.word	0x2000003c

0800a35c <memmove>:
 800a35c:	4288      	cmp	r0, r1
 800a35e:	b510      	push	{r4, lr}
 800a360:	eb01 0402 	add.w	r4, r1, r2
 800a364:	d902      	bls.n	800a36c <memmove+0x10>
 800a366:	4284      	cmp	r4, r0
 800a368:	4623      	mov	r3, r4
 800a36a:	d807      	bhi.n	800a37c <memmove+0x20>
 800a36c:	1e43      	subs	r3, r0, #1
 800a36e:	42a1      	cmp	r1, r4
 800a370:	d008      	beq.n	800a384 <memmove+0x28>
 800a372:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a376:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a37a:	e7f8      	b.n	800a36e <memmove+0x12>
 800a37c:	4402      	add	r2, r0
 800a37e:	4601      	mov	r1, r0
 800a380:	428a      	cmp	r2, r1
 800a382:	d100      	bne.n	800a386 <memmove+0x2a>
 800a384:	bd10      	pop	{r4, pc}
 800a386:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a38a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a38e:	e7f7      	b.n	800a380 <memmove+0x24>

0800a390 <__malloc_lock>:
 800a390:	4801      	ldr	r0, [pc, #4]	; (800a398 <__malloc_lock+0x8>)
 800a392:	f000 bc11 	b.w	800abb8 <__retarget_lock_acquire_recursive>
 800a396:	bf00      	nop
 800a398:	20000644 	.word	0x20000644

0800a39c <__malloc_unlock>:
 800a39c:	4801      	ldr	r0, [pc, #4]	; (800a3a4 <__malloc_unlock+0x8>)
 800a39e:	f000 bc0c 	b.w	800abba <__retarget_lock_release_recursive>
 800a3a2:	bf00      	nop
 800a3a4:	20000644 	.word	0x20000644

0800a3a8 <_realloc_r>:
 800a3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ac:	4680      	mov	r8, r0
 800a3ae:	4614      	mov	r4, r2
 800a3b0:	460e      	mov	r6, r1
 800a3b2:	b921      	cbnz	r1, 800a3be <_realloc_r+0x16>
 800a3b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b8:	4611      	mov	r1, r2
 800a3ba:	f7ff bd93 	b.w	8009ee4 <_malloc_r>
 800a3be:	b92a      	cbnz	r2, 800a3cc <_realloc_r+0x24>
 800a3c0:	f7ff fd24 	bl	8009e0c <_free_r>
 800a3c4:	4625      	mov	r5, r4
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3cc:	f000 fc5c 	bl	800ac88 <_malloc_usable_size_r>
 800a3d0:	4284      	cmp	r4, r0
 800a3d2:	4607      	mov	r7, r0
 800a3d4:	d802      	bhi.n	800a3dc <_realloc_r+0x34>
 800a3d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a3da:	d812      	bhi.n	800a402 <_realloc_r+0x5a>
 800a3dc:	4621      	mov	r1, r4
 800a3de:	4640      	mov	r0, r8
 800a3e0:	f7ff fd80 	bl	8009ee4 <_malloc_r>
 800a3e4:	4605      	mov	r5, r0
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d0ed      	beq.n	800a3c6 <_realloc_r+0x1e>
 800a3ea:	42bc      	cmp	r4, r7
 800a3ec:	4622      	mov	r2, r4
 800a3ee:	4631      	mov	r1, r6
 800a3f0:	bf28      	it	cs
 800a3f2:	463a      	movcs	r2, r7
 800a3f4:	f7ff f824 	bl	8009440 <memcpy>
 800a3f8:	4631      	mov	r1, r6
 800a3fa:	4640      	mov	r0, r8
 800a3fc:	f7ff fd06 	bl	8009e0c <_free_r>
 800a400:	e7e1      	b.n	800a3c6 <_realloc_r+0x1e>
 800a402:	4635      	mov	r5, r6
 800a404:	e7df      	b.n	800a3c6 <_realloc_r+0x1e>

0800a406 <__sfputc_r>:
 800a406:	6893      	ldr	r3, [r2, #8]
 800a408:	3b01      	subs	r3, #1
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	b410      	push	{r4}
 800a40e:	6093      	str	r3, [r2, #8]
 800a410:	da08      	bge.n	800a424 <__sfputc_r+0x1e>
 800a412:	6994      	ldr	r4, [r2, #24]
 800a414:	42a3      	cmp	r3, r4
 800a416:	db01      	blt.n	800a41c <__sfputc_r+0x16>
 800a418:	290a      	cmp	r1, #10
 800a41a:	d103      	bne.n	800a424 <__sfputc_r+0x1e>
 800a41c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a420:	f000 b94a 	b.w	800a6b8 <__swbuf_r>
 800a424:	6813      	ldr	r3, [r2, #0]
 800a426:	1c58      	adds	r0, r3, #1
 800a428:	6010      	str	r0, [r2, #0]
 800a42a:	7019      	strb	r1, [r3, #0]
 800a42c:	4608      	mov	r0, r1
 800a42e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <__sfputs_r>:
 800a434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a436:	4606      	mov	r6, r0
 800a438:	460f      	mov	r7, r1
 800a43a:	4614      	mov	r4, r2
 800a43c:	18d5      	adds	r5, r2, r3
 800a43e:	42ac      	cmp	r4, r5
 800a440:	d101      	bne.n	800a446 <__sfputs_r+0x12>
 800a442:	2000      	movs	r0, #0
 800a444:	e007      	b.n	800a456 <__sfputs_r+0x22>
 800a446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a44a:	463a      	mov	r2, r7
 800a44c:	4630      	mov	r0, r6
 800a44e:	f7ff ffda 	bl	800a406 <__sfputc_r>
 800a452:	1c43      	adds	r3, r0, #1
 800a454:	d1f3      	bne.n	800a43e <__sfputs_r+0xa>
 800a456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a458 <_vfiprintf_r>:
 800a458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45c:	460d      	mov	r5, r1
 800a45e:	b09d      	sub	sp, #116	; 0x74
 800a460:	4614      	mov	r4, r2
 800a462:	4698      	mov	r8, r3
 800a464:	4606      	mov	r6, r0
 800a466:	b118      	cbz	r0, 800a470 <_vfiprintf_r+0x18>
 800a468:	6983      	ldr	r3, [r0, #24]
 800a46a:	b90b      	cbnz	r3, 800a470 <_vfiprintf_r+0x18>
 800a46c:	f000 fb06 	bl	800aa7c <__sinit>
 800a470:	4b89      	ldr	r3, [pc, #548]	; (800a698 <_vfiprintf_r+0x240>)
 800a472:	429d      	cmp	r5, r3
 800a474:	d11b      	bne.n	800a4ae <_vfiprintf_r+0x56>
 800a476:	6875      	ldr	r5, [r6, #4]
 800a478:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a47a:	07d9      	lsls	r1, r3, #31
 800a47c:	d405      	bmi.n	800a48a <_vfiprintf_r+0x32>
 800a47e:	89ab      	ldrh	r3, [r5, #12]
 800a480:	059a      	lsls	r2, r3, #22
 800a482:	d402      	bmi.n	800a48a <_vfiprintf_r+0x32>
 800a484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a486:	f000 fb97 	bl	800abb8 <__retarget_lock_acquire_recursive>
 800a48a:	89ab      	ldrh	r3, [r5, #12]
 800a48c:	071b      	lsls	r3, r3, #28
 800a48e:	d501      	bpl.n	800a494 <_vfiprintf_r+0x3c>
 800a490:	692b      	ldr	r3, [r5, #16]
 800a492:	b9eb      	cbnz	r3, 800a4d0 <_vfiprintf_r+0x78>
 800a494:	4629      	mov	r1, r5
 800a496:	4630      	mov	r0, r6
 800a498:	f000 f960 	bl	800a75c <__swsetup_r>
 800a49c:	b1c0      	cbz	r0, 800a4d0 <_vfiprintf_r+0x78>
 800a49e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4a0:	07dc      	lsls	r4, r3, #31
 800a4a2:	d50e      	bpl.n	800a4c2 <_vfiprintf_r+0x6a>
 800a4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a8:	b01d      	add	sp, #116	; 0x74
 800a4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ae:	4b7b      	ldr	r3, [pc, #492]	; (800a69c <_vfiprintf_r+0x244>)
 800a4b0:	429d      	cmp	r5, r3
 800a4b2:	d101      	bne.n	800a4b8 <_vfiprintf_r+0x60>
 800a4b4:	68b5      	ldr	r5, [r6, #8]
 800a4b6:	e7df      	b.n	800a478 <_vfiprintf_r+0x20>
 800a4b8:	4b79      	ldr	r3, [pc, #484]	; (800a6a0 <_vfiprintf_r+0x248>)
 800a4ba:	429d      	cmp	r5, r3
 800a4bc:	bf08      	it	eq
 800a4be:	68f5      	ldreq	r5, [r6, #12]
 800a4c0:	e7da      	b.n	800a478 <_vfiprintf_r+0x20>
 800a4c2:	89ab      	ldrh	r3, [r5, #12]
 800a4c4:	0598      	lsls	r0, r3, #22
 800a4c6:	d4ed      	bmi.n	800a4a4 <_vfiprintf_r+0x4c>
 800a4c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4ca:	f000 fb76 	bl	800abba <__retarget_lock_release_recursive>
 800a4ce:	e7e9      	b.n	800a4a4 <_vfiprintf_r+0x4c>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d4:	2320      	movs	r3, #32
 800a4d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4da:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4de:	2330      	movs	r3, #48	; 0x30
 800a4e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a6a4 <_vfiprintf_r+0x24c>
 800a4e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4e8:	f04f 0901 	mov.w	r9, #1
 800a4ec:	4623      	mov	r3, r4
 800a4ee:	469a      	mov	sl, r3
 800a4f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4f4:	b10a      	cbz	r2, 800a4fa <_vfiprintf_r+0xa2>
 800a4f6:	2a25      	cmp	r2, #37	; 0x25
 800a4f8:	d1f9      	bne.n	800a4ee <_vfiprintf_r+0x96>
 800a4fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a4fe:	d00b      	beq.n	800a518 <_vfiprintf_r+0xc0>
 800a500:	465b      	mov	r3, fp
 800a502:	4622      	mov	r2, r4
 800a504:	4629      	mov	r1, r5
 800a506:	4630      	mov	r0, r6
 800a508:	f7ff ff94 	bl	800a434 <__sfputs_r>
 800a50c:	3001      	adds	r0, #1
 800a50e:	f000 80aa 	beq.w	800a666 <_vfiprintf_r+0x20e>
 800a512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a514:	445a      	add	r2, fp
 800a516:	9209      	str	r2, [sp, #36]	; 0x24
 800a518:	f89a 3000 	ldrb.w	r3, [sl]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 80a2 	beq.w	800a666 <_vfiprintf_r+0x20e>
 800a522:	2300      	movs	r3, #0
 800a524:	f04f 32ff 	mov.w	r2, #4294967295
 800a528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a52c:	f10a 0a01 	add.w	sl, sl, #1
 800a530:	9304      	str	r3, [sp, #16]
 800a532:	9307      	str	r3, [sp, #28]
 800a534:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a538:	931a      	str	r3, [sp, #104]	; 0x68
 800a53a:	4654      	mov	r4, sl
 800a53c:	2205      	movs	r2, #5
 800a53e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a542:	4858      	ldr	r0, [pc, #352]	; (800a6a4 <_vfiprintf_r+0x24c>)
 800a544:	f7f5 fe54 	bl	80001f0 <memchr>
 800a548:	9a04      	ldr	r2, [sp, #16]
 800a54a:	b9d8      	cbnz	r0, 800a584 <_vfiprintf_r+0x12c>
 800a54c:	06d1      	lsls	r1, r2, #27
 800a54e:	bf44      	itt	mi
 800a550:	2320      	movmi	r3, #32
 800a552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a556:	0713      	lsls	r3, r2, #28
 800a558:	bf44      	itt	mi
 800a55a:	232b      	movmi	r3, #43	; 0x2b
 800a55c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a560:	f89a 3000 	ldrb.w	r3, [sl]
 800a564:	2b2a      	cmp	r3, #42	; 0x2a
 800a566:	d015      	beq.n	800a594 <_vfiprintf_r+0x13c>
 800a568:	9a07      	ldr	r2, [sp, #28]
 800a56a:	4654      	mov	r4, sl
 800a56c:	2000      	movs	r0, #0
 800a56e:	f04f 0c0a 	mov.w	ip, #10
 800a572:	4621      	mov	r1, r4
 800a574:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a578:	3b30      	subs	r3, #48	; 0x30
 800a57a:	2b09      	cmp	r3, #9
 800a57c:	d94e      	bls.n	800a61c <_vfiprintf_r+0x1c4>
 800a57e:	b1b0      	cbz	r0, 800a5ae <_vfiprintf_r+0x156>
 800a580:	9207      	str	r2, [sp, #28]
 800a582:	e014      	b.n	800a5ae <_vfiprintf_r+0x156>
 800a584:	eba0 0308 	sub.w	r3, r0, r8
 800a588:	fa09 f303 	lsl.w	r3, r9, r3
 800a58c:	4313      	orrs	r3, r2
 800a58e:	9304      	str	r3, [sp, #16]
 800a590:	46a2      	mov	sl, r4
 800a592:	e7d2      	b.n	800a53a <_vfiprintf_r+0xe2>
 800a594:	9b03      	ldr	r3, [sp, #12]
 800a596:	1d19      	adds	r1, r3, #4
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	9103      	str	r1, [sp, #12]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	bfbb      	ittet	lt
 800a5a0:	425b      	neglt	r3, r3
 800a5a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a5a6:	9307      	strge	r3, [sp, #28]
 800a5a8:	9307      	strlt	r3, [sp, #28]
 800a5aa:	bfb8      	it	lt
 800a5ac:	9204      	strlt	r2, [sp, #16]
 800a5ae:	7823      	ldrb	r3, [r4, #0]
 800a5b0:	2b2e      	cmp	r3, #46	; 0x2e
 800a5b2:	d10c      	bne.n	800a5ce <_vfiprintf_r+0x176>
 800a5b4:	7863      	ldrb	r3, [r4, #1]
 800a5b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a5b8:	d135      	bne.n	800a626 <_vfiprintf_r+0x1ce>
 800a5ba:	9b03      	ldr	r3, [sp, #12]
 800a5bc:	1d1a      	adds	r2, r3, #4
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	9203      	str	r2, [sp, #12]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	bfb8      	it	lt
 800a5c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5ca:	3402      	adds	r4, #2
 800a5cc:	9305      	str	r3, [sp, #20]
 800a5ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a6b4 <_vfiprintf_r+0x25c>
 800a5d2:	7821      	ldrb	r1, [r4, #0]
 800a5d4:	2203      	movs	r2, #3
 800a5d6:	4650      	mov	r0, sl
 800a5d8:	f7f5 fe0a 	bl	80001f0 <memchr>
 800a5dc:	b140      	cbz	r0, 800a5f0 <_vfiprintf_r+0x198>
 800a5de:	2340      	movs	r3, #64	; 0x40
 800a5e0:	eba0 000a 	sub.w	r0, r0, sl
 800a5e4:	fa03 f000 	lsl.w	r0, r3, r0
 800a5e8:	9b04      	ldr	r3, [sp, #16]
 800a5ea:	4303      	orrs	r3, r0
 800a5ec:	3401      	adds	r4, #1
 800a5ee:	9304      	str	r3, [sp, #16]
 800a5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f4:	482c      	ldr	r0, [pc, #176]	; (800a6a8 <_vfiprintf_r+0x250>)
 800a5f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5fa:	2206      	movs	r2, #6
 800a5fc:	f7f5 fdf8 	bl	80001f0 <memchr>
 800a600:	2800      	cmp	r0, #0
 800a602:	d03f      	beq.n	800a684 <_vfiprintf_r+0x22c>
 800a604:	4b29      	ldr	r3, [pc, #164]	; (800a6ac <_vfiprintf_r+0x254>)
 800a606:	bb1b      	cbnz	r3, 800a650 <_vfiprintf_r+0x1f8>
 800a608:	9b03      	ldr	r3, [sp, #12]
 800a60a:	3307      	adds	r3, #7
 800a60c:	f023 0307 	bic.w	r3, r3, #7
 800a610:	3308      	adds	r3, #8
 800a612:	9303      	str	r3, [sp, #12]
 800a614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a616:	443b      	add	r3, r7
 800a618:	9309      	str	r3, [sp, #36]	; 0x24
 800a61a:	e767      	b.n	800a4ec <_vfiprintf_r+0x94>
 800a61c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a620:	460c      	mov	r4, r1
 800a622:	2001      	movs	r0, #1
 800a624:	e7a5      	b.n	800a572 <_vfiprintf_r+0x11a>
 800a626:	2300      	movs	r3, #0
 800a628:	3401      	adds	r4, #1
 800a62a:	9305      	str	r3, [sp, #20]
 800a62c:	4619      	mov	r1, r3
 800a62e:	f04f 0c0a 	mov.w	ip, #10
 800a632:	4620      	mov	r0, r4
 800a634:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a638:	3a30      	subs	r2, #48	; 0x30
 800a63a:	2a09      	cmp	r2, #9
 800a63c:	d903      	bls.n	800a646 <_vfiprintf_r+0x1ee>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d0c5      	beq.n	800a5ce <_vfiprintf_r+0x176>
 800a642:	9105      	str	r1, [sp, #20]
 800a644:	e7c3      	b.n	800a5ce <_vfiprintf_r+0x176>
 800a646:	fb0c 2101 	mla	r1, ip, r1, r2
 800a64a:	4604      	mov	r4, r0
 800a64c:	2301      	movs	r3, #1
 800a64e:	e7f0      	b.n	800a632 <_vfiprintf_r+0x1da>
 800a650:	ab03      	add	r3, sp, #12
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	462a      	mov	r2, r5
 800a656:	4b16      	ldr	r3, [pc, #88]	; (800a6b0 <_vfiprintf_r+0x258>)
 800a658:	a904      	add	r1, sp, #16
 800a65a:	4630      	mov	r0, r6
 800a65c:	f7fc f83a 	bl	80066d4 <_printf_float>
 800a660:	4607      	mov	r7, r0
 800a662:	1c78      	adds	r0, r7, #1
 800a664:	d1d6      	bne.n	800a614 <_vfiprintf_r+0x1bc>
 800a666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a668:	07d9      	lsls	r1, r3, #31
 800a66a:	d405      	bmi.n	800a678 <_vfiprintf_r+0x220>
 800a66c:	89ab      	ldrh	r3, [r5, #12]
 800a66e:	059a      	lsls	r2, r3, #22
 800a670:	d402      	bmi.n	800a678 <_vfiprintf_r+0x220>
 800a672:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a674:	f000 faa1 	bl	800abba <__retarget_lock_release_recursive>
 800a678:	89ab      	ldrh	r3, [r5, #12]
 800a67a:	065b      	lsls	r3, r3, #25
 800a67c:	f53f af12 	bmi.w	800a4a4 <_vfiprintf_r+0x4c>
 800a680:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a682:	e711      	b.n	800a4a8 <_vfiprintf_r+0x50>
 800a684:	ab03      	add	r3, sp, #12
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	462a      	mov	r2, r5
 800a68a:	4b09      	ldr	r3, [pc, #36]	; (800a6b0 <_vfiprintf_r+0x258>)
 800a68c:	a904      	add	r1, sp, #16
 800a68e:	4630      	mov	r0, r6
 800a690:	f7fc fac4 	bl	8006c1c <_printf_i>
 800a694:	e7e4      	b.n	800a660 <_vfiprintf_r+0x208>
 800a696:	bf00      	nop
 800a698:	0800b344 	.word	0x0800b344
 800a69c:	0800b364 	.word	0x0800b364
 800a6a0:	0800b324 	.word	0x0800b324
 800a6a4:	0800b2d4 	.word	0x0800b2d4
 800a6a8:	0800b2de 	.word	0x0800b2de
 800a6ac:	080066d5 	.word	0x080066d5
 800a6b0:	0800a435 	.word	0x0800a435
 800a6b4:	0800b2da 	.word	0x0800b2da

0800a6b8 <__swbuf_r>:
 800a6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ba:	460e      	mov	r6, r1
 800a6bc:	4614      	mov	r4, r2
 800a6be:	4605      	mov	r5, r0
 800a6c0:	b118      	cbz	r0, 800a6ca <__swbuf_r+0x12>
 800a6c2:	6983      	ldr	r3, [r0, #24]
 800a6c4:	b90b      	cbnz	r3, 800a6ca <__swbuf_r+0x12>
 800a6c6:	f000 f9d9 	bl	800aa7c <__sinit>
 800a6ca:	4b21      	ldr	r3, [pc, #132]	; (800a750 <__swbuf_r+0x98>)
 800a6cc:	429c      	cmp	r4, r3
 800a6ce:	d12b      	bne.n	800a728 <__swbuf_r+0x70>
 800a6d0:	686c      	ldr	r4, [r5, #4]
 800a6d2:	69a3      	ldr	r3, [r4, #24]
 800a6d4:	60a3      	str	r3, [r4, #8]
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	071a      	lsls	r2, r3, #28
 800a6da:	d52f      	bpl.n	800a73c <__swbuf_r+0x84>
 800a6dc:	6923      	ldr	r3, [r4, #16]
 800a6de:	b36b      	cbz	r3, 800a73c <__swbuf_r+0x84>
 800a6e0:	6923      	ldr	r3, [r4, #16]
 800a6e2:	6820      	ldr	r0, [r4, #0]
 800a6e4:	1ac0      	subs	r0, r0, r3
 800a6e6:	6963      	ldr	r3, [r4, #20]
 800a6e8:	b2f6      	uxtb	r6, r6
 800a6ea:	4283      	cmp	r3, r0
 800a6ec:	4637      	mov	r7, r6
 800a6ee:	dc04      	bgt.n	800a6fa <__swbuf_r+0x42>
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f000 f92e 	bl	800a954 <_fflush_r>
 800a6f8:	bb30      	cbnz	r0, 800a748 <__swbuf_r+0x90>
 800a6fa:	68a3      	ldr	r3, [r4, #8]
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	60a3      	str	r3, [r4, #8]
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	1c5a      	adds	r2, r3, #1
 800a704:	6022      	str	r2, [r4, #0]
 800a706:	701e      	strb	r6, [r3, #0]
 800a708:	6963      	ldr	r3, [r4, #20]
 800a70a:	3001      	adds	r0, #1
 800a70c:	4283      	cmp	r3, r0
 800a70e:	d004      	beq.n	800a71a <__swbuf_r+0x62>
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	07db      	lsls	r3, r3, #31
 800a714:	d506      	bpl.n	800a724 <__swbuf_r+0x6c>
 800a716:	2e0a      	cmp	r6, #10
 800a718:	d104      	bne.n	800a724 <__swbuf_r+0x6c>
 800a71a:	4621      	mov	r1, r4
 800a71c:	4628      	mov	r0, r5
 800a71e:	f000 f919 	bl	800a954 <_fflush_r>
 800a722:	b988      	cbnz	r0, 800a748 <__swbuf_r+0x90>
 800a724:	4638      	mov	r0, r7
 800a726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a728:	4b0a      	ldr	r3, [pc, #40]	; (800a754 <__swbuf_r+0x9c>)
 800a72a:	429c      	cmp	r4, r3
 800a72c:	d101      	bne.n	800a732 <__swbuf_r+0x7a>
 800a72e:	68ac      	ldr	r4, [r5, #8]
 800a730:	e7cf      	b.n	800a6d2 <__swbuf_r+0x1a>
 800a732:	4b09      	ldr	r3, [pc, #36]	; (800a758 <__swbuf_r+0xa0>)
 800a734:	429c      	cmp	r4, r3
 800a736:	bf08      	it	eq
 800a738:	68ec      	ldreq	r4, [r5, #12]
 800a73a:	e7ca      	b.n	800a6d2 <__swbuf_r+0x1a>
 800a73c:	4621      	mov	r1, r4
 800a73e:	4628      	mov	r0, r5
 800a740:	f000 f80c 	bl	800a75c <__swsetup_r>
 800a744:	2800      	cmp	r0, #0
 800a746:	d0cb      	beq.n	800a6e0 <__swbuf_r+0x28>
 800a748:	f04f 37ff 	mov.w	r7, #4294967295
 800a74c:	e7ea      	b.n	800a724 <__swbuf_r+0x6c>
 800a74e:	bf00      	nop
 800a750:	0800b344 	.word	0x0800b344
 800a754:	0800b364 	.word	0x0800b364
 800a758:	0800b324 	.word	0x0800b324

0800a75c <__swsetup_r>:
 800a75c:	4b32      	ldr	r3, [pc, #200]	; (800a828 <__swsetup_r+0xcc>)
 800a75e:	b570      	push	{r4, r5, r6, lr}
 800a760:	681d      	ldr	r5, [r3, #0]
 800a762:	4606      	mov	r6, r0
 800a764:	460c      	mov	r4, r1
 800a766:	b125      	cbz	r5, 800a772 <__swsetup_r+0x16>
 800a768:	69ab      	ldr	r3, [r5, #24]
 800a76a:	b913      	cbnz	r3, 800a772 <__swsetup_r+0x16>
 800a76c:	4628      	mov	r0, r5
 800a76e:	f000 f985 	bl	800aa7c <__sinit>
 800a772:	4b2e      	ldr	r3, [pc, #184]	; (800a82c <__swsetup_r+0xd0>)
 800a774:	429c      	cmp	r4, r3
 800a776:	d10f      	bne.n	800a798 <__swsetup_r+0x3c>
 800a778:	686c      	ldr	r4, [r5, #4]
 800a77a:	89a3      	ldrh	r3, [r4, #12]
 800a77c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a780:	0719      	lsls	r1, r3, #28
 800a782:	d42c      	bmi.n	800a7de <__swsetup_r+0x82>
 800a784:	06dd      	lsls	r5, r3, #27
 800a786:	d411      	bmi.n	800a7ac <__swsetup_r+0x50>
 800a788:	2309      	movs	r3, #9
 800a78a:	6033      	str	r3, [r6, #0]
 800a78c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a790:	81a3      	strh	r3, [r4, #12]
 800a792:	f04f 30ff 	mov.w	r0, #4294967295
 800a796:	e03e      	b.n	800a816 <__swsetup_r+0xba>
 800a798:	4b25      	ldr	r3, [pc, #148]	; (800a830 <__swsetup_r+0xd4>)
 800a79a:	429c      	cmp	r4, r3
 800a79c:	d101      	bne.n	800a7a2 <__swsetup_r+0x46>
 800a79e:	68ac      	ldr	r4, [r5, #8]
 800a7a0:	e7eb      	b.n	800a77a <__swsetup_r+0x1e>
 800a7a2:	4b24      	ldr	r3, [pc, #144]	; (800a834 <__swsetup_r+0xd8>)
 800a7a4:	429c      	cmp	r4, r3
 800a7a6:	bf08      	it	eq
 800a7a8:	68ec      	ldreq	r4, [r5, #12]
 800a7aa:	e7e6      	b.n	800a77a <__swsetup_r+0x1e>
 800a7ac:	0758      	lsls	r0, r3, #29
 800a7ae:	d512      	bpl.n	800a7d6 <__swsetup_r+0x7a>
 800a7b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7b2:	b141      	cbz	r1, 800a7c6 <__swsetup_r+0x6a>
 800a7b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7b8:	4299      	cmp	r1, r3
 800a7ba:	d002      	beq.n	800a7c2 <__swsetup_r+0x66>
 800a7bc:	4630      	mov	r0, r6
 800a7be:	f7ff fb25 	bl	8009e0c <_free_r>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	6363      	str	r3, [r4, #52]	; 0x34
 800a7c6:	89a3      	ldrh	r3, [r4, #12]
 800a7c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a7cc:	81a3      	strh	r3, [r4, #12]
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	6063      	str	r3, [r4, #4]
 800a7d2:	6923      	ldr	r3, [r4, #16]
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	89a3      	ldrh	r3, [r4, #12]
 800a7d8:	f043 0308 	orr.w	r3, r3, #8
 800a7dc:	81a3      	strh	r3, [r4, #12]
 800a7de:	6923      	ldr	r3, [r4, #16]
 800a7e0:	b94b      	cbnz	r3, 800a7f6 <__swsetup_r+0x9a>
 800a7e2:	89a3      	ldrh	r3, [r4, #12]
 800a7e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a7e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7ec:	d003      	beq.n	800a7f6 <__swsetup_r+0x9a>
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f000 fa09 	bl	800ac08 <__smakebuf_r>
 800a7f6:	89a0      	ldrh	r0, [r4, #12]
 800a7f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7fc:	f010 0301 	ands.w	r3, r0, #1
 800a800:	d00a      	beq.n	800a818 <__swsetup_r+0xbc>
 800a802:	2300      	movs	r3, #0
 800a804:	60a3      	str	r3, [r4, #8]
 800a806:	6963      	ldr	r3, [r4, #20]
 800a808:	425b      	negs	r3, r3
 800a80a:	61a3      	str	r3, [r4, #24]
 800a80c:	6923      	ldr	r3, [r4, #16]
 800a80e:	b943      	cbnz	r3, 800a822 <__swsetup_r+0xc6>
 800a810:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a814:	d1ba      	bne.n	800a78c <__swsetup_r+0x30>
 800a816:	bd70      	pop	{r4, r5, r6, pc}
 800a818:	0781      	lsls	r1, r0, #30
 800a81a:	bf58      	it	pl
 800a81c:	6963      	ldrpl	r3, [r4, #20]
 800a81e:	60a3      	str	r3, [r4, #8]
 800a820:	e7f4      	b.n	800a80c <__swsetup_r+0xb0>
 800a822:	2000      	movs	r0, #0
 800a824:	e7f7      	b.n	800a816 <__swsetup_r+0xba>
 800a826:	bf00      	nop
 800a828:	2000003c 	.word	0x2000003c
 800a82c:	0800b344 	.word	0x0800b344
 800a830:	0800b364 	.word	0x0800b364
 800a834:	0800b324 	.word	0x0800b324

0800a838 <abort>:
 800a838:	b508      	push	{r3, lr}
 800a83a:	2006      	movs	r0, #6
 800a83c:	f000 fa54 	bl	800ace8 <raise>
 800a840:	2001      	movs	r0, #1
 800a842:	f7f8 f811 	bl	8002868 <_exit>
	...

0800a848 <__sflush_r>:
 800a848:	898a      	ldrh	r2, [r1, #12]
 800a84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a84e:	4605      	mov	r5, r0
 800a850:	0710      	lsls	r0, r2, #28
 800a852:	460c      	mov	r4, r1
 800a854:	d458      	bmi.n	800a908 <__sflush_r+0xc0>
 800a856:	684b      	ldr	r3, [r1, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	dc05      	bgt.n	800a868 <__sflush_r+0x20>
 800a85c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a85e:	2b00      	cmp	r3, #0
 800a860:	dc02      	bgt.n	800a868 <__sflush_r+0x20>
 800a862:	2000      	movs	r0, #0
 800a864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a86a:	2e00      	cmp	r6, #0
 800a86c:	d0f9      	beq.n	800a862 <__sflush_r+0x1a>
 800a86e:	2300      	movs	r3, #0
 800a870:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a874:	682f      	ldr	r7, [r5, #0]
 800a876:	602b      	str	r3, [r5, #0]
 800a878:	d032      	beq.n	800a8e0 <__sflush_r+0x98>
 800a87a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a87c:	89a3      	ldrh	r3, [r4, #12]
 800a87e:	075a      	lsls	r2, r3, #29
 800a880:	d505      	bpl.n	800a88e <__sflush_r+0x46>
 800a882:	6863      	ldr	r3, [r4, #4]
 800a884:	1ac0      	subs	r0, r0, r3
 800a886:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a888:	b10b      	cbz	r3, 800a88e <__sflush_r+0x46>
 800a88a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a88c:	1ac0      	subs	r0, r0, r3
 800a88e:	2300      	movs	r3, #0
 800a890:	4602      	mov	r2, r0
 800a892:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a894:	6a21      	ldr	r1, [r4, #32]
 800a896:	4628      	mov	r0, r5
 800a898:	47b0      	blx	r6
 800a89a:	1c43      	adds	r3, r0, #1
 800a89c:	89a3      	ldrh	r3, [r4, #12]
 800a89e:	d106      	bne.n	800a8ae <__sflush_r+0x66>
 800a8a0:	6829      	ldr	r1, [r5, #0]
 800a8a2:	291d      	cmp	r1, #29
 800a8a4:	d82c      	bhi.n	800a900 <__sflush_r+0xb8>
 800a8a6:	4a2a      	ldr	r2, [pc, #168]	; (800a950 <__sflush_r+0x108>)
 800a8a8:	40ca      	lsrs	r2, r1
 800a8aa:	07d6      	lsls	r6, r2, #31
 800a8ac:	d528      	bpl.n	800a900 <__sflush_r+0xb8>
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	6062      	str	r2, [r4, #4]
 800a8b2:	04d9      	lsls	r1, r3, #19
 800a8b4:	6922      	ldr	r2, [r4, #16]
 800a8b6:	6022      	str	r2, [r4, #0]
 800a8b8:	d504      	bpl.n	800a8c4 <__sflush_r+0x7c>
 800a8ba:	1c42      	adds	r2, r0, #1
 800a8bc:	d101      	bne.n	800a8c2 <__sflush_r+0x7a>
 800a8be:	682b      	ldr	r3, [r5, #0]
 800a8c0:	b903      	cbnz	r3, 800a8c4 <__sflush_r+0x7c>
 800a8c2:	6560      	str	r0, [r4, #84]	; 0x54
 800a8c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8c6:	602f      	str	r7, [r5, #0]
 800a8c8:	2900      	cmp	r1, #0
 800a8ca:	d0ca      	beq.n	800a862 <__sflush_r+0x1a>
 800a8cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8d0:	4299      	cmp	r1, r3
 800a8d2:	d002      	beq.n	800a8da <__sflush_r+0x92>
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	f7ff fa99 	bl	8009e0c <_free_r>
 800a8da:	2000      	movs	r0, #0
 800a8dc:	6360      	str	r0, [r4, #52]	; 0x34
 800a8de:	e7c1      	b.n	800a864 <__sflush_r+0x1c>
 800a8e0:	6a21      	ldr	r1, [r4, #32]
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	47b0      	blx	r6
 800a8e8:	1c41      	adds	r1, r0, #1
 800a8ea:	d1c7      	bne.n	800a87c <__sflush_r+0x34>
 800a8ec:	682b      	ldr	r3, [r5, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d0c4      	beq.n	800a87c <__sflush_r+0x34>
 800a8f2:	2b1d      	cmp	r3, #29
 800a8f4:	d001      	beq.n	800a8fa <__sflush_r+0xb2>
 800a8f6:	2b16      	cmp	r3, #22
 800a8f8:	d101      	bne.n	800a8fe <__sflush_r+0xb6>
 800a8fa:	602f      	str	r7, [r5, #0]
 800a8fc:	e7b1      	b.n	800a862 <__sflush_r+0x1a>
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a904:	81a3      	strh	r3, [r4, #12]
 800a906:	e7ad      	b.n	800a864 <__sflush_r+0x1c>
 800a908:	690f      	ldr	r7, [r1, #16]
 800a90a:	2f00      	cmp	r7, #0
 800a90c:	d0a9      	beq.n	800a862 <__sflush_r+0x1a>
 800a90e:	0793      	lsls	r3, r2, #30
 800a910:	680e      	ldr	r6, [r1, #0]
 800a912:	bf08      	it	eq
 800a914:	694b      	ldreq	r3, [r1, #20]
 800a916:	600f      	str	r7, [r1, #0]
 800a918:	bf18      	it	ne
 800a91a:	2300      	movne	r3, #0
 800a91c:	eba6 0807 	sub.w	r8, r6, r7
 800a920:	608b      	str	r3, [r1, #8]
 800a922:	f1b8 0f00 	cmp.w	r8, #0
 800a926:	dd9c      	ble.n	800a862 <__sflush_r+0x1a>
 800a928:	6a21      	ldr	r1, [r4, #32]
 800a92a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a92c:	4643      	mov	r3, r8
 800a92e:	463a      	mov	r2, r7
 800a930:	4628      	mov	r0, r5
 800a932:	47b0      	blx	r6
 800a934:	2800      	cmp	r0, #0
 800a936:	dc06      	bgt.n	800a946 <__sflush_r+0xfe>
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a93e:	81a3      	strh	r3, [r4, #12]
 800a940:	f04f 30ff 	mov.w	r0, #4294967295
 800a944:	e78e      	b.n	800a864 <__sflush_r+0x1c>
 800a946:	4407      	add	r7, r0
 800a948:	eba8 0800 	sub.w	r8, r8, r0
 800a94c:	e7e9      	b.n	800a922 <__sflush_r+0xda>
 800a94e:	bf00      	nop
 800a950:	20400001 	.word	0x20400001

0800a954 <_fflush_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	690b      	ldr	r3, [r1, #16]
 800a958:	4605      	mov	r5, r0
 800a95a:	460c      	mov	r4, r1
 800a95c:	b913      	cbnz	r3, 800a964 <_fflush_r+0x10>
 800a95e:	2500      	movs	r5, #0
 800a960:	4628      	mov	r0, r5
 800a962:	bd38      	pop	{r3, r4, r5, pc}
 800a964:	b118      	cbz	r0, 800a96e <_fflush_r+0x1a>
 800a966:	6983      	ldr	r3, [r0, #24]
 800a968:	b90b      	cbnz	r3, 800a96e <_fflush_r+0x1a>
 800a96a:	f000 f887 	bl	800aa7c <__sinit>
 800a96e:	4b14      	ldr	r3, [pc, #80]	; (800a9c0 <_fflush_r+0x6c>)
 800a970:	429c      	cmp	r4, r3
 800a972:	d11b      	bne.n	800a9ac <_fflush_r+0x58>
 800a974:	686c      	ldr	r4, [r5, #4]
 800a976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d0ef      	beq.n	800a95e <_fflush_r+0xa>
 800a97e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a980:	07d0      	lsls	r0, r2, #31
 800a982:	d404      	bmi.n	800a98e <_fflush_r+0x3a>
 800a984:	0599      	lsls	r1, r3, #22
 800a986:	d402      	bmi.n	800a98e <_fflush_r+0x3a>
 800a988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a98a:	f000 f915 	bl	800abb8 <__retarget_lock_acquire_recursive>
 800a98e:	4628      	mov	r0, r5
 800a990:	4621      	mov	r1, r4
 800a992:	f7ff ff59 	bl	800a848 <__sflush_r>
 800a996:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a998:	07da      	lsls	r2, r3, #31
 800a99a:	4605      	mov	r5, r0
 800a99c:	d4e0      	bmi.n	800a960 <_fflush_r+0xc>
 800a99e:	89a3      	ldrh	r3, [r4, #12]
 800a9a0:	059b      	lsls	r3, r3, #22
 800a9a2:	d4dd      	bmi.n	800a960 <_fflush_r+0xc>
 800a9a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9a6:	f000 f908 	bl	800abba <__retarget_lock_release_recursive>
 800a9aa:	e7d9      	b.n	800a960 <_fflush_r+0xc>
 800a9ac:	4b05      	ldr	r3, [pc, #20]	; (800a9c4 <_fflush_r+0x70>)
 800a9ae:	429c      	cmp	r4, r3
 800a9b0:	d101      	bne.n	800a9b6 <_fflush_r+0x62>
 800a9b2:	68ac      	ldr	r4, [r5, #8]
 800a9b4:	e7df      	b.n	800a976 <_fflush_r+0x22>
 800a9b6:	4b04      	ldr	r3, [pc, #16]	; (800a9c8 <_fflush_r+0x74>)
 800a9b8:	429c      	cmp	r4, r3
 800a9ba:	bf08      	it	eq
 800a9bc:	68ec      	ldreq	r4, [r5, #12]
 800a9be:	e7da      	b.n	800a976 <_fflush_r+0x22>
 800a9c0:	0800b344 	.word	0x0800b344
 800a9c4:	0800b364 	.word	0x0800b364
 800a9c8:	0800b324 	.word	0x0800b324

0800a9cc <std>:
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	b510      	push	{r4, lr}
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	e9c0 3300 	strd	r3, r3, [r0]
 800a9d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9da:	6083      	str	r3, [r0, #8]
 800a9dc:	8181      	strh	r1, [r0, #12]
 800a9de:	6643      	str	r3, [r0, #100]	; 0x64
 800a9e0:	81c2      	strh	r2, [r0, #14]
 800a9e2:	6183      	str	r3, [r0, #24]
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	2208      	movs	r2, #8
 800a9e8:	305c      	adds	r0, #92	; 0x5c
 800a9ea:	f7fb fdcb 	bl	8006584 <memset>
 800a9ee:	4b05      	ldr	r3, [pc, #20]	; (800aa04 <std+0x38>)
 800a9f0:	6263      	str	r3, [r4, #36]	; 0x24
 800a9f2:	4b05      	ldr	r3, [pc, #20]	; (800aa08 <std+0x3c>)
 800a9f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9f6:	4b05      	ldr	r3, [pc, #20]	; (800aa0c <std+0x40>)
 800a9f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9fa:	4b05      	ldr	r3, [pc, #20]	; (800aa10 <std+0x44>)
 800a9fc:	6224      	str	r4, [r4, #32]
 800a9fe:	6323      	str	r3, [r4, #48]	; 0x30
 800aa00:	bd10      	pop	{r4, pc}
 800aa02:	bf00      	nop
 800aa04:	0800ad21 	.word	0x0800ad21
 800aa08:	0800ad43 	.word	0x0800ad43
 800aa0c:	0800ad7b 	.word	0x0800ad7b
 800aa10:	0800ad9f 	.word	0x0800ad9f

0800aa14 <_cleanup_r>:
 800aa14:	4901      	ldr	r1, [pc, #4]	; (800aa1c <_cleanup_r+0x8>)
 800aa16:	f000 b8af 	b.w	800ab78 <_fwalk_reent>
 800aa1a:	bf00      	nop
 800aa1c:	0800a955 	.word	0x0800a955

0800aa20 <__sfmoreglue>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	2268      	movs	r2, #104	; 0x68
 800aa24:	1e4d      	subs	r5, r1, #1
 800aa26:	4355      	muls	r5, r2
 800aa28:	460e      	mov	r6, r1
 800aa2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa2e:	f7ff fa59 	bl	8009ee4 <_malloc_r>
 800aa32:	4604      	mov	r4, r0
 800aa34:	b140      	cbz	r0, 800aa48 <__sfmoreglue+0x28>
 800aa36:	2100      	movs	r1, #0
 800aa38:	e9c0 1600 	strd	r1, r6, [r0]
 800aa3c:	300c      	adds	r0, #12
 800aa3e:	60a0      	str	r0, [r4, #8]
 800aa40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa44:	f7fb fd9e 	bl	8006584 <memset>
 800aa48:	4620      	mov	r0, r4
 800aa4a:	bd70      	pop	{r4, r5, r6, pc}

0800aa4c <__sfp_lock_acquire>:
 800aa4c:	4801      	ldr	r0, [pc, #4]	; (800aa54 <__sfp_lock_acquire+0x8>)
 800aa4e:	f000 b8b3 	b.w	800abb8 <__retarget_lock_acquire_recursive>
 800aa52:	bf00      	nop
 800aa54:	20000645 	.word	0x20000645

0800aa58 <__sfp_lock_release>:
 800aa58:	4801      	ldr	r0, [pc, #4]	; (800aa60 <__sfp_lock_release+0x8>)
 800aa5a:	f000 b8ae 	b.w	800abba <__retarget_lock_release_recursive>
 800aa5e:	bf00      	nop
 800aa60:	20000645 	.word	0x20000645

0800aa64 <__sinit_lock_acquire>:
 800aa64:	4801      	ldr	r0, [pc, #4]	; (800aa6c <__sinit_lock_acquire+0x8>)
 800aa66:	f000 b8a7 	b.w	800abb8 <__retarget_lock_acquire_recursive>
 800aa6a:	bf00      	nop
 800aa6c:	20000646 	.word	0x20000646

0800aa70 <__sinit_lock_release>:
 800aa70:	4801      	ldr	r0, [pc, #4]	; (800aa78 <__sinit_lock_release+0x8>)
 800aa72:	f000 b8a2 	b.w	800abba <__retarget_lock_release_recursive>
 800aa76:	bf00      	nop
 800aa78:	20000646 	.word	0x20000646

0800aa7c <__sinit>:
 800aa7c:	b510      	push	{r4, lr}
 800aa7e:	4604      	mov	r4, r0
 800aa80:	f7ff fff0 	bl	800aa64 <__sinit_lock_acquire>
 800aa84:	69a3      	ldr	r3, [r4, #24]
 800aa86:	b11b      	cbz	r3, 800aa90 <__sinit+0x14>
 800aa88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa8c:	f7ff bff0 	b.w	800aa70 <__sinit_lock_release>
 800aa90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa94:	6523      	str	r3, [r4, #80]	; 0x50
 800aa96:	4b13      	ldr	r3, [pc, #76]	; (800aae4 <__sinit+0x68>)
 800aa98:	4a13      	ldr	r2, [pc, #76]	; (800aae8 <__sinit+0x6c>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa9e:	42a3      	cmp	r3, r4
 800aaa0:	bf04      	itt	eq
 800aaa2:	2301      	moveq	r3, #1
 800aaa4:	61a3      	streq	r3, [r4, #24]
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f000 f820 	bl	800aaec <__sfp>
 800aaac:	6060      	str	r0, [r4, #4]
 800aaae:	4620      	mov	r0, r4
 800aab0:	f000 f81c 	bl	800aaec <__sfp>
 800aab4:	60a0      	str	r0, [r4, #8]
 800aab6:	4620      	mov	r0, r4
 800aab8:	f000 f818 	bl	800aaec <__sfp>
 800aabc:	2200      	movs	r2, #0
 800aabe:	60e0      	str	r0, [r4, #12]
 800aac0:	2104      	movs	r1, #4
 800aac2:	6860      	ldr	r0, [r4, #4]
 800aac4:	f7ff ff82 	bl	800a9cc <std>
 800aac8:	68a0      	ldr	r0, [r4, #8]
 800aaca:	2201      	movs	r2, #1
 800aacc:	2109      	movs	r1, #9
 800aace:	f7ff ff7d 	bl	800a9cc <std>
 800aad2:	68e0      	ldr	r0, [r4, #12]
 800aad4:	2202      	movs	r2, #2
 800aad6:	2112      	movs	r1, #18
 800aad8:	f7ff ff78 	bl	800a9cc <std>
 800aadc:	2301      	movs	r3, #1
 800aade:	61a3      	str	r3, [r4, #24]
 800aae0:	e7d2      	b.n	800aa88 <__sinit+0xc>
 800aae2:	bf00      	nop
 800aae4:	0800aee0 	.word	0x0800aee0
 800aae8:	0800aa15 	.word	0x0800aa15

0800aaec <__sfp>:
 800aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaee:	4607      	mov	r7, r0
 800aaf0:	f7ff ffac 	bl	800aa4c <__sfp_lock_acquire>
 800aaf4:	4b1e      	ldr	r3, [pc, #120]	; (800ab70 <__sfp+0x84>)
 800aaf6:	681e      	ldr	r6, [r3, #0]
 800aaf8:	69b3      	ldr	r3, [r6, #24]
 800aafa:	b913      	cbnz	r3, 800ab02 <__sfp+0x16>
 800aafc:	4630      	mov	r0, r6
 800aafe:	f7ff ffbd 	bl	800aa7c <__sinit>
 800ab02:	3648      	adds	r6, #72	; 0x48
 800ab04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	d503      	bpl.n	800ab14 <__sfp+0x28>
 800ab0c:	6833      	ldr	r3, [r6, #0]
 800ab0e:	b30b      	cbz	r3, 800ab54 <__sfp+0x68>
 800ab10:	6836      	ldr	r6, [r6, #0]
 800ab12:	e7f7      	b.n	800ab04 <__sfp+0x18>
 800ab14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab18:	b9d5      	cbnz	r5, 800ab50 <__sfp+0x64>
 800ab1a:	4b16      	ldr	r3, [pc, #88]	; (800ab74 <__sfp+0x88>)
 800ab1c:	60e3      	str	r3, [r4, #12]
 800ab1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab22:	6665      	str	r5, [r4, #100]	; 0x64
 800ab24:	f000 f847 	bl	800abb6 <__retarget_lock_init_recursive>
 800ab28:	f7ff ff96 	bl	800aa58 <__sfp_lock_release>
 800ab2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab34:	6025      	str	r5, [r4, #0]
 800ab36:	61a5      	str	r5, [r4, #24]
 800ab38:	2208      	movs	r2, #8
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab40:	f7fb fd20 	bl	8006584 <memset>
 800ab44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab50:	3468      	adds	r4, #104	; 0x68
 800ab52:	e7d9      	b.n	800ab08 <__sfp+0x1c>
 800ab54:	2104      	movs	r1, #4
 800ab56:	4638      	mov	r0, r7
 800ab58:	f7ff ff62 	bl	800aa20 <__sfmoreglue>
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	6030      	str	r0, [r6, #0]
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d1d5      	bne.n	800ab10 <__sfp+0x24>
 800ab64:	f7ff ff78 	bl	800aa58 <__sfp_lock_release>
 800ab68:	230c      	movs	r3, #12
 800ab6a:	603b      	str	r3, [r7, #0]
 800ab6c:	e7ee      	b.n	800ab4c <__sfp+0x60>
 800ab6e:	bf00      	nop
 800ab70:	0800aee0 	.word	0x0800aee0
 800ab74:	ffff0001 	.word	0xffff0001

0800ab78 <_fwalk_reent>:
 800ab78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab7c:	4606      	mov	r6, r0
 800ab7e:	4688      	mov	r8, r1
 800ab80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab84:	2700      	movs	r7, #0
 800ab86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab8a:	f1b9 0901 	subs.w	r9, r9, #1
 800ab8e:	d505      	bpl.n	800ab9c <_fwalk_reent+0x24>
 800ab90:	6824      	ldr	r4, [r4, #0]
 800ab92:	2c00      	cmp	r4, #0
 800ab94:	d1f7      	bne.n	800ab86 <_fwalk_reent+0xe>
 800ab96:	4638      	mov	r0, r7
 800ab98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab9c:	89ab      	ldrh	r3, [r5, #12]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d907      	bls.n	800abb2 <_fwalk_reent+0x3a>
 800aba2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aba6:	3301      	adds	r3, #1
 800aba8:	d003      	beq.n	800abb2 <_fwalk_reent+0x3a>
 800abaa:	4629      	mov	r1, r5
 800abac:	4630      	mov	r0, r6
 800abae:	47c0      	blx	r8
 800abb0:	4307      	orrs	r7, r0
 800abb2:	3568      	adds	r5, #104	; 0x68
 800abb4:	e7e9      	b.n	800ab8a <_fwalk_reent+0x12>

0800abb6 <__retarget_lock_init_recursive>:
 800abb6:	4770      	bx	lr

0800abb8 <__retarget_lock_acquire_recursive>:
 800abb8:	4770      	bx	lr

0800abba <__retarget_lock_release_recursive>:
 800abba:	4770      	bx	lr

0800abbc <__swhatbuf_r>:
 800abbc:	b570      	push	{r4, r5, r6, lr}
 800abbe:	460e      	mov	r6, r1
 800abc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc4:	2900      	cmp	r1, #0
 800abc6:	b096      	sub	sp, #88	; 0x58
 800abc8:	4614      	mov	r4, r2
 800abca:	461d      	mov	r5, r3
 800abcc:	da08      	bge.n	800abe0 <__swhatbuf_r+0x24>
 800abce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	602a      	str	r2, [r5, #0]
 800abd6:	061a      	lsls	r2, r3, #24
 800abd8:	d410      	bmi.n	800abfc <__swhatbuf_r+0x40>
 800abda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abde:	e00e      	b.n	800abfe <__swhatbuf_r+0x42>
 800abe0:	466a      	mov	r2, sp
 800abe2:	f000 f903 	bl	800adec <_fstat_r>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	dbf1      	blt.n	800abce <__swhatbuf_r+0x12>
 800abea:	9a01      	ldr	r2, [sp, #4]
 800abec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800abf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800abf4:	425a      	negs	r2, r3
 800abf6:	415a      	adcs	r2, r3
 800abf8:	602a      	str	r2, [r5, #0]
 800abfa:	e7ee      	b.n	800abda <__swhatbuf_r+0x1e>
 800abfc:	2340      	movs	r3, #64	; 0x40
 800abfe:	2000      	movs	r0, #0
 800ac00:	6023      	str	r3, [r4, #0]
 800ac02:	b016      	add	sp, #88	; 0x58
 800ac04:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac08 <__smakebuf_r>:
 800ac08:	898b      	ldrh	r3, [r1, #12]
 800ac0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac0c:	079d      	lsls	r5, r3, #30
 800ac0e:	4606      	mov	r6, r0
 800ac10:	460c      	mov	r4, r1
 800ac12:	d507      	bpl.n	800ac24 <__smakebuf_r+0x1c>
 800ac14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac18:	6023      	str	r3, [r4, #0]
 800ac1a:	6123      	str	r3, [r4, #16]
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	6163      	str	r3, [r4, #20]
 800ac20:	b002      	add	sp, #8
 800ac22:	bd70      	pop	{r4, r5, r6, pc}
 800ac24:	ab01      	add	r3, sp, #4
 800ac26:	466a      	mov	r2, sp
 800ac28:	f7ff ffc8 	bl	800abbc <__swhatbuf_r>
 800ac2c:	9900      	ldr	r1, [sp, #0]
 800ac2e:	4605      	mov	r5, r0
 800ac30:	4630      	mov	r0, r6
 800ac32:	f7ff f957 	bl	8009ee4 <_malloc_r>
 800ac36:	b948      	cbnz	r0, 800ac4c <__smakebuf_r+0x44>
 800ac38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac3c:	059a      	lsls	r2, r3, #22
 800ac3e:	d4ef      	bmi.n	800ac20 <__smakebuf_r+0x18>
 800ac40:	f023 0303 	bic.w	r3, r3, #3
 800ac44:	f043 0302 	orr.w	r3, r3, #2
 800ac48:	81a3      	strh	r3, [r4, #12]
 800ac4a:	e7e3      	b.n	800ac14 <__smakebuf_r+0xc>
 800ac4c:	4b0d      	ldr	r3, [pc, #52]	; (800ac84 <__smakebuf_r+0x7c>)
 800ac4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac50:	89a3      	ldrh	r3, [r4, #12]
 800ac52:	6020      	str	r0, [r4, #0]
 800ac54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac58:	81a3      	strh	r3, [r4, #12]
 800ac5a:	9b00      	ldr	r3, [sp, #0]
 800ac5c:	6163      	str	r3, [r4, #20]
 800ac5e:	9b01      	ldr	r3, [sp, #4]
 800ac60:	6120      	str	r0, [r4, #16]
 800ac62:	b15b      	cbz	r3, 800ac7c <__smakebuf_r+0x74>
 800ac64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac68:	4630      	mov	r0, r6
 800ac6a:	f000 f8d1 	bl	800ae10 <_isatty_r>
 800ac6e:	b128      	cbz	r0, 800ac7c <__smakebuf_r+0x74>
 800ac70:	89a3      	ldrh	r3, [r4, #12]
 800ac72:	f023 0303 	bic.w	r3, r3, #3
 800ac76:	f043 0301 	orr.w	r3, r3, #1
 800ac7a:	81a3      	strh	r3, [r4, #12]
 800ac7c:	89a0      	ldrh	r0, [r4, #12]
 800ac7e:	4305      	orrs	r5, r0
 800ac80:	81a5      	strh	r5, [r4, #12]
 800ac82:	e7cd      	b.n	800ac20 <__smakebuf_r+0x18>
 800ac84:	0800aa15 	.word	0x0800aa15

0800ac88 <_malloc_usable_size_r>:
 800ac88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac8c:	1f18      	subs	r0, r3, #4
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	bfbc      	itt	lt
 800ac92:	580b      	ldrlt	r3, [r1, r0]
 800ac94:	18c0      	addlt	r0, r0, r3
 800ac96:	4770      	bx	lr

0800ac98 <_raise_r>:
 800ac98:	291f      	cmp	r1, #31
 800ac9a:	b538      	push	{r3, r4, r5, lr}
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	460d      	mov	r5, r1
 800aca0:	d904      	bls.n	800acac <_raise_r+0x14>
 800aca2:	2316      	movs	r3, #22
 800aca4:	6003      	str	r3, [r0, #0]
 800aca6:	f04f 30ff 	mov.w	r0, #4294967295
 800acaa:	bd38      	pop	{r3, r4, r5, pc}
 800acac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800acae:	b112      	cbz	r2, 800acb6 <_raise_r+0x1e>
 800acb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acb4:	b94b      	cbnz	r3, 800acca <_raise_r+0x32>
 800acb6:	4620      	mov	r0, r4
 800acb8:	f000 f830 	bl	800ad1c <_getpid_r>
 800acbc:	462a      	mov	r2, r5
 800acbe:	4601      	mov	r1, r0
 800acc0:	4620      	mov	r0, r4
 800acc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acc6:	f000 b817 	b.w	800acf8 <_kill_r>
 800acca:	2b01      	cmp	r3, #1
 800accc:	d00a      	beq.n	800ace4 <_raise_r+0x4c>
 800acce:	1c59      	adds	r1, r3, #1
 800acd0:	d103      	bne.n	800acda <_raise_r+0x42>
 800acd2:	2316      	movs	r3, #22
 800acd4:	6003      	str	r3, [r0, #0]
 800acd6:	2001      	movs	r0, #1
 800acd8:	e7e7      	b.n	800acaa <_raise_r+0x12>
 800acda:	2400      	movs	r4, #0
 800acdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ace0:	4628      	mov	r0, r5
 800ace2:	4798      	blx	r3
 800ace4:	2000      	movs	r0, #0
 800ace6:	e7e0      	b.n	800acaa <_raise_r+0x12>

0800ace8 <raise>:
 800ace8:	4b02      	ldr	r3, [pc, #8]	; (800acf4 <raise+0xc>)
 800acea:	4601      	mov	r1, r0
 800acec:	6818      	ldr	r0, [r3, #0]
 800acee:	f7ff bfd3 	b.w	800ac98 <_raise_r>
 800acf2:	bf00      	nop
 800acf4:	2000003c 	.word	0x2000003c

0800acf8 <_kill_r>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	4d07      	ldr	r5, [pc, #28]	; (800ad18 <_kill_r+0x20>)
 800acfc:	2300      	movs	r3, #0
 800acfe:	4604      	mov	r4, r0
 800ad00:	4608      	mov	r0, r1
 800ad02:	4611      	mov	r1, r2
 800ad04:	602b      	str	r3, [r5, #0]
 800ad06:	f7f7 fd9f 	bl	8002848 <_kill>
 800ad0a:	1c43      	adds	r3, r0, #1
 800ad0c:	d102      	bne.n	800ad14 <_kill_r+0x1c>
 800ad0e:	682b      	ldr	r3, [r5, #0]
 800ad10:	b103      	cbz	r3, 800ad14 <_kill_r+0x1c>
 800ad12:	6023      	str	r3, [r4, #0]
 800ad14:	bd38      	pop	{r3, r4, r5, pc}
 800ad16:	bf00      	nop
 800ad18:	20000640 	.word	0x20000640

0800ad1c <_getpid_r>:
 800ad1c:	f7f7 bd8c 	b.w	8002838 <_getpid>

0800ad20 <__sread>:
 800ad20:	b510      	push	{r4, lr}
 800ad22:	460c      	mov	r4, r1
 800ad24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad28:	f000 f894 	bl	800ae54 <_read_r>
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	bfab      	itete	ge
 800ad30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad32:	89a3      	ldrhlt	r3, [r4, #12]
 800ad34:	181b      	addge	r3, r3, r0
 800ad36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad3a:	bfac      	ite	ge
 800ad3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad3e:	81a3      	strhlt	r3, [r4, #12]
 800ad40:	bd10      	pop	{r4, pc}

0800ad42 <__swrite>:
 800ad42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad46:	461f      	mov	r7, r3
 800ad48:	898b      	ldrh	r3, [r1, #12]
 800ad4a:	05db      	lsls	r3, r3, #23
 800ad4c:	4605      	mov	r5, r0
 800ad4e:	460c      	mov	r4, r1
 800ad50:	4616      	mov	r6, r2
 800ad52:	d505      	bpl.n	800ad60 <__swrite+0x1e>
 800ad54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad58:	2302      	movs	r3, #2
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f000 f868 	bl	800ae30 <_lseek_r>
 800ad60:	89a3      	ldrh	r3, [r4, #12]
 800ad62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad6a:	81a3      	strh	r3, [r4, #12]
 800ad6c:	4632      	mov	r2, r6
 800ad6e:	463b      	mov	r3, r7
 800ad70:	4628      	mov	r0, r5
 800ad72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad76:	f000 b817 	b.w	800ada8 <_write_r>

0800ad7a <__sseek>:
 800ad7a:	b510      	push	{r4, lr}
 800ad7c:	460c      	mov	r4, r1
 800ad7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad82:	f000 f855 	bl	800ae30 <_lseek_r>
 800ad86:	1c43      	adds	r3, r0, #1
 800ad88:	89a3      	ldrh	r3, [r4, #12]
 800ad8a:	bf15      	itete	ne
 800ad8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad96:	81a3      	strheq	r3, [r4, #12]
 800ad98:	bf18      	it	ne
 800ad9a:	81a3      	strhne	r3, [r4, #12]
 800ad9c:	bd10      	pop	{r4, pc}

0800ad9e <__sclose>:
 800ad9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada2:	f000 b813 	b.w	800adcc <_close_r>
	...

0800ada8 <_write_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4d07      	ldr	r5, [pc, #28]	; (800adc8 <_write_r+0x20>)
 800adac:	4604      	mov	r4, r0
 800adae:	4608      	mov	r0, r1
 800adb0:	4611      	mov	r1, r2
 800adb2:	2200      	movs	r2, #0
 800adb4:	602a      	str	r2, [r5, #0]
 800adb6:	461a      	mov	r2, r3
 800adb8:	f7f7 fd7d 	bl	80028b6 <_write>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d102      	bne.n	800adc6 <_write_r+0x1e>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	b103      	cbz	r3, 800adc6 <_write_r+0x1e>
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	20000640 	.word	0x20000640

0800adcc <_close_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d06      	ldr	r5, [pc, #24]	; (800ade8 <_close_r+0x1c>)
 800add0:	2300      	movs	r3, #0
 800add2:	4604      	mov	r4, r0
 800add4:	4608      	mov	r0, r1
 800add6:	602b      	str	r3, [r5, #0]
 800add8:	f7f7 fd89 	bl	80028ee <_close>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d102      	bne.n	800ade6 <_close_r+0x1a>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	b103      	cbz	r3, 800ade6 <_close_r+0x1a>
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	20000640 	.word	0x20000640

0800adec <_fstat_r>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	4d07      	ldr	r5, [pc, #28]	; (800ae0c <_fstat_r+0x20>)
 800adf0:	2300      	movs	r3, #0
 800adf2:	4604      	mov	r4, r0
 800adf4:	4608      	mov	r0, r1
 800adf6:	4611      	mov	r1, r2
 800adf8:	602b      	str	r3, [r5, #0]
 800adfa:	f7f7 fd84 	bl	8002906 <_fstat>
 800adfe:	1c43      	adds	r3, r0, #1
 800ae00:	d102      	bne.n	800ae08 <_fstat_r+0x1c>
 800ae02:	682b      	ldr	r3, [r5, #0]
 800ae04:	b103      	cbz	r3, 800ae08 <_fstat_r+0x1c>
 800ae06:	6023      	str	r3, [r4, #0]
 800ae08:	bd38      	pop	{r3, r4, r5, pc}
 800ae0a:	bf00      	nop
 800ae0c:	20000640 	.word	0x20000640

0800ae10 <_isatty_r>:
 800ae10:	b538      	push	{r3, r4, r5, lr}
 800ae12:	4d06      	ldr	r5, [pc, #24]	; (800ae2c <_isatty_r+0x1c>)
 800ae14:	2300      	movs	r3, #0
 800ae16:	4604      	mov	r4, r0
 800ae18:	4608      	mov	r0, r1
 800ae1a:	602b      	str	r3, [r5, #0]
 800ae1c:	f7f7 fd83 	bl	8002926 <_isatty>
 800ae20:	1c43      	adds	r3, r0, #1
 800ae22:	d102      	bne.n	800ae2a <_isatty_r+0x1a>
 800ae24:	682b      	ldr	r3, [r5, #0]
 800ae26:	b103      	cbz	r3, 800ae2a <_isatty_r+0x1a>
 800ae28:	6023      	str	r3, [r4, #0]
 800ae2a:	bd38      	pop	{r3, r4, r5, pc}
 800ae2c:	20000640 	.word	0x20000640

0800ae30 <_lseek_r>:
 800ae30:	b538      	push	{r3, r4, r5, lr}
 800ae32:	4d07      	ldr	r5, [pc, #28]	; (800ae50 <_lseek_r+0x20>)
 800ae34:	4604      	mov	r4, r0
 800ae36:	4608      	mov	r0, r1
 800ae38:	4611      	mov	r1, r2
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	602a      	str	r2, [r5, #0]
 800ae3e:	461a      	mov	r2, r3
 800ae40:	f7f7 fd7c 	bl	800293c <_lseek>
 800ae44:	1c43      	adds	r3, r0, #1
 800ae46:	d102      	bne.n	800ae4e <_lseek_r+0x1e>
 800ae48:	682b      	ldr	r3, [r5, #0]
 800ae4a:	b103      	cbz	r3, 800ae4e <_lseek_r+0x1e>
 800ae4c:	6023      	str	r3, [r4, #0]
 800ae4e:	bd38      	pop	{r3, r4, r5, pc}
 800ae50:	20000640 	.word	0x20000640

0800ae54 <_read_r>:
 800ae54:	b538      	push	{r3, r4, r5, lr}
 800ae56:	4d07      	ldr	r5, [pc, #28]	; (800ae74 <_read_r+0x20>)
 800ae58:	4604      	mov	r4, r0
 800ae5a:	4608      	mov	r0, r1
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	2200      	movs	r2, #0
 800ae60:	602a      	str	r2, [r5, #0]
 800ae62:	461a      	mov	r2, r3
 800ae64:	f7f7 fd0a 	bl	800287c <_read>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d102      	bne.n	800ae72 <_read_r+0x1e>
 800ae6c:	682b      	ldr	r3, [r5, #0]
 800ae6e:	b103      	cbz	r3, 800ae72 <_read_r+0x1e>
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	bd38      	pop	{r3, r4, r5, pc}
 800ae74:	20000640 	.word	0x20000640

0800ae78 <_init>:
 800ae78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7a:	bf00      	nop
 800ae7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae7e:	bc08      	pop	{r3}
 800ae80:	469e      	mov	lr, r3
 800ae82:	4770      	bx	lr

0800ae84 <_fini>:
 800ae84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae86:	bf00      	nop
 800ae88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae8a:	bc08      	pop	{r3}
 800ae8c:	469e      	mov	lr, r3
 800ae8e:	4770      	bx	lr
